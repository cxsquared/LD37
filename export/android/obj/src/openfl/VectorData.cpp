// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl_VectorData
#include <openfl/VectorData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c50f2ed0fb2de49f_725_new,"openfl.VectorData","new",0x8eef233d,"openfl.VectorData.new","openfl/Vector.hx",725,0x4a01873c)
namespace openfl{

void VectorData_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c50f2ed0fb2de49f_725_new)
            	HX_STACK_THIS(this)
HXLINE( 725)		this->length = (int)0;
            	}

Dynamic VectorData_obj::__CreateEmpty() { return new VectorData_obj; }

void *VectorData_obj::_hx_vtable = 0;

Dynamic VectorData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VectorData_obj > _hx_result = new VectorData_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VectorData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7a0772a1;
}


VectorData_obj::VectorData_obj()
{
}

void VectorData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VectorData);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(fixed,"fixed");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void VectorData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(fixed,"fixed");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val VectorData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { return hx::Val( fixed); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VectorData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { fixed=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VectorData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VectorData_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(VectorData_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsBool,(int)offsetof(VectorData_obj,fixed),HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00")},
	{hx::fsInt,(int)offsetof(VectorData_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VectorData_obj_sStaticStorageInfo = 0;
#endif

static ::String VectorData_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	::String(null()) };

static void VectorData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VectorData_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VectorData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VectorData_obj::__mClass,"__mClass");
};

#endif

hx::Class VectorData_obj::__mClass;

void VectorData_obj::__register()
{
	hx::Object *dummy = new VectorData_obj;
	VectorData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.VectorData","\xcb","\xc0","\xfb","\x04");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VectorData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VectorData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VectorData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VectorData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VectorData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VectorData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
