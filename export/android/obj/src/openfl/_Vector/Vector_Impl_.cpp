// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_VectorData
#include <openfl/VectorData.h>
#endif
#ifndef INCLUDED_openfl_VectorDataIterator
#include <openfl/VectorDataIterator.h>
#endif
#ifndef INCLUDED_openfl__Vector_Vector_Impl_
#include <openfl/_Vector/Vector_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_215__new,"openfl._Vector.Vector_Impl_","_new",0x72cc24a2,"openfl._Vector.Vector_Impl_._new","openfl/Vector.hx",215,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_229_concat,"openfl._Vector.Vector_Impl_","concat",0x0c502a95,"openfl._Vector.Vector_Impl_.concat","openfl/Vector.hx",229,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_250_copy,"openfl._Vector.Vector_Impl_","copy",0x7571caf6,"openfl._Vector.Vector_Impl_.copy","openfl/Vector.hx",250,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_268_iterator,"openfl._Vector.Vector_Impl_","iterator",0x11868daf,"openfl._Vector.Vector_Impl_.iterator","openfl/Vector.hx",268,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_273_join,"openfl._Vector.Vector_Impl_","join",0x7a12432b,"openfl._Vector.Vector_Impl_.join","openfl/Vector.hx",273,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_289_pop,"openfl._Vector.Vector_Impl_","pop",0x4571b170,"openfl._Vector.Vector_Impl_.pop","openfl/Vector.hx",289,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_309_push,"openfl._Vector.Vector_Impl_","push",0x7e0e211b,"openfl._Vector.Vector_Impl_.push","openfl/Vector.hx",309,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_336_reverse,"openfl._Vector.Vector_Impl_","reverse",0xc6996881,"openfl._Vector.Vector_Impl_.reverse","openfl/Vector.hx",336,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_352_shift,"openfl._Vector.Vector_Impl_","shift",0x7fe33621,"openfl._Vector.Vector_Impl_.shift","openfl/Vector.hx",352,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_375_unshift,"openfl._Vector.Vector_Impl_","unshift",0x245112e8,"openfl._Vector.Vector_Impl_.unshift","openfl/Vector.hx",375,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_408_slice,"openfl._Vector.Vector_Impl_","slice",0x82880df1,"openfl._Vector.Vector_Impl_.slice","openfl/Vector.hx",408,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_433_sort,"openfl._Vector.Vector_Impl_","sort",0x8005369f,"openfl._Vector.Vector_Impl_.sort","openfl/Vector.hx",433,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_443_splice,"openfl._Vector.Vector_Impl_","splice",0x041ea6fd,"openfl._Vector.Vector_Impl_.splice","openfl/Vector.hx",443,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_478_toString,"openfl._Vector.Vector_Impl_","toString",0xb65b146d,"openfl._Vector.Vector_Impl_.toString","openfl/Vector.hx",478,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_486_indexOf,"openfl._Vector.Vector_Impl_","indexOf",0x8c5c7828,"openfl._Vector.Vector_Impl_.indexOf","openfl/Vector.hx",486,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_506_lastIndexOf,"openfl._Vector.Vector_Impl_","lastIndexOf",0x5bdcc7f2,"openfl._Vector.Vector_Impl_.lastIndexOf","openfl/Vector.hx",506,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_529_ofArray,"openfl._Vector.Vector_Impl_","ofArray",0x348f5861,"openfl._Vector.Vector_Impl_.ofArray","openfl/Vector.hx",529,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_546_convert,"openfl._Vector.Vector_Impl_","convert",0xc6672d52,"openfl._Vector.Vector_Impl_.convert","openfl/Vector.hx",546,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_553_get,"openfl._Vector.Vector_Impl_","get",0x456ad475,"openfl._Vector.Vector_Impl_.get","openfl/Vector.hx",553,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_558_set,"openfl._Vector.Vector_Impl_","set",0x4573ef81,"openfl._Vector.Vector_Impl_.set","openfl/Vector.hx",558,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_581_fromArray,"openfl._Vector.Vector_Impl_","fromArray",0x8ae75cee,"openfl._Vector.Vector_Impl_.fromArray","openfl/Vector.hx",581,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_599_toArray,"openfl._Vector.Vector_Impl_","toArray",0x9db0e97d,"openfl._Vector.Vector_Impl_.toArray","openfl/Vector.hx",599,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_611_fromHaxeVector,"openfl._Vector.Vector_Impl_","fromHaxeVector",0x36245614,"openfl._Vector.Vector_Impl_.fromHaxeVector","openfl/Vector.hx",611,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_633_toHaxeVector,"openfl._Vector.Vector_Impl_","toHaxeVector",0x8e47e325,"openfl._Vector.Vector_Impl_.toHaxeVector","openfl/Vector.hx",633,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_643_fromVectorData,"openfl._Vector.Vector_Impl_","fromVectorData",0x2b30ad18,"openfl._Vector.Vector_Impl_.fromVectorData","openfl/Vector.hx",643,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_650_toVectorData,"openfl._Vector.Vector_Impl_","toVectorData",0x83543a29,"openfl._Vector.Vector_Impl_.toVectorData","openfl/Vector.hx",650,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_664_get_length,"openfl._Vector.Vector_Impl_","get_length",0x93e47ab0,"openfl._Vector.Vector_Impl_.get_length","openfl/Vector.hx",664,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_669_set_length,"openfl._Vector.Vector_Impl_","set_length",0x97621924,"openfl._Vector.Vector_Impl_.set_length","openfl/Vector.hx",669,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_696_get_fixed,"openfl._Vector.Vector_Impl_","get_fixed",0xf51a5aea,"openfl._Vector.Vector_Impl_.get_fixed","openfl/Vector.hx",696,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_a3c09d73ddb47bfc_703_set_fixed,"openfl._Vector.Vector_Impl_","set_fixed",0xd86b46f6,"openfl._Vector.Vector_Impl_.set_fixed","openfl/Vector.hx",703,0x4a01873c)
namespace openfl{
namespace _Vector{

void Vector_Impl__obj::__construct() { }

Dynamic Vector_Impl__obj::__CreateEmpty() { return new Vector_Impl__obj; }

void *Vector_Impl__obj::_hx_vtable = 0;

Dynamic Vector_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector_Impl__obj > _hx_result = new Vector_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Vector_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0620c351;
}

 ::openfl::VectorData Vector_Impl__obj::_new( ::Dynamic __o_length, ::Dynamic __o_fixed){
 ::Dynamic length = __o_length.Default(0);
 ::Dynamic fixed = __o_fixed.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_215__new)
            	HX_STACK_ARG(length,"length")
            	HX_STACK_ARG(fixed,"fixed")
HXLINE( 215)		HX_VARI_NAME(  ::openfl::VectorData,this1,"this") =  ::openfl::VectorData_obj::__alloc( HX_CTX );
HXLINE( 219)		this1->data = ::cpp::VirtualArray_obj::__new()->__SetSizeExact(length).StaticCast< ::cpp::VirtualArray >();
HXLINE( 223)		this1->length = length;
HXLINE( 224)		this1->fixed = fixed;
HXLINE( 215)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector_Impl__obj,_new,return )

 ::openfl::VectorData Vector_Impl__obj::concat( ::openfl::VectorData this1, ::openfl::VectorData a){
            	HX_GC_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_229_concat)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 231)		HX_VARI(  ::openfl::VectorData,vectorData) =  ::openfl::VectorData_obj::__alloc( HX_CTX );
HXLINE( 232)		int _hx_tmp;
HXDLIN( 232)		if (hx::IsNotNull( a )) {
HXLINE( 232)			_hx_tmp = (this1->length + a->length);
            		}
            		else {
HXLINE( 232)			_hx_tmp = this1->length;
            		}
HXDLIN( 232)		vectorData->length = _hx_tmp;
HXLINE( 233)		vectorData->fixed = false;
HXLINE( 236)		vectorData->data = this1->data->slice((int)0,this1->length)->concat(a->data);
HXLINE( 245)		return vectorData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector_Impl__obj,concat,return )

 ::openfl::VectorData Vector_Impl__obj::copy( ::openfl::VectorData this1){
            	HX_GC_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_250_copy)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 252)		HX_VARI(  ::openfl::VectorData,vectorData) =  ::openfl::VectorData_obj::__alloc( HX_CTX );
HXLINE( 253)		vectorData->length = this1->length;
HXLINE( 254)		vectorData->fixed = this1->fixed;
HXLINE( 256)		vectorData->data = this1->data->copy();
HXLINE( 261)		return vectorData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,copy,return )

 ::Dynamic Vector_Impl__obj::iterator( ::openfl::VectorData this1){
            	HX_GC_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_268_iterator)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 268)		return  ::openfl::VectorDataIterator_obj::__alloc( HX_CTX ,this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,iterator,return )

::String Vector_Impl__obj::join( ::openfl::VectorData this1,::String sep){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_273_join)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(sep,"sep")
HXLINE( 275)		HX_VARI( ::String,output) = HX_("",00,00,00,00);
HXLINE( 277)		{
HXLINE( 277)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 277)			HX_VARI( int,_g) = this1->length;
HXDLIN( 277)			while((_g1 < _g)){
HXLINE( 277)				_g1 = (_g1 + (int)1);
HXDLIN( 277)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 279)				if ((i > (int)0)) {
HXLINE( 279)					output = (output + sep);
            				}
HXLINE( 280)				output = (output + ::Std_obj::string(this1->data->__get(i)));
            			}
            		}
HXLINE( 284)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector_Impl__obj,join,return )

 ::Dynamic Vector_Impl__obj::pop( ::openfl::VectorData this1){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_289_pop)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 291)		HX_VARI(  ::Dynamic,value) = null();
HXLINE( 293)		if (!(this1->fixed)) {
HXLINE( 295)			if ((this1->length > (int)0)) {
HXLINE( 297)				this1->length--;
HXLINE( 298)				value = this1->data->__get(this1->length);
            			}
            		}
HXLINE( 304)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,pop,return )

int Vector_Impl__obj::push( ::openfl::VectorData this1, ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_309_push)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
HXLINE( 311)		if (!(this1->fixed)) {
HXLINE( 313)			this1->length++;
HXLINE( 315)			if ((this1->data->get_length() < this1->length)) {
HXLINE( 318)				HX_VARI_NAME(  ::Dynamic,this2,"this") = this1->data->__Field(HX_("__SetSizeExact",7c,25,cd,82),hx::paccDynamic);
HXDLIN( 318)				this2((this1->data->get_length() + (int)10));
            			}
HXLINE( 327)			HX_VARI_NAME( ::cpp::VirtualArray,this3,"this") = this1->data;
HXDLIN( 327)			this3->set((this1->length - (int)1),x);
            		}
HXLINE( 331)		return this1->length;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector_Impl__obj,push,return )

void Vector_Impl__obj::reverse( ::openfl::VectorData this1){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_336_reverse)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 339)		this1->data->__SetSizeExact(this1->length);
HXLINE( 340)		this1->data->reverse();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,reverse,(void))

 ::Dynamic Vector_Impl__obj::shift( ::openfl::VectorData this1){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_352_shift)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 354)		bool _hx_tmp;
HXDLIN( 354)		if (!(this1->fixed)) {
HXLINE( 354)			_hx_tmp = (this1->length > (int)0);
            		}
            		else {
HXLINE( 354)			_hx_tmp = false;
            		}
HXDLIN( 354)		if (_hx_tmp) {
HXLINE( 356)			this1->length--;
HXLINE( 359)			return this1->data->shift();
            		}
HXLINE( 368)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,shift,return )

void Vector_Impl__obj::unshift( ::openfl::VectorData this1, ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_375_unshift)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
HXLINE( 375)		if (!(this1->fixed)) {
HXLINE( 377)			this1->length++;
HXLINE( 379)			if ((this1->data->get_length() < this1->length)) {
HXLINE( 382)				HX_VARI_NAME(  ::Dynamic,this2,"this") = this1->data->__Field(HX_("__SetSizeExact",7c,25,cd,82),hx::paccDynamic);
HXDLIN( 382)				this2((this1->length + (int)10));
            			}
HXLINE( 398)			this1->data->unshift(x);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector_Impl__obj,unshift,(void))

 ::openfl::VectorData Vector_Impl__obj::slice( ::openfl::VectorData this1, ::Dynamic __o_pos, ::Dynamic __o_end){
 ::Dynamic pos = __o_pos.Default(0);
 ::Dynamic end = __o_end.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_408_slice)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(end,"end")
HXLINE( 410)		if (hx::IsLess( pos,(int)0 )) {
HXLINE( 410)			pos = (pos + this1->length);
            		}
HXLINE( 411)		if (hx::IsLessEq( end,(int)0 )) {
HXLINE( 411)			end = (end + this1->length);
            		}
HXLINE( 412)		if (hx::IsGreater( end,this1->length )) {
HXLINE( 412)			end = this1->length;
            		}
HXLINE( 413)		HX_VARI( int,length) = (end - pos);
HXLINE( 414)		bool _hx_tmp;
HXDLIN( 414)		if ((length > (int)0)) {
HXLINE( 414)			_hx_tmp = (length > this1->length);
            		}
            		else {
HXLINE( 414)			_hx_tmp = true;
            		}
HXDLIN( 414)		if (_hx_tmp) {
HXLINE( 414)			length = this1->length;
            		}
HXLINE( 416)		HX_VARI(  ::openfl::VectorData,vectorData) =  ::openfl::VectorData_obj::__alloc( HX_CTX );
HXLINE( 417)		vectorData->length = (end - pos);
HXLINE( 418)		vectorData->fixed = true;
HXLINE( 420)		vectorData->data = this1->data->slice(pos,end);
HXLINE( 425)		return vectorData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector_Impl__obj,slice,return )

void Vector_Impl__obj::sort( ::openfl::VectorData this1, ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_433_sort)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(f,"f")
HXLINE( 433)		this1->data->sort(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector_Impl__obj,sort,(void))

 ::openfl::VectorData Vector_Impl__obj::splice( ::openfl::VectorData this1,int pos,int len){
            	HX_GC_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_443_splice)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE( 445)		if ((pos < (int)0)) {
HXLINE( 445)			pos = (pos + this1->length);
            		}
HXLINE( 446)		if (((pos + len) > this1->length)) {
HXLINE( 446)			len = (this1->length - pos);
            		}
HXLINE( 447)		if ((len < (int)0)) {
HXLINE( 447)			len = (int)0;
            		}
HXLINE( 449)		HX_VARI(  ::openfl::VectorData,vectorData) =  ::openfl::VectorData_obj::__alloc( HX_CTX );
HXLINE( 450)		vectorData->length = len;
HXLINE( 451)		vectorData->fixed = false;
HXLINE( 454)		vectorData->data = this1->data->splice(pos,len);
HXLINE( 460)		if ((len > (int)0)) {
HXLINE( 462)			this1->length = (this1->length - len);
            		}
HXLINE( 469)		return vectorData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector_Impl__obj,splice,return )

::String Vector_Impl__obj::toString( ::openfl::VectorData this1){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_478_toString)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 478)		return this1->data->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,toString,return )

int Vector_Impl__obj::indexOf( ::openfl::VectorData this1, ::Dynamic x, ::Dynamic __o_from){
 ::Dynamic from = __o_from.Default(0);
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_486_indexOf)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(from,"from")
HXLINE( 488)		HX_VARI( int,value) = (int)-1;
HXLINE( 490)		{
HXLINE( 490)			HX_VARI( int,_g1) = from;
HXDLIN( 490)			HX_VARI( int,_g) = this1->length;
HXDLIN( 490)			while((_g1 < _g)){
HXLINE( 490)				_g1 = (_g1 + (int)1);
HXDLIN( 490)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 492)				if (hx::IsEq( this1->data->__get(i),x )) {
HXLINE( 494)					value = i;
HXLINE( 495)					goto _hx_goto_15;
            				}
            			}
            			_hx_goto_15:;
            		}
HXLINE( 501)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector_Impl__obj,indexOf,return )

int Vector_Impl__obj::lastIndexOf( ::openfl::VectorData this1, ::Dynamic x, ::Dynamic __o_from){
 ::Dynamic from = __o_from.Default(0);
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_506_lastIndexOf)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(from,"from")
HXLINE( 508)		HX_VARI( int,value) = (int)-1;
HXLINE( 509)		HX_VARI( int,i) = (this1->length - (int)1);
HXLINE( 511)		while(hx::IsGreaterEq( i,from )){
HXLINE( 513)			if (hx::IsEq( this1->data->__get(i),x )) {
HXLINE( 515)				value = i;
HXLINE( 516)				goto _hx_goto_17;
            			}
HXLINE( 520)			i = (i - (int)1);
            		}
            		_hx_goto_17:;
HXLINE( 524)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector_Impl__obj,lastIndexOf,return )

 ::openfl::VectorData Vector_Impl__obj::ofArray(::cpp::VirtualArray a){
            	HX_GC_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_529_ofArray)
            	HX_STACK_ARG(a,"a")
HXLINE( 531)		HX_VARI(  ::openfl::VectorData,vectorData) =  ::openfl::VectorData_obj::__alloc( HX_CTX );
HXLINE( 532)		vectorData->length = a->get_length();
HXLINE( 533)		vectorData->fixed = true;
HXLINE( 535)		vectorData->data = a->copy();
HXLINE( 539)		return vectorData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,ofArray,return )

 ::openfl::VectorData Vector_Impl__obj::convert( ::openfl::VectorData v){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_546_convert)
            	HX_STACK_ARG(v,"v")
HXLINE( 546)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,convert,return )

 ::Dynamic Vector_Impl__obj::get( ::openfl::VectorData this1,int index){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_553_get)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 553)		return this1->data->__get(index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector_Impl__obj,get,return )

 ::Dynamic Vector_Impl__obj::set( ::openfl::VectorData this1,int key, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_558_set)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(value,"value")
HXLINE( 560)		if (!(this1->fixed)) {
HXLINE( 562)			if ((key >= this1->length)) {
HXLINE( 563)				this1->length = (key + (int)1);
            			}
HXLINE( 566)			if ((this1->data->get_length() < this1->length)) {
HXLINE( 568)				HX_VARI( ::cpp::VirtualArray,data) = ::cpp::VirtualArray_obj::__new((this1->data->get_length() + (int)10));
HXLINE( 569)				data->__Field(HX_("blit",35,38,19,41),hx::paccDynamic)((int)0,this1->data,(int)0,this1->data->get_length());
HXLINE( 570)				this1->data = data;
            			}
            		}
HXLINE( 576)		return (this1->data->set(key,value));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector_Impl__obj,set,return )

 ::openfl::VectorData Vector_Impl__obj::fromArray(::cpp::VirtualArray value){
            	HX_GC_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_581_fromArray)
            	HX_STACK_ARG(value,"value")
HXLINE( 583)		HX_VARI(  ::openfl::VectorData,vectorData) =  ::openfl::VectorData_obj::__alloc( HX_CTX );
HXLINE( 584)		vectorData->length = value->get_length();
HXLINE( 585)		vectorData->fixed = true;
HXLINE( 587)		vectorData->data = value->copy();
HXLINE( 591)		return vectorData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,fromArray,return )

::cpp::VirtualArray Vector_Impl__obj::toArray( ::openfl::VectorData this1){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_599_toArray)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 599)		return this1->data;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,toArray,return )

 ::openfl::VectorData Vector_Impl__obj::fromHaxeVector(::cpp::VirtualArray value){
            	HX_GC_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_611_fromHaxeVector)
            	HX_STACK_ARG(value,"value")
HXLINE( 613)		HX_VARI(  ::openfl::VectorData,vectorData) =  ::openfl::VectorData_obj::__alloc( HX_CTX );
HXLINE( 614)		vectorData->length = value->get_length();
HXLINE( 615)		vectorData->fixed = true;
HXLINE( 617)		vectorData->data = ::cpp::VirtualArray_obj::__new();
HXLINE( 618)		vectorData->data->__SetSize(value->get_length());
HXLINE( 619)		{
HXLINE( 619)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 619)			HX_VARI( int,_g) = value->get_length();
HXDLIN( 619)			while((_g1 < _g)){
HXLINE( 619)				_g1 = (_g1 + (int)1);
HXDLIN( 619)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 620)				HX_VARI_NAME( ::cpp::VirtualArray,vectorData1,"vectorData") = vectorData->data;
HXDLIN( 620)				vectorData1->set(i,_hx_array_unsafe_get(value,i));
            			}
            		}
HXLINE( 625)		return vectorData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,fromHaxeVector,return )

::cpp::VirtualArray Vector_Impl__obj::toHaxeVector( ::openfl::VectorData this1){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_633_toHaxeVector)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 633)		return this1->data->copy();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,toHaxeVector,return )

 ::openfl::VectorData Vector_Impl__obj::fromVectorData( ::openfl::VectorData value){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_643_fromVectorData)
            	HX_STACK_ARG(value,"value")
HXLINE( 643)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,fromVectorData,return )

 ::openfl::VectorData Vector_Impl__obj::toVectorData( ::openfl::VectorData this1){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_650_toVectorData)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 650)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,toVectorData,return )

int Vector_Impl__obj::get_length( ::openfl::VectorData this1){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_664_get_length)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 664)		return this1->length;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,get_length,return )

int Vector_Impl__obj::set_length( ::openfl::VectorData this1,int value){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_669_set_length)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 671)		if (!(this1->fixed)) {
HXLINE( 673)			if ((value > this1->length)) {
HXLINE( 676)				this1->data->__SetSizeExact(value);
            			}
HXLINE( 685)			this1->length = value;
            		}
HXLINE( 689)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector_Impl__obj,set_length,return )

bool Vector_Impl__obj::get_fixed( ::openfl::VectorData this1){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_696_get_fixed)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 696)		return this1->fixed;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector_Impl__obj,get_fixed,return )

bool Vector_Impl__obj::set_fixed( ::openfl::VectorData this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a3c09d73ddb47bfc_703_set_fixed)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 703)		return (this1->fixed = value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector_Impl__obj,set_fixed,return )


Vector_Impl__obj::Vector_Impl__obj()
{
}

bool Vector_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pop") ) { outValue = pop_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"join") ) { outValue = join_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"push") ) { outValue = push_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sort") ) { outValue = sort_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shift") ) { outValue = shift_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"slice") ) { outValue = slice_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { outValue = concat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"splice") ) { outValue = splice_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"reverse") ) { outValue = reverse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unshift") ) { outValue = unshift_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"indexOf") ) { outValue = indexOf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ofArray") ) { outValue = ofArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"convert") ) { outValue = convert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_fixed") ) { outValue = get_fixed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_fixed") ) { outValue = set_fixed_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_length") ) { outValue = set_length_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastIndexOf") ) { outValue = lastIndexOf_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toHaxeVector") ) { outValue = toHaxeVector_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toVectorData") ) { outValue = toVectorData_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fromHaxeVector") ) { outValue = fromHaxeVector_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromVectorData") ) { outValue = fromVectorData_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Vector_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Vector_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Vector_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vector_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vector_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vector_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Vector_Impl__obj::__mClass;

static ::String Vector_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("join","\xea","\x33","\x65","\x46"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"),
	HX_HCSTRING("unshift","\x89","\xe3","\xb3","\x78"),
	HX_HCSTRING("slice","\x52","\xc4","\xc7","\x7e"),
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("indexOf","\xc9","\x48","\xbf","\xe0"),
	HX_HCSTRING("lastIndexOf","\x13","\xfd","\x6a","\x95"),
	HX_HCSTRING("ofArray","\x02","\x29","\xf2","\x88"),
	HX_HCSTRING("convert","\xf3","\xfd","\xc9","\x1a"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("fromHaxeVector","\x93","\x4b","\x75","\x07"),
	HX_HCSTRING("toHaxeVector","\xe4","\x2a","\x28","\xb1"),
	HX_HCSTRING("fromVectorData","\x97","\xa2","\x81","\xfc"),
	HX_HCSTRING("toVectorData","\xe8","\x81","\x34","\xa6"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("set_length","\x23","\xa3","\x0c","\x93"),
	HX_HCSTRING("get_fixed","\xcb","\x55","\x4b","\x44"),
	HX_HCSTRING("set_fixed","\xd7","\x41","\x9c","\x27"),
	::String(null())
};

void Vector_Impl__obj::__register()
{
	hx::Object *dummy = new Vector_Impl__obj;
	Vector_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._Vector.Vector_Impl_","\xcd","\x98","\xe3","\x07");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vector_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vector_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vector_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Vector_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vector_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _Vector
