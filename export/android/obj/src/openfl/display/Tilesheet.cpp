// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_Tilesheet
#include <openfl/display/Tilesheet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_61_new,"openfl.display.Tilesheet","new",0x93eb2f79,"openfl.display.Tilesheet.new","openfl/display/Tilesheet.hx",61,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_89_addTileRect,"openfl.display.Tilesheet","addTileRect",0x692b4acc,"openfl.display.Tilesheet.addTileRect","openfl/display/Tilesheet.hx",89,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_195_drawTiles,"openfl.display.Tilesheet","drawTiles",0x3dc16aba,"openfl.display.Tilesheet.drawTiles","openfl/display/Tilesheet.hx",195,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_201_getTileCenter,"openfl.display.Tilesheet","getTileCenter",0x7cc0f032,"openfl.display.Tilesheet.getTileCenter","openfl/display/Tilesheet.hx",201,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_208_getTileRect,"openfl.display.Tilesheet","getTileRect",0x5dc2d641,"openfl.display.Tilesheet.getTileRect","openfl/display/Tilesheet.hx",208,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_215_getTileUVs,"openfl.display.Tilesheet","getTileUVs",0x006ddc95,"openfl.display.Tilesheet.getTileUVs","openfl/display/Tilesheet.hx",215,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_16_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",16,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_17_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",17,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_18_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",18,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_19_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",19,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_20_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",20,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_21_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",21,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_22_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",22,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_23_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",23,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_25_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",25,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_26_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",26,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_27_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",27,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_28_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",28,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_29_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",29,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_30_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",30,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_31_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",31,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_32_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",32,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_33_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",33,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_34_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",34,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_35_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",35,0x2fc30619)
HX_DEFINE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_37_boot,"openfl.display.Tilesheet","boot",0xd1f75af9,"openfl.display.Tilesheet.boot","openfl/display/Tilesheet.hx",37,0x2fc30619)
namespace openfl{
namespace display{

void Tilesheet_obj::__construct( ::openfl::display::BitmapData image){
            	HX_GC_STACKFRAME(&_hx_pos_b2c50fddadf0d589_61_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(image,"image")
HXLINE(  63)		this->_hx___bitmap = image;
HXLINE(  64)		this->_hx___centerPoints = ::Array_obj< ::Dynamic>::__new();
HXLINE(  65)		this->_hx___tileRects = ::Array_obj< ::Dynamic>::__new();
HXLINE(  66)		this->_hx___tileUVs = ::Array_obj< ::Dynamic>::__new();
HXLINE(  68)		this->_hx___rectTile =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  69)		this->_hx___rectUV =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  70)		this->_hx___point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}

Dynamic Tilesheet_obj::__CreateEmpty() { return new Tilesheet_obj; }

void *Tilesheet_obj::_hx_vtable = 0;

Dynamic Tilesheet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tilesheet_obj > _hx_result = new Tilesheet_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Tilesheet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e15ed1f;
}

int Tilesheet_obj::addTileRect( ::openfl::geom::Rectangle rectangle, ::openfl::geom::Point centerPoint){
            	HX_GC_STACKFRAME(&_hx_pos_b2c50fddadf0d589_89_addTileRect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rectangle,"rectangle")
            	HX_STACK_ARG(centerPoint,"centerPoint")
HXLINE(  91)		this->_hx___tileRects->push(rectangle);
HXLINE(  93)		if (hx::IsNull( centerPoint )) {
HXLINE(  95)			centerPoint = ::openfl::display::Tilesheet_obj::_hx___defaultPoint;
            		}
HXLINE( 102)		this->_hx___centerPoints->push(centerPoint);
HXLINE( 105)		::Array< ::Dynamic> _hx_tmp = this->_hx___tileUVs;
HXDLIN( 105)		Float _hx_tmp1 = ( (Float)(rectangle->__Field(HX_("get_left",90,c3,6a,c7),hx::paccDynamic)()) );
HXDLIN( 105)		Float _hx_tmp2 = ((Float)_hx_tmp1 / (Float)this->_hx___bitmap->width);
HXDLIN( 105)		Float _hx_tmp3 = ( (Float)(rectangle->__Field(HX_("get_top",2c,2f,cd,26),hx::paccDynamic)()) );
HXDLIN( 105)		Float _hx_tmp4 = ((Float)_hx_tmp3 / (Float)this->_hx___bitmap->height);
HXDLIN( 105)		Float _hx_tmp5 = ( (Float)(rectangle->__Field(HX_("get_right",33,68,0d,2d),hx::paccDynamic)()) );
HXDLIN( 105)		Float _hx_tmp6 = ((Float)_hx_tmp5 / (Float)this->_hx___bitmap->width);
HXDLIN( 105)		Float _hx_tmp7 = ( (Float)(rectangle->__Field(HX_("get_bottom",b4,56,00,56),hx::paccDynamic)()) );
HXDLIN( 105)		_hx_tmp->push( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,_hx_tmp2,_hx_tmp4,_hx_tmp6,((Float)_hx_tmp7 / (Float)this->_hx___bitmap->height)));
HXLINE( 107)		return (this->_hx___tileRects->length - (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilesheet_obj,addTileRect,return )

void Tilesheet_obj::drawTiles( ::openfl::display::Graphics graphics,::Array< Float > tileData,hx::Null< bool >  __o_smooth,hx::Null< int >  __o_flags,hx::Null< int >  __o_count){
bool smooth = __o_smooth.Default(false);
int flags = __o_flags.Default(0);
int count = __o_count.Default(-1);
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_195_drawTiles)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(tileData,"tileData")
            	HX_STACK_ARG(smooth,"smooth")
            	HX_STACK_ARG(flags,"flags")
            	HX_STACK_ARG(count,"count")
HXLINE( 195)		graphics->drawTiles(hx::ObjectPtr<OBJ_>(this),tileData,smooth,flags,null(),count);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Tilesheet_obj,drawTiles,(void))

 ::openfl::geom::Point Tilesheet_obj::getTileCenter(int index){
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_201_getTileCenter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 201)		return this->_hx___centerPoints->__get(index).StaticCast<  ::openfl::geom::Point >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilesheet_obj,getTileCenter,return )

 ::openfl::geom::Rectangle Tilesheet_obj::getTileRect(int index){
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_208_getTileRect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 208)		return this->_hx___tileRects->__get(index).StaticCast<  ::openfl::geom::Rectangle >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilesheet_obj,getTileRect,return )

 ::openfl::geom::Rectangle Tilesheet_obj::getTileUVs(int index){
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_215_getTileUVs)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 215)		return this->_hx___tileUVs->__get(index).StaticCast<  ::openfl::geom::Rectangle >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilesheet_obj,getTileUVs,return )

int Tilesheet_obj::TILE_SCALE;

int Tilesheet_obj::TILE_ROTATION;

int Tilesheet_obj::TILE_RGB;

int Tilesheet_obj::TILE_ALPHA;

int Tilesheet_obj::TILE_TRANS_2x2;

int Tilesheet_obj::TILE_RECT;

int Tilesheet_obj::TILE_ORIGIN;

int Tilesheet_obj::TILE_TRANS_COLOR;

int Tilesheet_obj::TILE_BLEND_NORMAL;

int Tilesheet_obj::TILE_BLEND_ADD;

int Tilesheet_obj::TILE_BLEND_MULTIPLY;

int Tilesheet_obj::TILE_BLEND_SCREEN;

int Tilesheet_obj::TILE_BLEND_SUBTRACT;

int Tilesheet_obj::TILE_BLEND_DARKEN;

int Tilesheet_obj::TILE_BLEND_LIGHTEN;

int Tilesheet_obj::TILE_BLEND_OVERLAY;

int Tilesheet_obj::TILE_BLEND_HARDLIGHT;

int Tilesheet_obj::TILE_BLEND_DIFFERENCE;

int Tilesheet_obj::TILE_BLEND_INVERT;

 ::openfl::geom::Point Tilesheet_obj::_hx___defaultPoint;


Tilesheet_obj::Tilesheet_obj()
{
}

void Tilesheet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tilesheet);
	HX_MARK_MEMBER_NAME(_hx___bitmap,"__bitmap");
	HX_MARK_MEMBER_NAME(_hx___centerPoints,"__centerPoints");
	HX_MARK_MEMBER_NAME(_hx___tileRects,"__tileRects");
	HX_MARK_MEMBER_NAME(_hx___tileUVs,"__tileUVs");
	HX_MARK_MEMBER_NAME(_hx___rectTile,"__rectTile");
	HX_MARK_MEMBER_NAME(_hx___rectUV,"__rectUV");
	HX_MARK_MEMBER_NAME(_hx___point,"__point");
	HX_MARK_END_CLASS();
}

void Tilesheet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bitmap,"__bitmap");
	HX_VISIT_MEMBER_NAME(_hx___centerPoints,"__centerPoints");
	HX_VISIT_MEMBER_NAME(_hx___tileRects,"__tileRects");
	HX_VISIT_MEMBER_NAME(_hx___tileUVs,"__tileUVs");
	HX_VISIT_MEMBER_NAME(_hx___rectTile,"__rectTile");
	HX_VISIT_MEMBER_NAME(_hx___rectUV,"__rectUV");
	HX_VISIT_MEMBER_NAME(_hx___point,"__point");
}

hx::Val Tilesheet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__point") ) { return hx::Val( _hx___point); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__bitmap") ) { return hx::Val( _hx___bitmap); }
		if (HX_FIELD_EQ(inName,"__rectUV") ) { return hx::Val( _hx___rectUV); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__tileUVs") ) { return hx::Val( _hx___tileUVs); }
		if (HX_FIELD_EQ(inName,"drawTiles") ) { return hx::Val( drawTiles_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__rectTile") ) { return hx::Val( _hx___rectTile); }
		if (HX_FIELD_EQ(inName,"getTileUVs") ) { return hx::Val( getTileUVs_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__tileRects") ) { return hx::Val( _hx___tileRects); }
		if (HX_FIELD_EQ(inName,"addTileRect") ) { return hx::Val( addTileRect_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileRect") ) { return hx::Val( getTileRect_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getTileCenter") ) { return hx::Val( getTileCenter_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__centerPoints") ) { return hx::Val( _hx___centerPoints); }
	}
	return super::__Field(inName,inCallProp);
}

bool Tilesheet_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultPoint") ) { outValue = _hx___defaultPoint; return true; }
	}
	return false;
}

hx::Val Tilesheet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__point") ) { _hx___point=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__bitmap") ) { _hx___bitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rectUV") ) { _hx___rectUV=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__tileUVs") ) { _hx___tileUVs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__rectTile") ) { _hx___rectTile=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__tileRects") ) { _hx___tileRects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__centerPoints") ) { _hx___centerPoints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Tilesheet_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultPoint") ) { _hx___defaultPoint=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
	}
	return false;
}

void Tilesheet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"));
	outFields->push(HX_HCSTRING("__centerPoints","\xf8","\xbc","\x23","\xdc"));
	outFields->push(HX_HCSTRING("__tileRects","\xa1","\xd9","\x43","\xa0"));
	outFields->push(HX_HCSTRING("__tileUVs","\x64","\x01","\xcb","\xc6"));
	outFields->push(HX_HCSTRING("__rectTile","\x92","\x19","\x4d","\x1b"));
	outFields->push(HX_HCSTRING("__rectUV","\xa5","\x93","\x1f","\xa6"));
	outFields->push(HX_HCSTRING("__point","\x30","\x0d","\xee","\x30"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Tilesheet_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*openfl::display::BitmapData*/ ,(int)offsetof(Tilesheet_obj,_hx___bitmap),HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Tilesheet_obj,_hx___centerPoints),HX_HCSTRING("__centerPoints","\xf8","\xbc","\x23","\xdc")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Tilesheet_obj,_hx___tileRects),HX_HCSTRING("__tileRects","\xa1","\xd9","\x43","\xa0")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Tilesheet_obj,_hx___tileUVs),HX_HCSTRING("__tileUVs","\x64","\x01","\xcb","\xc6")},
	{hx::fsObject /*openfl::geom::Rectangle*/ ,(int)offsetof(Tilesheet_obj,_hx___rectTile),HX_HCSTRING("__rectTile","\x92","\x19","\x4d","\x1b")},
	{hx::fsObject /*openfl::geom::Rectangle*/ ,(int)offsetof(Tilesheet_obj,_hx___rectUV),HX_HCSTRING("__rectUV","\xa5","\x93","\x1f","\xa6")},
	{hx::fsObject /*openfl::geom::Point*/ ,(int)offsetof(Tilesheet_obj,_hx___point),HX_HCSTRING("__point","\x30","\x0d","\xee","\x30")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Tilesheet_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_SCALE,HX_HCSTRING("TILE_SCALE","\x59","\x77","\x2d","\x62")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_ROTATION,HX_HCSTRING("TILE_ROTATION","\xaf","\x5b","\x7b","\x62")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_RGB,HX_HCSTRING("TILE_RGB","\x1c","\x7e","\xfb","\xfc")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_ALPHA,HX_HCSTRING("TILE_ALPHA","\x2d","\x50","\xf5","\x0a")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_TRANS_2x2,HX_HCSTRING("TILE_TRANS_2x2","\xe4","\x26","\x89","\xb2")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_RECT,HX_HCSTRING("TILE_RECT","\x15","\x57","\x11","\x5f")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_ORIGIN,HX_HCSTRING("TILE_ORIGIN","\x17","\x26","\x76","\x94")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_TRANS_COLOR,HX_HCSTRING("TILE_TRANS_COLOR","\xbb","\xc4","\x15","\xf3")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_NORMAL,HX_HCSTRING("TILE_BLEND_NORMAL","\xa6","\x02","\x62","\x2c")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_ADD,HX_HCSTRING("TILE_BLEND_ADD","\x22","\x74","\xbf","\x89")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_MULTIPLY,HX_HCSTRING("TILE_BLEND_MULTIPLY","\x63","\xb4","\x29","\xf2")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_SCREEN,HX_HCSTRING("TILE_BLEND_SCREEN","\xeb","\xcb","\x55","\x43")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_SUBTRACT,HX_HCSTRING("TILE_BLEND_SUBTRACT","\x53","\x47","\xae","\x4f")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_DARKEN,HX_HCSTRING("TILE_BLEND_DARKEN","\xde","\xc6","\x32","\x1d")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_LIGHTEN,HX_HCSTRING("TILE_BLEND_LIGHTEN","\x40","\x29","\x69","\x97")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_OVERLAY,HX_HCSTRING("TILE_BLEND_OVERLAY","\x11","\x22","\x96","\x26")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_HARDLIGHT,HX_HCSTRING("TILE_BLEND_HARDLIGHT","\xcc","\x92","\x06","\xa5")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_DIFFERENCE,HX_HCSTRING("TILE_BLEND_DIFFERENCE","\xfc","\x9f","\xb6","\x5c")},
	{hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_INVERT,HX_HCSTRING("TILE_BLEND_INVERT","\x95","\x77","\xd1","\x9b")},
	{hx::fsObject /*openfl::geom::Point*/ ,(void *) &Tilesheet_obj::_hx___defaultPoint,HX_HCSTRING("__defaultPoint","\xef","\x72","\xab","\x9c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Tilesheet_obj_sMemberFields[] = {
	HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"),
	HX_HCSTRING("__centerPoints","\xf8","\xbc","\x23","\xdc"),
	HX_HCSTRING("__tileRects","\xa1","\xd9","\x43","\xa0"),
	HX_HCSTRING("__tileUVs","\x64","\x01","\xcb","\xc6"),
	HX_HCSTRING("__rectTile","\x92","\x19","\x4d","\x1b"),
	HX_HCSTRING("__rectUV","\xa5","\x93","\x1f","\xa6"),
	HX_HCSTRING("__point","\x30","\x0d","\xee","\x30"),
	HX_HCSTRING("addTileRect","\xb3","\xaa","\x09","\xb7"),
	HX_HCSTRING("drawTiles","\xe1","\x32","\x40","\xd8"),
	HX_HCSTRING("getTileCenter","\xd9","\x57","\xe4","\xc6"),
	HX_HCSTRING("getTileRect","\x28","\x36","\xa1","\xab"),
	HX_HCSTRING("getTileUVs","\x8e","\x36","\xde","\x94"),
	::String(null()) };

static void Tilesheet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tilesheet_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_SCALE,"TILE_SCALE");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_ROTATION,"TILE_ROTATION");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_RGB,"TILE_RGB");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_ALPHA,"TILE_ALPHA");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_TRANS_2x2,"TILE_TRANS_2x2");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_RECT,"TILE_RECT");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_ORIGIN,"TILE_ORIGIN");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_TRANS_COLOR,"TILE_TRANS_COLOR");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_NORMAL,"TILE_BLEND_NORMAL");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_ADD,"TILE_BLEND_ADD");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_MULTIPLY,"TILE_BLEND_MULTIPLY");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_SCREEN,"TILE_BLEND_SCREEN");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_SUBTRACT,"TILE_BLEND_SUBTRACT");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_DARKEN,"TILE_BLEND_DARKEN");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_LIGHTEN,"TILE_BLEND_LIGHTEN");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_OVERLAY,"TILE_BLEND_OVERLAY");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_HARDLIGHT,"TILE_BLEND_HARDLIGHT");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_DIFFERENCE,"TILE_BLEND_DIFFERENCE");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_INVERT,"TILE_BLEND_INVERT");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::_hx___defaultPoint,"__defaultPoint");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tilesheet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_SCALE,"TILE_SCALE");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_ROTATION,"TILE_ROTATION");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_RGB,"TILE_RGB");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_ALPHA,"TILE_ALPHA");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_TRANS_2x2,"TILE_TRANS_2x2");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_RECT,"TILE_RECT");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_ORIGIN,"TILE_ORIGIN");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_TRANS_COLOR,"TILE_TRANS_COLOR");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_NORMAL,"TILE_BLEND_NORMAL");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_ADD,"TILE_BLEND_ADD");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_MULTIPLY,"TILE_BLEND_MULTIPLY");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_SCREEN,"TILE_BLEND_SCREEN");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_SUBTRACT,"TILE_BLEND_SUBTRACT");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_DARKEN,"TILE_BLEND_DARKEN");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_LIGHTEN,"TILE_BLEND_LIGHTEN");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_OVERLAY,"TILE_BLEND_OVERLAY");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_HARDLIGHT,"TILE_BLEND_HARDLIGHT");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_DIFFERENCE,"TILE_BLEND_DIFFERENCE");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_INVERT,"TILE_BLEND_INVERT");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::_hx___defaultPoint,"__defaultPoint");
};

#endif

hx::Class Tilesheet_obj::__mClass;

static ::String Tilesheet_obj_sStaticFields[] = {
	HX_HCSTRING("TILE_SCALE","\x59","\x77","\x2d","\x62"),
	HX_HCSTRING("TILE_ROTATION","\xaf","\x5b","\x7b","\x62"),
	HX_HCSTRING("TILE_RGB","\x1c","\x7e","\xfb","\xfc"),
	HX_HCSTRING("TILE_ALPHA","\x2d","\x50","\xf5","\x0a"),
	HX_HCSTRING("TILE_TRANS_2x2","\xe4","\x26","\x89","\xb2"),
	HX_HCSTRING("TILE_RECT","\x15","\x57","\x11","\x5f"),
	HX_HCSTRING("TILE_ORIGIN","\x17","\x26","\x76","\x94"),
	HX_HCSTRING("TILE_TRANS_COLOR","\xbb","\xc4","\x15","\xf3"),
	HX_HCSTRING("TILE_BLEND_NORMAL","\xa6","\x02","\x62","\x2c"),
	HX_HCSTRING("TILE_BLEND_ADD","\x22","\x74","\xbf","\x89"),
	HX_HCSTRING("TILE_BLEND_MULTIPLY","\x63","\xb4","\x29","\xf2"),
	HX_HCSTRING("TILE_BLEND_SCREEN","\xeb","\xcb","\x55","\x43"),
	HX_HCSTRING("TILE_BLEND_SUBTRACT","\x53","\x47","\xae","\x4f"),
	HX_HCSTRING("TILE_BLEND_DARKEN","\xde","\xc6","\x32","\x1d"),
	HX_HCSTRING("TILE_BLEND_LIGHTEN","\x40","\x29","\x69","\x97"),
	HX_HCSTRING("TILE_BLEND_OVERLAY","\x11","\x22","\x96","\x26"),
	HX_HCSTRING("TILE_BLEND_HARDLIGHT","\xcc","\x92","\x06","\xa5"),
	HX_HCSTRING("TILE_BLEND_DIFFERENCE","\xfc","\x9f","\xb6","\x5c"),
	HX_HCSTRING("TILE_BLEND_INVERT","\x95","\x77","\xd1","\x9b"),
	HX_HCSTRING("__defaultPoint","\xef","\x72","\xab","\x9c"),
	::String(null())
};

void Tilesheet_obj::__register()
{
	hx::Object *dummy = new Tilesheet_obj;
	Tilesheet_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Tilesheet","\x07","\xff","\xf5","\x20");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Tilesheet_obj::__GetStatic;
	__mClass->mSetStaticField = &Tilesheet_obj::__SetStatic;
	__mClass->mMarkFunc = Tilesheet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Tilesheet_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tilesheet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tilesheet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tilesheet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tilesheet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tilesheet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Tilesheet_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_16_boot)
HXLINE(  16)		TILE_SCALE = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_17_boot)
HXLINE(  17)		TILE_ROTATION = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_18_boot)
HXLINE(  18)		TILE_RGB = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_19_boot)
HXLINE(  19)		TILE_ALPHA = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_20_boot)
HXLINE(  20)		TILE_TRANS_2x2 = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_21_boot)
HXLINE(  21)		TILE_RECT = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_22_boot)
HXLINE(  22)		TILE_ORIGIN = (int)64;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_23_boot)
HXLINE(  23)		TILE_TRANS_COLOR = (int)128;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_25_boot)
HXLINE(  25)		TILE_BLEND_NORMAL = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_26_boot)
HXLINE(  26)		TILE_BLEND_ADD = (int)65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_27_boot)
HXLINE(  27)		TILE_BLEND_MULTIPLY = (int)131072;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_28_boot)
HXLINE(  28)		TILE_BLEND_SCREEN = (int)262144;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_29_boot)
HXLINE(  29)		TILE_BLEND_SUBTRACT = (int)524288;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_30_boot)
HXLINE(  30)		TILE_BLEND_DARKEN = (int)1048576;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_31_boot)
HXLINE(  31)		TILE_BLEND_LIGHTEN = (int)2097152;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_32_boot)
HXLINE(  32)		TILE_BLEND_OVERLAY = (int)4194304;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_33_boot)
HXLINE(  33)		TILE_BLEND_HARDLIGHT = (int)8388608;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_34_boot)
HXLINE(  34)		TILE_BLEND_DIFFERENCE = (int)16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b2c50fddadf0d589_35_boot)
HXLINE(  35)		TILE_BLEND_INVERT = (int)33554432;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b2c50fddadf0d589_37_boot)
HXLINE(  37)		_hx___defaultPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
            	}
}

} // end namespace openfl
} // end namespace display
