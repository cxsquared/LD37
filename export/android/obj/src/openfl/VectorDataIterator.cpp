// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl_VectorData
#include <openfl/VectorData.h>
#endif
#ifndef INCLUDED_openfl_VectorDataIterator
#include <openfl/VectorDataIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6cfbc78193ff1ed2_740_new,"openfl.VectorDataIterator","new",0x585e0b4b,"openfl.VectorDataIterator.new","openfl/Vector.hx",740,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_6cfbc78193ff1ed2_750_hasNext,"openfl.VectorDataIterator","hasNext",0xca2031d8,"openfl.VectorDataIterator.hasNext","openfl/Vector.hx",750,0x4a01873c)
HX_DEFINE_STACK_FRAME(_hx_pos_6cfbc78193ff1ed2_757_next,"openfl.VectorDataIterator","next",0xf9ebd7a8,"openfl.VectorDataIterator.next","openfl/Vector.hx",757,0x4a01873c)
namespace openfl{

void VectorDataIterator_obj::__construct( ::openfl::VectorData data){
            	HX_STACKFRAME(&_hx_pos_6cfbc78193ff1ed2_740_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE( 742)		this->index = (int)0;
HXLINE( 743)		this->vectorData = data;
            	}

Dynamic VectorDataIterator_obj::__CreateEmpty() { return new VectorDataIterator_obj; }

void *VectorDataIterator_obj::_hx_vtable = 0;

Dynamic VectorDataIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VectorDataIterator_obj > _hx_result = new VectorDataIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool VectorDataIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x164fbe0b;
}

bool VectorDataIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_6cfbc78193ff1ed2_750_hasNext)
            	HX_STACK_THIS(this)
HXLINE( 750)		return (this->index < this->vectorData->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VectorDataIterator_obj,hasNext,return )

 ::Dynamic VectorDataIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_6cfbc78193ff1ed2_757_next)
            	HX_STACK_THIS(this)
HXLINE( 757)		return this->vectorData->data->__get(this->index++);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VectorDataIterator_obj,next,return )


hx::ObjectPtr< VectorDataIterator_obj > VectorDataIterator_obj::__new( ::openfl::VectorData data) {
	hx::ObjectPtr< VectorDataIterator_obj > __this = new VectorDataIterator_obj();
	__this->__construct(data);
	return __this;
}

hx::ObjectPtr< VectorDataIterator_obj > VectorDataIterator_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::VectorData data) {
	VectorDataIterator_obj *__this = (VectorDataIterator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VectorDataIterator_obj), true, "openfl.VectorDataIterator"));
	*(void **)__this = VectorDataIterator_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

VectorDataIterator_obj::VectorDataIterator_obj()
{
}

void VectorDataIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VectorDataIterator);
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(vectorData,"vectorData");
	HX_MARK_END_CLASS();
}

void VectorDataIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(vectorData,"vectorData");
}

hx::Val VectorDataIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vectorData") ) { return hx::Val( vectorData); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VectorDataIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vectorData") ) { vectorData=inValue.Cast<  ::openfl::VectorData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VectorDataIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	outFields->push(HX_HCSTRING("vectorData","\x8d","\x50","\x55","\x04"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VectorDataIterator_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(VectorDataIterator_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{hx::fsObject /*::openfl::VectorData*/ ,(int)offsetof(VectorDataIterator_obj,vectorData),HX_HCSTRING("vectorData","\x8d","\x50","\x55","\x04")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VectorDataIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String VectorDataIterator_obj_sMemberFields[] = {
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("vectorData","\x8d","\x50","\x55","\x04"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	::String(null()) };

static void VectorDataIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VectorDataIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VectorDataIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VectorDataIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class VectorDataIterator_obj::__mClass;

void VectorDataIterator_obj::__register()
{
	hx::Object *dummy = new VectorDataIterator_obj;
	VectorDataIterator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.VectorDataIterator","\xd9","\x09","\x76","\xb9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VectorDataIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VectorDataIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VectorDataIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VectorDataIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VectorDataIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VectorDataIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
