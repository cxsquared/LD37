// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_25_new,"lime.math.Rectangle","new",0xb4aa4114,"lime.math.Rectangle.new","lime/math/Rectangle.hx",25,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_37_clone,"lime.math.Rectangle","clone",0x93be1911,"lime.math.Rectangle.clone","lime/math/Rectangle.hx",37,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_44_contains,"lime.math.Rectangle","contains",0xf10bdceb,"lime.math.Rectangle.contains","lime/math/Rectangle.hx",44,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_51_containsPoint,"lime.math.Rectangle","containsPoint",0x3a119365,"lime.math.Rectangle.containsPoint","lime/math/Rectangle.hx",51,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_58_containsRect,"lime.math.Rectangle","containsRect",0x7fd4a7af,"lime.math.Rectangle.containsRect","lime/math/Rectangle.hx",58,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_71_copyFrom,"lime.math.Rectangle","copyFrom",0x8cf18e8b,"lime.math.Rectangle.copyFrom","lime/math/Rectangle.hx",71,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_83_equals,"lime.math.Rectangle","equals",0x643ce60b,"lime.math.Rectangle.equals","lime/math/Rectangle.hx",83,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_88_inflate,"lime.math.Rectangle","inflate",0x288a773b,"lime.math.Rectangle.inflate","lime/math/Rectangle.hx",88,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_98_inflatePoint,"lime.math.Rectangle","inflatePoint",0x0bf19715,"lime.math.Rectangle.inflatePoint","lime/math/Rectangle.hx",98,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_103_intersection,"lime.math.Rectangle","intersection",0x62197b15,"lime.math.Rectangle.intersection","lime/math/Rectangle.hx",103,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_128_intersects,"lime.math.Rectangle","intersects",0x4fbb9080,"lime.math.Rectangle.intersects","lime/math/Rectangle.hx",128,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_149_isEmpty,"lime.math.Rectangle","isEmpty",0x28ceb8f7,"lime.math.Rectangle.isEmpty","lime/math/Rectangle.hx",149,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_154_offset,"lime.math.Rectangle","offset",0x04898f5f,"lime.math.Rectangle.offset","lime/math/Rectangle.hx",154,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_162_offsetPoint,"lime.math.Rectangle","offsetPoint",0x49147c71,"lime.math.Rectangle.offsetPoint","lime/math/Rectangle.hx",162,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_172_setEmpty,"lime.math.Rectangle","setEmpty",0x429f2657,"lime.math.Rectangle.setEmpty","lime/math/Rectangle.hx",172,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_177_setTo,"lime.math.Rectangle","setTo",0xc58a9771,"lime.math.Rectangle.setTo","lime/math/Rectangle.hx",177,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_187_transform,"lime.math.Rectangle","transform",0x7f751d20,"lime.math.Rectangle.transform","lime/math/Rectangle.hx",187,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_223_union,"lime.math.Rectangle","union",0xf2426ac3,"lime.math.Rectangle.union","lime/math/Rectangle.hx",223,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_245___contract,"lime.math.Rectangle","__contract",0x46ba1ffe,"lime.math.Rectangle.__contract","lime/math/Rectangle.hx",245,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_264___expand,"lime.math.Rectangle","__expand",0x3132dc46,"lime.math.Rectangle.__expand","lime/math/Rectangle.hx",264,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_292___toFlashRectangle,"lime.math.Rectangle","__toFlashRectangle",0x525ed026,"lime.math.Rectangle.__toFlashRectangle","lime/math/Rectangle.hx",292,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_305_get_bottom,"lime.math.Rectangle","get_bottom",0xc1d02480,"lime.math.Rectangle.get_bottom","lime/math/Rectangle.hx",305,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_306_set_bottom,"lime.math.Rectangle","set_bottom",0xc54dc2f4,"lime.math.Rectangle.set_bottom","lime/math/Rectangle.hx",306,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_307_get_bottomRight,"lime.math.Rectangle","get_bottomRight",0x2f6d073c,"lime.math.Rectangle.get_bottomRight","lime/math/Rectangle.hx",307,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_308_set_bottomRight,"lime.math.Rectangle","set_bottomRight",0x2b388448,"lime.math.Rectangle.set_bottomRight","lime/math/Rectangle.hx",308,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_309_get_left,"lime.math.Rectangle","get_left",0x8bfb465c,"lime.math.Rectangle.get_left","lime/math/Rectangle.hx",309,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_310_set_left,"lime.math.Rectangle","set_left",0x3a589fd0,"lime.math.Rectangle.set_left","lime/math/Rectangle.hx",310,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_311_get_right,"lime.math.Rectangle","get_right",0x66ef57e7,"lime.math.Rectangle.get_right","lime/math/Rectangle.hx",311,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_312_set_right,"lime.math.Rectangle","set_right",0x4a4043f3,"lime.math.Rectangle.set_right","lime/math/Rectangle.hx",312,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_313_get_size,"lime.math.Rectangle","get_size",0x909edf16,"lime.math.Rectangle.get_size","lime/math/Rectangle.hx",313,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_314_set_size,"lime.math.Rectangle","set_size",0x3efc388a,"lime.math.Rectangle.set_size","lime/math/Rectangle.hx",314,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_315_get_top,"lime.math.Rectangle","get_top",0x433c09e0,"lime.math.Rectangle.get_top","lime/math/Rectangle.hx",315,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_316_set_top,"lime.math.Rectangle","set_top",0x363d9aec,"lime.math.Rectangle.set_top","lime/math/Rectangle.hx",316,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_317_get_topLeft,"lime.math.Rectangle","get_topLeft",0x58bfae07,"lime.math.Rectangle.get_topLeft","lime/math/Rectangle.hx",317,0xce0be93c)
HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_318_set_topLeft,"lime.math.Rectangle","set_topLeft",0x632cb513,"lime.math.Rectangle.set_topLeft","lime/math/Rectangle.hx",318,0xce0be93c)
namespace lime{
namespace math{

void Rectangle_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float width = __o_width.Default(0);
Float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_25_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(  27)		this->x = x;
HXLINE(  28)		this->y = y;
HXLINE(  29)		this->width = width;
HXLINE(  30)		this->height = height;
            	}

Dynamic Rectangle_obj::__CreateEmpty() { return new Rectangle_obj; }

void *Rectangle_obj::_hx_vtable = 0;

Dynamic Rectangle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Rectangle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a1cb312;
}

 ::lime::math::Rectangle Rectangle_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_37_clone)
            	HX_STACK_THIS(this)
HXLINE(  37)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,this->x,this->y,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,clone,return )

bool Rectangle_obj::contains(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_44_contains)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  44)		bool _hx_tmp;
HXDLIN(  44)		bool _hx_tmp1;
HXDLIN(  44)		if ((x >= this->x)) {
HXLINE(  44)			_hx_tmp1 = (y >= this->y);
            		}
            		else {
HXLINE(  44)			_hx_tmp1 = false;
            		}
HXDLIN(  44)		if (_hx_tmp1) {
HXLINE(  44)			_hx_tmp = (x < this->get_right());
            		}
            		else {
HXLINE(  44)			_hx_tmp = false;
            		}
HXDLIN(  44)		if (_hx_tmp) {
HXLINE(  44)			return (y < this->get_bottom());
            		}
            		else {
HXLINE(  44)			return false;
            		}
HXDLIN(  44)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,contains,return )

bool Rectangle_obj::containsPoint( ::lime::math::Vector2 point){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_51_containsPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE(  51)		return this->contains(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsPoint,return )

bool Rectangle_obj::containsRect( ::lime::math::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_58_containsRect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE(  58)		bool _hx_tmp;
HXDLIN(  58)		if (!((rect->width <= (int)0))) {
HXLINE(  58)			_hx_tmp = (rect->height <= (int)0);
            		}
            		else {
HXLINE(  58)			_hx_tmp = true;
            		}
HXDLIN(  58)		if (_hx_tmp) {
HXLINE(  60)			bool _hx_tmp1;
HXDLIN(  60)			bool _hx_tmp2;
HXDLIN(  60)			if ((rect->x > this->x)) {
HXLINE(  60)				_hx_tmp2 = (rect->y > this->y);
            			}
            			else {
HXLINE(  60)				_hx_tmp2 = false;
            			}
HXDLIN(  60)			if (_hx_tmp2) {
HXLINE(  60)				_hx_tmp1 = (rect->get_right() < this->get_right());
            			}
            			else {
HXLINE(  60)				_hx_tmp1 = false;
            			}
HXDLIN(  60)			if (_hx_tmp1) {
HXLINE(  60)				return (rect->get_bottom() < this->get_bottom());
            			}
            			else {
HXLINE(  60)				return false;
            			}
            		}
            		else {
HXLINE(  64)			bool _hx_tmp3;
HXDLIN(  64)			bool _hx_tmp4;
HXDLIN(  64)			if ((rect->x >= this->x)) {
HXLINE(  64)				_hx_tmp4 = (rect->y >= this->y);
            			}
            			else {
HXLINE(  64)				_hx_tmp4 = false;
            			}
HXDLIN(  64)			if (_hx_tmp4) {
HXLINE(  64)				_hx_tmp3 = (rect->get_right() <= this->get_right());
            			}
            			else {
HXLINE(  64)				_hx_tmp3 = false;
            			}
HXDLIN(  64)			if (_hx_tmp3) {
HXLINE(  64)				return (rect->get_bottom() <= this->get_bottom());
            			}
            			else {
HXLINE(  64)				return false;
            			}
            		}
HXLINE(  58)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsRect,return )

void Rectangle_obj::copyFrom( ::lime::math::Rectangle sourceRect){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_71_copyFrom)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceRect,"sourceRect")
HXLINE(  73)		this->x = sourceRect->x;
HXLINE(  74)		this->y = sourceRect->y;
HXLINE(  75)		this->width = sourceRect->width;
HXLINE(  76)		this->height = sourceRect->height;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,copyFrom,(void))

bool Rectangle_obj::equals( ::lime::math::Rectangle toCompare){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_83_equals)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toCompare,"toCompare")
HXLINE(  83)		bool _hx_tmp;
HXDLIN(  83)		bool _hx_tmp1;
HXDLIN(  83)		bool _hx_tmp2;
HXDLIN(  83)		if (hx::IsNotNull( toCompare )) {
HXLINE(  83)			_hx_tmp2 = (this->x == toCompare->x);
            		}
            		else {
HXLINE(  83)			_hx_tmp2 = false;
            		}
HXDLIN(  83)		if (_hx_tmp2) {
HXLINE(  83)			_hx_tmp1 = (this->y == toCompare->y);
            		}
            		else {
HXLINE(  83)			_hx_tmp1 = false;
            		}
HXDLIN(  83)		if (_hx_tmp1) {
HXLINE(  83)			_hx_tmp = (this->width == toCompare->width);
            		}
            		else {
HXLINE(  83)			_hx_tmp = false;
            		}
HXDLIN(  83)		if (_hx_tmp) {
HXLINE(  83)			return (this->height == toCompare->height);
            		}
            		else {
HXLINE(  83)			return false;
            		}
HXDLIN(  83)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,equals,return )

void Rectangle_obj::inflate(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_88_inflate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dx,"dx")
            	HX_STACK_ARG(dy,"dy")
HXLINE(  90)		 ::lime::math::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  90)		_hx_tmp->x = (_hx_tmp->x - dx);
HXDLIN(  90)		 ::lime::math::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  90)		_hx_tmp1->width = (_hx_tmp1->width + (dx * (int)2));
HXLINE(  91)		 ::lime::math::Rectangle _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  91)		_hx_tmp2->y = (_hx_tmp2->y - dy);
HXDLIN(  91)		 ::lime::math::Rectangle _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  91)		_hx_tmp3->height = (_hx_tmp3->height + (dy * (int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,inflate,(void))

void Rectangle_obj::inflatePoint( ::lime::math::Vector2 point){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_98_inflatePoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE(  98)		this->inflate(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,inflatePoint,(void))

 ::lime::math::Rectangle Rectangle_obj::intersection( ::lime::math::Rectangle toIntersect){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_103_intersection)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toIntersect,"toIntersect")
HXLINE( 105)		HX_VAR( Float,x0);
HXDLIN( 105)		if ((this->x < toIntersect->x)) {
HXLINE( 105)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 105)			x0 = this->x;
            		}
HXLINE( 106)		HX_VAR( Float,x1);
HXDLIN( 106)		if ((this->get_right() > toIntersect->get_right())) {
HXLINE( 106)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 106)			x1 = this->get_right();
            		}
HXLINE( 108)		if ((x1 <= x0)) {
HXLINE( 110)			return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 114)		HX_VAR( Float,y0);
HXDLIN( 114)		if ((this->y < toIntersect->y)) {
HXLINE( 114)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 114)			y0 = this->y;
            		}
HXLINE( 115)		HX_VAR( Float,y1);
HXDLIN( 115)		if ((this->get_bottom() > toIntersect->get_bottom())) {
HXLINE( 115)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 115)			y1 = this->get_bottom();
            		}
HXLINE( 117)		if ((y1 <= y0)) {
HXLINE( 119)			return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 123)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersection,return )

bool Rectangle_obj::intersects( ::lime::math::Rectangle toIntersect){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_128_intersects)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toIntersect,"toIntersect")
HXLINE( 130)		HX_VAR( Float,x0);
HXDLIN( 130)		if ((this->x < toIntersect->x)) {
HXLINE( 130)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 130)			x0 = this->x;
            		}
HXLINE( 131)		HX_VAR( Float,x1);
HXDLIN( 131)		if ((this->get_right() > toIntersect->get_right())) {
HXLINE( 131)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 131)			x1 = this->get_right();
            		}
HXLINE( 133)		if ((x1 <= x0)) {
HXLINE( 135)			return false;
            		}
HXLINE( 139)		HX_VAR( Float,y0);
HXDLIN( 139)		if ((this->y < toIntersect->y)) {
HXLINE( 139)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 139)			y0 = this->y;
            		}
HXLINE( 140)		HX_VAR( Float,y1);
HXDLIN( 140)		if ((this->get_bottom() > toIntersect->get_bottom())) {
HXLINE( 140)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 140)			y1 = this->get_bottom();
            		}
HXLINE( 142)		return (y1 > y0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersects,return )

bool Rectangle_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_149_isEmpty)
            	HX_STACK_THIS(this)
HXLINE( 149)		if (!((this->width <= (int)0))) {
HXLINE( 149)			return (this->height <= (int)0);
            		}
            		else {
HXLINE( 149)			return true;
            		}
HXDLIN( 149)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,isEmpty,return )

void Rectangle_obj::offset(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_154_offset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dx,"dx")
            	HX_STACK_ARG(dy,"dy")
HXLINE( 156)		 ::lime::math::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 156)		_hx_tmp->x = (_hx_tmp->x + dx);
HXLINE( 157)		 ::lime::math::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 157)		_hx_tmp1->y = (_hx_tmp1->y + dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,offset,(void))

void Rectangle_obj::offsetPoint( ::lime::math::Vector2 point){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_162_offsetPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 164)		 ::lime::math::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 164)		_hx_tmp->x = (_hx_tmp->x + point->x);
HXLINE( 165)		 ::lime::math::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 165)		_hx_tmp1->y = (_hx_tmp1->y + point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,offsetPoint,(void))

void Rectangle_obj::setEmpty(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_172_setEmpty)
            	HX_STACK_THIS(this)
HXLINE( 172)		this->x = (this->y = (this->width = (this->height = (int)0)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,setEmpty,(void))

void Rectangle_obj::setTo(Float xa,Float ya,Float widtha,Float heighta){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_177_setTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xa,"xa")
            	HX_STACK_ARG(ya,"ya")
            	HX_STACK_ARG(widtha,"widtha")
            	HX_STACK_ARG(heighta,"heighta")
HXLINE( 179)		this->x = xa;
HXLINE( 180)		this->y = ya;
HXLINE( 181)		this->width = widtha;
HXLINE( 182)		this->height = heighta;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,setTo,(void))

 ::lime::math::Rectangle Rectangle_obj::transform( ::lime::math::Matrix3 m){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_187_transform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(m,"m")
HXLINE( 189)		HX_VARI( Float,tx0) = ((m->a * this->x) + (m->c * this->y));
HXLINE( 190)		HX_VARI( Float,tx1) = tx0;
HXLINE( 191)		HX_VARI( Float,ty0) = ((m->b * this->x) + (m->d * this->y));
HXLINE( 192)		HX_VARI( Float,ty1) = ty0;
HXLINE( 194)		HX_VARI( Float,tx) = ((m->a * (this->x + this->width)) + (m->c * this->y));
HXLINE( 195)		HX_VARI( Float,ty) = ((m->b * (this->x + this->width)) + (m->d * this->y));
HXLINE( 197)		if ((tx < tx0)) {
HXLINE( 197)			tx0 = tx;
            		}
HXLINE( 198)		if ((ty < ty0)) {
HXLINE( 198)			ty0 = ty;
            		}
HXLINE( 199)		if ((tx > tx1)) {
HXLINE( 199)			tx1 = tx;
            		}
HXLINE( 200)		if ((ty > ty1)) {
HXLINE( 200)			ty1 = ty;
            		}
HXLINE( 202)		tx = ((m->a * (this->x + this->width)) + (m->c * (this->y + this->height)));
HXLINE( 203)		ty = ((m->b * (this->x + this->width)) + (m->d * (this->y + this->height)));
HXLINE( 205)		if ((tx < tx0)) {
HXLINE( 205)			tx0 = tx;
            		}
HXLINE( 206)		if ((ty < ty0)) {
HXLINE( 206)			ty0 = ty;
            		}
HXLINE( 207)		if ((tx > tx1)) {
HXLINE( 207)			tx1 = tx;
            		}
HXLINE( 208)		if ((ty > ty1)) {
HXLINE( 208)			ty1 = ty;
            		}
HXLINE( 210)		tx = ((m->a * this->x) + (m->c * (this->y + this->height)));
HXLINE( 211)		ty = ((m->b * this->x) + (m->d * (this->y + this->height)));
HXLINE( 213)		if ((tx < tx0)) {
HXLINE( 213)			tx0 = tx;
            		}
HXLINE( 214)		if ((ty < ty0)) {
HXLINE( 214)			ty0 = ty;
            		}
HXLINE( 215)		if ((tx > tx1)) {
HXLINE( 215)			tx1 = tx;
            		}
HXLINE( 216)		if ((ty > ty1)) {
HXLINE( 216)			ty1 = ty;
            		}
HXLINE( 218)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(tx0 + m->tx),(ty0 + m->ty),(tx1 - tx0),(ty1 - ty0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,transform,return )

 ::lime::math::Rectangle Rectangle_obj::_hx_union( ::lime::math::Rectangle toUnion){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_223_union)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toUnion,"toUnion")
HXLINE( 225)		bool _hx_tmp;
HXDLIN( 225)		if ((this->width != (int)0)) {
HXLINE( 225)			_hx_tmp = (this->height == (int)0);
            		}
            		else {
HXLINE( 225)			_hx_tmp = true;
            		}
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 227)			return toUnion->clone();
            		}
            		else {
HXLINE( 229)			bool _hx_tmp1;
HXDLIN( 229)			if ((toUnion->width != (int)0)) {
HXLINE( 229)				_hx_tmp1 = (toUnion->height == (int)0);
            			}
            			else {
HXLINE( 229)				_hx_tmp1 = true;
            			}
HXDLIN( 229)			if (_hx_tmp1) {
HXLINE( 231)				return this->clone();
            			}
            		}
HXLINE( 235)		HX_VAR( Float,x0);
HXDLIN( 235)		if ((this->x > toUnion->x)) {
HXLINE( 235)			x0 = toUnion->x;
            		}
            		else {
HXLINE( 235)			x0 = this->x;
            		}
HXLINE( 236)		HX_VAR( Float,x1);
HXDLIN( 236)		if ((this->get_right() < toUnion->get_right())) {
HXLINE( 236)			x1 = toUnion->get_right();
            		}
            		else {
HXLINE( 236)			x1 = this->get_right();
            		}
HXLINE( 237)		HX_VAR( Float,y0);
HXDLIN( 237)		if ((this->y > toUnion->y)) {
HXLINE( 237)			y0 = toUnion->y;
            		}
            		else {
HXLINE( 237)			y0 = this->y;
            		}
HXLINE( 238)		HX_VAR( Float,y1);
HXDLIN( 238)		if ((this->get_bottom() < toUnion->get_bottom())) {
HXLINE( 238)			y1 = toUnion->get_bottom();
            		}
            		else {
HXLINE( 238)			y1 = this->get_bottom();
            		}
HXLINE( 240)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,_hx_union,return )

void Rectangle_obj::_hx___contract(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_245___contract)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 247)		bool _hx_tmp;
HXDLIN( 247)		if ((this->width == (int)0)) {
HXLINE( 247)			_hx_tmp = (this->height == (int)0);
            		}
            		else {
HXLINE( 247)			_hx_tmp = false;
            		}
HXDLIN( 247)		if (_hx_tmp) {
HXLINE( 249)			return;
            		}
HXLINE( 256)		if ((this->x < x)) {
HXLINE( 256)			this->x = x;
            		}
HXLINE( 257)		if ((this->y < y)) {
HXLINE( 257)			this->y = y;
            		}
HXLINE( 258)		if ((this->get_right() > (x + width))) {
HXLINE( 258)			this->width = ((x + width) - this->x);
            		}
HXLINE( 259)		if ((this->get_bottom() > (y + height))) {
HXLINE( 259)			this->height = ((y + height) - this->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,_hx___contract,(void))

void Rectangle_obj::_hx___expand(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_264___expand)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 266)		bool _hx_tmp;
HXDLIN( 266)		if ((this->width == (int)0)) {
HXLINE( 266)			_hx_tmp = (this->height == (int)0);
            		}
            		else {
HXLINE( 266)			_hx_tmp = false;
            		}
HXDLIN( 266)		if (_hx_tmp) {
HXLINE( 268)			this->x = x;
HXLINE( 269)			this->y = y;
HXLINE( 270)			this->width = width;
HXLINE( 271)			this->height = height;
HXLINE( 272)			return;
            		}
HXLINE( 276)		HX_VARI( Float,cacheRight) = this->get_right();
HXLINE( 277)		HX_VARI( Float,cacheBottom) = this->get_bottom();
HXLINE( 279)		if ((this->x > x)) {
HXLINE( 279)			this->x = x;
            		}
HXLINE( 280)		if ((this->y > y)) {
HXLINE( 280)			this->y = y;
            		}
HXLINE( 281)		if ((cacheRight < (x + width))) {
HXLINE( 281)			this->width = ((x + width) - this->x);
            		}
HXLINE( 282)		if ((cacheBottom < (y + height))) {
HXLINE( 282)			this->height = ((y + height) - this->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,_hx___expand,(void))

 ::Dynamic Rectangle_obj::_hx___toFlashRectangle(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_292___toFlashRectangle)
            	HX_STACK_THIS(this)
HXLINE( 292)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,_hx___toFlashRectangle,return )

Float Rectangle_obj::get_bottom(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_305_get_bottom)
            	HX_STACK_THIS(this)
HXLINE( 305)		return (this->y + this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottom,return )

Float Rectangle_obj::set_bottom(Float b){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_306_set_bottom)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 306)		this->height = (b - this->y);
HXDLIN( 306)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottom,return )

 ::lime::math::Vector2 Rectangle_obj::get_bottomRight(){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_307_get_bottomRight)
            	HX_STACK_THIS(this)
HXLINE( 307)		return  ::lime::math::Vector2_obj::__alloc( HX_CTX ,(this->x + this->width),(this->y + this->height));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottomRight,return )

 ::lime::math::Vector2 Rectangle_obj::set_bottomRight( ::lime::math::Vector2 p){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_308_set_bottomRight)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE( 308)		this->width = (p->x - this->x);
HXDLIN( 308)		this->height = (p->y - this->y);
HXDLIN( 308)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottomRight,return )

Float Rectangle_obj::get_left(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_309_get_left)
            	HX_STACK_THIS(this)
HXLINE( 309)		return this->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_left,return )

Float Rectangle_obj::set_left(Float l){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_310_set_left)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(l,"l")
HXLINE( 310)		 ::lime::math::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 310)		_hx_tmp->width = (_hx_tmp->width - (l - this->x));
HXDLIN( 310)		this->x = l;
HXDLIN( 310)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_left,return )

Float Rectangle_obj::get_right(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_311_get_right)
            	HX_STACK_THIS(this)
HXLINE( 311)		return (this->x + this->width);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_right,return )

Float Rectangle_obj::set_right(Float r){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_312_set_right)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE( 312)		this->width = (r - this->x);
HXDLIN( 312)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_right,return )

 ::lime::math::Vector2 Rectangle_obj::get_size(){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_313_get_size)
            	HX_STACK_THIS(this)
HXLINE( 313)		return  ::lime::math::Vector2_obj::__alloc( HX_CTX ,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_size,return )

 ::lime::math::Vector2 Rectangle_obj::set_size( ::lime::math::Vector2 p){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_314_set_size)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE( 314)		this->width = p->x;
HXDLIN( 314)		this->height = p->y;
HXDLIN( 314)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_size,return )

Float Rectangle_obj::get_top(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_315_get_top)
            	HX_STACK_THIS(this)
HXLINE( 315)		return this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_top,return )

Float Rectangle_obj::set_top(Float t){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_316_set_top)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE( 316)		 ::lime::math::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 316)		_hx_tmp->height = (_hx_tmp->height - (t - this->y));
HXDLIN( 316)		this->y = t;
HXDLIN( 316)		return t;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_top,return )

 ::lime::math::Vector2 Rectangle_obj::get_topLeft(){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_317_get_topLeft)
            	HX_STACK_THIS(this)
HXLINE( 317)		return  ::lime::math::Vector2_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_topLeft,return )

 ::lime::math::Vector2 Rectangle_obj::set_topLeft( ::lime::math::Vector2 p){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_318_set_topLeft)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE( 318)		this->x = p->x;
HXDLIN( 318)		this->y = p->y;
HXDLIN( 318)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_topLeft,return )


hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	hx::ObjectPtr< Rectangle_obj > __this = new Rectangle_obj();
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	Rectangle_obj *__this = (Rectangle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rectangle_obj), false, "lime.math.Rectangle"));
	*(void **)__this = Rectangle_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

Rectangle_obj::Rectangle_obj()
{
}

hx::Val Rectangle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_top()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_left()); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_size()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_right()); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn()); }
		if (HX_FIELD_EQ(inName,"union") ) { return hx::Val( _hx_union_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bottom()); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn()); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_topLeft()); }
		if (HX_FIELD_EQ(inName,"inflate") ) { return hx::Val( inflate_dyn()); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn()); }
		if (HX_FIELD_EQ(inName,"get_top") ) { return hx::Val( get_top_dyn()); }
		if (HX_FIELD_EQ(inName,"set_top") ) { return hx::Val( set_top_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn()); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"setEmpty") ) { return hx::Val( setEmpty_dyn()); }
		if (HX_FIELD_EQ(inName,"__expand") ) { return hx::Val( _hx___expand_dyn()); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return hx::Val( get_left_dyn()); }
		if (HX_FIELD_EQ(inName,"set_left") ) { return hx::Val( set_left_dyn()); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn()); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform_dyn()); }
		if (HX_FIELD_EQ(inName,"get_right") ) { return hx::Val( get_right_dyn()); }
		if (HX_FIELD_EQ(inName,"set_right") ) { return hx::Val( set_right_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"intersects") ) { return hx::Val( intersects_dyn()); }
		if (HX_FIELD_EQ(inName,"__contract") ) { return hx::Val( _hx___contract_dyn()); }
		if (HX_FIELD_EQ(inName,"get_bottom") ) { return hx::Val( get_bottom_dyn()); }
		if (HX_FIELD_EQ(inName,"set_bottom") ) { return hx::Val( set_bottom_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bottomRight()); }
		if (HX_FIELD_EQ(inName,"offsetPoint") ) { return hx::Val( offsetPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"get_topLeft") ) { return hx::Val( get_topLeft_dyn()); }
		if (HX_FIELD_EQ(inName,"set_topLeft") ) { return hx::Val( set_topLeft_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"containsRect") ) { return hx::Val( containsRect_dyn()); }
		if (HX_FIELD_EQ(inName,"inflatePoint") ) { return hx::Val( inflatePoint_dyn()); }
		if (HX_FIELD_EQ(inName,"intersection") ) { return hx::Val( intersection_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return hx::Val( containsPoint_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_bottomRight") ) { return hx::Val( get_bottomRight_dyn()); }
		if (HX_FIELD_EQ(inName,"set_bottomRight") ) { return hx::Val( set_bottomRight_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__toFlashRectangle") ) { return hx::Val( _hx___toFlashRectangle_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Rectangle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_top(inValue) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_left(inValue) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_right(inValue) ); }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottom(inValue) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_topLeft(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottomRight(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Rectangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65"));
	outFields->push(HX_HCSTRING("bottomRight","\xf1","\xa0","\xf4","\x4e"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("top","\x95","\x66","\x58","\x00"));
	outFields->push(HX_HCSTRING("topLeft","\x3c","\x09","\xc1","\xe8"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Rectangle_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Rectangle_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Rectangle_obj_sStaticStorageInfo = 0;
#endif

static ::String Rectangle_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("containsPoint","\xb1","\xb9","\xeb","\x92"),
	HX_HCSTRING("containsRect","\xe3","\xce","\x1c","\xa6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("inflate","\x87","\x9c","\x1b","\x0c"),
	HX_HCSTRING("inflatePoint","\x49","\xbe","\x39","\x32"),
	HX_HCSTRING("intersection","\x49","\xa2","\x61","\x88"),
	HX_HCSTRING("intersects","\xb4","\xc2","\xeb","\xe3"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("offsetPoint","\xbd","\x37","\x10","\x5f"),
	HX_HCSTRING("setEmpty","\x8b","\xa3","\x0e","\x7e"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("union","\x0f","\x65","\xe7","\xa6"),
	HX_HCSTRING("__contract","\x32","\x52","\xea","\xda"),
	HX_HCSTRING("__expand","\x7a","\x59","\xa2","\x6c"),
	HX_HCSTRING("__toFlashRectangle","\x5a","\x56","\x1a","\x96"),
	HX_HCSTRING("get_bottom","\xb4","\x56","\x00","\x56"),
	HX_HCSTRING("set_bottom","\x28","\xf5","\x7d","\x59"),
	HX_HCSTRING("get_bottomRight","\x88","\x58","\xd6","\x0f"),
	HX_HCSTRING("set_bottomRight","\x94","\xd5","\xa1","\x0b"),
	HX_HCSTRING("get_left","\x90","\xc3","\x6a","\xc7"),
	HX_HCSTRING("set_left","\x04","\x1d","\xc8","\x75"),
	HX_HCSTRING("get_right","\x33","\x68","\x0d","\x2d"),
	HX_HCSTRING("set_right","\x3f","\x54","\x5e","\x10"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("get_top","\x2c","\x2f","\xcd","\x26"),
	HX_HCSTRING("set_top","\x38","\xc0","\xce","\x19"),
	HX_HCSTRING("get_topLeft","\x53","\x69","\xbb","\x6e"),
	HX_HCSTRING("set_topLeft","\x5f","\x70","\x28","\x79"),
	::String(null()) };

static void Rectangle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rectangle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
};

#endif

hx::Class Rectangle_obj::__mClass;

void Rectangle_obj::__register()
{
	hx::Object *dummy = new Rectangle_obj;
	Rectangle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math.Rectangle","\x22","\x67","\x0f","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rectangle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rectangle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rectangle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rectangle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rectangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rectangle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace math
