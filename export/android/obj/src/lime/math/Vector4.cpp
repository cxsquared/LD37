// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_19_new,"lime.math.Vector4","new",0xd5c0ed36,"lime.math.Vector4.new","lime/math/Vector4.hx",19,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_31_add,"lime.math.Vector4","add",0xd5b70ef7,"lime.math.Vector4.add","lime/math/Vector4.hx",31,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_50_clone,"lime.math.Vector4","clone",0x28f191b3,"lime.math.Vector4.clone","lime/math/Vector4.hx",50,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_55_copyFrom,"lime.math.Vector4","copyFrom",0xb64da729,"lime.math.Vector4.copyFrom","lime/math/Vector4.hx",55,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_66_crossProduct,"lime.math.Vector4","crossProduct",0xdc193ff9,"lime.math.Vector4.crossProduct","lime/math/Vector4.hx",66,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_71_decrementBy,"lime.math.Vector4","decrementBy",0xf530fda0,"lime.math.Vector4.decrementBy","lime/math/Vector4.hx",71,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_93_dotProduct,"lime.math.Vector4","dotProduct",0xf4c9f190,"lime.math.Vector4.dotProduct","lime/math/Vector4.hx",93,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_100_equals,"lime.math.Vector4","equals",0x5c12fb29,"lime.math.Vector4.equals","lime/math/Vector4.hx",100,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_105_incrementBy,"lime.math.Vector4","incrementBy",0x3c274cbc,"lime.math.Vector4.incrementBy","lime/math/Vector4.hx",105,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_116_nearEquals,"lime.math.Vector4","nearEquals",0xb54b3b31,"lime.math.Vector4.nearEquals","lime/math/Vector4.hx",116,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_121_negate,"lime.math.Vector4","negate",0x03394eac,"lime.math.Vector4.negate","lime/math/Vector4.hx",121,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_130_normalize,"lime.math.Vector4","normalize",0xecbc98e3,"lime.math.Vector4.normalize","lime/math/Vector4.hx",130,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_147_project,"lime.math.Vector4","project",0xf5d652af,"lime.math.Vector4.project","lime/math/Vector4.hx",147,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_156_scaleBy,"lime.math.Vector4","scaleBy",0x64f27ed7,"lime.math.Vector4.scaleBy","lime/math/Vector4.hx",156,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_165_setTo,"lime.math.Vector4","setTo",0x5abe1013,"lime.math.Vector4.setTo","lime/math/Vector4.hx",165,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_176_subtract,"lime.math.Vector4","subtract",0xe5fe107e,"lime.math.Vector4.subtract","lime/math/Vector4.hx",176,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_183_toString,"lime.math.Vector4","toString",0x265b6c16,"lime.math.Vector4.toString","lime/math/Vector4.hx",183,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_197_get_length,"lime.math.Vector4","get_length",0x4668ce99,"lime.math.Vector4.get_length","lime/math/Vector4.hx",197,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_204_get_lengthSquared,"lime.math.Vector4","get_lengthSquared",0xe5b2d78e,"lime.math.Vector4.get_lengthSquared","lime/math/Vector4.hx",204,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_36_angleBetween,"lime.math.Vector4","angleBetween",0xe2247e9f,"lime.math.Vector4.angleBetween","lime/math/Vector4.hx",36,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_80_distance,"lime.math.Vector4","distance",0x59e62e9f,"lime.math.Vector4.distance","lime/math/Vector4.hx",80,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_211_get_X_AXIS,"lime.math.Vector4","get_X_AXIS",0xb513fadb,"lime.math.Vector4.get_X_AXIS","lime/math/Vector4.hx",211,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_218_get_Y_AXIS,"lime.math.Vector4","get_Y_AXIS",0x1b6f573a,"lime.math.Vector4.get_Y_AXIS","lime/math/Vector4.hx",218,0x7257bf5a)
HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_225_get_Z_AXIS,"lime.math.Vector4","get_Z_AXIS",0x81cab399,"lime.math.Vector4.get_Z_AXIS","lime/math/Vector4.hx",225,0x7257bf5a)
namespace lime{
namespace math{

void Vector4_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w){
Float x = __o_x.Default(((Float)0.));
Float y = __o_y.Default(((Float)0.));
Float z = __o_z.Default(((Float)0.));
Float w = __o_w.Default(((Float)0.));
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_19_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(w,"w")
HXLINE(  21)		this->w = w;
HXLINE(  22)		this->x = x;
HXLINE(  23)		this->y = y;
HXLINE(  24)		this->z = z;
            	}

Dynamic Vector4_obj::__CreateEmpty() { return new Vector4_obj; }

void *Vector4_obj::_hx_vtable = 0;

Dynamic Vector4_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector4_obj > _hx_result = new Vector4_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Vector4_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x682e4a34;
}

 ::lime::math::Vector4 Vector4_obj::add( ::lime::math::Vector4 a){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_31_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE(  31)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(this->x + a->x),(this->y + a->y),(this->z + a->z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,add,return )

 ::lime::math::Vector4 Vector4_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_50_clone)
            	HX_STACK_THIS(this)
HXLINE(  50)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,this->x,this->y,this->z,this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,clone,return )

void Vector4_obj::copyFrom( ::lime::math::Vector4 sourceVector4){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_55_copyFrom)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceVector4,"sourceVector4")
HXLINE(  57)		this->x = sourceVector4->x;
HXLINE(  58)		this->y = sourceVector4->y;
HXLINE(  59)		this->z = sourceVector4->z;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,copyFrom,(void))

 ::lime::math::Vector4 Vector4_obj::crossProduct( ::lime::math::Vector4 a){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_66_crossProduct)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE(  66)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,((this->y * a->z) - (this->z * a->y)),((this->z * a->x) - (this->x * a->z)),((this->x * a->y) - (this->y * a->x)),(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,crossProduct,return )

void Vector4_obj::decrementBy( ::lime::math::Vector4 a){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_71_decrementBy)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE(  73)		 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  73)		_hx_tmp->x = (_hx_tmp->x - a->x);
HXLINE(  74)		 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  74)		_hx_tmp1->y = (_hx_tmp1->y - a->y);
HXLINE(  75)		 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  75)		_hx_tmp2->z = (_hx_tmp2->z - a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,decrementBy,(void))

Float Vector4_obj::dotProduct( ::lime::math::Vector4 a){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_93_dotProduct)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE(  93)		return (((this->x * a->x) + (this->y * a->y)) + (this->z * a->z));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,dotProduct,return )

bool Vector4_obj::equals( ::lime::math::Vector4 toCompare, ::Dynamic __o_allFour){
 ::Dynamic allFour = __o_allFour.Default(false);
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_100_equals)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toCompare,"toCompare")
            	HX_STACK_ARG(allFour,"allFour")
HXLINE( 100)		bool _hx_tmp;
HXDLIN( 100)		bool _hx_tmp1;
HXDLIN( 100)		if ((this->x == toCompare->x)) {
HXLINE( 100)			_hx_tmp1 = (this->y == toCompare->y);
            		}
            		else {
HXLINE( 100)			_hx_tmp1 = false;
            		}
HXDLIN( 100)		if (_hx_tmp1) {
HXLINE( 100)			_hx_tmp = (this->z == toCompare->z);
            		}
            		else {
HXLINE( 100)			_hx_tmp = false;
            		}
HXDLIN( 100)		if (_hx_tmp) {
HXLINE( 100)			if (!(!(allFour))) {
HXLINE( 100)				return (this->w == toCompare->w);
            			}
            			else {
HXLINE( 100)				return true;
            			}
            		}
            		else {
HXLINE( 100)			return false;
            		}
HXDLIN( 100)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector4_obj,equals,return )

void Vector4_obj::incrementBy( ::lime::math::Vector4 a){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_105_incrementBy)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE( 107)		 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 107)		_hx_tmp->x = (_hx_tmp->x + a->x);
HXLINE( 108)		 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 108)		_hx_tmp1->y = (_hx_tmp1->y + a->y);
HXLINE( 109)		 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 109)		_hx_tmp2->z = (_hx_tmp2->z + a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,incrementBy,(void))

bool Vector4_obj::nearEquals( ::lime::math::Vector4 toCompare,Float tolerance, ::Dynamic __o_allFour){
 ::Dynamic allFour = __o_allFour.Default(false);
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_116_nearEquals)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toCompare,"toCompare")
            	HX_STACK_ARG(tolerance,"tolerance")
            	HX_STACK_ARG(allFour,"allFour")
HXLINE( 116)		bool _hx_tmp;
HXDLIN( 116)		bool _hx_tmp1;
HXDLIN( 116)		if ((::Math_obj::abs((this->x - toCompare->x)) < tolerance)) {
HXLINE( 116)			_hx_tmp1 = (::Math_obj::abs((this->y - toCompare->y)) < tolerance);
            		}
            		else {
HXLINE( 116)			_hx_tmp1 = false;
            		}
HXDLIN( 116)		if (_hx_tmp1) {
HXLINE( 116)			_hx_tmp = (::Math_obj::abs((this->z - toCompare->z)) < tolerance);
            		}
            		else {
HXLINE( 116)			_hx_tmp = false;
            		}
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 116)			if (!(!(allFour))) {
HXLINE( 116)				return (::Math_obj::abs((this->w - toCompare->w)) < tolerance);
            			}
            			else {
HXLINE( 116)				return true;
            			}
            		}
            		else {
HXLINE( 116)			return false;
            		}
HXDLIN( 116)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector4_obj,nearEquals,return )

void Vector4_obj::negate(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_121_negate)
            	HX_STACK_THIS(this)
HXLINE( 123)		 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 123)		_hx_tmp->x = (_hx_tmp->x * (int)-1);
HXLINE( 124)		 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 124)		_hx_tmp1->y = (_hx_tmp1->y * (int)-1);
HXLINE( 125)		 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 125)		_hx_tmp2->z = (_hx_tmp2->z * (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,negate,(void))

Float Vector4_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_130_normalize)
            	HX_STACK_THIS(this)
HXLINE( 132)		HX_VARI( Float,l) = ::Math_obj::sqrt((((this->x * this->x) + (this->y * this->y)) + (this->z * this->z)));
HXLINE( 134)		if ((l != (int)0)) {
HXLINE( 136)			 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 136)			_hx_tmp->x = ((Float)_hx_tmp->x / (Float)l);
HXLINE( 137)			 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 137)			_hx_tmp1->y = ((Float)_hx_tmp1->y / (Float)l);
HXLINE( 138)			 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 138)			_hx_tmp2->z = ((Float)_hx_tmp2->z / (Float)l);
            		}
HXLINE( 142)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,normalize,return )

void Vector4_obj::project(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_147_project)
            	HX_STACK_THIS(this)
HXLINE( 149)		 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 149)		_hx_tmp->x = ((Float)_hx_tmp->x / (Float)this->w);
HXLINE( 150)		 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 150)		_hx_tmp1->y = ((Float)_hx_tmp1->y / (Float)this->w);
HXLINE( 151)		 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 151)		_hx_tmp2->z = ((Float)_hx_tmp2->z / (Float)this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,project,(void))

void Vector4_obj::scaleBy(Float s){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_156_scaleBy)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 158)		 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 158)		_hx_tmp->x = (_hx_tmp->x * s);
HXLINE( 159)		 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 159)		_hx_tmp1->y = (_hx_tmp1->y * s);
HXLINE( 160)		 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 160)		_hx_tmp2->z = (_hx_tmp2->z * s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,scaleBy,(void))

void Vector4_obj::setTo(Float xa,Float ya,Float za){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_165_setTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xa,"xa")
            	HX_STACK_ARG(ya,"ya")
            	HX_STACK_ARG(za,"za")
HXLINE( 167)		this->x = xa;
HXLINE( 168)		this->y = ya;
HXLINE( 169)		this->z = za;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector4_obj,setTo,(void))

 ::lime::math::Vector4 Vector4_obj::subtract( ::lime::math::Vector4 a){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_176_subtract)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE( 176)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(this->x - a->x),(this->y - a->y),(this->z - a->z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,subtract,return )

::String Vector4_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_183_toString)
            	HX_STACK_THIS(this)
HXLINE( 183)		return ((((((HX_("Vector4(",17,91,6f,48) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(", ",74,26,00,00)) + this->z) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,toString,return )

Float Vector4_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_197_get_length)
            	HX_STACK_THIS(this)
HXLINE( 197)		return ::Math_obj::sqrt((((this->x * this->x) + (this->y * this->y)) + (this->z * this->z)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,get_length,return )

Float Vector4_obj::get_lengthSquared(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_204_get_lengthSquared)
            	HX_STACK_THIS(this)
HXLINE( 204)		return (((this->x * this->x) + (this->y * this->y)) + (this->z * this->z));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,get_lengthSquared,return )

 ::lime::math::Vector4 Vector4_obj::X_AXIS;

 ::lime::math::Vector4 Vector4_obj::Y_AXIS;

 ::lime::math::Vector4 Vector4_obj::Z_AXIS;

Float Vector4_obj::angleBetween( ::lime::math::Vector4 a, ::lime::math::Vector4 b){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_36_angleBetween)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  38)		HX_VARI(  ::lime::math::Vector4,a0) =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,a->x,a->y,a->z,a->w);
HXLINE(  39)		{
HXLINE(  39)			HX_VARI( Float,l) = ::Math_obj::sqrt((((a0->x * a0->x) + (a0->y * a0->y)) + (a0->z * a0->z)));
HXDLIN(  39)			if ((l != (int)0)) {
HXLINE(  39)				a0->x = ((Float)a0->x / (Float)l);
HXDLIN(  39)				a0->y = ((Float)a0->y / (Float)l);
HXDLIN(  39)				a0->z = ((Float)a0->z / (Float)l);
            			}
            		}
HXLINE(  40)		HX_VARI(  ::lime::math::Vector4,b0) =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,b->x,b->y,b->z,b->w);
HXLINE(  41)		{
HXLINE(  41)			HX_VARI_NAME( Float,l1,"l") = ::Math_obj::sqrt((((b0->x * b0->x) + (b0->y * b0->y)) + (b0->z * b0->z)));
HXDLIN(  41)			if ((l1 != (int)0)) {
HXLINE(  41)				b0->x = ((Float)b0->x / (Float)l1);
HXDLIN(  41)				b0->y = ((Float)b0->y / (Float)l1);
HXDLIN(  41)				b0->z = ((Float)b0->z / (Float)l1);
            			}
            		}
HXLINE(  43)		return ::Math_obj::acos((((a0->x * b0->x) + (a0->y * b0->y)) + (a0->z * b0->z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector4_obj,angleBetween,return )

Float Vector4_obj::distance( ::lime::math::Vector4 pt1, ::lime::math::Vector4 pt2){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_80_distance)
            	HX_STACK_ARG(pt1,"pt1")
            	HX_STACK_ARG(pt2,"pt2")
HXLINE(  82)		HX_VARI( Float,x) = (pt2->x - pt1->x);
HXLINE(  83)		HX_VARI( Float,y) = (pt2->y - pt1->y);
HXLINE(  84)		HX_VARI( Float,z) = (pt2->z - pt1->z);
HXLINE(  86)		return ::Math_obj::sqrt((((x * x) + (y * y)) + (z * z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector4_obj,distance,return )

 ::lime::math::Vector4 Vector4_obj::get_X_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_211_get_X_AXIS)
HXLINE( 211)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,get_X_AXIS,return )

 ::lime::math::Vector4 Vector4_obj::get_Y_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_218_get_Y_AXIS)
HXLINE( 218)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)0,(int)1,(int)0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,get_Y_AXIS,return )

 ::lime::math::Vector4 Vector4_obj::get_Z_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_225_get_Z_AXIS)
HXLINE( 225)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,get_Z_AXIS,return )


hx::ObjectPtr< Vector4_obj > Vector4_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w) {
	hx::ObjectPtr< Vector4_obj > __this = new Vector4_obj();
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

hx::ObjectPtr< Vector4_obj > Vector4_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w) {
	Vector4_obj *__this = (Vector4_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vector4_obj), false, "lime.math.Vector4"));
	*(void **)__this = Vector4_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

Vector4_obj::Vector4_obj()
{
}

hx::Val Vector4_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w); }
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( inCallProp == hx::paccAlways ? get_length() : length); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn()); }
		if (HX_FIELD_EQ(inName,"negate") ) { return hx::Val( negate_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"project") ) { return hx::Val( project_dyn()); }
		if (HX_FIELD_EQ(inName,"scaleBy") ) { return hx::Val( scaleBy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dotProduct") ) { return hx::Val( dotProduct_dyn()); }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { return hx::Val( nearEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"decrementBy") ) { return hx::Val( decrementBy_dyn()); }
		if (HX_FIELD_EQ(inName,"incrementBy") ) { return hx::Val( incrementBy_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"crossProduct") ) { return hx::Val( crossProduct_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthSquared") ) { return hx::Val( inCallProp == hx::paccAlways ? get_lengthSquared() : lengthSquared); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_lengthSquared") ) { return hx::Val( get_lengthSquared_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vector4_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"X_AXIS") ) { outValue = inCallProp == hx::paccAlways ? get_X_AXIS() : X_AXIS; return true; }
		if (HX_FIELD_EQ(inName,"Y_AXIS") ) { outValue = inCallProp == hx::paccAlways ? get_Y_AXIS() : Y_AXIS; return true; }
		if (HX_FIELD_EQ(inName,"Z_AXIS") ) { outValue = inCallProp == hx::paccAlways ? get_Z_AXIS() : Z_AXIS; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_X_AXIS") ) { outValue = get_X_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Y_AXIS") ) { outValue = get_Y_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Z_AXIS") ) { outValue = get_Z_AXIS_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleBetween") ) { outValue = angleBetween_dyn(); return true; }
	}
	return false;
}

hx::Val Vector4_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthSquared") ) { lengthSquared=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Vector4_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"X_AXIS") ) { X_AXIS=ioValue.Cast<  ::lime::math::Vector4 >(); return true; }
		if (HX_FIELD_EQ(inName,"Y_AXIS") ) { Y_AXIS=ioValue.Cast<  ::lime::math::Vector4 >(); return true; }
		if (HX_FIELD_EQ(inName,"Z_AXIS") ) { Z_AXIS=ioValue.Cast<  ::lime::math::Vector4 >(); return true; }
	}
	return false;
}

void Vector4_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("lengthSquared","\xe1","\x24","\x45","\x35"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Vector4_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Vector4_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsFloat,(int)offsetof(Vector4_obj,lengthSquared),HX_HCSTRING("lengthSquared","\xe1","\x24","\x45","\x35")},
	{hx::fsFloat,(int)offsetof(Vector4_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector4_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector4_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector4_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Vector4_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::math::Vector4*/ ,(void *) &Vector4_obj::X_AXIS,HX_HCSTRING("X_AXIS","\x28","\xc1","\xb2","\x0d")},
	{hx::fsObject /*::lime::math::Vector4*/ ,(void *) &Vector4_obj::Y_AXIS,HX_HCSTRING("Y_AXIS","\x87","\x1d","\x0e","\x74")},
	{hx::fsObject /*::lime::math::Vector4*/ ,(void *) &Vector4_obj::Z_AXIS,HX_HCSTRING("Z_AXIS","\xe6","\x79","\x69","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Vector4_obj_sMemberFields[] = {
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("lengthSquared","\xe1","\x24","\x45","\x35"),
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("crossProduct","\x8f","\xa7","\xc9","\x63"),
	HX_HCSTRING("decrementBy","\xca","\x1a","\x7a","\xad"),
	HX_HCSTRING("dotProduct","\xa6","\x27","\xf0","\x3d"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("incrementBy","\xe6","\x69","\x70","\xf4"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("project","\xd9","\x12","\xeb","\xf5"),
	HX_HCSTRING("scaleBy","\x01","\x3f","\x07","\x65"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_lengthSquared","\x38","\x30","\xb5","\x3b"),
	::String(null()) };

static void Vector4_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vector4_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Vector4_obj::X_AXIS,"X_AXIS");
	HX_MARK_MEMBER_NAME(Vector4_obj::Y_AXIS,"Y_AXIS");
	HX_MARK_MEMBER_NAME(Vector4_obj::Z_AXIS,"Z_AXIS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vector4_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vector4_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Vector4_obj::X_AXIS,"X_AXIS");
	HX_VISIT_MEMBER_NAME(Vector4_obj::Y_AXIS,"Y_AXIS");
	HX_VISIT_MEMBER_NAME(Vector4_obj::Z_AXIS,"Z_AXIS");
};

#endif

hx::Class Vector4_obj::__mClass;

static ::String Vector4_obj_sStaticFields[] = {
	HX_HCSTRING("X_AXIS","\x28","\xc1","\xb2","\x0d"),
	HX_HCSTRING("Y_AXIS","\x87","\x1d","\x0e","\x74"),
	HX_HCSTRING("Z_AXIS","\xe6","\x79","\x69","\xda"),
	HX_HCSTRING("angleBetween","\x35","\xe6","\xd4","\x69"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("get_X_AXIS","\xf1","\x30","\x3a","\xfe"),
	HX_HCSTRING("get_Y_AXIS","\x50","\x8d","\x95","\x64"),
	HX_HCSTRING("get_Z_AXIS","\xaf","\xe9","\xf0","\xca"),
	::String(null())
};

void Vector4_obj::__register()
{
	hx::Object *dummy = new Vector4_obj;
	Vector4_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math.Vector4","\x44","\xda","\x50","\x4d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vector4_obj::__GetStatic;
	__mClass->mSetStaticField = &Vector4_obj::__SetStatic;
	__mClass->mMarkFunc = Vector4_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vector4_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vector4_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vector4_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vector4_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector4_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector4_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace math
