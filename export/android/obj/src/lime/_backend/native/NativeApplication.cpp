// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeApplication
#include <lime/_backend/native/NativeApplication.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeRenderer
#include <lime/_backend/native/NativeRenderer.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_ApplicationEventInfo
#include <lime/_backend/native/_NativeApplication/ApplicationEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_DropEventInfo
#include <lime/_backend/native/_NativeApplication/DropEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_GamepadEventInfo
#include <lime/_backend/native/_NativeApplication/GamepadEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_JoystickEventInfo
#include <lime/_backend/native/_NativeApplication/JoystickEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_KeyEventInfo
#include <lime/_backend/native/_NativeApplication/KeyEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_MouseEventInfo
#include <lime/_backend/native/_NativeApplication/MouseEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_RenderEventInfo
#include <lime/_backend/native/_NativeApplication/RenderEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_SensorEventInfo
#include <lime/_backend/native/_NativeApplication/SensorEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_TextEventInfo
#include <lime/_backend/native/_NativeApplication/TextEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_TouchEventInfo
#include <lime/_backend/native/_NativeApplication/TouchEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_WindowEventInfo
#include <lime/_backend/native/_NativeApplication/WindowEventInfo.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Event_Float_Float_Float_Void
#include <lime/app/Event_Float_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_Float_Float_Int_Void
#include <lime/app/Event_Float_Float_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_Float_Float_Void
#include <lime/app/Event_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_Int_Float_Void
#include <lime/app/Event_Int_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_Int_Int_Void
#include <lime/app/Event_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_Int_Void
#include <lime/app/Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_Int_lime_ui_JoystickHatPosition_Void
#include <lime/app/Event_Int_lime_ui_JoystickHatPosition_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_String_Int_Int_Void
#include <lime/app/Event_String_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_String_Void
#include <lime/app/Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_Void_Void
#include <lime/app/Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_lime_graphics_RenderContext_Void
#include <lime/app/Event_lime_graphics_RenderContext_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_lime_ui_GamepadAxis_Float_Void
#include <lime/app/Event_lime_ui_GamepadAxis_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_lime_ui_GamepadButton_Void
#include <lime/app/Event_lime_ui_GamepadButton_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_lime_ui_Touch_Void
#include <lime/app/Event_lime_ui_Touch_Void.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_audio_AudioContext
#include <lime/audio/AudioContext.h>
#endif
#ifndef INCLUDED_lime_audio_AudioManager
#include <lime/audio/AudioManager.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Renderer
#include <lime/graphics/Renderer.h>
#endif
#ifndef INCLUDED_lime_system_Sensor
#include <lime/system/Sensor.h>
#endif
#ifndef INCLUDED_lime_system_SensorType
#include <lime/system/SensorType.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_ui_Gamepad
#include <lime/ui/Gamepad.h>
#endif
#ifndef INCLUDED_lime_ui_Joystick
#include <lime/ui/Joystick.h>
#endif
#ifndef INCLUDED_lime_ui_Touch
#include <lime/ui/Touch.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_40_new,"lime._backend.native.NativeApplication","new",0xf81a1e94,"lime._backend.native.NativeApplication.new","lime/_backend/native/NativeApplication.hx",40,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_80_create,"lime._backend.native.NativeApplication","create",0xd50cf148,"lime._backend.native.NativeApplication.create","lime/_backend/native/NativeApplication.hx",80,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_86_exec,"lime._backend.native.NativeApplication","exec",0x18dc12dd,"lime._backend.native.NativeApplication.exec","lime/_backend/native/NativeApplication.hx",86,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_146_exit,"lime._backend.native.NativeApplication","exit",0x18dc166a,"lime._backend.native.NativeApplication.exit","lime/_backend/native/NativeApplication.hx",146,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_157_getFrameRate,"lime._backend.native.NativeApplication","getFrameRate",0xe79bf983,"lime._backend.native.NativeApplication.getFrameRate","lime/_backend/native/NativeApplication.hx",157,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_164_handleApplicationEvent,"lime._backend.native.NativeApplication","handleApplicationEvent",0x44389cbe,"lime._backend.native.NativeApplication.handleApplicationEvent","lime/_backend/native/NativeApplication.hx",164,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_182_handleDropEvent,"lime._backend.native.NativeApplication","handleDropEvent",0xe00568d7,"lime._backend.native.NativeApplication.handleDropEvent","lime/_backend/native/NativeApplication.hx",182,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_193_handleGamepadEvent,"lime._backend.native.NativeApplication","handleGamepadEvent",0x54f9e7cd,"lime._backend.native.NativeApplication.handleGamepadEvent","lime/_backend/native/NativeApplication.hx",193,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_225_handleJoystickEvent,"lime._backend.native.NativeApplication","handleJoystickEvent",0xefd0c72a,"lime._backend.native.NativeApplication.handleJoystickEvent","lime/_backend/native/NativeApplication.hx",225,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_265_handleKeyEvent,"lime._backend.native.NativeApplication","handleKeyEvent",0xe8484c0f,"lime._backend.native.NativeApplication.handleKeyEvent","lime/_backend/native/NativeApplication.hx",265,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_318_handleMouseEvent,"lime._backend.native.NativeApplication","handleMouseEvent",0xe26e46c9,"lime._backend.native.NativeApplication.handleMouseEvent","lime/_backend/native/NativeApplication.hx",318,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_354_handleRenderEvent,"lime._backend.native.NativeApplication","handleRenderEvent",0xf3931b50,"lime._backend.native.NativeApplication.handleRenderEvent","lime/_backend/native/NativeApplication.hx",354,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_396_handleSensorEvent,"lime._backend.native.NativeApplication","handleSensorEvent",0x6e3cd9ec,"lime._backend.native.NativeApplication.handleSensorEvent","lime/_backend/native/NativeApplication.hx",396,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_409_handleTextEvent,"lime._backend.native.NativeApplication","handleTextEvent",0x373acb99,"lime._backend.native.NativeApplication.handleTextEvent","lime/_backend/native/NativeApplication.hx",409,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_436_handleTouchEvent,"lime._backend.native.NativeApplication","handleTouchEvent",0xbe3236ef,"lime._backend.native.NativeApplication.handleTouchEvent","lime/_backend/native/NativeApplication.hx",436,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_504_handleWindowEvent,"lime._backend.native.NativeApplication","handleWindowEvent",0x18b48476,"lime._backend.native.NativeApplication.handleWindowEvent","lime/_backend/native/NativeApplication.hx",504,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_581_setFrameRate,"lime._backend.native.NativeApplication","setFrameRate",0xfc951cf7,"lime._backend.native.NativeApplication.setFrameRate","lime/_backend/native/NativeApplication.hx",581,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_588_updateTimer,"lime._backend.native.NativeApplication","updateTimer",0x8a9bcb30,"lime._backend.native.NativeApplication.updateTimer","lime/_backend/native/NativeApplication.hx",588,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_617_updateTimer,"lime._backend.native.NativeApplication","updateTimer",0x8a9bcb30,"lime._backend.native.NativeApplication.updateTimer","lime/_backend/native/NativeApplication.hx",617,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_627_lime_application_create,"lime._backend.native.NativeApplication","lime_application_create",0xc9ec45a9,"lime._backend.native.NativeApplication.lime_application_create","lime/_backend/native/NativeApplication.hx",627,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_628_lime_application_event_manager_register,"lime._backend.native.NativeApplication","lime_application_event_manager_register",0x68200767,"lime._backend.native.NativeApplication.lime_application_event_manager_register","lime/_backend/native/NativeApplication.hx",628,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_629_lime_application_exec,"lime._backend.native.NativeApplication","lime_application_exec",0x469bdcfe,"lime._backend.native.NativeApplication.lime_application_exec","lime/_backend/native/NativeApplication.hx",629,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_630_lime_application_init,"lime._backend.native.NativeApplication","lime_application_init",0x4939247d,"lime._backend.native.NativeApplication.lime_application_init","lime/_backend/native/NativeApplication.hx",630,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_631_lime_application_quit,"lime._backend.native.NativeApplication","lime_application_quit",0x4e88293c,"lime._backend.native.NativeApplication.lime_application_quit","lime/_backend/native/NativeApplication.hx",631,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_632_lime_application_set_frame_rate,"lime._backend.native.NativeApplication","lime_application_set_frame_rate",0x54d277dc,"lime._backend.native.NativeApplication.lime_application_set_frame_rate","lime/_backend/native/NativeApplication.hx",632,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_633_lime_application_update,"lime._backend.native.NativeApplication","lime_application_update",0xd4e264b6,"lime._backend.native.NativeApplication.lime_application_update","lime/_backend/native/NativeApplication.hx",633,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_634_lime_drop_event_manager_register,"lime._backend.native.NativeApplication","lime_drop_event_manager_register",0x245381ec,"lime._backend.native.NativeApplication.lime_drop_event_manager_register","lime/_backend/native/NativeApplication.hx",634,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_635_lime_gamepad_event_manager_register,"lime._backend.native.NativeApplication","lime_gamepad_event_manager_register",0x8dba5536,"lime._backend.native.NativeApplication.lime_gamepad_event_manager_register","lime/_backend/native/NativeApplication.hx",635,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_636_lime_joystick_event_manager_register,"lime._backend.native.NativeApplication","lime_joystick_event_manager_register",0xdfabe3ff,"lime._backend.native.NativeApplication.lime_joystick_event_manager_register","lime/_backend/native/NativeApplication.hx",636,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_637_lime_key_event_manager_register,"lime._backend.native.NativeApplication","lime_key_event_manager_register",0x6e7184f8,"lime._backend.native.NativeApplication.lime_key_event_manager_register","lime/_backend/native/NativeApplication.hx",637,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_638_lime_mouse_event_manager_register,"lime._backend.native.NativeApplication","lime_mouse_event_manager_register",0x6e6b1cb2,"lime._backend.native.NativeApplication.lime_mouse_event_manager_register","lime/_backend/native/NativeApplication.hx",638,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_639_lime_render_event_manager_register,"lime._backend.native.NativeApplication","lime_render_event_manager_register",0xd5f19025,"lime._backend.native.NativeApplication.lime_render_event_manager_register","lime/_backend/native/NativeApplication.hx",639,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_640_lime_sensor_event_manager_register,"lime._backend.native.NativeApplication","lime_sensor_event_manager_register",0xf7db25c1,"lime._backend.native.NativeApplication.lime_sensor_event_manager_register","lime/_backend/native/NativeApplication.hx",640,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_641_lime_text_event_manager_register,"lime._backend.native.NativeApplication","lime_text_event_manager_register",0x4272bd2e,"lime._backend.native.NativeApplication.lime_text_event_manager_register","lime/_backend/native/NativeApplication.hx",641,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_642_lime_touch_event_manager_register,"lime._backend.native.NativeApplication","lime_touch_event_manager_register",0x79dc0e58,"lime._backend.native.NativeApplication.lime_touch_event_manager_register","lime/_backend/native/NativeApplication.hx",642,0xb13849fd)
HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_643_lime_window_event_manager_register,"lime._backend.native.NativeApplication","lime_window_event_manager_register",0xf4923acb,"lime._backend.native.NativeApplication.lime_window_event_manager_register","lime/_backend/native/NativeApplication.hx",643,0xb13849fd)
namespace lime{
namespace _backend{
namespace native{

void NativeApplication_obj::__construct( ::lime::app::Application parent){
            	HX_GC_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_40_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
HXLINE(  55)		this->windowEventInfo =  ::lime::_backend::native::_NativeApplication::WindowEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  54)		this->unusedTouchesPool =  ::List_obj::__alloc( HX_CTX );
HXLINE(  53)		this->touchEventInfo =  ::lime::_backend::native::_NativeApplication::TouchEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  52)		this->textEventInfo =  ::lime::_backend::native::_NativeApplication::TextEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  51)		this->sensorEventInfo =  ::lime::_backend::native::_NativeApplication::SensorEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  50)		this->renderEventInfo =  ::lime::_backend::native::_NativeApplication::RenderEventInfo_obj::__alloc( HX_CTX ,(int)0,null());
HXLINE(  49)		this->mouseEventInfo =  ::lime::_backend::native::_NativeApplication::MouseEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE(  48)		this->keyEventInfo =  ::lime::_backend::native::_NativeApplication::KeyEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  47)		this->joystickEventInfo =  ::lime::_backend::native::_NativeApplication::JoystickEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  46)		this->gamepadEventInfo =  ::lime::_backend::native::_NativeApplication::GamepadEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  45)		this->dropEventInfo =  ::lime::_backend::native::_NativeApplication::DropEventInfo_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  44)		this->currentTouches =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  43)		this->applicationEventInfo =  ::lime::_backend::native::_NativeApplication::ApplicationEventInfo_obj::__alloc( HX_CTX ,(int)0,null());
HXLINE(  65)		this->parent = parent;
HXLINE(  66)		this->frameRate = (int)60;
HXLINE(  68)		::lime::audio::AudioManager_obj::init(null());
HXLINE(  71)		::lime::_hx_system::Sensor_obj::registerSensor(::lime::_hx_system::SensorType_obj::ACCELEROMETER_dyn(),(int)0);
            	}

Dynamic NativeApplication_obj::__CreateEmpty() { return new NativeApplication_obj; }

void *NativeApplication_obj::_hx_vtable = 0;

Dynamic NativeApplication_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeApplication_obj > _hx_result = new NativeApplication_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NativeApplication_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2b552ab8;
}

void NativeApplication_obj::create( ::Dynamic config){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_80_create)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(config,"config")
HXLINE(  80)		this->handle = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeApplication_obj,create,(void))

int NativeApplication_obj::exec(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_86_exec)
            	HX_STACK_THIS(this)
HXLINE( 132)		this->parent->onExit->dispatch((int)0);
HXLINE( 134)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,exec,return )

void NativeApplication_obj::exit(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_146_exit)
            	HX_STACK_THIS(this)
HXLINE( 146)		::lime::audio::AudioManager_obj::shutdown();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,exit,(void))

Float NativeApplication_obj::getFrameRate(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_157_getFrameRate)
            	HX_STACK_THIS(this)
HXLINE( 157)		return this->frameRate;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,getFrameRate,return )

void NativeApplication_obj::handleApplicationEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_164_handleApplicationEvent)
            	HX_STACK_THIS(this)
HXLINE( 164)		switch((int)(this->applicationEventInfo->type)){
            			case (int)0: {
HXLINE( 168)				this->updateTimer();
HXLINE( 169)				this->parent->onUpdate->dispatch(this->applicationEventInfo->deltaTime);
            			}
            			break;
            			case (int)1: {
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleApplicationEvent,(void))

void NativeApplication_obj::handleDropEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_182_handleDropEvent)
            	HX_STACK_THIS(this)
HXLINE( 182)		HX_VARI( int,_g) = (int)0;
HXDLIN( 182)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->parent->windows;
HXDLIN( 182)		while((_g < _g1->length)){
HXLINE( 182)			HX_VARI(  ::lime::ui::Window,window) = _g1->__get(_g).StaticCast<  ::lime::ui::Window >();
HXDLIN( 182)			_g = (_g + (int)1);
HXLINE( 184)			window->onDropFile->dispatch(this->dropEventInfo->file);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleDropEvent,(void))

void NativeApplication_obj::handleGamepadEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_193_handleGamepadEvent)
            	HX_STACK_THIS(this)
HXLINE( 193)		switch((int)(this->gamepadEventInfo->type)){
            			case (int)0: {
HXLINE( 197)				HX_VARI(  ::lime::ui::Gamepad,gamepad) = ( ( ::lime::ui::Gamepad)(::haxe::IMap_obj::get(::lime::ui::Gamepad_obj::devices,this->gamepadEventInfo->id)) );
HXLINE( 198)				if (hx::IsNotNull( gamepad )) {
HXLINE( 198)					gamepad->onAxisMove->dispatch(this->gamepadEventInfo->axis,this->gamepadEventInfo->value);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 202)				HX_VARI_NAME(  ::lime::ui::Gamepad,gamepad1,"gamepad") = ( ( ::lime::ui::Gamepad)(::haxe::IMap_obj::get(::lime::ui::Gamepad_obj::devices,this->gamepadEventInfo->id)) );
HXLINE( 203)				if (hx::IsNotNull( gamepad1 )) {
HXLINE( 203)					gamepad1->onButtonDown->dispatch(this->gamepadEventInfo->button);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 207)				HX_VARI_NAME(  ::lime::ui::Gamepad,gamepad2,"gamepad") = ( ( ::lime::ui::Gamepad)(::haxe::IMap_obj::get(::lime::ui::Gamepad_obj::devices,this->gamepadEventInfo->id)) );
HXLINE( 208)				if (hx::IsNotNull( gamepad2 )) {
HXLINE( 208)					gamepad2->onButtonUp->dispatch(this->gamepadEventInfo->button);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 212)				::lime::ui::Gamepad_obj::_hx___connect(this->gamepadEventInfo->id);
            			}
            			break;
            			case (int)4: {
HXLINE( 216)				::lime::ui::Gamepad_obj::_hx___disconnect(this->gamepadEventInfo->id);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleGamepadEvent,(void))

void NativeApplication_obj::handleJoystickEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_225_handleJoystickEvent)
            	HX_STACK_THIS(this)
HXLINE( 225)		switch((int)(this->joystickEventInfo->type)){
            			case (int)0: {
HXLINE( 229)				HX_VARI(  ::lime::ui::Joystick,joystick) = ( ( ::lime::ui::Joystick)(::haxe::IMap_obj::get(::lime::ui::Joystick_obj::devices,this->joystickEventInfo->id)) );
HXLINE( 230)				if (hx::IsNotNull( joystick )) {
HXLINE( 230)					joystick->onAxisMove->dispatch(this->joystickEventInfo->index,this->joystickEventInfo->value);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 234)				HX_VARI_NAME(  ::lime::ui::Joystick,joystick1,"joystick") = ( ( ::lime::ui::Joystick)(::haxe::IMap_obj::get(::lime::ui::Joystick_obj::devices,this->joystickEventInfo->id)) );
HXLINE( 235)				if (hx::IsNotNull( joystick1 )) {
HXLINE( 235)					joystick1->onHatMove->dispatch(this->joystickEventInfo->index,this->joystickEventInfo->x);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 239)				HX_VARI_NAME(  ::lime::ui::Joystick,joystick2,"joystick") = ( ( ::lime::ui::Joystick)(::haxe::IMap_obj::get(::lime::ui::Joystick_obj::devices,this->joystickEventInfo->id)) );
HXLINE( 240)				if (hx::IsNotNull( joystick2 )) {
HXLINE( 240)					joystick2->onTrackballMove->dispatch(this->joystickEventInfo->index,this->joystickEventInfo->value);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 244)				HX_VARI_NAME(  ::lime::ui::Joystick,joystick3,"joystick") = ( ( ::lime::ui::Joystick)(::haxe::IMap_obj::get(::lime::ui::Joystick_obj::devices,this->joystickEventInfo->id)) );
HXLINE( 245)				if (hx::IsNotNull( joystick3 )) {
HXLINE( 245)					joystick3->onButtonDown->dispatch(this->joystickEventInfo->index);
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 249)				HX_VARI_NAME(  ::lime::ui::Joystick,joystick4,"joystick") = ( ( ::lime::ui::Joystick)(::haxe::IMap_obj::get(::lime::ui::Joystick_obj::devices,this->joystickEventInfo->id)) );
HXLINE( 250)				if (hx::IsNotNull( joystick4 )) {
HXLINE( 250)					joystick4->onButtonUp->dispatch(this->joystickEventInfo->index);
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 254)				::lime::ui::Joystick_obj::_hx___connect(this->joystickEventInfo->id);
            			}
            			break;
            			case (int)6: {
HXLINE( 258)				::lime::ui::Joystick_obj::_hx___disconnect(this->joystickEventInfo->id);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleJoystickEvent,(void))

void NativeApplication_obj::handleKeyEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_265_handleKeyEvent)
            	HX_STACK_THIS(this)
HXLINE( 267)		HX_VARI(  ::lime::ui::Window,window) = this->parent->windowByID->get(this->keyEventInfo->windowID).StaticCast<  ::lime::ui::Window >();
HXLINE( 269)		if (hx::IsNotNull( window )) {
HXLINE( 271)			HX_VARI( int,type) = this->keyEventInfo->type;
HXLINE( 272)			HX_VARI( int,keyCode) = this->keyEventInfo->keyCode;
HXLINE( 273)			HX_VARI( int,modifier) = this->keyEventInfo->modifier;
HXLINE( 275)			switch((int)(type)){
            				case (int)0: {
HXLINE( 279)					window->onKeyDown->dispatch(keyCode,modifier);
            				}
            				break;
            				case (int)1: {
HXLINE( 283)					window->onKeyUp->dispatch(keyCode,modifier);
            				}
            				break;
            			}
HXLINE( 305)			bool _hx_tmp;
HXDLIN( 305)			bool _hx_tmp1;
HXDLIN( 305)			bool _hx_tmp2;
HXDLIN( 305)			if ((keyCode == (int)1073742094)) {
HXLINE( 305)				_hx_tmp2 = (modifier == (int)0);
            			}
            			else {
HXLINE( 305)				_hx_tmp2 = false;
            			}
HXDLIN( 305)			if (_hx_tmp2) {
HXLINE( 305)				_hx_tmp1 = (type == (int)1);
            			}
            			else {
HXLINE( 305)				_hx_tmp1 = false;
            			}
HXDLIN( 305)			if (_hx_tmp1) {
HXLINE( 305)				_hx_tmp = !(window->onKeyUp->canceled);
            			}
            			else {
HXLINE( 305)				_hx_tmp = false;
            			}
HXDLIN( 305)			if (_hx_tmp) {
HXLINE( 307)				::lime::_hx_system::System_obj::exit((int)0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleKeyEvent,(void))

void NativeApplication_obj::handleMouseEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_318_handleMouseEvent)
            	HX_STACK_THIS(this)
HXLINE( 320)		HX_VARI(  ::lime::ui::Window,window) = this->parent->windowByID->get(this->mouseEventInfo->windowID).StaticCast<  ::lime::ui::Window >();
HXLINE( 322)		if (hx::IsNotNull( window )) {
HXLINE( 324)			switch((int)(this->mouseEventInfo->type)){
            				case (int)0: {
HXLINE( 328)					window->onMouseDown->dispatch(this->mouseEventInfo->x,this->mouseEventInfo->y,this->mouseEventInfo->button);
            				}
            				break;
            				case (int)1: {
HXLINE( 332)					window->onMouseUp->dispatch(this->mouseEventInfo->x,this->mouseEventInfo->y,this->mouseEventInfo->button);
            				}
            				break;
            				case (int)2: {
HXLINE( 336)					window->onMouseMove->dispatch(this->mouseEventInfo->x,this->mouseEventInfo->y);
HXLINE( 337)					window->onMouseMoveRelative->dispatch(this->mouseEventInfo->movementX,this->mouseEventInfo->movementY);
            				}
            				break;
            				case (int)3: {
HXLINE( 341)					window->onMouseWheel->dispatch(this->mouseEventInfo->x,this->mouseEventInfo->y);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleMouseEvent,(void))

void NativeApplication_obj::handleRenderEvent(){
            	HX_GC_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_354_handleRenderEvent)
            	HX_STACK_THIS(this)
HXLINE( 354)		HX_VARI( int,_g) = (int)0;
HXDLIN( 354)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->parent->renderers;
HXDLIN( 354)		while((_g < _g1->length)){
HXLINE( 354)			HX_VARI(  ::lime::graphics::Renderer,renderer) = _g1->__get(_g).StaticCast<  ::lime::graphics::Renderer >();
HXDLIN( 354)			_g = (_g + (int)1);
HXLINE( 356)			this->parent->renderer = renderer;
HXLINE( 358)			switch((int)(this->renderEventInfo->type)){
            				case (int)0: {
HXLINE( 362)					renderer->render();
HXLINE( 363)					renderer->onRender->dispatch();
HXLINE( 364)					renderer->flip();
            				}
            				break;
            				case (int)1: {
HXLINE( 368)					if (renderer->backend->useHardware) {
HXLINE( 370)						renderer->context = null();
HXLINE( 371)						renderer->onContextLost->dispatch();
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 377)					if (renderer->backend->useHardware) {
HXLINE( 382)						renderer->context = ::lime::graphics::RenderContext_obj::OPENGL( ::lime::graphics::GLRenderContext_obj::__alloc( HX_CTX ));
HXLINE( 385)						renderer->onContextRestored->dispatch(renderer->context);
            					}
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleRenderEvent,(void))

void NativeApplication_obj::handleSensorEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_396_handleSensorEvent)
            	HX_STACK_THIS(this)
HXLINE( 398)		HX_VARI(  ::lime::_hx_system::Sensor,sensor) = ::lime::_hx_system::Sensor_obj::sensorByID->get(this->sensorEventInfo->id).StaticCast<  ::lime::_hx_system::Sensor >();
HXLINE( 400)		if (hx::IsNotNull( sensor )) {
HXLINE( 402)			sensor->onUpdate->dispatch(this->sensorEventInfo->x,this->sensorEventInfo->y,this->sensorEventInfo->z);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleSensorEvent,(void))

void NativeApplication_obj::handleTextEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_409_handleTextEvent)
            	HX_STACK_THIS(this)
HXLINE( 411)		HX_VARI(  ::lime::ui::Window,window) = this->parent->windowByID->get(this->textEventInfo->windowID).StaticCast<  ::lime::ui::Window >();
HXLINE( 413)		if (hx::IsNotNull( window )) {
HXLINE( 415)			switch((int)(this->textEventInfo->type)){
            				case (int)0: {
HXLINE( 419)					window->onTextInput->dispatch(this->textEventInfo->text);
            				}
            				break;
            				case (int)1: {
HXLINE( 423)					window->onTextEdit->dispatch(this->textEventInfo->text,this->textEventInfo->start,this->textEventInfo->length);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleTextEvent,(void))

void NativeApplication_obj::handleTouchEvent(){
            	HX_GC_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_436_handleTouchEvent)
            	HX_STACK_THIS(this)
HXLINE( 436)		switch((int)(this->touchEventInfo->type)){
            			case (int)0: {
HXLINE( 440)				HX_VARI(  ::lime::ui::Touch,touch) = this->unusedTouchesPool->pop().StaticCast<  ::lime::ui::Touch >();
HXLINE( 442)				if (hx::IsNull( touch )) {
HXLINE( 444)					touch =  ::lime::ui::Touch_obj::__alloc( HX_CTX ,this->touchEventInfo->x,this->touchEventInfo->y,this->touchEventInfo->id,this->touchEventInfo->dx,this->touchEventInfo->dy,this->touchEventInfo->pressure,this->touchEventInfo->device);
            				}
            				else {
HXLINE( 448)					touch->x = this->touchEventInfo->x;
HXLINE( 449)					touch->y = this->touchEventInfo->y;
HXLINE( 450)					touch->id = this->touchEventInfo->id;
HXLINE( 451)					touch->dx = this->touchEventInfo->dx;
HXLINE( 452)					touch->dy = this->touchEventInfo->dy;
HXLINE( 453)					touch->pressure = this->touchEventInfo->pressure;
HXLINE( 454)					touch->device = this->touchEventInfo->device;
            				}
HXLINE( 458)				::haxe::IMap_obj::set(this->currentTouches,touch->id,touch);
HXLINE( 460)				::lime::ui::Touch_obj::onStart->dispatch(touch);
            			}
            			break;
            			case (int)1: {
HXLINE( 464)				HX_VARI_NAME(  ::lime::ui::Touch,touch1,"touch") = ( ( ::lime::ui::Touch)(::haxe::IMap_obj::get(this->currentTouches,this->touchEventInfo->id)) );
HXLINE( 466)				if (hx::IsNotNull( touch1 )) {
HXLINE( 468)					touch1->x = this->touchEventInfo->x;
HXLINE( 469)					touch1->y = this->touchEventInfo->y;
HXLINE( 470)					touch1->dx = this->touchEventInfo->dx;
HXLINE( 471)					touch1->dy = this->touchEventInfo->dy;
HXLINE( 472)					touch1->pressure = this->touchEventInfo->pressure;
HXLINE( 474)					::lime::ui::Touch_obj::onEnd->dispatch(touch1);
HXLINE( 476)					::haxe::IMap_obj::remove(this->currentTouches,this->touchEventInfo->id);
HXLINE( 477)					this->unusedTouchesPool->add(touch1);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 483)				HX_VARI_NAME(  ::lime::ui::Touch,touch2,"touch") = ( ( ::lime::ui::Touch)(::haxe::IMap_obj::get(this->currentTouches,this->touchEventInfo->id)) );
HXLINE( 485)				if (hx::IsNotNull( touch2 )) {
HXLINE( 487)					touch2->x = this->touchEventInfo->x;
HXLINE( 488)					touch2->y = this->touchEventInfo->y;
HXLINE( 489)					touch2->dx = this->touchEventInfo->dx;
HXLINE( 490)					touch2->dy = this->touchEventInfo->dy;
HXLINE( 491)					touch2->pressure = this->touchEventInfo->pressure;
HXLINE( 493)					::lime::ui::Touch_obj::onMove->dispatch(touch2);
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleTouchEvent,(void))

void NativeApplication_obj::handleWindowEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_504_handleWindowEvent)
            	HX_STACK_THIS(this)
HXLINE( 506)		HX_VARI(  ::lime::ui::Window,window) = this->parent->windowByID->get(this->windowEventInfo->windowID).StaticCast<  ::lime::ui::Window >();
HXLINE( 508)		if (hx::IsNotNull( window )) {
HXLINE( 510)			switch((int)(this->windowEventInfo->type)){
            				case (int)0: {
HXLINE( 514)					window->onActivate->dispatch();
            				}
            				break;
            				case (int)1: {
HXLINE( 518)					window->onClose->dispatch();
HXLINE( 520)					if (!(window->onClose->canceled)) {
HXLINE( 522)						window->close();
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 528)					window->onDeactivate->dispatch();
            				}
            				break;
            				case (int)3: {
HXLINE( 532)					window->onEnter->dispatch();
            				}
            				break;
            				case (int)4: {
HXLINE( 536)					window->onFocusIn->dispatch();
            				}
            				break;
            				case (int)5: {
HXLINE( 540)					window->onFocusOut->dispatch();
            				}
            				break;
            				case (int)6: {
HXLINE( 544)					window->onLeave->dispatch();
            				}
            				break;
            				case (int)7: {
HXLINE( 548)					window->_hx___minimized = true;
HXLINE( 549)					window->onMinimize->dispatch();
            				}
            				break;
            				case (int)8: {
HXLINE( 553)					window->_hx___x = this->windowEventInfo->x;
HXLINE( 554)					window->_hx___y = this->windowEventInfo->y;
HXLINE( 555)					window->onMove->dispatch(this->windowEventInfo->x,this->windowEventInfo->y);
            				}
            				break;
            				case (int)9: {
HXLINE( 559)					window->_hx___width = this->windowEventInfo->width;
HXLINE( 560)					window->_hx___height = this->windowEventInfo->height;
HXLINE( 561)					window->onResize->dispatch(this->windowEventInfo->width,this->windowEventInfo->height);
            				}
            				break;
            				case (int)10: {
HXLINE( 565)					window->_hx___fullscreen = false;
HXLINE( 566)					window->_hx___minimized = false;
HXLINE( 567)					window->onRestore->dispatch();
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleWindowEvent,(void))

Float NativeApplication_obj::setFrameRate(Float value){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_581_setFrameRate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 581)		return (this->frameRate = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeApplication_obj,setFrameRate,return )

void NativeApplication_obj::updateTimer(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_588_updateTimer)
            	HX_STACK_THIS(this)
HXLINE( 588)		if ((::haxe::Timer_obj::sRunningTimers->length > (int)0)) {
HXLINE( 590)			HX_VARI( int,currentTime) = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 591)			HX_VARI( bool,foundNull) = false;
HXLINE( 592)			HX_VAR(  ::haxe::Timer,timer);
HXLINE( 594)			{
HXLINE( 594)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 594)				HX_VARI( int,_g) = ::haxe::Timer_obj::sRunningTimers->length;
HXDLIN( 594)				while((_g1 < _g)){
HXLINE( 594)					_g1 = (_g1 + (int)1);
HXLINE( 596)					timer = ::haxe::Timer_obj::sRunningTimers->__get((_g1 - (int)1)).StaticCast<  ::haxe::Timer >();
HXLINE( 598)					if (hx::IsNotNull( timer )) {
HXLINE( 600)						if ((currentTime >= timer->mFireAt)) {
HXLINE( 602)							timer->mFireAt = (timer->mFireAt + timer->mTime);
HXLINE( 603)							timer->run();
            						}
            					}
            					else {
HXLINE( 609)						foundNull = true;
            					}
            				}
            			}
HXLINE( 615)			if (foundNull) {
            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				bool _hx_run( ::haxe::Timer val){
            					HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_617_updateTimer)
            					HX_STACK_ARG(val,"val")
HXLINE( 617)					return hx::IsNotNull( val );
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 617)				::haxe::Timer_obj::sRunningTimers = ::haxe::Timer_obj::sRunningTimers->filter( ::Dynamic(new _hx_Closure_0()));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,updateTimer,(void))

 ::Dynamic NativeApplication_obj::lime_application_create( ::Dynamic config){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_627_lime_application_create)
            	HX_STACK_ARG(config,"config")
HXLINE( 627)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeApplication_obj,lime_application_create,return )

void NativeApplication_obj::lime_application_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_628_lime_application_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 628)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_application_event_manager_register,(void))

int NativeApplication_obj::lime_application_exec( ::Dynamic handle){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_629_lime_application_exec)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 629)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeApplication_obj,lime_application_exec,return )

void NativeApplication_obj::lime_application_init( ::Dynamic handle){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_630_lime_application_init)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 630)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeApplication_obj,lime_application_init,(void))

int NativeApplication_obj::lime_application_quit( ::Dynamic handle){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_631_lime_application_quit)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 631)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeApplication_obj,lime_application_quit,return )

void NativeApplication_obj::lime_application_set_frame_rate( ::Dynamic handle,Float value){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_632_lime_application_set_frame_rate)
            	HX_STACK_ARG(handle,"handle")
            	HX_STACK_ARG(value,"value")
HXLINE( 632)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_application_set_frame_rate,(void))

bool NativeApplication_obj::lime_application_update( ::Dynamic handle){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_633_lime_application_update)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 633)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeApplication_obj,lime_application_update,return )

void NativeApplication_obj::lime_drop_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_634_lime_drop_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 634)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_drop_event_manager_register,(void))

void NativeApplication_obj::lime_gamepad_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_635_lime_gamepad_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 635)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_gamepad_event_manager_register,(void))

void NativeApplication_obj::lime_joystick_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_636_lime_joystick_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 636)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_joystick_event_manager_register,(void))

void NativeApplication_obj::lime_key_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_637_lime_key_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 637)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_key_event_manager_register,(void))

void NativeApplication_obj::lime_mouse_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_638_lime_mouse_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 638)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_mouse_event_manager_register,(void))

void NativeApplication_obj::lime_render_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_639_lime_render_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 639)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_render_event_manager_register,(void))

void NativeApplication_obj::lime_sensor_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_640_lime_sensor_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 640)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_sensor_event_manager_register,(void))

void NativeApplication_obj::lime_text_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_641_lime_text_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 641)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_text_event_manager_register,(void))

void NativeApplication_obj::lime_touch_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_642_lime_touch_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 642)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_touch_event_manager_register,(void))

void NativeApplication_obj::lime_window_event_manager_register( ::Dynamic callback, ::Dynamic eventObject){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_643_lime_window_event_manager_register)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(eventObject,"eventObject")
HXLINE( 643)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeApplication_obj,lime_window_event_manager_register,(void))


hx::ObjectPtr< NativeApplication_obj > NativeApplication_obj::__new( ::lime::app::Application parent) {
	hx::ObjectPtr< NativeApplication_obj > __this = new NativeApplication_obj();
	__this->__construct(parent);
	return __this;
}

hx::ObjectPtr< NativeApplication_obj > NativeApplication_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::app::Application parent) {
	NativeApplication_obj *__this = (NativeApplication_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NativeApplication_obj), true, "lime._backend.native.NativeApplication"));
	*(void **)__this = NativeApplication_obj::_hx_vtable;
	__this->__construct(parent);
	return __this;
}

NativeApplication_obj::NativeApplication_obj()
{
}

void NativeApplication_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeApplication);
	HX_MARK_MEMBER_NAME(applicationEventInfo,"applicationEventInfo");
	HX_MARK_MEMBER_NAME(currentTouches,"currentTouches");
	HX_MARK_MEMBER_NAME(dropEventInfo,"dropEventInfo");
	HX_MARK_MEMBER_NAME(gamepadEventInfo,"gamepadEventInfo");
	HX_MARK_MEMBER_NAME(joystickEventInfo,"joystickEventInfo");
	HX_MARK_MEMBER_NAME(keyEventInfo,"keyEventInfo");
	HX_MARK_MEMBER_NAME(mouseEventInfo,"mouseEventInfo");
	HX_MARK_MEMBER_NAME(renderEventInfo,"renderEventInfo");
	HX_MARK_MEMBER_NAME(sensorEventInfo,"sensorEventInfo");
	HX_MARK_MEMBER_NAME(textEventInfo,"textEventInfo");
	HX_MARK_MEMBER_NAME(touchEventInfo,"touchEventInfo");
	HX_MARK_MEMBER_NAME(unusedTouchesPool,"unusedTouchesPool");
	HX_MARK_MEMBER_NAME(windowEventInfo,"windowEventInfo");
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_END_CLASS();
}

void NativeApplication_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(applicationEventInfo,"applicationEventInfo");
	HX_VISIT_MEMBER_NAME(currentTouches,"currentTouches");
	HX_VISIT_MEMBER_NAME(dropEventInfo,"dropEventInfo");
	HX_VISIT_MEMBER_NAME(gamepadEventInfo,"gamepadEventInfo");
	HX_VISIT_MEMBER_NAME(joystickEventInfo,"joystickEventInfo");
	HX_VISIT_MEMBER_NAME(keyEventInfo,"keyEventInfo");
	HX_VISIT_MEMBER_NAME(mouseEventInfo,"mouseEventInfo");
	HX_VISIT_MEMBER_NAME(renderEventInfo,"renderEventInfo");
	HX_VISIT_MEMBER_NAME(sensorEventInfo,"sensorEventInfo");
	HX_VISIT_MEMBER_NAME(textEventInfo,"textEventInfo");
	HX_VISIT_MEMBER_NAME(touchEventInfo,"touchEventInfo");
	HX_VISIT_MEMBER_NAME(unusedTouchesPool,"unusedTouchesPool");
	HX_VISIT_MEMBER_NAME(windowEventInfo,"windowEventInfo");
	HX_VISIT_MEMBER_NAME(handle,"handle");
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(parent,"parent");
}

hx::Val NativeApplication_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"exec") ) { return hx::Val( exec_dyn()); }
		if (HX_FIELD_EQ(inName,"exit") ) { return hx::Val( exit_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateTimer") ) { return hx::Val( updateTimer_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"keyEventInfo") ) { return hx::Val( keyEventInfo); }
		if (HX_FIELD_EQ(inName,"getFrameRate") ) { return hx::Val( getFrameRate_dyn()); }
		if (HX_FIELD_EQ(inName,"setFrameRate") ) { return hx::Val( setFrameRate_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dropEventInfo") ) { return hx::Val( dropEventInfo); }
		if (HX_FIELD_EQ(inName,"textEventInfo") ) { return hx::Val( textEventInfo); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentTouches") ) { return hx::Val( currentTouches); }
		if (HX_FIELD_EQ(inName,"mouseEventInfo") ) { return hx::Val( mouseEventInfo); }
		if (HX_FIELD_EQ(inName,"touchEventInfo") ) { return hx::Val( touchEventInfo); }
		if (HX_FIELD_EQ(inName,"handleKeyEvent") ) { return hx::Val( handleKeyEvent_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"renderEventInfo") ) { return hx::Val( renderEventInfo); }
		if (HX_FIELD_EQ(inName,"sensorEventInfo") ) { return hx::Val( sensorEventInfo); }
		if (HX_FIELD_EQ(inName,"windowEventInfo") ) { return hx::Val( windowEventInfo); }
		if (HX_FIELD_EQ(inName,"handleDropEvent") ) { return hx::Val( handleDropEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"handleTextEvent") ) { return hx::Val( handleTextEvent_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gamepadEventInfo") ) { return hx::Val( gamepadEventInfo); }
		if (HX_FIELD_EQ(inName,"handleMouseEvent") ) { return hx::Val( handleMouseEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"handleTouchEvent") ) { return hx::Val( handleTouchEvent_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"joystickEventInfo") ) { return hx::Val( joystickEventInfo); }
		if (HX_FIELD_EQ(inName,"unusedTouchesPool") ) { return hx::Val( unusedTouchesPool); }
		if (HX_FIELD_EQ(inName,"handleRenderEvent") ) { return hx::Val( handleRenderEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"handleSensorEvent") ) { return hx::Val( handleSensorEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"handleWindowEvent") ) { return hx::Val( handleWindowEvent_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"handleGamepadEvent") ) { return hx::Val( handleGamepadEvent_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"handleJoystickEvent") ) { return hx::Val( handleJoystickEvent_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"applicationEventInfo") ) { return hx::Val( applicationEventInfo); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"handleApplicationEvent") ) { return hx::Val( handleApplicationEvent_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool NativeApplication_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 21:
		if (HX_FIELD_EQ(inName,"lime_application_exec") ) { outValue = lime_application_exec_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_application_init") ) { outValue = lime_application_init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_application_quit") ) { outValue = lime_application_quit_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"lime_application_create") ) { outValue = lime_application_create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_application_update") ) { outValue = lime_application_update_dyn(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"lime_application_set_frame_rate") ) { outValue = lime_application_set_frame_rate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_key_event_manager_register") ) { outValue = lime_key_event_manager_register_dyn(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"lime_drop_event_manager_register") ) { outValue = lime_drop_event_manager_register_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_text_event_manager_register") ) { outValue = lime_text_event_manager_register_dyn(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"lime_mouse_event_manager_register") ) { outValue = lime_mouse_event_manager_register_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_touch_event_manager_register") ) { outValue = lime_touch_event_manager_register_dyn(); return true; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"lime_render_event_manager_register") ) { outValue = lime_render_event_manager_register_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_sensor_event_manager_register") ) { outValue = lime_sensor_event_manager_register_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_window_event_manager_register") ) { outValue = lime_window_event_manager_register_dyn(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"lime_gamepad_event_manager_register") ) { outValue = lime_gamepad_event_manager_register_dyn(); return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"lime_joystick_event_manager_register") ) { outValue = lime_joystick_event_manager_register_dyn(); return true; }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"lime_application_event_manager_register") ) { outValue = lime_application_event_manager_register_dyn(); return true; }
	}
	return false;
}

hx::Val NativeApplication_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::lime::app::Application >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { frameRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"keyEventInfo") ) { keyEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::KeyEventInfo >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dropEventInfo") ) { dropEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::DropEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textEventInfo") ) { textEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::TextEventInfo >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentTouches") ) { currentTouches=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseEventInfo") ) { mouseEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::MouseEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touchEventInfo") ) { touchEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::TouchEventInfo >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"renderEventInfo") ) { renderEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::RenderEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sensorEventInfo") ) { sensorEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::SensorEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowEventInfo") ) { windowEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::WindowEventInfo >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gamepadEventInfo") ) { gamepadEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::GamepadEventInfo >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"joystickEventInfo") ) { joystickEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::JoystickEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unusedTouchesPool") ) { unusedTouchesPool=inValue.Cast<  ::List >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"applicationEventInfo") ) { applicationEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::ApplicationEventInfo >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NativeApplication_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("applicationEventInfo","\x38","\x8c","\xf4","\x09"));
	outFields->push(HX_HCSTRING("currentTouches","\xb4","\x92","\x8c","\xe6"));
	outFields->push(HX_HCSTRING("dropEventInfo","\x79","\xeb","\x0f","\x1e"));
	outFields->push(HX_HCSTRING("gamepadEventInfo","\xc7","\xa4","\x2e","\x4c"));
	outFields->push(HX_HCSTRING("joystickEventInfo","\x4c","\x49","\x1d","\xd4"));
	outFields->push(HX_HCSTRING("keyEventInfo","\x09","\xec","\x90","\xcc"));
	outFields->push(HX_HCSTRING("mouseEventInfo","\xc3","\x9e","\xa6","\x86"));
	outFields->push(HX_HCSTRING("renderEventInfo","\x72","\x9b","\x70","\xdd"));
	outFields->push(HX_HCSTRING("sensorEventInfo","\x0e","\xd8","\x53","\x55"));
	outFields->push(HX_HCSTRING("textEventInfo","\x3b","\xd7","\x5a","\xac"));
	outFields->push(HX_HCSTRING("touchEventInfo","\xe9","\x99","\x5c","\x0c"));
	outFields->push(HX_HCSTRING("unusedTouchesPool","\xf3","\xcf","\xdf","\x11"));
	outFields->push(HX_HCSTRING("windowEventInfo","\x98","\x8f","\x34","\x9b"));
	outFields->push(HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"));
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeApplication_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::ApplicationEventInfo*/ ,(int)offsetof(NativeApplication_obj,applicationEventInfo),HX_HCSTRING("applicationEventInfo","\x38","\x8c","\xf4","\x09")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(NativeApplication_obj,currentTouches),HX_HCSTRING("currentTouches","\xb4","\x92","\x8c","\xe6")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::DropEventInfo*/ ,(int)offsetof(NativeApplication_obj,dropEventInfo),HX_HCSTRING("dropEventInfo","\x79","\xeb","\x0f","\x1e")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::GamepadEventInfo*/ ,(int)offsetof(NativeApplication_obj,gamepadEventInfo),HX_HCSTRING("gamepadEventInfo","\xc7","\xa4","\x2e","\x4c")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::JoystickEventInfo*/ ,(int)offsetof(NativeApplication_obj,joystickEventInfo),HX_HCSTRING("joystickEventInfo","\x4c","\x49","\x1d","\xd4")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::KeyEventInfo*/ ,(int)offsetof(NativeApplication_obj,keyEventInfo),HX_HCSTRING("keyEventInfo","\x09","\xec","\x90","\xcc")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::MouseEventInfo*/ ,(int)offsetof(NativeApplication_obj,mouseEventInfo),HX_HCSTRING("mouseEventInfo","\xc3","\x9e","\xa6","\x86")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::RenderEventInfo*/ ,(int)offsetof(NativeApplication_obj,renderEventInfo),HX_HCSTRING("renderEventInfo","\x72","\x9b","\x70","\xdd")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::SensorEventInfo*/ ,(int)offsetof(NativeApplication_obj,sensorEventInfo),HX_HCSTRING("sensorEventInfo","\x0e","\xd8","\x53","\x55")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::TextEventInfo*/ ,(int)offsetof(NativeApplication_obj,textEventInfo),HX_HCSTRING("textEventInfo","\x3b","\xd7","\x5a","\xac")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::TouchEventInfo*/ ,(int)offsetof(NativeApplication_obj,touchEventInfo),HX_HCSTRING("touchEventInfo","\xe9","\x99","\x5c","\x0c")},
	{hx::fsObject /*::List*/ ,(int)offsetof(NativeApplication_obj,unusedTouchesPool),HX_HCSTRING("unusedTouchesPool","\xf3","\xcf","\xdf","\x11")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::WindowEventInfo*/ ,(int)offsetof(NativeApplication_obj,windowEventInfo),HX_HCSTRING("windowEventInfo","\x98","\x8f","\x34","\x9b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeApplication_obj,handle),HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7")},
	{hx::fsFloat,(int)offsetof(NativeApplication_obj,frameRate),HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39")},
	{hx::fsObject /*::lime::app::Application*/ ,(int)offsetof(NativeApplication_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NativeApplication_obj_sStaticStorageInfo = 0;
#endif

static ::String NativeApplication_obj_sMemberFields[] = {
	HX_HCSTRING("applicationEventInfo","\x38","\x8c","\xf4","\x09"),
	HX_HCSTRING("currentTouches","\xb4","\x92","\x8c","\xe6"),
	HX_HCSTRING("dropEventInfo","\x79","\xeb","\x0f","\x1e"),
	HX_HCSTRING("gamepadEventInfo","\xc7","\xa4","\x2e","\x4c"),
	HX_HCSTRING("joystickEventInfo","\x4c","\x49","\x1d","\xd4"),
	HX_HCSTRING("keyEventInfo","\x09","\xec","\x90","\xcc"),
	HX_HCSTRING("mouseEventInfo","\xc3","\x9e","\xa6","\x86"),
	HX_HCSTRING("renderEventInfo","\x72","\x9b","\x70","\xdd"),
	HX_HCSTRING("sensorEventInfo","\x0e","\xd8","\x53","\x55"),
	HX_HCSTRING("textEventInfo","\x3b","\xd7","\x5a","\xac"),
	HX_HCSTRING("touchEventInfo","\xe9","\x99","\x5c","\x0c"),
	HX_HCSTRING("unusedTouchesPool","\xf3","\xcf","\xdf","\x11"),
	HX_HCSTRING("windowEventInfo","\x98","\x8f","\x34","\x9b"),
	HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"),
	HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("exec","\x91","\xf3","\x1d","\x43"),
	HX_HCSTRING("exit","\x1e","\xf7","\x1d","\x43"),
	HX_HCSTRING("getFrameRate","\x37","\xae","\x7b","\x48"),
	HX_HCSTRING("handleApplicationEvent","\x72","\xba","\xa4","\x11"),
	HX_HCSTRING("handleDropEvent","\xa3","\x9c","\xe8","\x85"),
	HX_HCSTRING("handleGamepadEvent","\x81","\x1b","\xb0","\x7b"),
	HX_HCSTRING("handleJoystickEvent","\xf6","\xd0","\x87","\xa8"),
	HX_HCSTRING("handleKeyEvent","\xc3","\x95","\x05","\x08"),
	HX_HCSTRING("handleMouseEvent","\x7d","\x65","\x58","\x63"),
	HX_HCSTRING("handleRenderEvent","\x1c","\xda","\x83","\x3f"),
	HX_HCSTRING("handleSensorEvent","\xb8","\x98","\x2d","\xba"),
	HX_HCSTRING("handleTextEvent","\x65","\xff","\x1d","\xdd"),
	HX_HCSTRING("handleTouchEvent","\xa3","\x55","\x1c","\x3f"),
	HX_HCSTRING("handleWindowEvent","\x42","\x43","\xa5","\x64"),
	HX_HCSTRING("setFrameRate","\xab","\xd1","\x74","\x5d"),
	HX_HCSTRING("updateTimer","\xfc","\x28","\xce","\xf5"),
	::String(null()) };

static void NativeApplication_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeApplication_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeApplication_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeApplication_obj::__mClass,"__mClass");
};

#endif

hx::Class NativeApplication_obj::__mClass;

static ::String NativeApplication_obj_sStaticFields[] = {
	HX_HCSTRING("lime_application_create","\x75","\x25","\x1a","\xbb"),
	HX_HCSTRING("lime_application_event_manager_register","\x33","\x3f","\x87","\x01"),
	HX_HCSTRING("lime_application_exec","\xca","\xf1","\x81","\xe2"),
	HX_HCSTRING("lime_application_init","\x49","\x39","\x1f","\xe5"),
	HX_HCSTRING("lime_application_quit","\x08","\x3e","\x6e","\xea"),
	HX_HCSTRING("lime_application_set_frame_rate","\xa8","\x03","\xd7","\x1d"),
	HX_HCSTRING("lime_application_update","\x82","\x44","\x10","\xc6"),
	HX_HCSTRING("lime_drop_event_manager_register","\xa0","\x48","\x49","\x3f"),
	HX_HCSTRING("lime_gamepad_event_manager_register","\x02","\xb7","\x1e","\x51"),
	HX_HCSTRING("lime_joystick_event_manager_register","\xb3","\x14","\x1d","\x14"),
	HX_HCSTRING("lime_key_event_manager_register","\xc4","\x10","\x76","\x37"),
	HX_HCSTRING("lime_mouse_event_manager_register","\x7e","\x33","\x83","\xea"),
	HX_HCSTRING("lime_render_event_manager_register","\xd9","\x6b","\xed","\xee"),
	HX_HCSTRING("lime_sensor_event_manager_register","\x75","\x01","\xd7","\x10"),
	HX_HCSTRING("lime_text_event_manager_register","\xe2","\x83","\x68","\x5d"),
	HX_HCSTRING("lime_touch_event_manager_register","\x24","\x25","\xf4","\xf5"),
	HX_HCSTRING("lime_window_event_manager_register","\x7f","\x16","\x8e","\x0d"),
	::String(null())
};

void NativeApplication_obj::__register()
{
	hx::Object *dummy = new NativeApplication_obj;
	NativeApplication_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._backend.native.NativeApplication","\xa2","\x84","\xe2","\x94");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NativeApplication_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NativeApplication_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NativeApplication_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeApplication_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeApplication_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeApplication_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeApplication_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeApplication_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _backend
} // end namespace native
