// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferIO
#include <lime/utils/ArrayBufferIO.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_9_new,"lime.utils.ArrayBufferView","new",0xa2471efa,"lime.utils.ArrayBufferView.new","lime/utils/ArrayBufferView.hx",9,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_160_subarray_lime_utils_Int32Array,"lime.utils.ArrayBufferView","subarray_lime_utils_Int32Array",0x84099983,"lime.utils.ArrayBufferView.subarray_lime_utils_Int32Array","lime/utils/ArrayBufferView.hx",160,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_160_subarray_lime_utils_UInt32Array,"lime.utils.ArrayBufferView","subarray_lime_utils_UInt32Array",0xcbd26328,"lime.utils.ArrayBufferView.subarray_lime_utils_UInt32Array","lime/utils/ArrayBufferView.hx",160,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_160_subarray_lime_utils_Float32Array,"lime.utils.ArrayBufferView","subarray_lime_utils_Float32Array",0xe249b676,"lime.utils.ArrayBufferView.subarray_lime_utils_Float32Array","lime/utils/ArrayBufferView.hx",160,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_160_subarray_lime_utils_UInt8Array,"lime.utils.ArrayBufferView","subarray_lime_utils_UInt8Array",0xa88baf53,"lime.utils.ArrayBufferView.subarray_lime_utils_UInt8Array","lime/utils/ArrayBufferView.hx",160,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_160_subarray_lime_utils_Int8Array,"lime.utils.ArrayBufferView","subarray_lime_utils_Int8Array",0x5ec0bd58,"lime.utils.ArrayBufferView.subarray_lime_utils_Int8Array","lime/utils/ArrayBufferView.hx",160,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_160_subarray_lime_utils_UInt8ClampedArray,"lime.utils.ArrayBufferView","subarray_lime_utils_UInt8ClampedArray",0x0c7948a5,"lime.utils.ArrayBufferView.subarray_lime_utils_UInt8ClampedArray","lime/utils/ArrayBufferView.hx",160,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_160_subarray_lime_utils_Int16Array,"lime.utils.ArrayBufferView","subarray_lime_utils_Int16Array",0xca4c1d7d,"lime.utils.ArrayBufferView.subarray_lime_utils_Int16Array","lime/utils/ArrayBufferView.hx",160,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_160_subarray_lime_utils_UInt16Array,"lime.utils.ArrayBufferView","subarray_lime_utils_UInt16Array",0x1214e722,"lime.utils.ArrayBufferView.subarray_lime_utils_UInt16Array","lime/utils/ArrayBufferView.hx",160,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_160_subarray_lime_utils_Float64Array,"lime.utils.ArrayBufferView","subarray_lime_utils_Float64Array",0x2bc0d377,"lime.utils.ArrayBufferView.subarray_lime_utils_Float64Array","lime/utils/ArrayBufferView.hx",160,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_48_initTypedArray,"lime.utils.ArrayBufferView","initTypedArray",0x0a95c3a5,"lime.utils.ArrayBufferView.initTypedArray","lime/utils/ArrayBufferView.hx",48,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_75_initBuffer,"lime.utils.ArrayBufferView","initBuffer",0x6e6530d6,"lime.utils.ArrayBufferView.initBuffer","lime/utils/ArrayBufferView.hx",75,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_112_initArray,"lime.utils.ArrayBufferView","initArray",0xe96cc683,"lime.utils.ArrayBufferView.initArray","lime/utils/ArrayBufferView.hx",112,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_132_set,"lime.utils.ArrayBufferView","set",0xa24aea3c,"lime.utils.ArrayBufferView.set","lime/utils/ArrayBufferView.hx",132,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_146_cloneBuffer,"lime.utils.ArrayBufferView","cloneBuffer",0x2d1320d7,"lime.utils.ArrayBufferView.cloneBuffer","lime/utils/ArrayBufferView.hx",146,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_208_bytesForType,"lime.utils.ArrayBufferView","bytesForType",0x22197f5e,"lime.utils.ArrayBufferView.bytesForType","lime/utils/ArrayBufferView.hx",208,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_243_toString,"lime.utils.ArrayBufferView","toString",0x0eb653d2,"lime.utils.ArrayBufferView.toString","lime/utils/ArrayBufferView.hx",243,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_268_toByteLength,"lime.utils.ArrayBufferView","toByteLength",0x7dea5d8f,"lime.utils.ArrayBufferView.toByteLength","lime/utils/ArrayBufferView.hx",268,0xb543acf8)
HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_275_copyFromArray,"lime.utils.ArrayBufferView","copyFromArray",0x360b3074,"lime.utils.ArrayBufferView.copyFromArray","lime/utils/ArrayBufferView.hx",275,0xb543acf8)
namespace lime{
namespace utils{

void ArrayBufferView_obj::__construct( ::Dynamic elements,int in_type){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_9_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elements,"elements")
            	HX_STACK_ARG(in_type,"in_type")
HXLINE(  18)		this->bytesPerElement = (int)0;
HXLINE(  11)		this->type = (int)0;
HXLINE(  24)		this->type = in_type;
HXLINE(  25)		int _hx_tmp;
HXDLIN(  25)		switch((int)(this->type)){
            			case (int)1: {
HXLINE(  25)				_hx_tmp = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  25)				_hx_tmp = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE(  25)				_hx_tmp = (int)4;
            			}
            			break;
            			case (int)4: {
HXLINE(  25)				_hx_tmp = (int)1;
            			}
            			break;
            			case (int)5: {
HXLINE(  25)				_hx_tmp = (int)1;
            			}
            			break;
            			case (int)6: {
HXLINE(  25)				_hx_tmp = (int)2;
            			}
            			break;
            			case (int)7: {
HXLINE(  25)				_hx_tmp = (int)4;
            			}
            			break;
            			case (int)8: {
HXLINE(  25)				_hx_tmp = (int)4;
            			}
            			break;
            			case (int)9: {
HXLINE(  25)				_hx_tmp = (int)8;
            			}
            			break;
            			default:{
HXLINE(  25)				_hx_tmp = (int)1;
            			}
            		}
HXDLIN(  25)		this->bytesPerElement = _hx_tmp;
HXLINE(  29)		bool _hx_tmp1;
HXDLIN(  29)		if (hx::IsNotNull( elements )) {
HXLINE(  29)			_hx_tmp1 = hx::IsNotEq( elements,(int)0 );
            		}
            		else {
HXLINE(  29)			_hx_tmp1 = false;
            		}
HXDLIN(  29)		if (_hx_tmp1) {
HXLINE(  31)			if (hx::IsLess( elements,(int)0 )) {
HXLINE(  31)				elements = (int)0;
            			}
HXLINE(  35)			this->byteOffset = (int)0;
HXLINE(  36)			this->byteLength = (elements * this->bytesPerElement);
HXLINE(  37)			this->buffer = ::haxe::io::Bytes_obj::alloc(this->byteLength);
HXLINE(  38)			this->length = elements;
            		}
            	}

Dynamic ArrayBufferView_obj::__CreateEmpty() { return new ArrayBufferView_obj; }

void *ArrayBufferView_obj::_hx_vtable = 0;

Dynamic ArrayBufferView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayBufferView_obj > _hx_result = new ArrayBufferView_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ArrayBufferView_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x340d6186;
}

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_Int32Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_160_subarray_lime_utils_Int32Array)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(begin,"begin")
            	HX_STACK_ARG(end,"end")
HXLINE( 163)		HX_VARI( int,len) = (end - begin);
HXLINE( 164)		HX_VARI( int,byte_offset) = (begin * this->bytesPerElement);
HXLINE( 166)		HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXLINE( 167)		switch((int)(this->type)){
            			case (int)0: {
HXLINE( 197)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				HX_VARI(  ::haxe::io::Bytes,buffer) = this->buffer;
HXDLIN( 170)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 170)				if (hx::IsNotNull( buffer )) {
HXLINE( 170)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 170)					if ((byte_offset < (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					if ((hx::Mod(byte_offset,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					HX_VARI( int,bufferByteLength) = buffer->length;
HXDLIN( 170)					HX_VARI( int,newByteLength) = bufferByteLength;
HXDLIN( 170)					if (hx::IsNull( len )) {
HXLINE( 170)						newByteLength = (bufferByteLength - byte_offset);
HXDLIN( 170)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 170)						if ((newByteLength < (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 170)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 170)						if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 170)					_this->buffer = buffer;
HXDLIN( 170)					_this->byteOffset = byte_offset;
HXDLIN( 170)					_this->byteLength = newByteLength;
HXDLIN( 170)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 170)					this1 = _this;
            				}
            				else {
HXLINE( 170)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 166)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 173)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = this->buffer;
HXDLIN( 173)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 173)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 173)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 173)					if ((byte_offset < (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					if ((hx::Mod(byte_offset,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					HX_VARI_NAME( int,bufferByteLength1,"bufferByteLength") = buffer1->length;
HXDLIN( 173)					HX_VARI_NAME( int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN( 173)					if (hx::IsNull( len )) {
HXLINE( 173)						newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN( 173)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 173)						if ((newByteLength1 < (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 173)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 173)						if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 173)					_this1->buffer = buffer1;
HXDLIN( 173)					_this1->byteOffset = byte_offset;
HXDLIN( 173)					_this1->byteLength = newByteLength1;
HXDLIN( 173)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 173)					this2 = _this1;
            				}
            				else {
HXLINE( 173)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 166)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 176)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this->buffer;
HXDLIN( 176)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 176)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 176)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 176)					if ((byte_offset < (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					HX_VARI_NAME( int,bufferByteLength2,"bufferByteLength") = buffer2->length;
HXDLIN( 176)					HX_VARI_NAME( int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN( 176)					if (hx::IsNull( len )) {
HXLINE( 176)						newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN( 176)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 176)						if ((newByteLength2 < (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 176)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 176)						if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 176)					_this2->buffer = buffer2;
HXDLIN( 176)					_this2->byteOffset = byte_offset;
HXDLIN( 176)					_this2->byteLength = newByteLength2;
HXDLIN( 176)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 176)					this3 = _this2;
            				}
            				else {
HXLINE( 176)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 166)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 179)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this->buffer;
HXDLIN( 179)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 179)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 179)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 179)					if ((byte_offset < (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					HX_VARI_NAME( int,bufferByteLength3,"bufferByteLength") = buffer3->length;
HXDLIN( 179)					HX_VARI_NAME( int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN( 179)					if (hx::IsNull( len )) {
HXLINE( 179)						newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN( 179)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 179)						if ((newByteLength3 < (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 179)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 179)						if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 179)					_this3->buffer = buffer3;
HXDLIN( 179)					_this3->byteOffset = byte_offset;
HXDLIN( 179)					_this3->byteLength = newByteLength3;
HXDLIN( 179)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 179)					this4 = _this3;
            				}
            				else {
HXLINE( 179)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            				}
HXLINE( 166)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 182)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this->buffer;
HXDLIN( 182)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 182)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 182)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 182)					if ((byte_offset < (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					HX_VARI_NAME( int,bufferByteLength4,"bufferByteLength") = buffer4->length;
HXDLIN( 182)					HX_VARI_NAME( int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN( 182)					if (hx::IsNull( len )) {
HXLINE( 182)						newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN( 182)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 182)						if ((newByteLength4 < (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 182)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 182)						if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 182)					_this4->buffer = buffer4;
HXDLIN( 182)					_this4->byteOffset = byte_offset;
HXDLIN( 182)					_this4->byteLength = newByteLength4;
HXDLIN( 182)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 182)					this5 = _this4;
            				}
            				else {
HXLINE( 182)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            				}
HXLINE( 166)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 185)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this->buffer;
HXDLIN( 185)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN( 185)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 185)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 185)					if ((byte_offset < (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					HX_VARI_NAME( int,bufferByteLength5,"bufferByteLength") = buffer5->length;
HXDLIN( 185)					HX_VARI_NAME( int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN( 185)					if (hx::IsNull( len )) {
HXLINE( 185)						newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN( 185)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 185)						if ((newByteLength5 < (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 185)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 185)						if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 185)					_this5->buffer = buffer5;
HXDLIN( 185)					_this5->byteOffset = byte_offset;
HXDLIN( 185)					_this5->byteLength = newByteLength5;
HXDLIN( 185)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 185)					this6 = _this5;
            				}
            				else {
HXLINE( 185)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            				}
HXLINE( 166)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 188)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this->buffer;
HXDLIN( 188)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 188)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 188)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 188)					if ((byte_offset < (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					HX_VARI_NAME( int,bufferByteLength6,"bufferByteLength") = buffer6->length;
HXDLIN( 188)					HX_VARI_NAME( int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN( 188)					if (hx::IsNull( len )) {
HXLINE( 188)						newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN( 188)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 188)						if ((newByteLength6 < (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 188)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 188)						if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 188)					_this6->buffer = buffer6;
HXDLIN( 188)					_this6->byteOffset = byte_offset;
HXDLIN( 188)					_this6->byteLength = newByteLength6;
HXDLIN( 188)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 188)					this7 = _this6;
            				}
            				else {
HXLINE( 188)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            				}
HXLINE( 166)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 191)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this->buffer;
HXDLIN( 191)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN( 191)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 191)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 191)					if ((byte_offset < (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					HX_VARI_NAME( int,bufferByteLength7,"bufferByteLength") = buffer7->length;
HXDLIN( 191)					HX_VARI_NAME( int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN( 191)					if (hx::IsNull( len )) {
HXLINE( 191)						newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN( 191)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 191)						if ((newByteLength7 < (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 191)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 191)						if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 191)					_this7->buffer = buffer7;
HXDLIN( 191)					_this7->byteOffset = byte_offset;
HXDLIN( 191)					_this7->byteLength = newByteLength7;
HXDLIN( 191)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 191)					this8 = _this7;
            				}
            				else {
HXLINE( 191)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 166)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 194)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this->buffer;
HXDLIN( 194)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN( 194)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 194)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 194)					if ((byte_offset < (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					HX_VARI_NAME( int,bufferByteLength8,"bufferByteLength") = buffer8->length;
HXDLIN( 194)					HX_VARI_NAME( int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN( 194)					if (hx::IsNull( len )) {
HXLINE( 194)						newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN( 194)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 194)						if ((newByteLength8 < (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 194)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 194)						if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 194)					_this8->buffer = buffer8;
HXDLIN( 194)					_this8->byteOffset = byte_offset;
HXDLIN( 194)					_this8->byteLength = newByteLength8;
HXDLIN( 194)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 194)					this9 = _this8;
            				}
            				else {
HXLINE( 194)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 166)				view = this9;
            			}
            			break;
            		}
HXLINE( 200)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_Int32Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_UInt32Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_160_subarray_lime_utils_UInt32Array)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(begin,"begin")
            	HX_STACK_ARG(end,"end")
HXLINE( 163)		HX_VARI( int,len) = (end - begin);
HXLINE( 164)		HX_VARI( int,byte_offset) = (begin * this->bytesPerElement);
HXLINE( 166)		HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXLINE( 167)		switch((int)(this->type)){
            			case (int)0: {
HXLINE( 197)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				HX_VARI(  ::haxe::io::Bytes,buffer) = this->buffer;
HXDLIN( 170)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 170)				if (hx::IsNotNull( buffer )) {
HXLINE( 170)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 170)					if ((byte_offset < (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					if ((hx::Mod(byte_offset,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					HX_VARI( int,bufferByteLength) = buffer->length;
HXDLIN( 170)					HX_VARI( int,newByteLength) = bufferByteLength;
HXDLIN( 170)					if (hx::IsNull( len )) {
HXLINE( 170)						newByteLength = (bufferByteLength - byte_offset);
HXDLIN( 170)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 170)						if ((newByteLength < (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 170)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 170)						if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 170)					_this->buffer = buffer;
HXDLIN( 170)					_this->byteOffset = byte_offset;
HXDLIN( 170)					_this->byteLength = newByteLength;
HXDLIN( 170)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 170)					this1 = _this;
            				}
            				else {
HXLINE( 170)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 166)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 173)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = this->buffer;
HXDLIN( 173)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 173)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 173)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 173)					if ((byte_offset < (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					if ((hx::Mod(byte_offset,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					HX_VARI_NAME( int,bufferByteLength1,"bufferByteLength") = buffer1->length;
HXDLIN( 173)					HX_VARI_NAME( int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN( 173)					if (hx::IsNull( len )) {
HXLINE( 173)						newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN( 173)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 173)						if ((newByteLength1 < (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 173)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 173)						if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 173)					_this1->buffer = buffer1;
HXDLIN( 173)					_this1->byteOffset = byte_offset;
HXDLIN( 173)					_this1->byteLength = newByteLength1;
HXDLIN( 173)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 173)					this2 = _this1;
            				}
            				else {
HXLINE( 173)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 166)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 176)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this->buffer;
HXDLIN( 176)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 176)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 176)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 176)					if ((byte_offset < (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					HX_VARI_NAME( int,bufferByteLength2,"bufferByteLength") = buffer2->length;
HXDLIN( 176)					HX_VARI_NAME( int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN( 176)					if (hx::IsNull( len )) {
HXLINE( 176)						newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN( 176)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 176)						if ((newByteLength2 < (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 176)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 176)						if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 176)					_this2->buffer = buffer2;
HXDLIN( 176)					_this2->byteOffset = byte_offset;
HXDLIN( 176)					_this2->byteLength = newByteLength2;
HXDLIN( 176)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 176)					this3 = _this2;
            				}
            				else {
HXLINE( 176)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 166)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 179)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this->buffer;
HXDLIN( 179)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 179)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 179)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 179)					if ((byte_offset < (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					HX_VARI_NAME( int,bufferByteLength3,"bufferByteLength") = buffer3->length;
HXDLIN( 179)					HX_VARI_NAME( int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN( 179)					if (hx::IsNull( len )) {
HXLINE( 179)						newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN( 179)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 179)						if ((newByteLength3 < (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 179)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 179)						if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 179)					_this3->buffer = buffer3;
HXDLIN( 179)					_this3->byteOffset = byte_offset;
HXDLIN( 179)					_this3->byteLength = newByteLength3;
HXDLIN( 179)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 179)					this4 = _this3;
            				}
            				else {
HXLINE( 179)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            				}
HXLINE( 166)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 182)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this->buffer;
HXDLIN( 182)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 182)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 182)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 182)					if ((byte_offset < (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					HX_VARI_NAME( int,bufferByteLength4,"bufferByteLength") = buffer4->length;
HXDLIN( 182)					HX_VARI_NAME( int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN( 182)					if (hx::IsNull( len )) {
HXLINE( 182)						newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN( 182)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 182)						if ((newByteLength4 < (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 182)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 182)						if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 182)					_this4->buffer = buffer4;
HXDLIN( 182)					_this4->byteOffset = byte_offset;
HXDLIN( 182)					_this4->byteLength = newByteLength4;
HXDLIN( 182)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 182)					this5 = _this4;
            				}
            				else {
HXLINE( 182)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            				}
HXLINE( 166)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 185)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this->buffer;
HXDLIN( 185)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN( 185)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 185)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 185)					if ((byte_offset < (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					HX_VARI_NAME( int,bufferByteLength5,"bufferByteLength") = buffer5->length;
HXDLIN( 185)					HX_VARI_NAME( int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN( 185)					if (hx::IsNull( len )) {
HXLINE( 185)						newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN( 185)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 185)						if ((newByteLength5 < (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 185)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 185)						if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 185)					_this5->buffer = buffer5;
HXDLIN( 185)					_this5->byteOffset = byte_offset;
HXDLIN( 185)					_this5->byteLength = newByteLength5;
HXDLIN( 185)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 185)					this6 = _this5;
            				}
            				else {
HXLINE( 185)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            				}
HXLINE( 166)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 188)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this->buffer;
HXDLIN( 188)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 188)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 188)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 188)					if ((byte_offset < (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					HX_VARI_NAME( int,bufferByteLength6,"bufferByteLength") = buffer6->length;
HXDLIN( 188)					HX_VARI_NAME( int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN( 188)					if (hx::IsNull( len )) {
HXLINE( 188)						newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN( 188)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 188)						if ((newByteLength6 < (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 188)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 188)						if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 188)					_this6->buffer = buffer6;
HXDLIN( 188)					_this6->byteOffset = byte_offset;
HXDLIN( 188)					_this6->byteLength = newByteLength6;
HXDLIN( 188)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 188)					this7 = _this6;
            				}
            				else {
HXLINE( 188)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            				}
HXLINE( 166)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 191)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this->buffer;
HXDLIN( 191)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN( 191)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 191)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 191)					if ((byte_offset < (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					HX_VARI_NAME( int,bufferByteLength7,"bufferByteLength") = buffer7->length;
HXDLIN( 191)					HX_VARI_NAME( int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN( 191)					if (hx::IsNull( len )) {
HXLINE( 191)						newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN( 191)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 191)						if ((newByteLength7 < (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 191)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 191)						if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 191)					_this7->buffer = buffer7;
HXDLIN( 191)					_this7->byteOffset = byte_offset;
HXDLIN( 191)					_this7->byteLength = newByteLength7;
HXDLIN( 191)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 191)					this8 = _this7;
            				}
            				else {
HXLINE( 191)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 166)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 194)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this->buffer;
HXDLIN( 194)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN( 194)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 194)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 194)					if ((byte_offset < (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					HX_VARI_NAME( int,bufferByteLength8,"bufferByteLength") = buffer8->length;
HXDLIN( 194)					HX_VARI_NAME( int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN( 194)					if (hx::IsNull( len )) {
HXLINE( 194)						newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN( 194)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 194)						if ((newByteLength8 < (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 194)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 194)						if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 194)					_this8->buffer = buffer8;
HXDLIN( 194)					_this8->byteOffset = byte_offset;
HXDLIN( 194)					_this8->byteLength = newByteLength8;
HXDLIN( 194)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 194)					this9 = _this8;
            				}
            				else {
HXLINE( 194)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 166)				view = this9;
            			}
            			break;
            		}
HXLINE( 200)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_UInt32Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_Float32Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_160_subarray_lime_utils_Float32Array)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(begin,"begin")
            	HX_STACK_ARG(end,"end")
HXLINE( 163)		HX_VARI( int,len) = (end - begin);
HXLINE( 164)		HX_VARI( int,byte_offset) = (begin * this->bytesPerElement);
HXLINE( 166)		HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXLINE( 167)		switch((int)(this->type)){
            			case (int)0: {
HXLINE( 197)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				HX_VARI(  ::haxe::io::Bytes,buffer) = this->buffer;
HXDLIN( 170)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 170)				if (hx::IsNotNull( buffer )) {
HXLINE( 170)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 170)					if ((byte_offset < (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					if ((hx::Mod(byte_offset,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					HX_VARI( int,bufferByteLength) = buffer->length;
HXDLIN( 170)					HX_VARI( int,newByteLength) = bufferByteLength;
HXDLIN( 170)					if (hx::IsNull( len )) {
HXLINE( 170)						newByteLength = (bufferByteLength - byte_offset);
HXDLIN( 170)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 170)						if ((newByteLength < (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 170)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 170)						if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 170)					_this->buffer = buffer;
HXDLIN( 170)					_this->byteOffset = byte_offset;
HXDLIN( 170)					_this->byteLength = newByteLength;
HXDLIN( 170)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 170)					this1 = _this;
            				}
            				else {
HXLINE( 170)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 166)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 173)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = this->buffer;
HXDLIN( 173)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 173)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 173)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 173)					if ((byte_offset < (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					if ((hx::Mod(byte_offset,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					HX_VARI_NAME( int,bufferByteLength1,"bufferByteLength") = buffer1->length;
HXDLIN( 173)					HX_VARI_NAME( int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN( 173)					if (hx::IsNull( len )) {
HXLINE( 173)						newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN( 173)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 173)						if ((newByteLength1 < (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 173)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 173)						if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 173)					_this1->buffer = buffer1;
HXDLIN( 173)					_this1->byteOffset = byte_offset;
HXDLIN( 173)					_this1->byteLength = newByteLength1;
HXDLIN( 173)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 173)					this2 = _this1;
            				}
            				else {
HXLINE( 173)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 166)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 176)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this->buffer;
HXDLIN( 176)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 176)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 176)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 176)					if ((byte_offset < (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					HX_VARI_NAME( int,bufferByteLength2,"bufferByteLength") = buffer2->length;
HXDLIN( 176)					HX_VARI_NAME( int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN( 176)					if (hx::IsNull( len )) {
HXLINE( 176)						newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN( 176)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 176)						if ((newByteLength2 < (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 176)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 176)						if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 176)					_this2->buffer = buffer2;
HXDLIN( 176)					_this2->byteOffset = byte_offset;
HXDLIN( 176)					_this2->byteLength = newByteLength2;
HXDLIN( 176)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 176)					this3 = _this2;
            				}
            				else {
HXLINE( 176)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 166)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 179)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this->buffer;
HXDLIN( 179)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 179)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 179)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 179)					if ((byte_offset < (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					HX_VARI_NAME( int,bufferByteLength3,"bufferByteLength") = buffer3->length;
HXDLIN( 179)					HX_VARI_NAME( int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN( 179)					if (hx::IsNull( len )) {
HXLINE( 179)						newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN( 179)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 179)						if ((newByteLength3 < (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 179)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 179)						if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 179)					_this3->buffer = buffer3;
HXDLIN( 179)					_this3->byteOffset = byte_offset;
HXDLIN( 179)					_this3->byteLength = newByteLength3;
HXDLIN( 179)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 179)					this4 = _this3;
            				}
            				else {
HXLINE( 179)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            				}
HXLINE( 166)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 182)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this->buffer;
HXDLIN( 182)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 182)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 182)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 182)					if ((byte_offset < (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					HX_VARI_NAME( int,bufferByteLength4,"bufferByteLength") = buffer4->length;
HXDLIN( 182)					HX_VARI_NAME( int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN( 182)					if (hx::IsNull( len )) {
HXLINE( 182)						newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN( 182)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 182)						if ((newByteLength4 < (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 182)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 182)						if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 182)					_this4->buffer = buffer4;
HXDLIN( 182)					_this4->byteOffset = byte_offset;
HXDLIN( 182)					_this4->byteLength = newByteLength4;
HXDLIN( 182)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 182)					this5 = _this4;
            				}
            				else {
HXLINE( 182)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            				}
HXLINE( 166)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 185)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this->buffer;
HXDLIN( 185)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN( 185)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 185)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 185)					if ((byte_offset < (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					HX_VARI_NAME( int,bufferByteLength5,"bufferByteLength") = buffer5->length;
HXDLIN( 185)					HX_VARI_NAME( int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN( 185)					if (hx::IsNull( len )) {
HXLINE( 185)						newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN( 185)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 185)						if ((newByteLength5 < (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 185)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 185)						if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 185)					_this5->buffer = buffer5;
HXDLIN( 185)					_this5->byteOffset = byte_offset;
HXDLIN( 185)					_this5->byteLength = newByteLength5;
HXDLIN( 185)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 185)					this6 = _this5;
            				}
            				else {
HXLINE( 185)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            				}
HXLINE( 166)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 188)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this->buffer;
HXDLIN( 188)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 188)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 188)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 188)					if ((byte_offset < (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					HX_VARI_NAME( int,bufferByteLength6,"bufferByteLength") = buffer6->length;
HXDLIN( 188)					HX_VARI_NAME( int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN( 188)					if (hx::IsNull( len )) {
HXLINE( 188)						newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN( 188)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 188)						if ((newByteLength6 < (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 188)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 188)						if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 188)					_this6->buffer = buffer6;
HXDLIN( 188)					_this6->byteOffset = byte_offset;
HXDLIN( 188)					_this6->byteLength = newByteLength6;
HXDLIN( 188)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 188)					this7 = _this6;
            				}
            				else {
HXLINE( 188)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            				}
HXLINE( 166)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 191)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this->buffer;
HXDLIN( 191)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN( 191)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 191)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 191)					if ((byte_offset < (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					HX_VARI_NAME( int,bufferByteLength7,"bufferByteLength") = buffer7->length;
HXDLIN( 191)					HX_VARI_NAME( int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN( 191)					if (hx::IsNull( len )) {
HXLINE( 191)						newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN( 191)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 191)						if ((newByteLength7 < (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 191)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 191)						if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 191)					_this7->buffer = buffer7;
HXDLIN( 191)					_this7->byteOffset = byte_offset;
HXDLIN( 191)					_this7->byteLength = newByteLength7;
HXDLIN( 191)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 191)					this8 = _this7;
            				}
            				else {
HXLINE( 191)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 166)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 194)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this->buffer;
HXDLIN( 194)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN( 194)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 194)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 194)					if ((byte_offset < (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					HX_VARI_NAME( int,bufferByteLength8,"bufferByteLength") = buffer8->length;
HXDLIN( 194)					HX_VARI_NAME( int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN( 194)					if (hx::IsNull( len )) {
HXLINE( 194)						newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN( 194)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 194)						if ((newByteLength8 < (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 194)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 194)						if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 194)					_this8->buffer = buffer8;
HXDLIN( 194)					_this8->byteOffset = byte_offset;
HXDLIN( 194)					_this8->byteLength = newByteLength8;
HXDLIN( 194)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 194)					this9 = _this8;
            				}
            				else {
HXLINE( 194)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 166)				view = this9;
            			}
            			break;
            		}
HXLINE( 200)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_Float32Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_UInt8Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_160_subarray_lime_utils_UInt8Array)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(begin,"begin")
            	HX_STACK_ARG(end,"end")
HXLINE( 163)		HX_VARI( int,len) = (end - begin);
HXLINE( 164)		HX_VARI( int,byte_offset) = (begin * this->bytesPerElement);
HXLINE( 166)		HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXLINE( 167)		switch((int)(this->type)){
            			case (int)0: {
HXLINE( 197)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				HX_VARI(  ::haxe::io::Bytes,buffer) = this->buffer;
HXDLIN( 170)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 170)				if (hx::IsNotNull( buffer )) {
HXLINE( 170)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 170)					if ((byte_offset < (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					if ((hx::Mod(byte_offset,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					HX_VARI( int,bufferByteLength) = buffer->length;
HXDLIN( 170)					HX_VARI( int,newByteLength) = bufferByteLength;
HXDLIN( 170)					if (hx::IsNull( len )) {
HXLINE( 170)						newByteLength = (bufferByteLength - byte_offset);
HXDLIN( 170)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 170)						if ((newByteLength < (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 170)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 170)						if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 170)					_this->buffer = buffer;
HXDLIN( 170)					_this->byteOffset = byte_offset;
HXDLIN( 170)					_this->byteLength = newByteLength;
HXDLIN( 170)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 170)					this1 = _this;
            				}
            				else {
HXLINE( 170)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 166)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 173)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = this->buffer;
HXDLIN( 173)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 173)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 173)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 173)					if ((byte_offset < (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					if ((hx::Mod(byte_offset,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					HX_VARI_NAME( int,bufferByteLength1,"bufferByteLength") = buffer1->length;
HXDLIN( 173)					HX_VARI_NAME( int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN( 173)					if (hx::IsNull( len )) {
HXLINE( 173)						newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN( 173)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 173)						if ((newByteLength1 < (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 173)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 173)						if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 173)					_this1->buffer = buffer1;
HXDLIN( 173)					_this1->byteOffset = byte_offset;
HXDLIN( 173)					_this1->byteLength = newByteLength1;
HXDLIN( 173)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 173)					this2 = _this1;
            				}
            				else {
HXLINE( 173)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 166)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 176)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this->buffer;
HXDLIN( 176)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 176)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 176)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 176)					if ((byte_offset < (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					HX_VARI_NAME( int,bufferByteLength2,"bufferByteLength") = buffer2->length;
HXDLIN( 176)					HX_VARI_NAME( int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN( 176)					if (hx::IsNull( len )) {
HXLINE( 176)						newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN( 176)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 176)						if ((newByteLength2 < (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 176)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 176)						if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 176)					_this2->buffer = buffer2;
HXDLIN( 176)					_this2->byteOffset = byte_offset;
HXDLIN( 176)					_this2->byteLength = newByteLength2;
HXDLIN( 176)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 176)					this3 = _this2;
            				}
            				else {
HXLINE( 176)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 166)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 179)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this->buffer;
HXDLIN( 179)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 179)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 179)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 179)					if ((byte_offset < (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					HX_VARI_NAME( int,bufferByteLength3,"bufferByteLength") = buffer3->length;
HXDLIN( 179)					HX_VARI_NAME( int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN( 179)					if (hx::IsNull( len )) {
HXLINE( 179)						newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN( 179)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 179)						if ((newByteLength3 < (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 179)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 179)						if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 179)					_this3->buffer = buffer3;
HXDLIN( 179)					_this3->byteOffset = byte_offset;
HXDLIN( 179)					_this3->byteLength = newByteLength3;
HXDLIN( 179)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 179)					this4 = _this3;
            				}
            				else {
HXLINE( 179)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            				}
HXLINE( 166)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 182)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this->buffer;
HXDLIN( 182)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 182)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 182)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 182)					if ((byte_offset < (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					HX_VARI_NAME( int,bufferByteLength4,"bufferByteLength") = buffer4->length;
HXDLIN( 182)					HX_VARI_NAME( int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN( 182)					if (hx::IsNull( len )) {
HXLINE( 182)						newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN( 182)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 182)						if ((newByteLength4 < (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 182)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 182)						if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 182)					_this4->buffer = buffer4;
HXDLIN( 182)					_this4->byteOffset = byte_offset;
HXDLIN( 182)					_this4->byteLength = newByteLength4;
HXDLIN( 182)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 182)					this5 = _this4;
            				}
            				else {
HXLINE( 182)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            				}
HXLINE( 166)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 185)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this->buffer;
HXDLIN( 185)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN( 185)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 185)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 185)					if ((byte_offset < (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					HX_VARI_NAME( int,bufferByteLength5,"bufferByteLength") = buffer5->length;
HXDLIN( 185)					HX_VARI_NAME( int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN( 185)					if (hx::IsNull( len )) {
HXLINE( 185)						newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN( 185)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 185)						if ((newByteLength5 < (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 185)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 185)						if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 185)					_this5->buffer = buffer5;
HXDLIN( 185)					_this5->byteOffset = byte_offset;
HXDLIN( 185)					_this5->byteLength = newByteLength5;
HXDLIN( 185)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 185)					this6 = _this5;
            				}
            				else {
HXLINE( 185)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            				}
HXLINE( 166)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 188)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this->buffer;
HXDLIN( 188)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 188)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 188)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 188)					if ((byte_offset < (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					HX_VARI_NAME( int,bufferByteLength6,"bufferByteLength") = buffer6->length;
HXDLIN( 188)					HX_VARI_NAME( int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN( 188)					if (hx::IsNull( len )) {
HXLINE( 188)						newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN( 188)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 188)						if ((newByteLength6 < (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 188)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 188)						if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 188)					_this6->buffer = buffer6;
HXDLIN( 188)					_this6->byteOffset = byte_offset;
HXDLIN( 188)					_this6->byteLength = newByteLength6;
HXDLIN( 188)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 188)					this7 = _this6;
            				}
            				else {
HXLINE( 188)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            				}
HXLINE( 166)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 191)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this->buffer;
HXDLIN( 191)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN( 191)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 191)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 191)					if ((byte_offset < (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					HX_VARI_NAME( int,bufferByteLength7,"bufferByteLength") = buffer7->length;
HXDLIN( 191)					HX_VARI_NAME( int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN( 191)					if (hx::IsNull( len )) {
HXLINE( 191)						newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN( 191)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 191)						if ((newByteLength7 < (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 191)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 191)						if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 191)					_this7->buffer = buffer7;
HXDLIN( 191)					_this7->byteOffset = byte_offset;
HXDLIN( 191)					_this7->byteLength = newByteLength7;
HXDLIN( 191)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 191)					this8 = _this7;
            				}
            				else {
HXLINE( 191)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 166)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 194)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this->buffer;
HXDLIN( 194)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN( 194)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 194)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 194)					if ((byte_offset < (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					HX_VARI_NAME( int,bufferByteLength8,"bufferByteLength") = buffer8->length;
HXDLIN( 194)					HX_VARI_NAME( int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN( 194)					if (hx::IsNull( len )) {
HXLINE( 194)						newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN( 194)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 194)						if ((newByteLength8 < (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 194)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 194)						if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 194)					_this8->buffer = buffer8;
HXDLIN( 194)					_this8->byteOffset = byte_offset;
HXDLIN( 194)					_this8->byteLength = newByteLength8;
HXDLIN( 194)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 194)					this9 = _this8;
            				}
            				else {
HXLINE( 194)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 166)				view = this9;
            			}
            			break;
            		}
HXLINE( 200)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_UInt8Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_Int8Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_160_subarray_lime_utils_Int8Array)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(begin,"begin")
            	HX_STACK_ARG(end,"end")
HXLINE( 163)		HX_VARI( int,len) = (end - begin);
HXLINE( 164)		HX_VARI( int,byte_offset) = (begin * this->bytesPerElement);
HXLINE( 166)		HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXLINE( 167)		switch((int)(this->type)){
            			case (int)0: {
HXLINE( 197)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				HX_VARI(  ::haxe::io::Bytes,buffer) = this->buffer;
HXDLIN( 170)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 170)				if (hx::IsNotNull( buffer )) {
HXLINE( 170)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 170)					if ((byte_offset < (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					if ((hx::Mod(byte_offset,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					HX_VARI( int,bufferByteLength) = buffer->length;
HXDLIN( 170)					HX_VARI( int,newByteLength) = bufferByteLength;
HXDLIN( 170)					if (hx::IsNull( len )) {
HXLINE( 170)						newByteLength = (bufferByteLength - byte_offset);
HXDLIN( 170)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 170)						if ((newByteLength < (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 170)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 170)						if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 170)					_this->buffer = buffer;
HXDLIN( 170)					_this->byteOffset = byte_offset;
HXDLIN( 170)					_this->byteLength = newByteLength;
HXDLIN( 170)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 170)					this1 = _this;
            				}
            				else {
HXLINE( 170)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 166)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 173)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = this->buffer;
HXDLIN( 173)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 173)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 173)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 173)					if ((byte_offset < (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					if ((hx::Mod(byte_offset,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					HX_VARI_NAME( int,bufferByteLength1,"bufferByteLength") = buffer1->length;
HXDLIN( 173)					HX_VARI_NAME( int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN( 173)					if (hx::IsNull( len )) {
HXLINE( 173)						newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN( 173)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 173)						if ((newByteLength1 < (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 173)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 173)						if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 173)					_this1->buffer = buffer1;
HXDLIN( 173)					_this1->byteOffset = byte_offset;
HXDLIN( 173)					_this1->byteLength = newByteLength1;
HXDLIN( 173)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 173)					this2 = _this1;
            				}
            				else {
HXLINE( 173)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 166)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 176)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this->buffer;
HXDLIN( 176)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 176)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 176)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 176)					if ((byte_offset < (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					HX_VARI_NAME( int,bufferByteLength2,"bufferByteLength") = buffer2->length;
HXDLIN( 176)					HX_VARI_NAME( int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN( 176)					if (hx::IsNull( len )) {
HXLINE( 176)						newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN( 176)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 176)						if ((newByteLength2 < (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 176)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 176)						if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 176)					_this2->buffer = buffer2;
HXDLIN( 176)					_this2->byteOffset = byte_offset;
HXDLIN( 176)					_this2->byteLength = newByteLength2;
HXDLIN( 176)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 176)					this3 = _this2;
            				}
            				else {
HXLINE( 176)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 166)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 179)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this->buffer;
HXDLIN( 179)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 179)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 179)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 179)					if ((byte_offset < (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					HX_VARI_NAME( int,bufferByteLength3,"bufferByteLength") = buffer3->length;
HXDLIN( 179)					HX_VARI_NAME( int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN( 179)					if (hx::IsNull( len )) {
HXLINE( 179)						newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN( 179)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 179)						if ((newByteLength3 < (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 179)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 179)						if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 179)					_this3->buffer = buffer3;
HXDLIN( 179)					_this3->byteOffset = byte_offset;
HXDLIN( 179)					_this3->byteLength = newByteLength3;
HXDLIN( 179)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 179)					this4 = _this3;
            				}
            				else {
HXLINE( 179)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            				}
HXLINE( 166)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 182)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this->buffer;
HXDLIN( 182)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 182)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 182)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 182)					if ((byte_offset < (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					HX_VARI_NAME( int,bufferByteLength4,"bufferByteLength") = buffer4->length;
HXDLIN( 182)					HX_VARI_NAME( int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN( 182)					if (hx::IsNull( len )) {
HXLINE( 182)						newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN( 182)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 182)						if ((newByteLength4 < (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 182)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 182)						if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 182)					_this4->buffer = buffer4;
HXDLIN( 182)					_this4->byteOffset = byte_offset;
HXDLIN( 182)					_this4->byteLength = newByteLength4;
HXDLIN( 182)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 182)					this5 = _this4;
            				}
            				else {
HXLINE( 182)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            				}
HXLINE( 166)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 185)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this->buffer;
HXDLIN( 185)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN( 185)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 185)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 185)					if ((byte_offset < (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					HX_VARI_NAME( int,bufferByteLength5,"bufferByteLength") = buffer5->length;
HXDLIN( 185)					HX_VARI_NAME( int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN( 185)					if (hx::IsNull( len )) {
HXLINE( 185)						newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN( 185)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 185)						if ((newByteLength5 < (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 185)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 185)						if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 185)					_this5->buffer = buffer5;
HXDLIN( 185)					_this5->byteOffset = byte_offset;
HXDLIN( 185)					_this5->byteLength = newByteLength5;
HXDLIN( 185)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 185)					this6 = _this5;
            				}
            				else {
HXLINE( 185)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            				}
HXLINE( 166)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 188)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this->buffer;
HXDLIN( 188)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 188)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 188)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 188)					if ((byte_offset < (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					HX_VARI_NAME( int,bufferByteLength6,"bufferByteLength") = buffer6->length;
HXDLIN( 188)					HX_VARI_NAME( int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN( 188)					if (hx::IsNull( len )) {
HXLINE( 188)						newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN( 188)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 188)						if ((newByteLength6 < (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 188)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 188)						if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 188)					_this6->buffer = buffer6;
HXDLIN( 188)					_this6->byteOffset = byte_offset;
HXDLIN( 188)					_this6->byteLength = newByteLength6;
HXDLIN( 188)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 188)					this7 = _this6;
            				}
            				else {
HXLINE( 188)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            				}
HXLINE( 166)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 191)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this->buffer;
HXDLIN( 191)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN( 191)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 191)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 191)					if ((byte_offset < (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					HX_VARI_NAME( int,bufferByteLength7,"bufferByteLength") = buffer7->length;
HXDLIN( 191)					HX_VARI_NAME( int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN( 191)					if (hx::IsNull( len )) {
HXLINE( 191)						newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN( 191)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 191)						if ((newByteLength7 < (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 191)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 191)						if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 191)					_this7->buffer = buffer7;
HXDLIN( 191)					_this7->byteOffset = byte_offset;
HXDLIN( 191)					_this7->byteLength = newByteLength7;
HXDLIN( 191)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 191)					this8 = _this7;
            				}
            				else {
HXLINE( 191)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 166)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 194)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this->buffer;
HXDLIN( 194)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN( 194)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 194)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 194)					if ((byte_offset < (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					HX_VARI_NAME( int,bufferByteLength8,"bufferByteLength") = buffer8->length;
HXDLIN( 194)					HX_VARI_NAME( int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN( 194)					if (hx::IsNull( len )) {
HXLINE( 194)						newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN( 194)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 194)						if ((newByteLength8 < (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 194)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 194)						if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 194)					_this8->buffer = buffer8;
HXDLIN( 194)					_this8->byteOffset = byte_offset;
HXDLIN( 194)					_this8->byteLength = newByteLength8;
HXDLIN( 194)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 194)					this9 = _this8;
            				}
            				else {
HXLINE( 194)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 166)				view = this9;
            			}
            			break;
            		}
HXLINE( 200)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_Int8Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_UInt8ClampedArray(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_160_subarray_lime_utils_UInt8ClampedArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(begin,"begin")
            	HX_STACK_ARG(end,"end")
HXLINE( 163)		HX_VARI( int,len) = (end - begin);
HXLINE( 164)		HX_VARI( int,byte_offset) = (begin * this->bytesPerElement);
HXLINE( 166)		HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXLINE( 167)		switch((int)(this->type)){
            			case (int)0: {
HXLINE( 197)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				HX_VARI(  ::haxe::io::Bytes,buffer) = this->buffer;
HXDLIN( 170)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 170)				if (hx::IsNotNull( buffer )) {
HXLINE( 170)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 170)					if ((byte_offset < (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					if ((hx::Mod(byte_offset,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					HX_VARI( int,bufferByteLength) = buffer->length;
HXDLIN( 170)					HX_VARI( int,newByteLength) = bufferByteLength;
HXDLIN( 170)					if (hx::IsNull( len )) {
HXLINE( 170)						newByteLength = (bufferByteLength - byte_offset);
HXDLIN( 170)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 170)						if ((newByteLength < (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 170)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 170)						if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 170)					_this->buffer = buffer;
HXDLIN( 170)					_this->byteOffset = byte_offset;
HXDLIN( 170)					_this->byteLength = newByteLength;
HXDLIN( 170)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 170)					this1 = _this;
            				}
            				else {
HXLINE( 170)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 166)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 173)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = this->buffer;
HXDLIN( 173)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 173)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 173)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 173)					if ((byte_offset < (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					if ((hx::Mod(byte_offset,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					HX_VARI_NAME( int,bufferByteLength1,"bufferByteLength") = buffer1->length;
HXDLIN( 173)					HX_VARI_NAME( int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN( 173)					if (hx::IsNull( len )) {
HXLINE( 173)						newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN( 173)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 173)						if ((newByteLength1 < (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 173)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 173)						if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 173)					_this1->buffer = buffer1;
HXDLIN( 173)					_this1->byteOffset = byte_offset;
HXDLIN( 173)					_this1->byteLength = newByteLength1;
HXDLIN( 173)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 173)					this2 = _this1;
            				}
            				else {
HXLINE( 173)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 166)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 176)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this->buffer;
HXDLIN( 176)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 176)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 176)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 176)					if ((byte_offset < (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					HX_VARI_NAME( int,bufferByteLength2,"bufferByteLength") = buffer2->length;
HXDLIN( 176)					HX_VARI_NAME( int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN( 176)					if (hx::IsNull( len )) {
HXLINE( 176)						newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN( 176)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 176)						if ((newByteLength2 < (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 176)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 176)						if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 176)					_this2->buffer = buffer2;
HXDLIN( 176)					_this2->byteOffset = byte_offset;
HXDLIN( 176)					_this2->byteLength = newByteLength2;
HXDLIN( 176)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 176)					this3 = _this2;
            				}
            				else {
HXLINE( 176)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 166)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 179)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this->buffer;
HXDLIN( 179)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 179)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 179)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 179)					if ((byte_offset < (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					HX_VARI_NAME( int,bufferByteLength3,"bufferByteLength") = buffer3->length;
HXDLIN( 179)					HX_VARI_NAME( int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN( 179)					if (hx::IsNull( len )) {
HXLINE( 179)						newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN( 179)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 179)						if ((newByteLength3 < (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 179)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 179)						if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 179)					_this3->buffer = buffer3;
HXDLIN( 179)					_this3->byteOffset = byte_offset;
HXDLIN( 179)					_this3->byteLength = newByteLength3;
HXDLIN( 179)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 179)					this4 = _this3;
            				}
            				else {
HXLINE( 179)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            				}
HXLINE( 166)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 182)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this->buffer;
HXDLIN( 182)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 182)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 182)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 182)					if ((byte_offset < (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					HX_VARI_NAME( int,bufferByteLength4,"bufferByteLength") = buffer4->length;
HXDLIN( 182)					HX_VARI_NAME( int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN( 182)					if (hx::IsNull( len )) {
HXLINE( 182)						newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN( 182)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 182)						if ((newByteLength4 < (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 182)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 182)						if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 182)					_this4->buffer = buffer4;
HXDLIN( 182)					_this4->byteOffset = byte_offset;
HXDLIN( 182)					_this4->byteLength = newByteLength4;
HXDLIN( 182)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 182)					this5 = _this4;
            				}
            				else {
HXLINE( 182)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            				}
HXLINE( 166)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 185)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this->buffer;
HXDLIN( 185)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN( 185)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 185)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 185)					if ((byte_offset < (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					HX_VARI_NAME( int,bufferByteLength5,"bufferByteLength") = buffer5->length;
HXDLIN( 185)					HX_VARI_NAME( int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN( 185)					if (hx::IsNull( len )) {
HXLINE( 185)						newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN( 185)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 185)						if ((newByteLength5 < (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 185)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 185)						if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 185)					_this5->buffer = buffer5;
HXDLIN( 185)					_this5->byteOffset = byte_offset;
HXDLIN( 185)					_this5->byteLength = newByteLength5;
HXDLIN( 185)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 185)					this6 = _this5;
            				}
            				else {
HXLINE( 185)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            				}
HXLINE( 166)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 188)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this->buffer;
HXDLIN( 188)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 188)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 188)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 188)					if ((byte_offset < (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					HX_VARI_NAME( int,bufferByteLength6,"bufferByteLength") = buffer6->length;
HXDLIN( 188)					HX_VARI_NAME( int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN( 188)					if (hx::IsNull( len )) {
HXLINE( 188)						newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN( 188)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 188)						if ((newByteLength6 < (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 188)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 188)						if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 188)					_this6->buffer = buffer6;
HXDLIN( 188)					_this6->byteOffset = byte_offset;
HXDLIN( 188)					_this6->byteLength = newByteLength6;
HXDLIN( 188)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 188)					this7 = _this6;
            				}
            				else {
HXLINE( 188)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            				}
HXLINE( 166)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 191)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this->buffer;
HXDLIN( 191)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN( 191)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 191)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 191)					if ((byte_offset < (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					HX_VARI_NAME( int,bufferByteLength7,"bufferByteLength") = buffer7->length;
HXDLIN( 191)					HX_VARI_NAME( int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN( 191)					if (hx::IsNull( len )) {
HXLINE( 191)						newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN( 191)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 191)						if ((newByteLength7 < (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 191)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 191)						if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 191)					_this7->buffer = buffer7;
HXDLIN( 191)					_this7->byteOffset = byte_offset;
HXDLIN( 191)					_this7->byteLength = newByteLength7;
HXDLIN( 191)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 191)					this8 = _this7;
            				}
            				else {
HXLINE( 191)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 166)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 194)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this->buffer;
HXDLIN( 194)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN( 194)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 194)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 194)					if ((byte_offset < (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					HX_VARI_NAME( int,bufferByteLength8,"bufferByteLength") = buffer8->length;
HXDLIN( 194)					HX_VARI_NAME( int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN( 194)					if (hx::IsNull( len )) {
HXLINE( 194)						newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN( 194)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 194)						if ((newByteLength8 < (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 194)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 194)						if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 194)					_this8->buffer = buffer8;
HXDLIN( 194)					_this8->byteOffset = byte_offset;
HXDLIN( 194)					_this8->byteLength = newByteLength8;
HXDLIN( 194)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 194)					this9 = _this8;
            				}
            				else {
HXLINE( 194)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 166)				view = this9;
            			}
            			break;
            		}
HXLINE( 200)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_UInt8ClampedArray,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_Int16Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_160_subarray_lime_utils_Int16Array)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(begin,"begin")
            	HX_STACK_ARG(end,"end")
HXLINE( 163)		HX_VARI( int,len) = (end - begin);
HXLINE( 164)		HX_VARI( int,byte_offset) = (begin * this->bytesPerElement);
HXLINE( 166)		HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXLINE( 167)		switch((int)(this->type)){
            			case (int)0: {
HXLINE( 197)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				HX_VARI(  ::haxe::io::Bytes,buffer) = this->buffer;
HXDLIN( 170)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 170)				if (hx::IsNotNull( buffer )) {
HXLINE( 170)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 170)					if ((byte_offset < (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					if ((hx::Mod(byte_offset,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					HX_VARI( int,bufferByteLength) = buffer->length;
HXDLIN( 170)					HX_VARI( int,newByteLength) = bufferByteLength;
HXDLIN( 170)					if (hx::IsNull( len )) {
HXLINE( 170)						newByteLength = (bufferByteLength - byte_offset);
HXDLIN( 170)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 170)						if ((newByteLength < (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 170)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 170)						if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 170)					_this->buffer = buffer;
HXDLIN( 170)					_this->byteOffset = byte_offset;
HXDLIN( 170)					_this->byteLength = newByteLength;
HXDLIN( 170)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 170)					this1 = _this;
            				}
            				else {
HXLINE( 170)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 166)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 173)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = this->buffer;
HXDLIN( 173)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 173)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 173)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 173)					if ((byte_offset < (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					if ((hx::Mod(byte_offset,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					HX_VARI_NAME( int,bufferByteLength1,"bufferByteLength") = buffer1->length;
HXDLIN( 173)					HX_VARI_NAME( int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN( 173)					if (hx::IsNull( len )) {
HXLINE( 173)						newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN( 173)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 173)						if ((newByteLength1 < (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 173)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 173)						if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 173)					_this1->buffer = buffer1;
HXDLIN( 173)					_this1->byteOffset = byte_offset;
HXDLIN( 173)					_this1->byteLength = newByteLength1;
HXDLIN( 173)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 173)					this2 = _this1;
            				}
            				else {
HXLINE( 173)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 166)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 176)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this->buffer;
HXDLIN( 176)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 176)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 176)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 176)					if ((byte_offset < (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					HX_VARI_NAME( int,bufferByteLength2,"bufferByteLength") = buffer2->length;
HXDLIN( 176)					HX_VARI_NAME( int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN( 176)					if (hx::IsNull( len )) {
HXLINE( 176)						newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN( 176)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 176)						if ((newByteLength2 < (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 176)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 176)						if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 176)					_this2->buffer = buffer2;
HXDLIN( 176)					_this2->byteOffset = byte_offset;
HXDLIN( 176)					_this2->byteLength = newByteLength2;
HXDLIN( 176)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 176)					this3 = _this2;
            				}
            				else {
HXLINE( 176)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 166)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 179)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this->buffer;
HXDLIN( 179)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 179)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 179)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 179)					if ((byte_offset < (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					HX_VARI_NAME( int,bufferByteLength3,"bufferByteLength") = buffer3->length;
HXDLIN( 179)					HX_VARI_NAME( int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN( 179)					if (hx::IsNull( len )) {
HXLINE( 179)						newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN( 179)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 179)						if ((newByteLength3 < (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 179)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 179)						if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 179)					_this3->buffer = buffer3;
HXDLIN( 179)					_this3->byteOffset = byte_offset;
HXDLIN( 179)					_this3->byteLength = newByteLength3;
HXDLIN( 179)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 179)					this4 = _this3;
            				}
            				else {
HXLINE( 179)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            				}
HXLINE( 166)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 182)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this->buffer;
HXDLIN( 182)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 182)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 182)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 182)					if ((byte_offset < (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					HX_VARI_NAME( int,bufferByteLength4,"bufferByteLength") = buffer4->length;
HXDLIN( 182)					HX_VARI_NAME( int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN( 182)					if (hx::IsNull( len )) {
HXLINE( 182)						newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN( 182)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 182)						if ((newByteLength4 < (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 182)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 182)						if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 182)					_this4->buffer = buffer4;
HXDLIN( 182)					_this4->byteOffset = byte_offset;
HXDLIN( 182)					_this4->byteLength = newByteLength4;
HXDLIN( 182)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 182)					this5 = _this4;
            				}
            				else {
HXLINE( 182)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            				}
HXLINE( 166)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 185)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this->buffer;
HXDLIN( 185)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN( 185)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 185)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 185)					if ((byte_offset < (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					HX_VARI_NAME( int,bufferByteLength5,"bufferByteLength") = buffer5->length;
HXDLIN( 185)					HX_VARI_NAME( int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN( 185)					if (hx::IsNull( len )) {
HXLINE( 185)						newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN( 185)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 185)						if ((newByteLength5 < (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 185)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 185)						if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 185)					_this5->buffer = buffer5;
HXDLIN( 185)					_this5->byteOffset = byte_offset;
HXDLIN( 185)					_this5->byteLength = newByteLength5;
HXDLIN( 185)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 185)					this6 = _this5;
            				}
            				else {
HXLINE( 185)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            				}
HXLINE( 166)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 188)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this->buffer;
HXDLIN( 188)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 188)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 188)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 188)					if ((byte_offset < (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					HX_VARI_NAME( int,bufferByteLength6,"bufferByteLength") = buffer6->length;
HXDLIN( 188)					HX_VARI_NAME( int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN( 188)					if (hx::IsNull( len )) {
HXLINE( 188)						newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN( 188)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 188)						if ((newByteLength6 < (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 188)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 188)						if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 188)					_this6->buffer = buffer6;
HXDLIN( 188)					_this6->byteOffset = byte_offset;
HXDLIN( 188)					_this6->byteLength = newByteLength6;
HXDLIN( 188)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 188)					this7 = _this6;
            				}
            				else {
HXLINE( 188)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            				}
HXLINE( 166)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 191)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this->buffer;
HXDLIN( 191)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN( 191)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 191)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 191)					if ((byte_offset < (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					HX_VARI_NAME( int,bufferByteLength7,"bufferByteLength") = buffer7->length;
HXDLIN( 191)					HX_VARI_NAME( int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN( 191)					if (hx::IsNull( len )) {
HXLINE( 191)						newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN( 191)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 191)						if ((newByteLength7 < (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 191)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 191)						if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 191)					_this7->buffer = buffer7;
HXDLIN( 191)					_this7->byteOffset = byte_offset;
HXDLIN( 191)					_this7->byteLength = newByteLength7;
HXDLIN( 191)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 191)					this8 = _this7;
            				}
            				else {
HXLINE( 191)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 166)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 194)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this->buffer;
HXDLIN( 194)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN( 194)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 194)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 194)					if ((byte_offset < (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					HX_VARI_NAME( int,bufferByteLength8,"bufferByteLength") = buffer8->length;
HXDLIN( 194)					HX_VARI_NAME( int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN( 194)					if (hx::IsNull( len )) {
HXLINE( 194)						newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN( 194)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 194)						if ((newByteLength8 < (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 194)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 194)						if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 194)					_this8->buffer = buffer8;
HXDLIN( 194)					_this8->byteOffset = byte_offset;
HXDLIN( 194)					_this8->byteLength = newByteLength8;
HXDLIN( 194)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 194)					this9 = _this8;
            				}
            				else {
HXLINE( 194)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 166)				view = this9;
            			}
            			break;
            		}
HXLINE( 200)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_Int16Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_UInt16Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_160_subarray_lime_utils_UInt16Array)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(begin,"begin")
            	HX_STACK_ARG(end,"end")
HXLINE( 163)		HX_VARI( int,len) = (end - begin);
HXLINE( 164)		HX_VARI( int,byte_offset) = (begin * this->bytesPerElement);
HXLINE( 166)		HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXLINE( 167)		switch((int)(this->type)){
            			case (int)0: {
HXLINE( 197)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				HX_VARI(  ::haxe::io::Bytes,buffer) = this->buffer;
HXDLIN( 170)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 170)				if (hx::IsNotNull( buffer )) {
HXLINE( 170)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 170)					if ((byte_offset < (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					if ((hx::Mod(byte_offset,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					HX_VARI( int,bufferByteLength) = buffer->length;
HXDLIN( 170)					HX_VARI( int,newByteLength) = bufferByteLength;
HXDLIN( 170)					if (hx::IsNull( len )) {
HXLINE( 170)						newByteLength = (bufferByteLength - byte_offset);
HXDLIN( 170)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 170)						if ((newByteLength < (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 170)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 170)						if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 170)					_this->buffer = buffer;
HXDLIN( 170)					_this->byteOffset = byte_offset;
HXDLIN( 170)					_this->byteLength = newByteLength;
HXDLIN( 170)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 170)					this1 = _this;
            				}
            				else {
HXLINE( 170)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 166)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 173)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = this->buffer;
HXDLIN( 173)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 173)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 173)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 173)					if ((byte_offset < (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					if ((hx::Mod(byte_offset,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					HX_VARI_NAME( int,bufferByteLength1,"bufferByteLength") = buffer1->length;
HXDLIN( 173)					HX_VARI_NAME( int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN( 173)					if (hx::IsNull( len )) {
HXLINE( 173)						newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN( 173)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 173)						if ((newByteLength1 < (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 173)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 173)						if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 173)					_this1->buffer = buffer1;
HXDLIN( 173)					_this1->byteOffset = byte_offset;
HXDLIN( 173)					_this1->byteLength = newByteLength1;
HXDLIN( 173)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 173)					this2 = _this1;
            				}
            				else {
HXLINE( 173)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 166)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 176)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this->buffer;
HXDLIN( 176)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 176)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 176)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 176)					if ((byte_offset < (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					HX_VARI_NAME( int,bufferByteLength2,"bufferByteLength") = buffer2->length;
HXDLIN( 176)					HX_VARI_NAME( int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN( 176)					if (hx::IsNull( len )) {
HXLINE( 176)						newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN( 176)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 176)						if ((newByteLength2 < (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 176)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 176)						if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 176)					_this2->buffer = buffer2;
HXDLIN( 176)					_this2->byteOffset = byte_offset;
HXDLIN( 176)					_this2->byteLength = newByteLength2;
HXDLIN( 176)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 176)					this3 = _this2;
            				}
            				else {
HXLINE( 176)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 166)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 179)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this->buffer;
HXDLIN( 179)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 179)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 179)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 179)					if ((byte_offset < (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					HX_VARI_NAME( int,bufferByteLength3,"bufferByteLength") = buffer3->length;
HXDLIN( 179)					HX_VARI_NAME( int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN( 179)					if (hx::IsNull( len )) {
HXLINE( 179)						newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN( 179)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 179)						if ((newByteLength3 < (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 179)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 179)						if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 179)					_this3->buffer = buffer3;
HXDLIN( 179)					_this3->byteOffset = byte_offset;
HXDLIN( 179)					_this3->byteLength = newByteLength3;
HXDLIN( 179)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 179)					this4 = _this3;
            				}
            				else {
HXLINE( 179)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            				}
HXLINE( 166)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 182)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this->buffer;
HXDLIN( 182)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 182)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 182)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 182)					if ((byte_offset < (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					HX_VARI_NAME( int,bufferByteLength4,"bufferByteLength") = buffer4->length;
HXDLIN( 182)					HX_VARI_NAME( int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN( 182)					if (hx::IsNull( len )) {
HXLINE( 182)						newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN( 182)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 182)						if ((newByteLength4 < (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 182)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 182)						if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 182)					_this4->buffer = buffer4;
HXDLIN( 182)					_this4->byteOffset = byte_offset;
HXDLIN( 182)					_this4->byteLength = newByteLength4;
HXDLIN( 182)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 182)					this5 = _this4;
            				}
            				else {
HXLINE( 182)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            				}
HXLINE( 166)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 185)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this->buffer;
HXDLIN( 185)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN( 185)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 185)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 185)					if ((byte_offset < (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					HX_VARI_NAME( int,bufferByteLength5,"bufferByteLength") = buffer5->length;
HXDLIN( 185)					HX_VARI_NAME( int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN( 185)					if (hx::IsNull( len )) {
HXLINE( 185)						newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN( 185)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 185)						if ((newByteLength5 < (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 185)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 185)						if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 185)					_this5->buffer = buffer5;
HXDLIN( 185)					_this5->byteOffset = byte_offset;
HXDLIN( 185)					_this5->byteLength = newByteLength5;
HXDLIN( 185)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 185)					this6 = _this5;
            				}
            				else {
HXLINE( 185)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            				}
HXLINE( 166)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 188)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this->buffer;
HXDLIN( 188)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 188)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 188)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 188)					if ((byte_offset < (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					HX_VARI_NAME( int,bufferByteLength6,"bufferByteLength") = buffer6->length;
HXDLIN( 188)					HX_VARI_NAME( int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN( 188)					if (hx::IsNull( len )) {
HXLINE( 188)						newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN( 188)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 188)						if ((newByteLength6 < (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 188)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 188)						if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 188)					_this6->buffer = buffer6;
HXDLIN( 188)					_this6->byteOffset = byte_offset;
HXDLIN( 188)					_this6->byteLength = newByteLength6;
HXDLIN( 188)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 188)					this7 = _this6;
            				}
            				else {
HXLINE( 188)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            				}
HXLINE( 166)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 191)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this->buffer;
HXDLIN( 191)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN( 191)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 191)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 191)					if ((byte_offset < (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					HX_VARI_NAME( int,bufferByteLength7,"bufferByteLength") = buffer7->length;
HXDLIN( 191)					HX_VARI_NAME( int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN( 191)					if (hx::IsNull( len )) {
HXLINE( 191)						newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN( 191)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 191)						if ((newByteLength7 < (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 191)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 191)						if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 191)					_this7->buffer = buffer7;
HXDLIN( 191)					_this7->byteOffset = byte_offset;
HXDLIN( 191)					_this7->byteLength = newByteLength7;
HXDLIN( 191)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 191)					this8 = _this7;
            				}
            				else {
HXLINE( 191)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 166)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 194)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this->buffer;
HXDLIN( 194)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN( 194)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 194)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 194)					if ((byte_offset < (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					HX_VARI_NAME( int,bufferByteLength8,"bufferByteLength") = buffer8->length;
HXDLIN( 194)					HX_VARI_NAME( int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN( 194)					if (hx::IsNull( len )) {
HXLINE( 194)						newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN( 194)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 194)						if ((newByteLength8 < (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 194)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 194)						if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 194)					_this8->buffer = buffer8;
HXDLIN( 194)					_this8->byteOffset = byte_offset;
HXDLIN( 194)					_this8->byteLength = newByteLength8;
HXDLIN( 194)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 194)					this9 = _this8;
            				}
            				else {
HXLINE( 194)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 166)				view = this9;
            			}
            			break;
            		}
HXLINE( 200)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_UInt16Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_Float64Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_160_subarray_lime_utils_Float64Array)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(begin,"begin")
            	HX_STACK_ARG(end,"end")
HXLINE( 163)		HX_VARI( int,len) = (end - begin);
HXLINE( 164)		HX_VARI( int,byte_offset) = (begin * this->bytesPerElement);
HXLINE( 166)		HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXLINE( 167)		switch((int)(this->type)){
            			case (int)0: {
HXLINE( 197)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				HX_VARI(  ::haxe::io::Bytes,buffer) = this->buffer;
HXDLIN( 170)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 170)				if (hx::IsNotNull( buffer )) {
HXLINE( 170)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 170)					if ((byte_offset < (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					if ((hx::Mod(byte_offset,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 170)					HX_VARI( int,bufferByteLength) = buffer->length;
HXDLIN( 170)					HX_VARI( int,newByteLength) = bufferByteLength;
HXDLIN( 170)					if (hx::IsNull( len )) {
HXLINE( 170)						newByteLength = (bufferByteLength - byte_offset);
HXDLIN( 170)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 170)						if ((newByteLength < (int)0)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 170)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 170)						if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE( 170)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 170)					_this->buffer = buffer;
HXDLIN( 170)					_this->byteOffset = byte_offset;
HXDLIN( 170)					_this->byteLength = newByteLength;
HXDLIN( 170)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 170)					this1 = _this;
            				}
            				else {
HXLINE( 170)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 166)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 173)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = this->buffer;
HXDLIN( 173)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 173)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 173)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 173)					if ((byte_offset < (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					if ((hx::Mod(byte_offset,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 173)					HX_VARI_NAME( int,bufferByteLength1,"bufferByteLength") = buffer1->length;
HXDLIN( 173)					HX_VARI_NAME( int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN( 173)					if (hx::IsNull( len )) {
HXLINE( 173)						newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN( 173)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 173)						if ((newByteLength1 < (int)0)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 173)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 173)						if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE( 173)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 173)					_this1->buffer = buffer1;
HXDLIN( 173)					_this1->byteOffset = byte_offset;
HXDLIN( 173)					_this1->byteLength = newByteLength1;
HXDLIN( 173)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 173)					this2 = _this1;
            				}
            				else {
HXLINE( 173)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 166)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 176)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this->buffer;
HXDLIN( 176)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 176)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 176)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 176)					if ((byte_offset < (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 176)					HX_VARI_NAME( int,bufferByteLength2,"bufferByteLength") = buffer2->length;
HXDLIN( 176)					HX_VARI_NAME( int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN( 176)					if (hx::IsNull( len )) {
HXLINE( 176)						newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN( 176)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 176)						if ((newByteLength2 < (int)0)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 176)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 176)						if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE( 176)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 176)					_this2->buffer = buffer2;
HXDLIN( 176)					_this2->byteOffset = byte_offset;
HXDLIN( 176)					_this2->byteLength = newByteLength2;
HXDLIN( 176)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 176)					this3 = _this2;
            				}
            				else {
HXLINE( 176)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 166)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 179)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this->buffer;
HXDLIN( 179)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 179)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 179)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 179)					if ((byte_offset < (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 179)					HX_VARI_NAME( int,bufferByteLength3,"bufferByteLength") = buffer3->length;
HXDLIN( 179)					HX_VARI_NAME( int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN( 179)					if (hx::IsNull( len )) {
HXLINE( 179)						newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN( 179)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 179)						if ((newByteLength3 < (int)0)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 179)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 179)						if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE( 179)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 179)					_this3->buffer = buffer3;
HXDLIN( 179)					_this3->byteOffset = byte_offset;
HXDLIN( 179)					_this3->byteLength = newByteLength3;
HXDLIN( 179)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 179)					this4 = _this3;
            				}
            				else {
HXLINE( 179)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            				}
HXLINE( 166)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 182)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this->buffer;
HXDLIN( 182)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 182)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 182)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 182)					if ((byte_offset < (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 182)					HX_VARI_NAME( int,bufferByteLength4,"bufferByteLength") = buffer4->length;
HXDLIN( 182)					HX_VARI_NAME( int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN( 182)					if (hx::IsNull( len )) {
HXLINE( 182)						newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN( 182)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 182)						if ((newByteLength4 < (int)0)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 182)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 182)						if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE( 182)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 182)					_this4->buffer = buffer4;
HXDLIN( 182)					_this4->byteOffset = byte_offset;
HXDLIN( 182)					_this4->byteLength = newByteLength4;
HXDLIN( 182)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 182)					this5 = _this4;
            				}
            				else {
HXLINE( 182)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            				}
HXLINE( 166)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 185)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this->buffer;
HXDLIN( 185)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN( 185)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 185)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 185)					if ((byte_offset < (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 185)					HX_VARI_NAME( int,bufferByteLength5,"bufferByteLength") = buffer5->length;
HXDLIN( 185)					HX_VARI_NAME( int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN( 185)					if (hx::IsNull( len )) {
HXLINE( 185)						newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN( 185)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 185)						if ((newByteLength5 < (int)0)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 185)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 185)						if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE( 185)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 185)					_this5->buffer = buffer5;
HXDLIN( 185)					_this5->byteOffset = byte_offset;
HXDLIN( 185)					_this5->byteLength = newByteLength5;
HXDLIN( 185)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 185)					this6 = _this5;
            				}
            				else {
HXLINE( 185)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            				}
HXLINE( 166)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 188)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this->buffer;
HXDLIN( 188)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 188)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 188)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 188)					if ((byte_offset < (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 188)					HX_VARI_NAME( int,bufferByteLength6,"bufferByteLength") = buffer6->length;
HXDLIN( 188)					HX_VARI_NAME( int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN( 188)					if (hx::IsNull( len )) {
HXLINE( 188)						newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN( 188)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 188)						if ((newByteLength6 < (int)0)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 188)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 188)						if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE( 188)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 188)					_this6->buffer = buffer6;
HXDLIN( 188)					_this6->byteOffset = byte_offset;
HXDLIN( 188)					_this6->byteLength = newByteLength6;
HXDLIN( 188)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 188)					this7 = _this6;
            				}
            				else {
HXLINE( 188)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            				}
HXLINE( 166)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 191)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this->buffer;
HXDLIN( 191)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN( 191)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 191)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 191)					if ((byte_offset < (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 191)					HX_VARI_NAME( int,bufferByteLength7,"bufferByteLength") = buffer7->length;
HXDLIN( 191)					HX_VARI_NAME( int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN( 191)					if (hx::IsNull( len )) {
HXLINE( 191)						newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN( 191)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 191)						if ((newByteLength7 < (int)0)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 191)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 191)						if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE( 191)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 191)					_this7->buffer = buffer7;
HXDLIN( 191)					_this7->byteOffset = byte_offset;
HXDLIN( 191)					_this7->byteLength = newByteLength7;
HXDLIN( 191)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 191)					this8 = _this7;
            				}
            				else {
HXLINE( 191)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 166)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 194)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this->buffer;
HXDLIN( 194)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN( 194)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 194)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 194)					if ((byte_offset < (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 194)					HX_VARI_NAME( int,bufferByteLength8,"bufferByteLength") = buffer8->length;
HXDLIN( 194)					HX_VARI_NAME( int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN( 194)					if (hx::IsNull( len )) {
HXLINE( 194)						newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN( 194)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 194)						if ((newByteLength8 < (int)0)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 194)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 194)						if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE( 194)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 194)					_this8->buffer = buffer8;
HXDLIN( 194)					_this8->byteOffset = byte_offset;
HXDLIN( 194)					_this8->byteLength = newByteLength8;
HXDLIN( 194)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 194)					this9 = _this8;
            				}
            				else {
HXLINE( 194)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 166)				view = this9;
            			}
            			break;
            		}
HXLINE( 200)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_Float64Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::initTypedArray( ::lime::utils::ArrayBufferView view){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_48_initTypedArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(view,"view")
HXLINE(  50)		HX_VARI(  ::haxe::io::Bytes,srcData) = view->buffer;
HXLINE(  51)		HX_VARI( int,srcLength) = view->length;
HXLINE(  52)		HX_VARI( int,srcByteOffset) = view->byteOffset;
HXLINE(  58)		if ((view->type == this->type)) {
HXLINE(  59)			HX_VARI( int,cloneLength) = (srcData->length - srcByteOffset);
HXDLIN(  59)			this->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  59)			this->buffer->blit((int)0,srcData,srcByteOffset,cloneLength);
            		}
            		else {
HXLINE(  62)			HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            		}
HXLINE(  65)		this->byteLength = (this->bytesPerElement * srcLength);
HXLINE(  66)		this->byteOffset = (int)0;
HXLINE(  67)		this->length = srcLength;
HXLINE(  69)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayBufferView_obj,initTypedArray,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::initBuffer( ::haxe::io::Bytes in_buffer, ::Dynamic __o_in_byteOffset, ::Dynamic len){
 ::Dynamic in_byteOffset = __o_in_byteOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_75_initBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(in_buffer,"in_buffer")
            	HX_STACK_ARG(in_byteOffset,"in_byteOffset")
            	HX_STACK_ARG(len,"len")
HXLINE(  77)		if (hx::IsLess( in_byteOffset,(int)0 )) {
HXLINE(  77)			HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            		}
HXLINE(  78)		if ((hx::Mod(in_byteOffset,this->bytesPerElement) != (int)0)) {
HXLINE(  78)			HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            		}
HXLINE(  80)		HX_VARI( int,bufferByteLength) = in_buffer->length;
HXLINE(  82)		HX_VARI( int,newByteLength) = bufferByteLength;
HXLINE(  84)		if (hx::IsNull( len )) {
HXLINE(  86)			newByteLength = (bufferByteLength - in_byteOffset);
HXLINE(  88)			if ((hx::Mod(bufferByteLength,this->bytesPerElement) != (int)0)) {
HXLINE(  88)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXLINE(  89)			if ((newByteLength < (int)0)) {
HXLINE(  89)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
            		}
            		else {
HXLINE(  93)			newByteLength = (len * this->bytesPerElement);
HXLINE(  96)			if (((in_byteOffset + newByteLength) > bufferByteLength)) {
HXLINE(  96)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
            		}
HXLINE( 100)		this->buffer = in_buffer;
HXLINE( 101)		this->byteOffset = in_byteOffset;
HXLINE( 102)		this->byteLength = newByteLength;
HXLINE( 103)		this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)this->bytesPerElement));
HXLINE( 105)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ArrayBufferView_obj,initBuffer,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::initArray(::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_112_initArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(array,"array")
HXLINE( 114)		this->byteOffset = (int)0;
HXLINE( 115)		this->length = array->get_length();
HXLINE( 116)		this->byteLength = (this->length * this->bytesPerElement);
HXLINE( 118)		this->buffer = ::haxe::io::Bytes_obj::alloc(this->byteLength);
HXLINE( 119)		this->copyFromArray(array,null());
HXLINE( 121)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayBufferView_obj,initArray,return )

void ArrayBufferView_obj::set( ::lime::utils::ArrayBufferView view,::cpp::VirtualArray array,hx::Null< int >  __o_offset){
int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_132_set)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(view,"view")
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(offset,"offset")
HXLINE( 132)		bool _hx_tmp;
HXDLIN( 132)		if (hx::IsNotNull( view )) {
HXLINE( 132)			_hx_tmp = hx::IsNull( array );
            		}
            		else {
HXLINE( 132)			_hx_tmp = false;
            		}
HXDLIN( 132)		if (_hx_tmp) {
HXLINE( 133)			this->buffer->blit((offset * this->bytesPerElement),view->buffer,view->byteOffset,view->byteLength);
            		}
            		else {
HXLINE( 134)			bool _hx_tmp1;
HXDLIN( 134)			if (hx::IsNotNull( array )) {
HXLINE( 134)				_hx_tmp1 = hx::IsNull( view );
            			}
            			else {
HXLINE( 134)				_hx_tmp1 = false;
            			}
HXDLIN( 134)			if (_hx_tmp1) {
HXLINE( 135)				this->copyFromArray(array,offset);
            			}
            			else {
HXLINE( 137)				HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ArrayBufferView_obj,set,(void))

void ArrayBufferView_obj::cloneBuffer( ::haxe::io::Bytes src,hx::Null< int >  __o_srcByteOffset){
int srcByteOffset = __o_srcByteOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_146_cloneBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(src,"src")
            	HX_STACK_ARG(srcByteOffset,"srcByteOffset")
HXLINE( 149)		HX_VARI( int,cloneLength) = (src->length - srcByteOffset);
HXLINE( 151)		this->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXLINE( 152)		this->buffer->blit((int)0,src,srcByteOffset,cloneLength);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,cloneBuffer,(void))

int ArrayBufferView_obj::bytesForType(int type){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_208_bytesForType)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE( 208)		switch((int)(type)){
            			case (int)1: {
HXLINE( 207)				return (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 207)				return (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE( 207)				return (int)4;
            			}
            			break;
            			case (int)4: {
HXLINE( 207)				return (int)1;
            			}
            			break;
            			case (int)5: {
HXLINE( 207)				return (int)1;
            			}
            			break;
            			case (int)6: {
HXLINE( 207)				return (int)2;
            			}
            			break;
            			case (int)7: {
HXLINE( 207)				return (int)4;
            			}
            			break;
            			case (int)8: {
HXLINE( 207)				return (int)4;
            			}
            			break;
            			case (int)9: {
HXLINE( 207)				return (int)8;
            			}
            			break;
            			default:{
HXLINE( 207)				return (int)1;
            			}
            		}
HXLINE( 208)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayBufferView_obj,bytesForType,return )

::String ArrayBufferView_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_243_toString)
            	HX_STACK_THIS(this)
HXLINE( 247)		HX_VAR( ::String,name);
HXLINE( 248)		switch((int)(this->type)){
            			case (int)1: {
HXLINE( 247)				name = HX_("Int8Array",50,dc,f6,ae);
            			}
            			break;
            			case (int)2: {
HXLINE( 247)				name = HX_("Int16Array",85,17,71,a9);
            			}
            			break;
            			case (int)3: {
HXLINE( 247)				name = HX_("Int32Array",8b,93,2e,63);
            			}
            			break;
            			case (int)4: {
HXLINE( 247)				name = HX_("UInt8Array",5b,a9,b0,87);
            			}
            			break;
            			case (int)5: {
HXLINE( 247)				name = HX_("UInt8ClampedArray",9d,1f,db,26);
            			}
            			break;
            			case (int)6: {
HXLINE( 247)				name = HX_("UInt16Array",1a,b4,4a,73);
            			}
            			break;
            			case (int)7: {
HXLINE( 247)				name = HX_("UInt32Array",20,30,08,2d);
            			}
            			break;
            			case (int)8: {
HXLINE( 247)				name = HX_("Float32Array",7e,42,27,90);
            			}
            			break;
            			case (int)9: {
HXLINE( 247)				name = HX_("Float64Array",7f,5f,9e,d9);
            			}
            			break;
            			default:{
HXLINE( 247)				name = HX_("ArrayBufferView",5e,6e,84,fd);
            			}
            		}
HXLINE( 261)		return (name + ((((HX_(" [byteLength:",11,d6,a9,ca) + this->byteLength) + HX_(", length:",a0,04,67,ef)) + this->length) + HX_("]",5d,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayBufferView_obj,toString,return )

int ArrayBufferView_obj::toByteLength(int elemCount){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_268_toByteLength)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elemCount,"elemCount")
HXLINE( 268)		return (elemCount * this->bytesPerElement);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayBufferView_obj,toByteLength,return )

void ArrayBufferView_obj::copyFromArray(::Array< Float > array,hx::Null< int >  __o_offset){
int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_275_copyFromArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(offset,"offset")
HXLINE( 278)		HX_VARI( int,i) = (int)0;
HXDLIN( 278)		HX_VARI( int,len) = array->length;
HXLINE( 280)		switch((int)(this->type)){
            			case (int)0: {
HXLINE( 346)				HX_STACK_DO_THROW(HX_("copyFromArray on a base type ArrayBuffer",e8,01,1a,e2));
            			}
            			break;
            			case (int)1: {
HXLINE( 282)				while((i < len)){
HXLINE( 283)					HX_VARI( int,pos) = ((offset + i) * this->bytesPerElement);
HXLINE( 284)					{
HXLINE( 284)						 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 284)						HX_VARI( int,value) = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 284)						::__hxcpp_memory_set_byte(buffer->b,pos,value);
            					}
HXLINE( 286)					i = (i + (int)1);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 289)				while((i < len)){
HXLINE( 290)					HX_VARI_NAME( int,pos1,"pos") = ((offset + i) * this->bytesPerElement);
HXLINE( 291)					 ::haxe::io::Bytes _hx_tmp = this->buffer;
HXDLIN( 291)					::lime::utils::ArrayBufferIO_obj::setInt16(_hx_tmp,pos1,::Std_obj::_hx_int(array->__get(i)),null());
HXLINE( 293)					i = (i + (int)1);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 296)				while((i < len)){
HXLINE( 297)					HX_VARI_NAME( int,pos2,"pos") = ((offset + i) * this->bytesPerElement);
HXLINE( 298)					{
HXLINE( 298)						 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 298)						HX_VARI_NAME( int,value1,"value") = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 298)						::__hxcpp_memory_set_i32(buffer1->b,pos2,value1);
            					}
HXLINE( 300)					i = (i + (int)1);
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 303)				while((i < len)){
HXLINE( 304)					HX_VARI_NAME( int,pos3,"pos") = ((offset + i) * this->bytesPerElement);
HXLINE( 305)					{
HXLINE( 305)						 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 305)						HX_VARI_NAME( int,value2,"value") = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 305)						::__hxcpp_memory_set_byte(buffer2->b,pos3,value2);
            					}
HXLINE( 307)					i = (i + (int)1);
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 324)				while((i < len)){
HXLINE( 325)					HX_VARI_NAME( int,pos4,"pos") = ((offset + i) * this->bytesPerElement);
HXLINE( 326)					{
HXLINE( 326)						 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 326)						{
HXLINE( 326)							HX_VARI_NAME( int,_hx_int,"int") = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 326)							Float _out;
HXDLIN( 326)							if ((_hx_int < (int)0)) {
HXLINE( 326)								_out = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE( 326)								_out = (_hx_int + ((Float)0.0));
            							}
HXDLIN( 326)							HX_VARI_NAME( int,_out1,"_out") = ::Std_obj::_hx_int(_out);
HXDLIN( 326)							if ((_out1 > (int)255)) {
HXLINE( 326)								_out1 = (int)255;
            							}
            							else {
HXLINE( 326)								_out1 = _out1;
            							}
HXDLIN( 326)							HX_VAR_NAME( int,value3,"value");
HXDLIN( 326)							if ((_out1 < (int)0)) {
HXLINE( 326)								value3 = (int)0;
            							}
            							else {
HXLINE( 326)								value3 = _out1;
            							}
HXDLIN( 326)							::__hxcpp_memory_set_byte(buffer3->b,pos4,value3);
            						}
            					}
HXLINE( 328)					i = (i + (int)1);
            				}
            			}
            			break;
            			case (int)6: {
HXLINE( 310)				while((i < len)){
HXLINE( 311)					HX_VARI_NAME( int,pos5,"pos") = ((offset + i) * this->bytesPerElement);
HXLINE( 312)					{
HXLINE( 312)						 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 312)						HX_VARI_NAME( int,value4,"value") = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 312)						::__hxcpp_memory_set_ui16(buffer4->b,pos5,value4);
            					}
HXLINE( 314)					i = (i + (int)1);
            				}
            			}
            			break;
            			case (int)7: {
HXLINE( 317)				while((i < len)){
HXLINE( 318)					HX_VARI_NAME( int,pos6,"pos") = ((offset + i) * this->bytesPerElement);
HXLINE( 319)					{
HXLINE( 319)						 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 319)						HX_VARI_NAME( int,value5,"value") = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 319)						::__hxcpp_memory_set_ui32(buffer5->b,pos6,value5);
            					}
HXLINE( 321)					i = (i + (int)1);
            				}
            			}
            			break;
            			case (int)8: {
HXLINE( 331)				while((i < len)){
HXLINE( 333)					::__hxcpp_memory_set_float(this->buffer->b,((offset + i) * this->bytesPerElement),array->__get(i));
HXLINE( 335)					i = (i + (int)1);
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 338)				while((i < len)){
HXLINE( 340)					::__hxcpp_memory_set_double(this->buffer->b,((offset + i) * this->bytesPerElement),array->__get(i));
HXLINE( 342)					i = (i + (int)1);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,copyFromArray,(void))


hx::ObjectPtr< ArrayBufferView_obj > ArrayBufferView_obj::__new( ::Dynamic elements,int in_type) {
	hx::ObjectPtr< ArrayBufferView_obj > __this = new ArrayBufferView_obj();
	__this->__construct(elements,in_type);
	return __this;
}

hx::ObjectPtr< ArrayBufferView_obj > ArrayBufferView_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic elements,int in_type) {
	ArrayBufferView_obj *__this = (ArrayBufferView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ArrayBufferView_obj), true, "lime.utils.ArrayBufferView"));
	*(void **)__this = ArrayBufferView_obj::_hx_vtable;
	__this->__construct(elements,in_type);
	return __this;
}

ArrayBufferView_obj::ArrayBufferView_obj()
{
}

void ArrayBufferView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArrayBufferView);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(byteOffset,"byteOffset");
	HX_MARK_MEMBER_NAME(byteLength,"byteLength");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(bytesPerElement,"bytesPerElement");
	HX_MARK_END_CLASS();
}

void ArrayBufferView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(byteOffset,"byteOffset");
	HX_VISIT_MEMBER_NAME(byteLength,"byteLength");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(bytesPerElement,"bytesPerElement");
}

hx::Val ArrayBufferView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"initArray") ) { return hx::Val( initArray_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteOffset") ) { return hx::Val( byteOffset); }
		if (HX_FIELD_EQ(inName,"byteLength") ) { return hx::Val( byteLength); }
		if (HX_FIELD_EQ(inName,"initBuffer") ) { return hx::Val( initBuffer_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cloneBuffer") ) { return hx::Val( cloneBuffer_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bytesForType") ) { return hx::Val( bytesForType_dyn()); }
		if (HX_FIELD_EQ(inName,"toByteLength") ) { return hx::Val( toByteLength_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyFromArray") ) { return hx::Val( copyFromArray_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"initTypedArray") ) { return hx::Val( initTypedArray_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bytesPerElement") ) { return hx::Val( bytesPerElement); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_Int8Array") ) { return hx::Val( subarray_lime_utils_Int8Array_dyn()); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_Int32Array") ) { return hx::Val( subarray_lime_utils_Int32Array_dyn()); }
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_UInt8Array") ) { return hx::Val( subarray_lime_utils_UInt8Array_dyn()); }
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_Int16Array") ) { return hx::Val( subarray_lime_utils_Int16Array_dyn()); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_UInt32Array") ) { return hx::Val( subarray_lime_utils_UInt32Array_dyn()); }
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_UInt16Array") ) { return hx::Val( subarray_lime_utils_UInt16Array_dyn()); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_Float32Array") ) { return hx::Val( subarray_lime_utils_Float32Array_dyn()); }
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_Float64Array") ) { return hx::Val( subarray_lime_utils_Float64Array_dyn()); }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_UInt8ClampedArray") ) { return hx::Val( subarray_lime_utils_UInt8ClampedArray_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ArrayBufferView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteOffset") ) { byteOffset=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"byteLength") ) { byteLength=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bytesPerElement") ) { bytesPerElement=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArrayBufferView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38"));
	outFields->push(HX_HCSTRING("byteLength","\x0e","\x1e","\x0c","\x77"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("bytesPerElement","\xaa","\x67","\x89","\x18"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ArrayBufferView_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(ArrayBufferView_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,byteOffset),HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38")},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,byteLength),HX_HCSTRING("byteLength","\x0e","\x1e","\x0c","\x77")},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,bytesPerElement),HX_HCSTRING("bytesPerElement","\xaa","\x67","\x89","\x18")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ArrayBufferView_obj_sStaticStorageInfo = 0;
#endif

static ::String ArrayBufferView_obj_sMemberFields[] = {
	HX_HCSTRING("subarray_lime_utils_Int32Array","\xdd","\x09","\x3e","\x7c"),
	HX_HCSTRING("subarray_lime_utils_UInt32Array","\x8e","\x41","\x80","\x01"),
	HX_HCSTRING("subarray_lime_utils_Float32Array","\x50","\x71","\xbe","\xa4"),
	HX_HCSTRING("subarray_lime_utils_UInt8Array","\xad","\x1f","\xc0","\xa0"),
	HX_HCSTRING("subarray_lime_utils_Int8Array","\x3e","\x16","\xba","\x20"),
	HX_HCSTRING("subarray_lime_utils_UInt8ClampedArray","\x8b","\xf7","\x6e","\x70"),
	HX_HCSTRING("subarray_lime_utils_Int16Array","\xd7","\x8d","\x80","\xc2"),
	HX_HCSTRING("subarray_lime_utils_UInt16Array","\x88","\xc5","\xc2","\x47"),
	HX_HCSTRING("subarray_lime_utils_Float64Array","\x51","\x8e","\x35","\xee"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38"),
	HX_HCSTRING("byteLength","\x0e","\x1e","\x0c","\x77"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("bytesPerElement","\xaa","\x67","\x89","\x18"),
	HX_HCSTRING("initTypedArray","\xff","\x5f","\x1a","\x1d"),
	HX_HCSTRING("initBuffer","\x30","\x18","\xda","\xd4"),
	HX_HCSTRING("initArray","\x69","\x88","\x21","\x41"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("cloneBuffer","\x3d","\xa8","\xe8","\x6c"),
	HX_HCSTRING("bytesForType","\x38","\x71","\x1a","\xbd"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toByteLength","\x69","\x4f","\xeb","\x18"),
	HX_HCSTRING("copyFromArray","\x5a","\xdd","\xdd","\x3b"),
	::String(null()) };

static void ArrayBufferView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArrayBufferView_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArrayBufferView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArrayBufferView_obj::__mClass,"__mClass");
};

#endif

hx::Class ArrayBufferView_obj::__mClass;

void ArrayBufferView_obj::__register()
{
	hx::Object *dummy = new ArrayBufferView_obj;
	ArrayBufferView_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.utils.ArrayBufferView","\x08","\xda","\x61","\xc9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArrayBufferView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ArrayBufferView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ArrayBufferView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArrayBufferView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayBufferView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayBufferView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace utils
