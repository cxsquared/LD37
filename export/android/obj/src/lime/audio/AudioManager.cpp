// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_lime_audio_ALAudioContext
#include <lime/audio/ALAudioContext.h>
#endif
#ifndef INCLUDED_lime_audio_ALCAudioContext
#include <lime/audio/ALCAudioContext.h>
#endif
#ifndef INCLUDED_lime_audio_AudioContext
#include <lime/audio/AudioContext.h>
#endif
#ifndef INCLUDED_lime_audio_AudioManager
#include <lime/audio/AudioManager.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_02d95a3071a9a9ff_22_init,"lime.audio.AudioManager","init",0x0c9d6096,"lime.audio.AudioManager.init","lime/audio/AudioManager.hx",22,0x9f466694)
HX_DEFINE_STACK_FRAME(_hx_pos_02d95a3071a9a9ff_72_resume,"lime.audio.AudioManager","resume",0xe85f7cb3,"lime.audio.AudioManager.resume","lime/audio/AudioManager.hx",72,0x9f466694)
HX_DEFINE_STACK_FRAME(_hx_pos_02d95a3071a9a9ff_91_shutdown,"lime.audio.AudioManager","shutdown",0x46165d1c,"lime.audio.AudioManager.shutdown","lime/audio/AudioManager.hx",91,0x9f466694)
HX_DEFINE_STACK_FRAME(_hx_pos_02d95a3071a9a9ff_119_suspend,"lime.audio.AudioManager","suspend",0xf724c1b6,"lime.audio.AudioManager.suspend","lime/audio/AudioManager.hx",119,0x9f466694)
namespace lime{
namespace audio{

void AudioManager_obj::__construct() { }

Dynamic AudioManager_obj::__CreateEmpty() { return new AudioManager_obj; }

void *AudioManager_obj::_hx_vtable = 0;

Dynamic AudioManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AudioManager_obj > _hx_result = new AudioManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AudioManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x05147278;
}

 ::lime::audio::AudioContext AudioManager_obj::context;

void AudioManager_obj::init( ::lime::audio::AudioContext context){
            	HX_GC_STACKFRAME(&_hx_pos_02d95a3071a9a9ff_22_init)
            	HX_STACK_ARG(context,"context")
HXLINE(  22)		if (hx::IsNull( ::lime::audio::AudioManager_obj::context )) {
HXLINE(  24)			if (hx::IsNull( context )) {
HXLINE(  50)				::lime::audio::AudioManager_obj::context = ::lime::audio::AudioContext_obj::OPENAL( ::lime::audio::ALCAudioContext_obj::__alloc( HX_CTX ), ::lime::audio::ALAudioContext_obj::__alloc( HX_CTX ));
            			}
            			else {
HXLINE(  61)				::lime::audio::AudioManager_obj::context = context;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioManager_obj,init,(void))

void AudioManager_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_02d95a3071a9a9ff_72_resume)
HXLINE(  72)		if (hx::IsNotNull( ::lime::audio::AudioManager_obj::context )) {
HXLINE(  74)			HX_VARI(  ::lime::audio::AudioContext,_g) = ::lime::audio::AudioManager_obj::context;
HXDLIN(  74)			_hx_getEnumValueIndex(_g);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AudioManager_obj,resume,(void))

void AudioManager_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_02d95a3071a9a9ff_91_shutdown)
HXLINE(  91)		if (hx::IsNotNull( ::lime::audio::AudioManager_obj::context )) {
HXLINE(  93)			HX_VARI(  ::lime::audio::AudioContext,_g) = ::lime::audio::AudioManager_obj::context;
HXDLIN(  93)			_hx_getEnumValueIndex(_g);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AudioManager_obj,shutdown,(void))

void AudioManager_obj::suspend(){
            	HX_STACKFRAME(&_hx_pos_02d95a3071a9a9ff_119_suspend)
HXLINE( 119)		if (hx::IsNotNull( ::lime::audio::AudioManager_obj::context )) {
HXLINE( 121)			HX_VARI(  ::lime::audio::AudioContext,_g) = ::lime::audio::AudioManager_obj::context;
HXDLIN( 121)			_hx_getEnumValueIndex(_g);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AudioManager_obj,suspend,(void))


AudioManager_obj::AudioManager_obj()
{
}

bool AudioManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resume") ) { outValue = resume_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { outValue = context; return true; }
		if (HX_FIELD_EQ(inName,"suspend") ) { outValue = suspend_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shutdown") ) { outValue = shutdown_dyn(); return true; }
	}
	return false;
}

bool AudioManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=ioValue.Cast<  ::lime::audio::AudioContext >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *AudioManager_obj_sMemberStorageInfo = 0;
static hx::StaticInfo AudioManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::audio::AudioContext*/ ,(void *) &AudioManager_obj::context,HX_HCSTRING("context","\xef","\x95","\x77","\x19")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void AudioManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AudioManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AudioManager_obj::context,"context");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AudioManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AudioManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AudioManager_obj::context,"context");
};

#endif

hx::Class AudioManager_obj::__mClass;

static ::String AudioManager_obj_sStaticFields[] = {
	HX_HCSTRING("context","\xef","\x95","\x77","\x19"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("shutdown","\x96","\xfc","\x0b","\x6b"),
	HX_HCSTRING("suspend","\x7c","\x2f","\x4f","\xf7"),
	::String(null())
};

void AudioManager_obj::__register()
{
	hx::Object *dummy = new AudioManager_obj;
	AudioManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.audio.AudioManager","\xa8","\x28","\xf0","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AudioManager_obj::__GetStatic;
	__mClass->mSetStaticField = &AudioManager_obj::__SetStatic;
	__mClass->mMarkFunc = AudioManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AudioManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< AudioManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AudioManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace audio
