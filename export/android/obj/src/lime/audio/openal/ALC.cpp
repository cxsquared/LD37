// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_audio_openal_ALC
#include <lime/audio/openal/ALC.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_42_closeDevice,"lime.audio.openal.ALC","closeDevice",0xea953e50,"lime.audio.openal.ALC.closeDevice","lime/audio/openal/ALC.hx",42,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_60_createContext,"lime.audio.openal.ALC","createContext",0xfb37e6b5,"lime.audio.openal.ALC.createContext","lime/audio/openal/ALC.hx",60,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_65_destroyContext,"lime.audio.openal.ALC","destroyContext",0xda2f6173,"lime.audio.openal.ALC.destroyContext","lime/audio/openal/ALC.hx",65,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_86_getContextsDevice,"lime.audio.openal.ALC","getContextsDevice",0x1b703ff2,"lime.audio.openal.ALC.getContextsDevice","lime/audio/openal/ALC.hx",86,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_103_getCurrentContext,"lime.audio.openal.ALC","getCurrentContext",0x185e0b4e,"lime.audio.openal.ALC.getCurrentContext","lime/audio/openal/ALC.hx",103,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_113_getError,"lime.audio.openal.ALC","getError",0xbf7a3e30,"lime.audio.openal.ALC.getError","lime/audio/openal/ALC.hx",113,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_121_getErrorString,"lime.audio.openal.ALC","getErrorString",0xdb879f21,"lime.audio.openal.ALC.getErrorString","lime/audio/openal/ALC.hx",121,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_140_getIntegerv,"lime.audio.openal.ALC","getIntegerv",0x05eb4790,"lime.audio.openal.ALC.getIntegerv","lime/audio/openal/ALC.hx",140,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_151_getString,"lime.audio.openal.ALC","getString",0x8b43d169,"lime.audio.openal.ALC.getString","lime/audio/openal/ALC.hx",151,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_162_makeContextCurrent,"lime.audio.openal.ALC","makeContextCurrent",0x187750f6,"lime.audio.openal.ALC.makeContextCurrent","lime/audio/openal/ALC.hx",162,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_180_openDevice,"lime.audio.openal.ALC","openDevice",0xc6d29e5e,"lime.audio.openal.ALC.openDevice","lime/audio/openal/ALC.hx",180,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_185_processContext,"lime.audio.openal.ALC","processContext",0x2021b49e,"lime.audio.openal.ALC.processContext","lime/audio/openal/ALC.hx",185,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_194_suspendContext,"lime.audio.openal.ALC","suspendContext",0x53089331,"lime.audio.openal.ALC.suspendContext","lime/audio/openal/ALC.hx",194,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_14_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",14,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_15_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",15,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_16_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",16,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_17_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",17,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_18_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",18,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_19_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",19,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_20_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",20,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_21_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",21,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_22_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",22,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_23_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",23,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_24_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",24,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_25_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",25,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_26_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",26,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_27_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",27,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_28_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",28,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_29_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",29,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_30_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",30,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_31_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",31,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_32_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",32,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_33_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",33,0x52b9922d)
HX_DEFINE_STACK_FRAME(_hx_pos_f4bcae7fd07b715e_34_boot,"lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",34,0x52b9922d)
namespace lime{
namespace audio{
namespace openal{

void ALC_obj::__construct() { }

Dynamic ALC_obj::__CreateEmpty() { return new ALC_obj; }

void *ALC_obj::_hx_vtable = 0;

Dynamic ALC_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ALC_obj > _hx_result = new ALC_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ALC_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x65925be2;
}

int ALC_obj::FALSE;

int ALC_obj::TRUE;

int ALC_obj::FREQUENCY;

int ALC_obj::REFRESH;

int ALC_obj::SYNC;

int ALC_obj::MONO_SOURCES;

int ALC_obj::STEREO_SOURCES;

int ALC_obj::NO_ERROR;

int ALC_obj::INVALID_DEVICE;

int ALC_obj::INVALID_CONTEXT;

int ALC_obj::INVALID_ENUM;

int ALC_obj::INVALID_VALUE;

int ALC_obj::OUT_OF_MEMORY;

int ALC_obj::ATTRIBUTES_SIZE;

int ALC_obj::ALL_ATTRIBUTES;

int ALC_obj::DEFAULT_DEVICE_SPECIFIER;

int ALC_obj::DEVICE_SPECIFIER;

int ALC_obj::EXTENSIONS;

int ALC_obj::ENUMERATE_ALL_EXT;

int ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER;

int ALC_obj::ALL_DEVICES_SPECIFIER;

bool ALC_obj::closeDevice( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_42_closeDevice)
            	HX_STACK_ARG(device,"device")
HXLINE(  42)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,closeDevice,return )

 ::Dynamic ALC_obj::createContext( ::Dynamic device,::Array< int > attrlist){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_60_createContext)
            	HX_STACK_ARG(device,"device")
            	HX_STACK_ARG(attrlist,"attrlist")
HXLINE(  60)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ALC_obj,createContext,return )

void ALC_obj::destroyContext( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_65_destroyContext)
            	HX_STACK_ARG(context,"context")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,destroyContext,(void))

 ::Dynamic ALC_obj::getContextsDevice( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_86_getContextsDevice)
            	HX_STACK_ARG(context,"context")
HXLINE(  86)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getContextsDevice,return )

 ::Dynamic ALC_obj::getCurrentContext(){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_103_getCurrentContext)
HXLINE( 103)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ALC_obj,getCurrentContext,return )

int ALC_obj::getError( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_113_getError)
            	HX_STACK_ARG(device,"device")
HXLINE( 113)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getError,return )

::String ALC_obj::getErrorString( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_121_getErrorString)
            	HX_STACK_ARG(device,"device")
HXLINE( 121)		switch((int)(::lime::audio::openal::ALC_obj::getError(device))){
            			case (int)40961: {
HXLINE( 121)				return HX_("INVALID_DEVICE: Invalid device (or no device?)",8d,16,8a,9d);
            			}
            			break;
            			case (int)40962: {
HXLINE( 121)				return HX_("INVALID_CONTEXT: Invalid context (or no context?)",56,39,91,8b);
            			}
            			break;
            			case (int)40963: {
HXLINE( 121)				return HX_("INVALID_ENUM: Invalid enum value",0a,d7,df,59);
            			}
            			break;
            			case (int)40964: {
HXLINE( 121)				return HX_("INVALID_VALUE: Invalid param value",a6,0e,30,55);
            			}
            			break;
            			case (int)40965: {
HXLINE( 121)				return HX_("OUT_OF_MEMORY: OpenAL has run out of memory",b0,dd,fb,0a);
            			}
            			break;
            			default:{
HXLINE( 121)				return HX_("",00,00,00,00);
            			}
            		}
HXDLIN( 121)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getErrorString,return )

::Array< int > ALC_obj::getIntegerv( ::Dynamic device,int param,int size){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_140_getIntegerv)
            	HX_STACK_ARG(device,"device")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(size,"size")
HXLINE( 140)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ALC_obj,getIntegerv,return )

::String ALC_obj::getString( ::Dynamic device,int param){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_151_getString)
            	HX_STACK_ARG(device,"device")
            	HX_STACK_ARG(param,"param")
HXLINE( 151)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ALC_obj,getString,return )

bool ALC_obj::makeContextCurrent( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_162_makeContextCurrent)
            	HX_STACK_ARG(context,"context")
HXLINE( 162)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,makeContextCurrent,return )

 ::Dynamic ALC_obj::openDevice(::String deviceName){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_180_openDevice)
            	HX_STACK_ARG(deviceName,"deviceName")
HXLINE( 180)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,openDevice,return )

void ALC_obj::processContext( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_185_processContext)
            	HX_STACK_ARG(context,"context")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,processContext,(void))

void ALC_obj::suspendContext( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_194_suspendContext)
            	HX_STACK_ARG(context,"context")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,suspendContext,(void))


ALC_obj::ALC_obj()
{
}

bool ALC_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"getError") ) { outValue = getError_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getString") ) { outValue = getString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"openDevice") ) { outValue = openDevice_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"closeDevice") ) { outValue = closeDevice_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getIntegerv") ) { outValue = getIntegerv_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createContext") ) { outValue = createContext_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"destroyContext") ) { outValue = destroyContext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getErrorString") ) { outValue = getErrorString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"processContext") ) { outValue = processContext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"suspendContext") ) { outValue = suspendContext_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getContextsDevice") ) { outValue = getContextsDevice_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getCurrentContext") ) { outValue = getCurrentContext_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"makeContextCurrent") ) { outValue = makeContextCurrent_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ALC_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ALC_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ALC_obj::FALSE,HX_HCSTRING("FALSE","\x83","\x6d","\x3d","\x79")},
	{hx::fsInt,(void *) &ALC_obj::TRUE,HX_HCSTRING("TRUE","\x4e","\x6f","\xc4","\x37")},
	{hx::fsInt,(void *) &ALC_obj::FREQUENCY,HX_HCSTRING("FREQUENCY","\x7c","\xf2","\x42","\xb7")},
	{hx::fsInt,(void *) &ALC_obj::REFRESH,HX_HCSTRING("REFRESH","\xbb","\xad","\xf4","\x6c")},
	{hx::fsInt,(void *) &ALC_obj::SYNC,HX_HCSTRING("SYNC","\x5b","\x82","\x20","\x37")},
	{hx::fsInt,(void *) &ALC_obj::MONO_SOURCES,HX_HCSTRING("MONO_SOURCES","\xbc","\x3b","\x3c","\xad")},
	{hx::fsInt,(void *) &ALC_obj::STEREO_SOURCES,HX_HCSTRING("STEREO_SOURCES","\xd1","\x0f","\x99","\x60")},
	{hx::fsInt,(void *) &ALC_obj::NO_ERROR,HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_DEVICE,HX_HCSTRING("INVALID_DEVICE","\x3e","\x84","\xa5","\x93")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_CONTEXT,HX_HCSTRING("INVALID_CONTEXT","\x27","\xa1","\x3c","\xdf")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_ENUM,HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_VALUE,HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0")},
	{hx::fsInt,(void *) &ALC_obj::OUT_OF_MEMORY,HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1")},
	{hx::fsInt,(void *) &ALC_obj::ATTRIBUTES_SIZE,HX_HCSTRING("ATTRIBUTES_SIZE","\x69","\x7c","\x9f","\x17")},
	{hx::fsInt,(void *) &ALC_obj::ALL_ATTRIBUTES,HX_HCSTRING("ALL_ATTRIBUTES","\x95","\xe2","\x00","\x04")},
	{hx::fsInt,(void *) &ALC_obj::DEFAULT_DEVICE_SPECIFIER,HX_HCSTRING("DEFAULT_DEVICE_SPECIFIER","\x93","\xa5","\xbc","\xd9")},
	{hx::fsInt,(void *) &ALC_obj::DEVICE_SPECIFIER,HX_HCSTRING("DEVICE_SPECIFIER","\xf5","\xa8","\x61","\x21")},
	{hx::fsInt,(void *) &ALC_obj::EXTENSIONS,HX_HCSTRING("EXTENSIONS","\x14","\xf0","\x79","\x7b")},
	{hx::fsInt,(void *) &ALC_obj::ENUMERATE_ALL_EXT,HX_HCSTRING("ENUMERATE_ALL_EXT","\x88","\xff","\x7d","\xb7")},
	{hx::fsInt,(void *) &ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,HX_HCSTRING("DEFAULT_ALL_DEVICES_SPECIFIER","\xc0","\xd6","\x77","\xd2")},
	{hx::fsInt,(void *) &ALC_obj::ALL_DEVICES_SPECIFIER,HX_HCSTRING("ALL_DEVICES_SPECIFIER","\x1e","\x50","\xc1","\xf5")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ALC_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ALC_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ALC_obj::FALSE,"FALSE");
	HX_MARK_MEMBER_NAME(ALC_obj::TRUE,"TRUE");
	HX_MARK_MEMBER_NAME(ALC_obj::FREQUENCY,"FREQUENCY");
	HX_MARK_MEMBER_NAME(ALC_obj::REFRESH,"REFRESH");
	HX_MARK_MEMBER_NAME(ALC_obj::SYNC,"SYNC");
	HX_MARK_MEMBER_NAME(ALC_obj::MONO_SOURCES,"MONO_SOURCES");
	HX_MARK_MEMBER_NAME(ALC_obj::STEREO_SOURCES,"STEREO_SOURCES");
	HX_MARK_MEMBER_NAME(ALC_obj::NO_ERROR,"NO_ERROR");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_DEVICE,"INVALID_DEVICE");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_CONTEXT,"INVALID_CONTEXT");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_MARK_MEMBER_NAME(ALC_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_MARK_MEMBER_NAME(ALC_obj::ATTRIBUTES_SIZE,"ATTRIBUTES_SIZE");
	HX_MARK_MEMBER_NAME(ALC_obj::ALL_ATTRIBUTES,"ALL_ATTRIBUTES");
	HX_MARK_MEMBER_NAME(ALC_obj::DEFAULT_DEVICE_SPECIFIER,"DEFAULT_DEVICE_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::DEVICE_SPECIFIER,"DEVICE_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::EXTENSIONS,"EXTENSIONS");
	HX_MARK_MEMBER_NAME(ALC_obj::ENUMERATE_ALL_EXT,"ENUMERATE_ALL_EXT");
	HX_MARK_MEMBER_NAME(ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,"DEFAULT_ALL_DEVICES_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::ALL_DEVICES_SPECIFIER,"ALL_DEVICES_SPECIFIER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ALC_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ALC_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ALC_obj::FALSE,"FALSE");
	HX_VISIT_MEMBER_NAME(ALC_obj::TRUE,"TRUE");
	HX_VISIT_MEMBER_NAME(ALC_obj::FREQUENCY,"FREQUENCY");
	HX_VISIT_MEMBER_NAME(ALC_obj::REFRESH,"REFRESH");
	HX_VISIT_MEMBER_NAME(ALC_obj::SYNC,"SYNC");
	HX_VISIT_MEMBER_NAME(ALC_obj::MONO_SOURCES,"MONO_SOURCES");
	HX_VISIT_MEMBER_NAME(ALC_obj::STEREO_SOURCES,"STEREO_SOURCES");
	HX_VISIT_MEMBER_NAME(ALC_obj::NO_ERROR,"NO_ERROR");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_DEVICE,"INVALID_DEVICE");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_CONTEXT,"INVALID_CONTEXT");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_VISIT_MEMBER_NAME(ALC_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_VISIT_MEMBER_NAME(ALC_obj::ATTRIBUTES_SIZE,"ATTRIBUTES_SIZE");
	HX_VISIT_MEMBER_NAME(ALC_obj::ALL_ATTRIBUTES,"ALL_ATTRIBUTES");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEFAULT_DEVICE_SPECIFIER,"DEFAULT_DEVICE_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEVICE_SPECIFIER,"DEVICE_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::EXTENSIONS,"EXTENSIONS");
	HX_VISIT_MEMBER_NAME(ALC_obj::ENUMERATE_ALL_EXT,"ENUMERATE_ALL_EXT");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,"DEFAULT_ALL_DEVICES_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::ALL_DEVICES_SPECIFIER,"ALL_DEVICES_SPECIFIER");
};

#endif

hx::Class ALC_obj::__mClass;

static ::String ALC_obj_sStaticFields[] = {
	HX_HCSTRING("FALSE","\x83","\x6d","\x3d","\x79"),
	HX_HCSTRING("TRUE","\x4e","\x6f","\xc4","\x37"),
	HX_HCSTRING("FREQUENCY","\x7c","\xf2","\x42","\xb7"),
	HX_HCSTRING("REFRESH","\xbb","\xad","\xf4","\x6c"),
	HX_HCSTRING("SYNC","\x5b","\x82","\x20","\x37"),
	HX_HCSTRING("MONO_SOURCES","\xbc","\x3b","\x3c","\xad"),
	HX_HCSTRING("STEREO_SOURCES","\xd1","\x0f","\x99","\x60"),
	HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f"),
	HX_HCSTRING("INVALID_DEVICE","\x3e","\x84","\xa5","\x93"),
	HX_HCSTRING("INVALID_CONTEXT","\x27","\xa1","\x3c","\xdf"),
	HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13"),
	HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0"),
	HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1"),
	HX_HCSTRING("ATTRIBUTES_SIZE","\x69","\x7c","\x9f","\x17"),
	HX_HCSTRING("ALL_ATTRIBUTES","\x95","\xe2","\x00","\x04"),
	HX_HCSTRING("DEFAULT_DEVICE_SPECIFIER","\x93","\xa5","\xbc","\xd9"),
	HX_HCSTRING("DEVICE_SPECIFIER","\xf5","\xa8","\x61","\x21"),
	HX_HCSTRING("EXTENSIONS","\x14","\xf0","\x79","\x7b"),
	HX_HCSTRING("ENUMERATE_ALL_EXT","\x88","\xff","\x7d","\xb7"),
	HX_HCSTRING("DEFAULT_ALL_DEVICES_SPECIFIER","\xc0","\xd6","\x77","\xd2"),
	HX_HCSTRING("ALL_DEVICES_SPECIFIER","\x1e","\x50","\xc1","\xf5"),
	HX_HCSTRING("closeDevice","\x6e","\x02","\xc8","\x2b"),
	HX_HCSTRING("createContext","\x53","\x6e","\xba","\x01"),
	HX_HCSTRING("destroyContext","\x15","\x84","\xe3","\x85"),
	HX_HCSTRING("getContextsDevice","\x90","\xee","\x91","\x9c"),
	HX_HCSTRING("getCurrentContext","\xec","\xb9","\x7f","\x99"),
	HX_HCSTRING("getError","\x52","\xdb","\x00","\xd3"),
	HX_HCSTRING("getErrorString","\xc3","\xc1","\x3b","\x87"),
	HX_HCSTRING("getIntegerv","\xae","\x0b","\x1e","\x47"),
	HX_HCSTRING("getString","\x07","\xb2","\x86","\x8d"),
	HX_HCSTRING("makeContextCurrent","\x98","\x6c","\xce","\x94"),
	HX_HCSTRING("openDevice","\x00","\x48","\x14","\xbf"),
	HX_HCSTRING("processContext","\x40","\xd7","\xd5","\xcb"),
	HX_HCSTRING("suspendContext","\xd3","\xb5","\xbc","\xfe"),
	::String(null())
};

void ALC_obj::__register()
{
	hx::Object *dummy = new ALC_obj;
	ALC_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.audio.openal.ALC","\x50","\xd1","\xca","\xf4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ALC_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ALC_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ALC_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ALC_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ALC_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ALC_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ALC_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ALC_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_14_boot)
HXLINE(  14)		FALSE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_15_boot)
HXLINE(  15)		TRUE = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_16_boot)
HXLINE(  16)		FREQUENCY = (int)4103;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_17_boot)
HXLINE(  17)		REFRESH = (int)4104;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_18_boot)
HXLINE(  18)		SYNC = (int)4105;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_19_boot)
HXLINE(  19)		MONO_SOURCES = (int)4112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_20_boot)
HXLINE(  20)		STEREO_SOURCES = (int)4113;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_21_boot)
HXLINE(  21)		NO_ERROR = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_22_boot)
HXLINE(  22)		INVALID_DEVICE = (int)40961;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_23_boot)
HXLINE(  23)		INVALID_CONTEXT = (int)40962;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_24_boot)
HXLINE(  24)		INVALID_ENUM = (int)40963;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_25_boot)
HXLINE(  25)		INVALID_VALUE = (int)40964;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_26_boot)
HXLINE(  26)		OUT_OF_MEMORY = (int)40965;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_27_boot)
HXLINE(  27)		ATTRIBUTES_SIZE = (int)4098;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_28_boot)
HXLINE(  28)		ALL_ATTRIBUTES = (int)4099;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_29_boot)
HXLINE(  29)		DEFAULT_DEVICE_SPECIFIER = (int)4100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_30_boot)
HXLINE(  30)		DEVICE_SPECIFIER = (int)4101;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_31_boot)
HXLINE(  31)		EXTENSIONS = (int)4102;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_32_boot)
HXLINE(  32)		ENUMERATE_ALL_EXT = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_33_boot)
HXLINE(  33)		DEFAULT_ALL_DEVICES_SPECIFIER = (int)4114;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4bcae7fd07b715e_34_boot)
HXLINE(  34)		ALL_DEVICES_SPECIFIER = (int)4115;
            	}
}

} // end namespace lime
} // end namespace audio
} // end namespace openal
