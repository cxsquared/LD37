// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_audio_openal_AL
#include <lime/audio/openal/AL.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_84_bufferData,"lime.audio.openal.AL","bufferData",0x71908845,"lime.audio.openal.AL.bufferData","lime/audio/openal/AL.hx",84,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_97_buffer3f,"lime.audio.openal.AL","buffer3f",0x30252e0e,"lime.audio.openal.AL.buffer3f","lime/audio/openal/AL.hx",97,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_106_buffer3i,"lime.audio.openal.AL","buffer3i",0x30252e11,"lime.audio.openal.AL.buffer3i","lime/audio/openal/AL.hx",106,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_115_bufferf,"lime.audio.openal.AL","bufferf",0xa7d23f8b,"lime.audio.openal.AL.bufferf","lime/audio/openal/AL.hx",115,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_124_bufferfv,"lime.audio.openal.AL","bufferfv",0x30255a8b,"lime.audio.openal.AL.bufferfv","lime/audio/openal/AL.hx",124,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_133_bufferi,"lime.audio.openal.AL","bufferi",0xa7d23f8e,"lime.audio.openal.AL.bufferi","lime/audio/openal/AL.hx",133,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_142_bufferiv,"lime.audio.openal.AL","bufferiv",0x30255d28,"lime.audio.openal.AL.bufferiv","lime/audio/openal/AL.hx",142,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_151_deleteBuffer,"lime.audio.openal.AL","deleteBuffer",0x6cca2146,"lime.audio.openal.AL.deleteBuffer","lime/audio/openal/AL.hx",151,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_160_deleteBuffers,"lime.audio.openal.AL","deleteBuffers",0xc412fc6d,"lime.audio.openal.AL.deleteBuffers","lime/audio/openal/AL.hx",160,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_169_deleteSource,"lime.audio.openal.AL","deleteSource",0xce671521,"lime.audio.openal.AL.deleteSource","lime/audio/openal/AL.hx",169,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_178_deleteSources,"lime.audio.openal.AL","deleteSources",0xcbcb6832,"lime.audio.openal.AL.deleteSources","lime/audio/openal/AL.hx",178,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_187_disable,"lime.audio.openal.AL","disable",0xa79a060d,"lime.audio.openal.AL.disable","lime/audio/openal/AL.hx",187,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_196_distanceModel,"lime.audio.openal.AL","distanceModel",0x87da0619,"lime.audio.openal.AL.distanceModel","lime/audio/openal/AL.hx",196,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_205_dopplerFactor,"lime.audio.openal.AL","dopplerFactor",0x22fdf3c2,"lime.audio.openal.AL.dopplerFactor","lime/audio/openal/AL.hx",205,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_214_dopplerVelocity,"lime.audio.openal.AL","dopplerVelocity",0x3ef13fd0,"lime.audio.openal.AL.dopplerVelocity","lime/audio/openal/AL.hx",214,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_223_enable,"lime.audio.openal.AL","enable",0x3c379dfe,"lime.audio.openal.AL.enable","lime/audio/openal/AL.hx",223,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_237_genSource,"lime.audio.openal.AL","genSource",0xf40420f0,"lime.audio.openal.AL.genSource","lime/audio/openal/AL.hx",237,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_248_genSources,"lime.audio.openal.AL","genSources",0x8f98b183,"lime.audio.openal.AL.genSources","lime/audio/openal/AL.hx",248,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_259_genBuffer,"lime.audio.openal.AL","genBuffer",0x92672d15,"lime.audio.openal.AL.genBuffer","lime/audio/openal/AL.hx",259,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_270_genBuffers,"lime.audio.openal.AL","genBuffers",0x87e045be,"lime.audio.openal.AL.genBuffers","lime/audio/openal/AL.hx",270,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_281_getBoolean,"lime.audio.openal.AL","getBoolean",0xab7d39ad,"lime.audio.openal.AL.getBoolean","lime/audio/openal/AL.hx",281,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_292_getBooleanv,"lime.audio.openal.AL","getBooleanv",0x62153e29,"lime.audio.openal.AL.getBooleanv","lime/audio/openal/AL.hx",292,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_303_getBuffer3f,"lime.audio.openal.AL","getBuffer3f",0x4e04ff2e,"lime.audio.openal.AL.getBuffer3f","lime/audio/openal/AL.hx",303,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_314_getBuffer3i,"lime.audio.openal.AL","getBuffer3i",0x4e04ff31,"lime.audio.openal.AL.getBuffer3i","lime/audio/openal/AL.hx",314,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_325_getBufferf,"lime.audio.openal.AL","getBufferf",0xdf0ef26b,"lime.audio.openal.AL.getBufferf","lime/audio/openal/AL.hx",325,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_336_getBufferfv,"lime.audio.openal.AL","getBufferfv",0x4e052bab,"lime.audio.openal.AL.getBufferfv","lime/audio/openal/AL.hx",336,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_347_getBufferi,"lime.audio.openal.AL","getBufferi",0xdf0ef26e,"lime.audio.openal.AL.getBufferi","lime/audio/openal/AL.hx",347,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_358_getBufferiv,"lime.audio.openal.AL","getBufferiv",0x4e052e48,"lime.audio.openal.AL.getBufferiv","lime/audio/openal/AL.hx",358,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_369_getDouble,"lime.audio.openal.AL","getDouble",0xee1e63ac,"lime.audio.openal.AL.getDouble","lime/audio/openal/AL.hx",369,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_380_getDoublev,"lime.audio.openal.AL","getDoublev",0x6c78d34a,"lime.audio.openal.AL.getDoublev","lime/audio/openal/AL.hx",380,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_391_getEnumValue,"lime.audio.openal.AL","getEnumValue",0x6cfadaf5,"lime.audio.openal.AL.getEnumValue","lime/audio/openal/AL.hx",391,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_402_getError,"lime.audio.openal.AL","getError",0x5627df8d,"lime.audio.openal.AL.getError","lime/audio/openal/AL.hx",402,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_410_getErrorString,"lime.audio.openal.AL","getErrorString",0x4cf0243e,"lime.audio.openal.AL.getErrorString","lime/audio/openal/AL.hx",410,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_429_getFloat,"lime.audio.openal.AL","getFloat",0xe594d961,"lime.audio.openal.AL.getFloat","lime/audio/openal/AL.hx",429,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_440_getFloatv,"lime.audio.openal.AL","getFloatv",0xfca95bf5,"lime.audio.openal.AL.getFloatv","lime/audio/openal/AL.hx",440,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_451_getInteger,"lime.audio.openal.AL","getInteger",0x449a0cc3,"lime.audio.openal.AL.getInteger","lime/audio/openal/AL.hx",451,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_462_getIntegerv,"lime.audio.openal.AL","getIntegerv",0xc2311e53,"lime.audio.openal.AL.getIntegerv","lime/audio/openal/AL.hx",462,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_473_getListener3f,"lime.audio.openal.AL","getListener3f",0x39755462,"lime.audio.openal.AL.getListener3f","lime/audio/openal/AL.hx",473,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_484_getListener3i,"lime.audio.openal.AL","getListener3i",0x39755465,"lime.audio.openal.AL.getListener3i","lime/audio/openal/AL.hx",484,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_495_getListenerf,"lime.audio.openal.AL","getListenerf",0x38823fb7,"lime.audio.openal.AL.getListenerf","lime/audio/openal/AL.hx",495,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_506_getListenerfv,"lime.audio.openal.AL","getListenerfv",0x397580df,"lime.audio.openal.AL.getListenerfv","lime/audio/openal/AL.hx",506,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_517_getListeneri,"lime.audio.openal.AL","getListeneri",0x38823fba,"lime.audio.openal.AL.getListeneri","lime/audio/openal/AL.hx",517,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_528_getListeneriv,"lime.audio.openal.AL","getListeneriv",0x3975837c,"lime.audio.openal.AL.getListeneriv","lime/audio/openal/AL.hx",528,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_539_getProcAddress,"lime.audio.openal.AL","getProcAddress",0x4f564643,"lime.audio.openal.AL.getProcAddress","lime/audio/openal/AL.hx",539,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_550_getSource3f,"lime.audio.openal.AL","getSource3f",0x07aadfc9,"lime.audio.openal.AL.getSource3f","lime/audio/openal/AL.hx",550,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_561_getSourcef,"lime.audio.openal.AL","getSourcef",0xe6c75e30,"lime.audio.openal.AL.getSourcef","lime/audio/openal/AL.hx",561,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_572_getSource3i,"lime.audio.openal.AL","getSource3i",0x07aadfcc,"lime.audio.openal.AL.getSource3i","lime/audio/openal/AL.hx",572,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_583_getSourcefv,"lime.audio.openal.AL","getSourcefv",0x07ab0c46,"lime.audio.openal.AL.getSourcefv","lime/audio/openal/AL.hx",583,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_594_getSourcei,"lime.audio.openal.AL","getSourcei",0xe6c75e33,"lime.audio.openal.AL.getSourcei","lime/audio/openal/AL.hx",594,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_605_getSourceiv,"lime.audio.openal.AL","getSourceiv",0x07ab0ee3,"lime.audio.openal.AL.getSourceiv","lime/audio/openal/AL.hx",605,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_616_getString,"lime.audio.openal.AL","getString",0xcc83616c,"lime.audio.openal.AL.getString","lime/audio/openal/AL.hx",616,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_627_isBuffer,"lime.audio.openal.AL","isBuffer",0xac255cc5,"lime.audio.openal.AL.isBuffer","lime/audio/openal/AL.hx",627,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_638_isEnabled,"lime.audio.openal.AL","isEnabled",0xc12c311c,"lime.audio.openal.AL.isEnabled","lime/audio/openal/AL.hx",638,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_649_isExtensionPresent,"lime.audio.openal.AL","isExtensionPresent",0x7b01b541,"lime.audio.openal.AL.isExtensionPresent","lime/audio/openal/AL.hx",649,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_660_isSource,"lime.audio.openal.AL","isSource",0x0dc250a0,"lime.audio.openal.AL.isSource","lime/audio/openal/AL.hx",660,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_666_listener3f,"lime.audio.openal.AL","listener3f",0x0726fb42,"lime.audio.openal.AL.listener3f","lime/audio/openal/AL.hx",666,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_675_listener3i,"lime.audio.openal.AL","listener3i",0x0726fb45,"lime.audio.openal.AL.listener3i","lime/audio/openal/AL.hx",675,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_684_listenerf,"lime.audio.openal.AL","listenerf",0x328b14d7,"lime.audio.openal.AL.listenerf","lime/audio/openal/AL.hx",684,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_693_listenerfv,"lime.audio.openal.AL","listenerfv",0x072727bf,"lime.audio.openal.AL.listenerfv","lime/audio/openal/AL.hx",693,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_702_listeneri,"lime.audio.openal.AL","listeneri",0x328b14da,"lime.audio.openal.AL.listeneri","lime/audio/openal/AL.hx",702,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_711_listeneriv,"lime.audio.openal.AL","listeneriv",0x07272a5c,"lime.audio.openal.AL.listeneriv","lime/audio/openal/AL.hx",711,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_720_source3f,"lime.audio.openal.AL","source3f",0xe9cb0ea9,"lime.audio.openal.AL.source3f","lime/audio/openal/AL.hx",720,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_729_source3i,"lime.audio.openal.AL","source3i",0xe9cb0eac,"lime.audio.openal.AL.source3i","lime/audio/openal/AL.hx",729,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_738_sourcef,"lime.audio.openal.AL","sourcef",0xaf8aab50,"lime.audio.openal.AL.sourcef","lime/audio/openal/AL.hx",738,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_747_sourcefv,"lime.audio.openal.AL","sourcefv",0xe9cb3b26,"lime.audio.openal.AL.sourcefv","lime/audio/openal/AL.hx",747,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_756_sourcei,"lime.audio.openal.AL","sourcei",0xaf8aab53,"lime.audio.openal.AL.sourcei","lime/audio/openal/AL.hx",756,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_765_sourceiv,"lime.audio.openal.AL","sourceiv",0xe9cb3dc3,"lime.audio.openal.AL.sourceiv","lime/audio/openal/AL.hx",765,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_774_sourcePlay,"lime.audio.openal.AL","sourcePlay",0x50dadd6a,"lime.audio.openal.AL.sourcePlay","lime/audio/openal/AL.hx",774,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_783_sourcePlayv,"lime.audio.openal.AL","sourcePlayv",0x6ea6dfcc,"lime.audio.openal.AL.sourcePlayv","lime/audio/openal/AL.hx",783,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_792_sourceStop,"lime.audio.openal.AL","sourceStop",0x52dc9f78,"lime.audio.openal.AL.sourceStop","lime/audio/openal/AL.hx",792,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_801_sourceStopv,"lime.audio.openal.AL","sourceStopv",0x2e2ee9fe,"lime.audio.openal.AL.sourceStopv","lime/audio/openal/AL.hx",801,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_810_sourceRewind,"lime.audio.openal.AL","sourceRewind",0x36c422f1,"lime.audio.openal.AL.sourceRewind","lime/audio/openal/AL.hx",810,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_819_sourceRewindv,"lime.audio.openal.AL","sourceRewindv",0xb4da7065,"lime.audio.openal.AL.sourceRewindv","lime/audio/openal/AL.hx",819,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_828_sourcePause,"lime.audio.openal.AL","sourcePause",0x6770aec0,"lime.audio.openal.AL.sourcePause","lime/audio/openal/AL.hx",828,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_837_sourcePausev,"lime.audio.openal.AL","sourcePausev",0x1b2839b6,"lime.audio.openal.AL.sourcePausev","lime/audio/openal/AL.hx",837,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_846_sourceQueueBuffer,"lime.audio.openal.AL","sourceQueueBuffer",0x31678cbb,"lime.audio.openal.AL.sourceQueueBuffer","lime/audio/openal/AL.hx",846,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_855_sourceQueueBuffers,"lime.audio.openal.AL","sourceQueueBuffers",0x09339758,"lime.audio.openal.AL.sourceQueueBuffers","lime/audio/openal/AL.hx",855,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_870_sourceUnqueueBuffer,"lime.audio.openal.AL","sourceUnqueueBuffer",0x63a2e982,"lime.audio.openal.AL.sourceUnqueueBuffer","lime/audio/openal/AL.hx",870,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_881_sourceUnqueueBuffers,"lime.audio.openal.AL","sourceUnqueueBuffers",0xcae968b1,"lime.audio.openal.AL.sourceUnqueueBuffers","lime/audio/openal/AL.hx",881,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_887_speedOfSound,"lime.audio.openal.AL","speedOfSound",0x3fbf252c,"lime.audio.openal.AL.speedOfSound","lime/audio/openal/AL.hx",887,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_20_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",20,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_21_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",21,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_22_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",22,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_23_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",23,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_24_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",24,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_25_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",25,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_26_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",26,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_27_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",27,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_28_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",28,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_29_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",29,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_30_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",30,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_31_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",31,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_32_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",32,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_33_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",33,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_34_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",34,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_35_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",35,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_36_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",36,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_37_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",37,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_38_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",38,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_39_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",39,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_40_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",40,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_41_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",41,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_42_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",42,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_43_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",43,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_44_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",44,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_45_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",45,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_46_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",46,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_47_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",47,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_48_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",48,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_49_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",49,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_50_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",50,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_51_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",51,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_52_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",52,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_53_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",53,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_54_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",54,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_55_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",55,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_56_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",56,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_57_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",57,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_58_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",58,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_59_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",59,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_60_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",60,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_61_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",61,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_62_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",62,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_63_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",63,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_64_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",64,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_65_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",65,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_66_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",66,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_67_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",67,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_68_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",68,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_69_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",69,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_70_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",70,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_71_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",71,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_72_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",72,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_73_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",73,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_74_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",74,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_75_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",75,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_76_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",76,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_77_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",77,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_78_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",78,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_79_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",79,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_80_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",80,0x8b371f2c)
HX_DEFINE_STACK_FRAME(_hx_pos_01a1e8b1534a0217_81_boot,"lime.audio.openal.AL","boot",0x1ac70eed,"lime.audio.openal.AL.boot","lime/audio/openal/AL.hx",81,0x8b371f2c)
namespace lime{
namespace audio{
namespace openal{

void AL_obj::__construct() { }

Dynamic AL_obj::__CreateEmpty() { return new AL_obj; }

void *AL_obj::_hx_vtable = 0;

Dynamic AL_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AL_obj > _hx_result = new AL_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AL_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x35433d41;
}

int AL_obj::NONE;

int AL_obj::FALSE;

int AL_obj::TRUE;

int AL_obj::SOURCE_RELATIVE;

int AL_obj::CONE_INNER_ANGLE;

int AL_obj::CONE_OUTER_ANGLE;

int AL_obj::PITCH;

int AL_obj::POSITION;

int AL_obj::DIRECTION;

int AL_obj::VELOCITY;

int AL_obj::LOOPING;

int AL_obj::BUFFER;

int AL_obj::GAIN;

int AL_obj::MIN_GAIN;

int AL_obj::MAX_GAIN;

int AL_obj::ORIENTATION;

int AL_obj::SOURCE_STATE;

int AL_obj::INITIAL;

int AL_obj::PLAYING;

int AL_obj::PAUSED;

int AL_obj::STOPPED;

int AL_obj::BUFFERS_QUEUED;

int AL_obj::BUFFERS_PROCESSED;

int AL_obj::REFERENCE_DISTANCE;

int AL_obj::ROLLOFF_FACTOR;

int AL_obj::CONE_OUTER_GAIN;

int AL_obj::MAX_DISTANCE;

int AL_obj::SEC_OFFSET;

int AL_obj::SAMPLE_OFFSET;

int AL_obj::BYTE_OFFSET;

int AL_obj::SOURCE_TYPE;

int AL_obj::STATIC;

int AL_obj::STREAMING;

int AL_obj::UNDETERMINED;

int AL_obj::FORMAT_MONO8;

int AL_obj::FORMAT_MONO16;

int AL_obj::FORMAT_STEREO8;

int AL_obj::FORMAT_STEREO16;

int AL_obj::FREQUENCY;

int AL_obj::BITS;

int AL_obj::CHANNELS;

int AL_obj::SIZE;

int AL_obj::NO_ERROR;

int AL_obj::INVALID_NAME;

int AL_obj::INVALID_ENUM;

int AL_obj::INVALID_VALUE;

int AL_obj::INVALID_OPERATION;

int AL_obj::OUT_OF_MEMORY;

int AL_obj::VENDOR;

int AL_obj::VERSION;

int AL_obj::RENDERER;

int AL_obj::EXTENSIONS;

int AL_obj::DOPPLER_FACTOR;

int AL_obj::SPEED_OF_SOUND;

int AL_obj::DOPPLER_VELOCITY;

int AL_obj::DISTANCE_MODEL;

int AL_obj::INVERSE_DISTANCE;

int AL_obj::INVERSE_DISTANCE_CLAMPED;

int AL_obj::LINEAR_DISTANCE;

int AL_obj::LINEAR_DISTANCE_CLAMPED;

int AL_obj::EXPONENT_DISTANCE;

int AL_obj::EXPONENT_DISTANCE_CLAMPED;

void AL_obj::bufferData(int buffer,int format, ::lime::utils::ArrayBufferView data,int size,int freq){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_84_bufferData)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(freq,"freq")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(AL_obj,bufferData,(void))

void AL_obj::buffer3f(int buffer,int param,Float value1,Float value2,Float value3){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_97_buffer3f)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	HX_STACK_ARG(value3,"value3")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(AL_obj,buffer3f,(void))

void AL_obj::buffer3i(int buffer,int param,int value1,int value2,int value3){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_106_buffer3i)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	HX_STACK_ARG(value3,"value3")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(AL_obj,buffer3i,(void))

void AL_obj::bufferf(int buffer,int param,Float value){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_115_bufferf)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value,"value")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,bufferf,(void))

void AL_obj::bufferfv(int buffer,int param,::Array< Float > values){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_124_bufferfv)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(values,"values")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,bufferfv,(void))

void AL_obj::bufferi(int buffer,int param,int value){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_133_bufferi)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value,"value")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,bufferi,(void))

void AL_obj::bufferiv(int buffer,int param,::Array< int > values){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_142_bufferiv)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(values,"values")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,bufferiv,(void))

void AL_obj::deleteBuffer(int buffer){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_151_deleteBuffer)
            	HX_STACK_ARG(buffer,"buffer")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,deleteBuffer,(void))

void AL_obj::deleteBuffers(::Array< int > buffers){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_160_deleteBuffers)
            	HX_STACK_ARG(buffers,"buffers")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,deleteBuffers,(void))

void AL_obj::deleteSource(int source){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_169_deleteSource)
            	HX_STACK_ARG(source,"source")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,deleteSource,(void))

void AL_obj::deleteSources(::Array< int > sources){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_178_deleteSources)
            	HX_STACK_ARG(sources,"sources")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,deleteSources,(void))

void AL_obj::disable(int capability){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_187_disable)
            	HX_STACK_ARG(capability,"capability")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,disable,(void))

void AL_obj::distanceModel(int distanceModel){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_196_distanceModel)
            	HX_STACK_ARG(distanceModel,"distanceModel")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,distanceModel,(void))

void AL_obj::dopplerFactor(Float value){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_205_dopplerFactor)
            	HX_STACK_ARG(value,"value")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,dopplerFactor,(void))

void AL_obj::dopplerVelocity(Float value){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_214_dopplerVelocity)
            	HX_STACK_ARG(value,"value")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,dopplerVelocity,(void))

void AL_obj::enable(int capability){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_223_enable)
            	HX_STACK_ARG(capability,"capability")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,enable,(void))

int AL_obj::genSource(){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_237_genSource)
HXLINE( 237)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AL_obj,genSource,return )

::Array< int > AL_obj::genSources(int n){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_248_genSources)
            	HX_STACK_ARG(n,"n")
HXLINE( 248)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,genSources,return )

int AL_obj::genBuffer(){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_259_genBuffer)
HXLINE( 259)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AL_obj,genBuffer,return )

::Array< int > AL_obj::genBuffers(int n){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_270_genBuffers)
            	HX_STACK_ARG(n,"n")
HXLINE( 270)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,genBuffers,return )

bool AL_obj::getBoolean(int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_281_getBoolean)
            	HX_STACK_ARG(param,"param")
HXLINE( 281)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getBoolean,return )

::Array< bool > AL_obj::getBooleanv(int param,hx::Null< int >  __o_count){
int count = __o_count.Default(1);
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_292_getBooleanv)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(count,"count")
HXLINE( 292)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getBooleanv,return )

::Array< Float > AL_obj::getBuffer3f(int buffer,int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_303_getBuffer3f)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
HXLINE( 303)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getBuffer3f,return )

::Array< int > AL_obj::getBuffer3i(int buffer,int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_314_getBuffer3i)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
HXLINE( 314)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getBuffer3i,return )

Float AL_obj::getBufferf(int buffer,int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_325_getBufferf)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
HXLINE( 325)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getBufferf,return )

::Array< Float > AL_obj::getBufferfv(int buffer,int param,hx::Null< int >  __o_count){
int count = __o_count.Default(1);
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_336_getBufferfv)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(count,"count")
HXLINE( 336)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,getBufferfv,return )

int AL_obj::getBufferi(int buffer,int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_347_getBufferi)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
HXLINE( 347)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getBufferi,return )

::Array< int > AL_obj::getBufferiv(int buffer,int param,hx::Null< int >  __o_count){
int count = __o_count.Default(1);
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_358_getBufferiv)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(count,"count")
HXLINE( 358)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,getBufferiv,return )

Float AL_obj::getDouble(int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_369_getDouble)
            	HX_STACK_ARG(param,"param")
HXLINE( 369)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getDouble,return )

::Array< Float > AL_obj::getDoublev(int param,hx::Null< int >  __o_count){
int count = __o_count.Default(1);
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_380_getDoublev)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(count,"count")
HXLINE( 380)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getDoublev,return )

int AL_obj::getEnumValue(::String ename){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_391_getEnumValue)
            	HX_STACK_ARG(ename,"ename")
HXLINE( 391)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getEnumValue,return )

int AL_obj::getError(){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_402_getError)
HXLINE( 402)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AL_obj,getError,return )

::String AL_obj::getErrorString(){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_410_getErrorString)
HXLINE( 410)		switch((int)(::lime::audio::openal::AL_obj::getError())){
            			case (int)40961: {
HXLINE( 410)				return HX_("INVALID_NAME: Invalid parameter name",64,c3,04,f4);
            			}
            			break;
            			case (int)40962: {
HXLINE( 410)				return HX_("INVALID_ENUM: Invalid enum value",0a,d7,df,59);
            			}
            			break;
            			case (int)40963: {
HXLINE( 410)				return HX_("INVALID_VALUE: Invalid parameter value",c2,a4,37,f8);
            			}
            			break;
            			case (int)40964: {
HXLINE( 410)				return HX_("INVALID_OPERATION: Illegal operation or call",13,8a,e7,93);
            			}
            			break;
            			case (int)40965: {
HXLINE( 410)				return HX_("OUT_OF_MEMORY: OpenAL has run out of memory",b0,dd,fb,0a);
            			}
            			break;
            			default:{
HXLINE( 410)				return HX_("",00,00,00,00);
            			}
            		}
HXDLIN( 410)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AL_obj,getErrorString,return )

Float AL_obj::getFloat(int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_429_getFloat)
            	HX_STACK_ARG(param,"param")
HXLINE( 429)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getFloat,return )

::Array< Float > AL_obj::getFloatv(int param,hx::Null< int >  __o_count){
int count = __o_count.Default(1);
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_440_getFloatv)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(count,"count")
HXLINE( 440)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getFloatv,return )

int AL_obj::getInteger(int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_451_getInteger)
            	HX_STACK_ARG(param,"param")
HXLINE( 451)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getInteger,return )

::Array< int > AL_obj::getIntegerv(int param,hx::Null< int >  __o_count){
int count = __o_count.Default(1);
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_462_getIntegerv)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(count,"count")
HXLINE( 462)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getIntegerv,return )

::Array< Float > AL_obj::getListener3f(int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_473_getListener3f)
            	HX_STACK_ARG(param,"param")
HXLINE( 473)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getListener3f,return )

::Array< int > AL_obj::getListener3i(int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_484_getListener3i)
            	HX_STACK_ARG(param,"param")
HXLINE( 484)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getListener3i,return )

Float AL_obj::getListenerf(int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_495_getListenerf)
            	HX_STACK_ARG(param,"param")
HXLINE( 495)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getListenerf,return )

::Array< Float > AL_obj::getListenerfv(int param,hx::Null< int >  __o_count){
int count = __o_count.Default(1);
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_506_getListenerfv)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(count,"count")
HXLINE( 506)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getListenerfv,return )

int AL_obj::getListeneri(int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_517_getListeneri)
            	HX_STACK_ARG(param,"param")
HXLINE( 517)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getListeneri,return )

::Array< int > AL_obj::getListeneriv(int param,hx::Null< int >  __o_count){
int count = __o_count.Default(1);
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_528_getListeneriv)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(count,"count")
HXLINE( 528)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getListeneriv,return )

 ::Dynamic AL_obj::getProcAddress(::String fname){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_539_getProcAddress)
            	HX_STACK_ARG(fname,"fname")
HXLINE( 539)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getProcAddress,return )

::Array< Float > AL_obj::getSource3f(int source,int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_550_getSource3f)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
HXLINE( 550)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getSource3f,return )

Float AL_obj::getSourcef(int source,int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_561_getSourcef)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
HXLINE( 561)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getSourcef,return )

::Array< int > AL_obj::getSource3i(int source,int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_572_getSource3i)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
HXLINE( 572)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getSource3i,return )

::Array< Float > AL_obj::getSourcefv(int source,int param,hx::Null< int >  __o_count){
int count = __o_count.Default(1);
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_583_getSourcefv)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(count,"count")
HXLINE( 583)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,getSourcefv,return )

int AL_obj::getSourcei(int source,int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_594_getSourcei)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
HXLINE( 594)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,getSourcei,return )

::Array< int > AL_obj::getSourceiv(int source,int param,hx::Null< int >  __o_count){
int count = __o_count.Default(1);
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_605_getSourceiv)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(count,"count")
HXLINE( 605)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,getSourceiv,return )

::String AL_obj::getString(int param){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_616_getString)
            	HX_STACK_ARG(param,"param")
HXLINE( 616)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,getString,return )

bool AL_obj::isBuffer(int buffer){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_627_isBuffer)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 627)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,isBuffer,return )

bool AL_obj::isEnabled(int capability){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_638_isEnabled)
            	HX_STACK_ARG(capability,"capability")
HXLINE( 638)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,isEnabled,return )

bool AL_obj::isExtensionPresent(::String extname){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_649_isExtensionPresent)
            	HX_STACK_ARG(extname,"extname")
HXLINE( 649)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,isExtensionPresent,return )

bool AL_obj::isSource(int source){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_660_isSource)
            	HX_STACK_ARG(source,"source")
HXLINE( 660)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,isSource,return )

void AL_obj::listener3f(int param,Float value1,Float value2,Float value3){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_666_listener3f)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	HX_STACK_ARG(value3,"value3")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(AL_obj,listener3f,(void))

void AL_obj::listener3i(int param,int value1,int value2,int value3){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_675_listener3i)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	HX_STACK_ARG(value3,"value3")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(AL_obj,listener3i,(void))

void AL_obj::listenerf(int param,Float value){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_684_listenerf)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value,"value")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,listenerf,(void))

void AL_obj::listenerfv(int param,::Array< Float > values){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_693_listenerfv)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(values,"values")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,listenerfv,(void))

void AL_obj::listeneri(int param,int value){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_702_listeneri)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value,"value")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,listeneri,(void))

void AL_obj::listeneriv(int param,::Array< int > values){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_711_listeneriv)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(values,"values")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,listeneriv,(void))

void AL_obj::source3f(int source,int param,Float value1,Float value2,Float value3){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_720_source3f)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	HX_STACK_ARG(value3,"value3")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(AL_obj,source3f,(void))

void AL_obj::source3i(int source,int param,int value1,int value2,int value3){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_729_source3i)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	HX_STACK_ARG(value3,"value3")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(AL_obj,source3i,(void))

void AL_obj::sourcef(int source,int param,Float value){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_738_sourcef)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value,"value")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,sourcef,(void))

void AL_obj::sourcefv(int source,int param,::Array< Float > values){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_747_sourcefv)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(values,"values")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,sourcefv,(void))

void AL_obj::sourcei(int source,int param,int value){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_756_sourcei)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value,"value")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,sourcei,(void))

void AL_obj::sourceiv(int source,int param,::Array< int > values){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_765_sourceiv)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(values,"values")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,sourceiv,(void))

void AL_obj::sourcePlay(int source){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_774_sourcePlay)
            	HX_STACK_ARG(source,"source")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,sourcePlay,(void))

void AL_obj::sourcePlayv(::Array< int > sources){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_783_sourcePlayv)
            	HX_STACK_ARG(sources,"sources")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,sourcePlayv,(void))

void AL_obj::sourceStop(int source){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_792_sourceStop)
            	HX_STACK_ARG(source,"source")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,sourceStop,(void))

void AL_obj::sourceStopv(::Array< int > sources){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_801_sourceStopv)
            	HX_STACK_ARG(sources,"sources")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,sourceStopv,(void))

void AL_obj::sourceRewind(int source){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_810_sourceRewind)
            	HX_STACK_ARG(source,"source")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,sourceRewind,(void))

void AL_obj::sourceRewindv(::Array< int > sources){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_819_sourceRewindv)
            	HX_STACK_ARG(sources,"sources")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,sourceRewindv,(void))

void AL_obj::sourcePause(int source){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_828_sourcePause)
            	HX_STACK_ARG(source,"source")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,sourcePause,(void))

void AL_obj::sourcePausev(::Array< int > sources){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_837_sourcePausev)
            	HX_STACK_ARG(sources,"sources")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,sourcePausev,(void))

void AL_obj::sourceQueueBuffer(int source,int buffer){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_846_sourceQueueBuffer)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(buffer,"buffer")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,sourceQueueBuffer,(void))

void AL_obj::sourceQueueBuffers(int source,int nb,::Array< int > buffers){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_855_sourceQueueBuffers)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(nb,"nb")
            	HX_STACK_ARG(buffers,"buffers")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AL_obj,sourceQueueBuffers,(void))

int AL_obj::sourceUnqueueBuffer(int source){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_870_sourceUnqueueBuffer)
            	HX_STACK_ARG(source,"source")
HXLINE( 870)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,sourceUnqueueBuffer,return )

::Array< int > AL_obj::sourceUnqueueBuffers(int source,int nb){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_881_sourceUnqueueBuffers)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(nb,"nb")
HXLINE( 881)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AL_obj,sourceUnqueueBuffers,return )

void AL_obj::speedOfSound(Float value){
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_887_speedOfSound)
            	HX_STACK_ARG(value,"value")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AL_obj,speedOfSound,(void))


AL_obj::AL_obj()
{
}

bool AL_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"enable") ) { outValue = enable_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bufferf") ) { outValue = bufferf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bufferi") ) { outValue = bufferi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"disable") ) { outValue = disable_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourcef") ) { outValue = sourcef_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourcei") ) { outValue = sourcei_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"buffer3f") ) { outValue = buffer3f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"buffer3i") ) { outValue = buffer3i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bufferfv") ) { outValue = bufferfv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bufferiv") ) { outValue = bufferiv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getError") ) { outValue = getError_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFloat") ) { outValue = getFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isBuffer") ) { outValue = isBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isSource") ) { outValue = isSource_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"source3f") ) { outValue = source3f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"source3i") ) { outValue = source3i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourcefv") ) { outValue = sourcefv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourceiv") ) { outValue = sourceiv_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"genSource") ) { outValue = genSource_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"genBuffer") ) { outValue = genBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDouble") ) { outValue = getDouble_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFloatv") ) { outValue = getFloatv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getString") ) { outValue = getString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isEnabled") ) { outValue = isEnabled_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"listenerf") ) { outValue = listenerf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"listeneri") ) { outValue = listeneri_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bufferData") ) { outValue = bufferData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"genSources") ) { outValue = genSources_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"genBuffers") ) { outValue = genBuffers_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBoolean") ) { outValue = getBoolean_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBufferf") ) { outValue = getBufferf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBufferi") ) { outValue = getBufferi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDoublev") ) { outValue = getDoublev_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getInteger") ) { outValue = getInteger_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSourcef") ) { outValue = getSourcef_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSourcei") ) { outValue = getSourcei_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"listener3f") ) { outValue = listener3f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"listener3i") ) { outValue = listener3i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"listenerfv") ) { outValue = listenerfv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"listeneriv") ) { outValue = listeneriv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourcePlay") ) { outValue = sourcePlay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourceStop") ) { outValue = sourceStop_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBooleanv") ) { outValue = getBooleanv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBuffer3f") ) { outValue = getBuffer3f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBuffer3i") ) { outValue = getBuffer3i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBufferfv") ) { outValue = getBufferfv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBufferiv") ) { outValue = getBufferiv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getIntegerv") ) { outValue = getIntegerv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSource3f") ) { outValue = getSource3f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSource3i") ) { outValue = getSource3i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSourcefv") ) { outValue = getSourcefv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSourceiv") ) { outValue = getSourceiv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourcePlayv") ) { outValue = sourcePlayv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourceStopv") ) { outValue = sourceStopv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourcePause") ) { outValue = sourcePause_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deleteBuffer") ) { outValue = deleteBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"deleteSource") ) { outValue = deleteSource_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getEnumValue") ) { outValue = getEnumValue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getListenerf") ) { outValue = getListenerf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getListeneri") ) { outValue = getListeneri_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourceRewind") ) { outValue = sourceRewind_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourcePausev") ) { outValue = sourcePausev_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"speedOfSound") ) { outValue = speedOfSound_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"deleteBuffers") ) { outValue = deleteBuffers_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"deleteSources") ) { outValue = deleteSources_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"distanceModel") ) { outValue = distanceModel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dopplerFactor") ) { outValue = dopplerFactor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getListener3f") ) { outValue = getListener3f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getListener3i") ) { outValue = getListener3i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getListenerfv") ) { outValue = getListenerfv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getListeneriv") ) { outValue = getListeneriv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourceRewindv") ) { outValue = sourceRewindv_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getErrorString") ) { outValue = getErrorString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getProcAddress") ) { outValue = getProcAddress_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dopplerVelocity") ) { outValue = dopplerVelocity_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"sourceQueueBuffer") ) { outValue = sourceQueueBuffer_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"isExtensionPresent") ) { outValue = isExtensionPresent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sourceQueueBuffers") ) { outValue = sourceQueueBuffers_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sourceUnqueueBuffer") ) { outValue = sourceUnqueueBuffer_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"sourceUnqueueBuffers") ) { outValue = sourceUnqueueBuffers_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *AL_obj_sMemberStorageInfo = 0;
static hx::StaticInfo AL_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &AL_obj::NONE,HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33")},
	{hx::fsInt,(void *) &AL_obj::FALSE,HX_HCSTRING("FALSE","\x83","\x6d","\x3d","\x79")},
	{hx::fsInt,(void *) &AL_obj::TRUE,HX_HCSTRING("TRUE","\x4e","\x6f","\xc4","\x37")},
	{hx::fsInt,(void *) &AL_obj::SOURCE_RELATIVE,HX_HCSTRING("SOURCE_RELATIVE","\xf0","\xf3","\x84","\xfe")},
	{hx::fsInt,(void *) &AL_obj::CONE_INNER_ANGLE,HX_HCSTRING("CONE_INNER_ANGLE","\x4e","\xa1","\xd7","\x93")},
	{hx::fsInt,(void *) &AL_obj::CONE_OUTER_ANGLE,HX_HCSTRING("CONE_OUTER_ANGLE","\xf3","\xe1","\xbf","\xcc")},
	{hx::fsInt,(void *) &AL_obj::PITCH,HX_HCSTRING("PITCH","\xa0","\xf3","\x8e","\x40")},
	{hx::fsInt,(void *) &AL_obj::POSITION,HX_HCSTRING("POSITION","\xa9","\x30","\x80","\x24")},
	{hx::fsInt,(void *) &AL_obj::DIRECTION,HX_HCSTRING("DIRECTION","\x1f","\xd2","\x98","\x0b")},
	{hx::fsInt,(void *) &AL_obj::VELOCITY,HX_HCSTRING("VELOCITY","\x1d","\x92","\x83","\x78")},
	{hx::fsInt,(void *) &AL_obj::LOOPING,HX_HCSTRING("LOOPING","\xde","\x50","\x51","\xa0")},
	{hx::fsInt,(void *) &AL_obj::BUFFER,HX_HCSTRING("BUFFER","\x00","\x69","\x17","\x83")},
	{hx::fsInt,(void *) &AL_obj::GAIN,HX_HCSTRING("GAIN","\x7f","\xb8","\x1f","\x2f")},
	{hx::fsInt,(void *) &AL_obj::MIN_GAIN,HX_HCSTRING("MIN_GAIN","\xac","\x29","\xd2","\x21")},
	{hx::fsInt,(void *) &AL_obj::MAX_GAIN,HX_HCSTRING("MAX_GAIN","\x5a","\x0f","\xb8","\xd4")},
	{hx::fsInt,(void *) &AL_obj::ORIENTATION,HX_HCSTRING("ORIENTATION","\xb0","\xfa","\x3a","\xd4")},
	{hx::fsInt,(void *) &AL_obj::SOURCE_STATE,HX_HCSTRING("SOURCE_STATE","\x4d","\xe8","\x1e","\xab")},
	{hx::fsInt,(void *) &AL_obj::INITIAL,HX_HCSTRING("INITIAL","\x64","\xe4","\x72","\x4b")},
	{hx::fsInt,(void *) &AL_obj::PLAYING,HX_HCSTRING("PLAYING","\x4e","\xe3","\xeb","\x09")},
	{hx::fsInt,(void *) &AL_obj::PAUSED,HX_HCSTRING("PAUSED","\xae","\xec","\x06","\xa2")},
	{hx::fsInt,(void *) &AL_obj::STOPPED,HX_HCSTRING("STOPPED","\xed","\xa5","\x35","\xc3")},
	{hx::fsInt,(void *) &AL_obj::BUFFERS_QUEUED,HX_HCSTRING("BUFFERS_QUEUED","\x5f","\x78","\xce","\x71")},
	{hx::fsInt,(void *) &AL_obj::BUFFERS_PROCESSED,HX_HCSTRING("BUFFERS_PROCESSED","\x42","\x9d","\x62","\xac")},
	{hx::fsInt,(void *) &AL_obj::REFERENCE_DISTANCE,HX_HCSTRING("REFERENCE_DISTANCE","\x89","\xd5","\xce","\x9a")},
	{hx::fsInt,(void *) &AL_obj::ROLLOFF_FACTOR,HX_HCSTRING("ROLLOFF_FACTOR","\xbc","\x10","\x98","\x56")},
	{hx::fsInt,(void *) &AL_obj::CONE_OUTER_GAIN,HX_HCSTRING("CONE_OUTER_GAIN","\x3f","\xda","\x8d","\xe3")},
	{hx::fsInt,(void *) &AL_obj::MAX_DISTANCE,HX_HCSTRING("MAX_DISTANCE","\x90","\x83","\xbb","\xa5")},
	{hx::fsInt,(void *) &AL_obj::SEC_OFFSET,HX_HCSTRING("SEC_OFFSET","\xe1","\x5d","\xa3","\xac")},
	{hx::fsInt,(void *) &AL_obj::SAMPLE_OFFSET,HX_HCSTRING("SAMPLE_OFFSET","\x48","\x82","\xac","\xb4")},
	{hx::fsInt,(void *) &AL_obj::BYTE_OFFSET,HX_HCSTRING("BYTE_OFFSET","\x2a","\xdf","\x43","\x36")},
	{hx::fsInt,(void *) &AL_obj::SOURCE_TYPE,HX_HCSTRING("SOURCE_TYPE","\xde","\xff","\x00","\xdf")},
	{hx::fsInt,(void *) &AL_obj::STATIC,HX_HCSTRING("STATIC","\xae","\x88","\x7e","\xb8")},
	{hx::fsInt,(void *) &AL_obj::STREAMING,HX_HCSTRING("STREAMING","\x42","\x38","\x7b","\xb1")},
	{hx::fsInt,(void *) &AL_obj::UNDETERMINED,HX_HCSTRING("UNDETERMINED","\x0a","\xed","\x9d","\x50")},
	{hx::fsInt,(void *) &AL_obj::FORMAT_MONO8,HX_HCSTRING("FORMAT_MONO8","\x6d","\x40","\x81","\x7a")},
	{hx::fsInt,(void *) &AL_obj::FORMAT_MONO16,HX_HCSTRING("FORMAT_MONO16","\x10","\x19","\x97","\xb6")},
	{hx::fsInt,(void *) &AL_obj::FORMAT_STEREO8,HX_HCSTRING("FORMAT_STEREO8","\xb8","\x19","\x58","\xda")},
	{hx::fsInt,(void *) &AL_obj::FORMAT_STEREO16,HX_HCSTRING("FORMAT_STEREO16","\x65","\x61","\xbe","\x32")},
	{hx::fsInt,(void *) &AL_obj::FREQUENCY,HX_HCSTRING("FREQUENCY","\x7c","\xf2","\x42","\xb7")},
	{hx::fsInt,(void *) &AL_obj::BITS,HX_HCSTRING("BITS","\x06","\xc3","\xd7","\x2b")},
	{hx::fsInt,(void *) &AL_obj::CHANNELS,HX_HCSTRING("CHANNELS","\x50","\x3a","\x74","\xc4")},
	{hx::fsInt,(void *) &AL_obj::SIZE,HX_HCSTRING("SIZE","\xc1","\x68","\x14","\x37")},
	{hx::fsInt,(void *) &AL_obj::NO_ERROR,HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f")},
	{hx::fsInt,(void *) &AL_obj::INVALID_NAME,HX_HCSTRING("INVALID_NAME","\xf3","\x7b","\x59","\x19")},
	{hx::fsInt,(void *) &AL_obj::INVALID_ENUM,HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13")},
	{hx::fsInt,(void *) &AL_obj::INVALID_VALUE,HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0")},
	{hx::fsInt,(void *) &AL_obj::INVALID_OPERATION,HX_HCSTRING("INVALID_OPERATION","\x5f","\xb1","\xc8","\x29")},
	{hx::fsInt,(void *) &AL_obj::OUT_OF_MEMORY,HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1")},
	{hx::fsInt,(void *) &AL_obj::VENDOR,HX_HCSTRING("VENDOR","\x88","\x91","\x19","\x51")},
	{hx::fsInt,(void *) &AL_obj::VERSION,HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc")},
	{hx::fsInt,(void *) &AL_obj::RENDERER,HX_HCSTRING("RENDERER","\x43","\x55","\x61","\x0c")},
	{hx::fsInt,(void *) &AL_obj::EXTENSIONS,HX_HCSTRING("EXTENSIONS","\x14","\xf0","\x79","\x7b")},
	{hx::fsInt,(void *) &AL_obj::DOPPLER_FACTOR,HX_HCSTRING("DOPPLER_FACTOR","\xe0","\x6d","\x21","\x56")},
	{hx::fsInt,(void *) &AL_obj::SPEED_OF_SOUND,HX_HCSTRING("SPEED_OF_SOUND","\x5f","\x3f","\x54","\xba")},
	{hx::fsInt,(void *) &AL_obj::DOPPLER_VELOCITY,HX_HCSTRING("DOPPLER_VELOCITY","\x6e","\xe1","\x7d","\x1d")},
	{hx::fsInt,(void *) &AL_obj::DISTANCE_MODEL,HX_HCSTRING("DISTANCE_MODEL","\xbf","\x9b","\x1a","\x00")},
	{hx::fsInt,(void *) &AL_obj::INVERSE_DISTANCE,HX_HCSTRING("INVERSE_DISTANCE","\x04","\x89","\x17","\x1d")},
	{hx::fsInt,(void *) &AL_obj::INVERSE_DISTANCE_CLAMPED,HX_HCSTRING("INVERSE_DISTANCE_CLAMPED","\x7f","\x1a","\x32","\x28")},
	{hx::fsInt,(void *) &AL_obj::LINEAR_DISTANCE,HX_HCSTRING("LINEAR_DISTANCE","\x0f","\xb8","\xc7","\x14")},
	{hx::fsInt,(void *) &AL_obj::LINEAR_DISTANCE_CLAMPED,HX_HCSTRING("LINEAR_DISTANCE_CLAMPED","\x8a","\xcc","\x88","\xb2")},
	{hx::fsInt,(void *) &AL_obj::EXPONENT_DISTANCE,HX_HCSTRING("EXPONENT_DISTANCE","\x45","\x4a","\xec","\xc8")},
	{hx::fsInt,(void *) &AL_obj::EXPONENT_DISTANCE_CLAMPED,HX_HCSTRING("EXPONENT_DISTANCE_CLAMPED","\xc0","\x84","\x7b","\x57")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void AL_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AL_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AL_obj::NONE,"NONE");
	HX_MARK_MEMBER_NAME(AL_obj::FALSE,"FALSE");
	HX_MARK_MEMBER_NAME(AL_obj::TRUE,"TRUE");
	HX_MARK_MEMBER_NAME(AL_obj::SOURCE_RELATIVE,"SOURCE_RELATIVE");
	HX_MARK_MEMBER_NAME(AL_obj::CONE_INNER_ANGLE,"CONE_INNER_ANGLE");
	HX_MARK_MEMBER_NAME(AL_obj::CONE_OUTER_ANGLE,"CONE_OUTER_ANGLE");
	HX_MARK_MEMBER_NAME(AL_obj::PITCH,"PITCH");
	HX_MARK_MEMBER_NAME(AL_obj::POSITION,"POSITION");
	HX_MARK_MEMBER_NAME(AL_obj::DIRECTION,"DIRECTION");
	HX_MARK_MEMBER_NAME(AL_obj::VELOCITY,"VELOCITY");
	HX_MARK_MEMBER_NAME(AL_obj::LOOPING,"LOOPING");
	HX_MARK_MEMBER_NAME(AL_obj::BUFFER,"BUFFER");
	HX_MARK_MEMBER_NAME(AL_obj::GAIN,"GAIN");
	HX_MARK_MEMBER_NAME(AL_obj::MIN_GAIN,"MIN_GAIN");
	HX_MARK_MEMBER_NAME(AL_obj::MAX_GAIN,"MAX_GAIN");
	HX_MARK_MEMBER_NAME(AL_obj::ORIENTATION,"ORIENTATION");
	HX_MARK_MEMBER_NAME(AL_obj::SOURCE_STATE,"SOURCE_STATE");
	HX_MARK_MEMBER_NAME(AL_obj::INITIAL,"INITIAL");
	HX_MARK_MEMBER_NAME(AL_obj::PLAYING,"PLAYING");
	HX_MARK_MEMBER_NAME(AL_obj::PAUSED,"PAUSED");
	HX_MARK_MEMBER_NAME(AL_obj::STOPPED,"STOPPED");
	HX_MARK_MEMBER_NAME(AL_obj::BUFFERS_QUEUED,"BUFFERS_QUEUED");
	HX_MARK_MEMBER_NAME(AL_obj::BUFFERS_PROCESSED,"BUFFERS_PROCESSED");
	HX_MARK_MEMBER_NAME(AL_obj::REFERENCE_DISTANCE,"REFERENCE_DISTANCE");
	HX_MARK_MEMBER_NAME(AL_obj::ROLLOFF_FACTOR,"ROLLOFF_FACTOR");
	HX_MARK_MEMBER_NAME(AL_obj::CONE_OUTER_GAIN,"CONE_OUTER_GAIN");
	HX_MARK_MEMBER_NAME(AL_obj::MAX_DISTANCE,"MAX_DISTANCE");
	HX_MARK_MEMBER_NAME(AL_obj::SEC_OFFSET,"SEC_OFFSET");
	HX_MARK_MEMBER_NAME(AL_obj::SAMPLE_OFFSET,"SAMPLE_OFFSET");
	HX_MARK_MEMBER_NAME(AL_obj::BYTE_OFFSET,"BYTE_OFFSET");
	HX_MARK_MEMBER_NAME(AL_obj::SOURCE_TYPE,"SOURCE_TYPE");
	HX_MARK_MEMBER_NAME(AL_obj::STATIC,"STATIC");
	HX_MARK_MEMBER_NAME(AL_obj::STREAMING,"STREAMING");
	HX_MARK_MEMBER_NAME(AL_obj::UNDETERMINED,"UNDETERMINED");
	HX_MARK_MEMBER_NAME(AL_obj::FORMAT_MONO8,"FORMAT_MONO8");
	HX_MARK_MEMBER_NAME(AL_obj::FORMAT_MONO16,"FORMAT_MONO16");
	HX_MARK_MEMBER_NAME(AL_obj::FORMAT_STEREO8,"FORMAT_STEREO8");
	HX_MARK_MEMBER_NAME(AL_obj::FORMAT_STEREO16,"FORMAT_STEREO16");
	HX_MARK_MEMBER_NAME(AL_obj::FREQUENCY,"FREQUENCY");
	HX_MARK_MEMBER_NAME(AL_obj::BITS,"BITS");
	HX_MARK_MEMBER_NAME(AL_obj::CHANNELS,"CHANNELS");
	HX_MARK_MEMBER_NAME(AL_obj::SIZE,"SIZE");
	HX_MARK_MEMBER_NAME(AL_obj::NO_ERROR,"NO_ERROR");
	HX_MARK_MEMBER_NAME(AL_obj::INVALID_NAME,"INVALID_NAME");
	HX_MARK_MEMBER_NAME(AL_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_MARK_MEMBER_NAME(AL_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_MARK_MEMBER_NAME(AL_obj::INVALID_OPERATION,"INVALID_OPERATION");
	HX_MARK_MEMBER_NAME(AL_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_MARK_MEMBER_NAME(AL_obj::VENDOR,"VENDOR");
	HX_MARK_MEMBER_NAME(AL_obj::VERSION,"VERSION");
	HX_MARK_MEMBER_NAME(AL_obj::RENDERER,"RENDERER");
	HX_MARK_MEMBER_NAME(AL_obj::EXTENSIONS,"EXTENSIONS");
	HX_MARK_MEMBER_NAME(AL_obj::DOPPLER_FACTOR,"DOPPLER_FACTOR");
	HX_MARK_MEMBER_NAME(AL_obj::SPEED_OF_SOUND,"SPEED_OF_SOUND");
	HX_MARK_MEMBER_NAME(AL_obj::DOPPLER_VELOCITY,"DOPPLER_VELOCITY");
	HX_MARK_MEMBER_NAME(AL_obj::DISTANCE_MODEL,"DISTANCE_MODEL");
	HX_MARK_MEMBER_NAME(AL_obj::INVERSE_DISTANCE,"INVERSE_DISTANCE");
	HX_MARK_MEMBER_NAME(AL_obj::INVERSE_DISTANCE_CLAMPED,"INVERSE_DISTANCE_CLAMPED");
	HX_MARK_MEMBER_NAME(AL_obj::LINEAR_DISTANCE,"LINEAR_DISTANCE");
	HX_MARK_MEMBER_NAME(AL_obj::LINEAR_DISTANCE_CLAMPED,"LINEAR_DISTANCE_CLAMPED");
	HX_MARK_MEMBER_NAME(AL_obj::EXPONENT_DISTANCE,"EXPONENT_DISTANCE");
	HX_MARK_MEMBER_NAME(AL_obj::EXPONENT_DISTANCE_CLAMPED,"EXPONENT_DISTANCE_CLAMPED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AL_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AL_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AL_obj::NONE,"NONE");
	HX_VISIT_MEMBER_NAME(AL_obj::FALSE,"FALSE");
	HX_VISIT_MEMBER_NAME(AL_obj::TRUE,"TRUE");
	HX_VISIT_MEMBER_NAME(AL_obj::SOURCE_RELATIVE,"SOURCE_RELATIVE");
	HX_VISIT_MEMBER_NAME(AL_obj::CONE_INNER_ANGLE,"CONE_INNER_ANGLE");
	HX_VISIT_MEMBER_NAME(AL_obj::CONE_OUTER_ANGLE,"CONE_OUTER_ANGLE");
	HX_VISIT_MEMBER_NAME(AL_obj::PITCH,"PITCH");
	HX_VISIT_MEMBER_NAME(AL_obj::POSITION,"POSITION");
	HX_VISIT_MEMBER_NAME(AL_obj::DIRECTION,"DIRECTION");
	HX_VISIT_MEMBER_NAME(AL_obj::VELOCITY,"VELOCITY");
	HX_VISIT_MEMBER_NAME(AL_obj::LOOPING,"LOOPING");
	HX_VISIT_MEMBER_NAME(AL_obj::BUFFER,"BUFFER");
	HX_VISIT_MEMBER_NAME(AL_obj::GAIN,"GAIN");
	HX_VISIT_MEMBER_NAME(AL_obj::MIN_GAIN,"MIN_GAIN");
	HX_VISIT_MEMBER_NAME(AL_obj::MAX_GAIN,"MAX_GAIN");
	HX_VISIT_MEMBER_NAME(AL_obj::ORIENTATION,"ORIENTATION");
	HX_VISIT_MEMBER_NAME(AL_obj::SOURCE_STATE,"SOURCE_STATE");
	HX_VISIT_MEMBER_NAME(AL_obj::INITIAL,"INITIAL");
	HX_VISIT_MEMBER_NAME(AL_obj::PLAYING,"PLAYING");
	HX_VISIT_MEMBER_NAME(AL_obj::PAUSED,"PAUSED");
	HX_VISIT_MEMBER_NAME(AL_obj::STOPPED,"STOPPED");
	HX_VISIT_MEMBER_NAME(AL_obj::BUFFERS_QUEUED,"BUFFERS_QUEUED");
	HX_VISIT_MEMBER_NAME(AL_obj::BUFFERS_PROCESSED,"BUFFERS_PROCESSED");
	HX_VISIT_MEMBER_NAME(AL_obj::REFERENCE_DISTANCE,"REFERENCE_DISTANCE");
	HX_VISIT_MEMBER_NAME(AL_obj::ROLLOFF_FACTOR,"ROLLOFF_FACTOR");
	HX_VISIT_MEMBER_NAME(AL_obj::CONE_OUTER_GAIN,"CONE_OUTER_GAIN");
	HX_VISIT_MEMBER_NAME(AL_obj::MAX_DISTANCE,"MAX_DISTANCE");
	HX_VISIT_MEMBER_NAME(AL_obj::SEC_OFFSET,"SEC_OFFSET");
	HX_VISIT_MEMBER_NAME(AL_obj::SAMPLE_OFFSET,"SAMPLE_OFFSET");
	HX_VISIT_MEMBER_NAME(AL_obj::BYTE_OFFSET,"BYTE_OFFSET");
	HX_VISIT_MEMBER_NAME(AL_obj::SOURCE_TYPE,"SOURCE_TYPE");
	HX_VISIT_MEMBER_NAME(AL_obj::STATIC,"STATIC");
	HX_VISIT_MEMBER_NAME(AL_obj::STREAMING,"STREAMING");
	HX_VISIT_MEMBER_NAME(AL_obj::UNDETERMINED,"UNDETERMINED");
	HX_VISIT_MEMBER_NAME(AL_obj::FORMAT_MONO8,"FORMAT_MONO8");
	HX_VISIT_MEMBER_NAME(AL_obj::FORMAT_MONO16,"FORMAT_MONO16");
	HX_VISIT_MEMBER_NAME(AL_obj::FORMAT_STEREO8,"FORMAT_STEREO8");
	HX_VISIT_MEMBER_NAME(AL_obj::FORMAT_STEREO16,"FORMAT_STEREO16");
	HX_VISIT_MEMBER_NAME(AL_obj::FREQUENCY,"FREQUENCY");
	HX_VISIT_MEMBER_NAME(AL_obj::BITS,"BITS");
	HX_VISIT_MEMBER_NAME(AL_obj::CHANNELS,"CHANNELS");
	HX_VISIT_MEMBER_NAME(AL_obj::SIZE,"SIZE");
	HX_VISIT_MEMBER_NAME(AL_obj::NO_ERROR,"NO_ERROR");
	HX_VISIT_MEMBER_NAME(AL_obj::INVALID_NAME,"INVALID_NAME");
	HX_VISIT_MEMBER_NAME(AL_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_VISIT_MEMBER_NAME(AL_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_VISIT_MEMBER_NAME(AL_obj::INVALID_OPERATION,"INVALID_OPERATION");
	HX_VISIT_MEMBER_NAME(AL_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_VISIT_MEMBER_NAME(AL_obj::VENDOR,"VENDOR");
	HX_VISIT_MEMBER_NAME(AL_obj::VERSION,"VERSION");
	HX_VISIT_MEMBER_NAME(AL_obj::RENDERER,"RENDERER");
	HX_VISIT_MEMBER_NAME(AL_obj::EXTENSIONS,"EXTENSIONS");
	HX_VISIT_MEMBER_NAME(AL_obj::DOPPLER_FACTOR,"DOPPLER_FACTOR");
	HX_VISIT_MEMBER_NAME(AL_obj::SPEED_OF_SOUND,"SPEED_OF_SOUND");
	HX_VISIT_MEMBER_NAME(AL_obj::DOPPLER_VELOCITY,"DOPPLER_VELOCITY");
	HX_VISIT_MEMBER_NAME(AL_obj::DISTANCE_MODEL,"DISTANCE_MODEL");
	HX_VISIT_MEMBER_NAME(AL_obj::INVERSE_DISTANCE,"INVERSE_DISTANCE");
	HX_VISIT_MEMBER_NAME(AL_obj::INVERSE_DISTANCE_CLAMPED,"INVERSE_DISTANCE_CLAMPED");
	HX_VISIT_MEMBER_NAME(AL_obj::LINEAR_DISTANCE,"LINEAR_DISTANCE");
	HX_VISIT_MEMBER_NAME(AL_obj::LINEAR_DISTANCE_CLAMPED,"LINEAR_DISTANCE_CLAMPED");
	HX_VISIT_MEMBER_NAME(AL_obj::EXPONENT_DISTANCE,"EXPONENT_DISTANCE");
	HX_VISIT_MEMBER_NAME(AL_obj::EXPONENT_DISTANCE_CLAMPED,"EXPONENT_DISTANCE_CLAMPED");
};

#endif

hx::Class AL_obj::__mClass;

static ::String AL_obj_sStaticFields[] = {
	HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"),
	HX_HCSTRING("FALSE","\x83","\x6d","\x3d","\x79"),
	HX_HCSTRING("TRUE","\x4e","\x6f","\xc4","\x37"),
	HX_HCSTRING("SOURCE_RELATIVE","\xf0","\xf3","\x84","\xfe"),
	HX_HCSTRING("CONE_INNER_ANGLE","\x4e","\xa1","\xd7","\x93"),
	HX_HCSTRING("CONE_OUTER_ANGLE","\xf3","\xe1","\xbf","\xcc"),
	HX_HCSTRING("PITCH","\xa0","\xf3","\x8e","\x40"),
	HX_HCSTRING("POSITION","\xa9","\x30","\x80","\x24"),
	HX_HCSTRING("DIRECTION","\x1f","\xd2","\x98","\x0b"),
	HX_HCSTRING("VELOCITY","\x1d","\x92","\x83","\x78"),
	HX_HCSTRING("LOOPING","\xde","\x50","\x51","\xa0"),
	HX_HCSTRING("BUFFER","\x00","\x69","\x17","\x83"),
	HX_HCSTRING("GAIN","\x7f","\xb8","\x1f","\x2f"),
	HX_HCSTRING("MIN_GAIN","\xac","\x29","\xd2","\x21"),
	HX_HCSTRING("MAX_GAIN","\x5a","\x0f","\xb8","\xd4"),
	HX_HCSTRING("ORIENTATION","\xb0","\xfa","\x3a","\xd4"),
	HX_HCSTRING("SOURCE_STATE","\x4d","\xe8","\x1e","\xab"),
	HX_HCSTRING("INITIAL","\x64","\xe4","\x72","\x4b"),
	HX_HCSTRING("PLAYING","\x4e","\xe3","\xeb","\x09"),
	HX_HCSTRING("PAUSED","\xae","\xec","\x06","\xa2"),
	HX_HCSTRING("STOPPED","\xed","\xa5","\x35","\xc3"),
	HX_HCSTRING("BUFFERS_QUEUED","\x5f","\x78","\xce","\x71"),
	HX_HCSTRING("BUFFERS_PROCESSED","\x42","\x9d","\x62","\xac"),
	HX_HCSTRING("REFERENCE_DISTANCE","\x89","\xd5","\xce","\x9a"),
	HX_HCSTRING("ROLLOFF_FACTOR","\xbc","\x10","\x98","\x56"),
	HX_HCSTRING("CONE_OUTER_GAIN","\x3f","\xda","\x8d","\xe3"),
	HX_HCSTRING("MAX_DISTANCE","\x90","\x83","\xbb","\xa5"),
	HX_HCSTRING("SEC_OFFSET","\xe1","\x5d","\xa3","\xac"),
	HX_HCSTRING("SAMPLE_OFFSET","\x48","\x82","\xac","\xb4"),
	HX_HCSTRING("BYTE_OFFSET","\x2a","\xdf","\x43","\x36"),
	HX_HCSTRING("SOURCE_TYPE","\xde","\xff","\x00","\xdf"),
	HX_HCSTRING("STATIC","\xae","\x88","\x7e","\xb8"),
	HX_HCSTRING("STREAMING","\x42","\x38","\x7b","\xb1"),
	HX_HCSTRING("UNDETERMINED","\x0a","\xed","\x9d","\x50"),
	HX_HCSTRING("FORMAT_MONO8","\x6d","\x40","\x81","\x7a"),
	HX_HCSTRING("FORMAT_MONO16","\x10","\x19","\x97","\xb6"),
	HX_HCSTRING("FORMAT_STEREO8","\xb8","\x19","\x58","\xda"),
	HX_HCSTRING("FORMAT_STEREO16","\x65","\x61","\xbe","\x32"),
	HX_HCSTRING("FREQUENCY","\x7c","\xf2","\x42","\xb7"),
	HX_HCSTRING("BITS","\x06","\xc3","\xd7","\x2b"),
	HX_HCSTRING("CHANNELS","\x50","\x3a","\x74","\xc4"),
	HX_HCSTRING("SIZE","\xc1","\x68","\x14","\x37"),
	HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f"),
	HX_HCSTRING("INVALID_NAME","\xf3","\x7b","\x59","\x19"),
	HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13"),
	HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0"),
	HX_HCSTRING("INVALID_OPERATION","\x5f","\xb1","\xc8","\x29"),
	HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1"),
	HX_HCSTRING("VENDOR","\x88","\x91","\x19","\x51"),
	HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc"),
	HX_HCSTRING("RENDERER","\x43","\x55","\x61","\x0c"),
	HX_HCSTRING("EXTENSIONS","\x14","\xf0","\x79","\x7b"),
	HX_HCSTRING("DOPPLER_FACTOR","\xe0","\x6d","\x21","\x56"),
	HX_HCSTRING("SPEED_OF_SOUND","\x5f","\x3f","\x54","\xba"),
	HX_HCSTRING("DOPPLER_VELOCITY","\x6e","\xe1","\x7d","\x1d"),
	HX_HCSTRING("DISTANCE_MODEL","\xbf","\x9b","\x1a","\x00"),
	HX_HCSTRING("INVERSE_DISTANCE","\x04","\x89","\x17","\x1d"),
	HX_HCSTRING("INVERSE_DISTANCE_CLAMPED","\x7f","\x1a","\x32","\x28"),
	HX_HCSTRING("LINEAR_DISTANCE","\x0f","\xb8","\xc7","\x14"),
	HX_HCSTRING("LINEAR_DISTANCE_CLAMPED","\x8a","\xcc","\x88","\xb2"),
	HX_HCSTRING("EXPONENT_DISTANCE","\x45","\x4a","\xec","\xc8"),
	HX_HCSTRING("EXPONENT_DISTANCE_CLAMPED","\xc0","\x84","\x7b","\x57"),
	HX_HCSTRING("bufferData","\x4a","\xbf","\x73","\x93"),
	HX_HCSTRING("buffer3f","\xd3","\x29","\xfe","\xac"),
	HX_HCSTRING("buffer3i","\xd6","\x29","\xfe","\xac"),
	HX_HCSTRING("bufferf","\x66","\xa3","\x90","\xb1"),
	HX_HCSTRING("bufferfv","\x50","\x56","\xfe","\xac"),
	HX_HCSTRING("bufferi","\x69","\xa3","\x90","\xb1"),
	HX_HCSTRING("bufferiv","\xed","\x58","\xfe","\xac"),
	HX_HCSTRING("deleteBuffer","\x8b","\xe3","\x2c","\x37"),
	HX_HCSTRING("deleteBuffers","\x88","\x36","\x1a","\x10"),
	HX_HCSTRING("deleteSource","\x66","\xd7","\xc9","\x98"),
	HX_HCSTRING("deleteSources","\x4d","\xa2","\xd2","\x17"),
	HX_HCSTRING("disable","\xe8","\x69","\x58","\xb1"),
	HX_HCSTRING("distanceModel","\x34","\x40","\xe1","\xd3"),
	HX_HCSTRING("dopplerFactor","\xdd","\x2d","\x05","\x6f"),
	HX_HCSTRING("dopplerVelocity","\xab","\x76","\xcf","\x06"),
	HX_HCSTRING("enable","\x83","\xae","\x87","\xf8"),
	HX_HCSTRING("genSource","\x8b","\x71","\x07","\xb5"),
	HX_HCSTRING("genSources","\x88","\xe8","\x7b","\xb1"),
	HX_HCSTRING("genBuffer","\xb0","\x7d","\x6a","\x53"),
	HX_HCSTRING("genBuffers","\xc3","\x7c","\xc3","\xa9"),
	HX_HCSTRING("getBoolean","\xb2","\x70","\x60","\xcd"),
	HX_HCSTRING("getBooleanv","\x84","\x2b","\x02","\xe7"),
	HX_HCSTRING("getBuffer3f","\x89","\xec","\xf1","\xd2"),
	HX_HCSTRING("getBuffer3i","\x8c","\xec","\xf1","\xd2"),
	HX_HCSTRING("getBufferf","\x70","\x29","\xf2","\x00"),
	HX_HCSTRING("getBufferfv","\x06","\x19","\xf2","\xd2"),
	HX_HCSTRING("getBufferi","\x73","\x29","\xf2","\x00"),
	HX_HCSTRING("getBufferiv","\xa3","\x1b","\xf2","\xd2"),
	HX_HCSTRING("getDouble","\x47","\xb4","\x21","\xaf"),
	HX_HCSTRING("getDoublev","\x4f","\x0a","\x5c","\x8e"),
	HX_HCSTRING("getEnumValue","\x3a","\x9d","\x5d","\x37"),
	HX_HCSTRING("getError","\x52","\xdb","\x00","\xd3"),
	HX_HCSTRING("getErrorString","\xc3","\xc1","\x3b","\x87"),
	HX_HCSTRING("getFloat","\x26","\xd5","\x6d","\x62"),
	HX_HCSTRING("getFloatv","\x90","\xac","\xac","\xbd"),
	HX_HCSTRING("getInteger","\xc8","\x43","\x7d","\x66"),
	HX_HCSTRING("getIntegerv","\xae","\x0b","\x1e","\x47"),
	HX_HCSTRING("getListener3f","\x7d","\x8e","\x7c","\x85"),
	HX_HCSTRING("getListener3i","\x80","\x8e","\x7c","\x85"),
	HX_HCSTRING("getListenerf","\xfc","\x01","\xe5","\x02"),
	HX_HCSTRING("getListenerfv","\xfa","\xba","\x7c","\x85"),
	HX_HCSTRING("getListeneri","\xff","\x01","\xe5","\x02"),
	HX_HCSTRING("getListeneriv","\x97","\xbd","\x7c","\x85"),
	HX_HCSTRING("getProcAddress","\xc8","\xe3","\xa1","\x89"),
	HX_HCSTRING("getSource3f","\x24","\xcd","\x97","\x8c"),
	HX_HCSTRING("getSourcef","\x35","\x95","\xaa","\x08"),
	HX_HCSTRING("getSource3i","\x27","\xcd","\x97","\x8c"),
	HX_HCSTRING("getSourcefv","\xa1","\xf9","\x97","\x8c"),
	HX_HCSTRING("getSourcei","\x38","\x95","\xaa","\x08"),
	HX_HCSTRING("getSourceiv","\x3e","\xfc","\x97","\x8c"),
	HX_HCSTRING("getString","\x07","\xb2","\x86","\x8d"),
	HX_HCSTRING("isBuffer","\x8a","\x58","\xfe","\x28"),
	HX_HCSTRING("isEnabled","\xb7","\x81","\x2f","\x82"),
	HX_HCSTRING("isExtensionPresent","\x46","\xf9","\x2a","\xb4"),
	HX_HCSTRING("isSource","\x65","\x4c","\x9b","\x8a"),
	HX_HCSTRING("listener3f","\x47","\x32","\x0a","\x29"),
	HX_HCSTRING("listener3i","\x4a","\x32","\x0a","\x29"),
	HX_HCSTRING("listenerf","\x72","\x65","\x8e","\xf3"),
	HX_HCSTRING("listenerfv","\xc4","\x5e","\x0a","\x29"),
	HX_HCSTRING("listeneri","\x75","\x65","\x8e","\xf3"),
	HX_HCSTRING("listeneriv","\x61","\x61","\x0a","\x29"),
	HX_HCSTRING("source3f","\x6e","\x0a","\xa4","\x66"),
	HX_HCSTRING("source3i","\x71","\x0a","\xa4","\x66"),
	HX_HCSTRING("sourcef","\x2b","\x0f","\x49","\xb9"),
	HX_HCSTRING("sourcefv","\xeb","\x36","\xa4","\x66"),
	HX_HCSTRING("sourcei","\x2e","\x0f","\x49","\xb9"),
	HX_HCSTRING("sourceiv","\x88","\x39","\xa4","\x66"),
	HX_HCSTRING("sourcePlay","\x6f","\x14","\xbe","\x72"),
	HX_HCSTRING("sourcePlayv","\x27","\xcd","\x93","\xf3"),
	HX_HCSTRING("sourceStop","\x7d","\xd6","\xbf","\x74"),
	HX_HCSTRING("sourceStopv","\x59","\xd7","\x1b","\xb3"),
	HX_HCSTRING("sourceRewind","\x36","\xe5","\x26","\x01"),
	HX_HCSTRING("sourceRewindv","\x80","\xaa","\xe1","\x00"),
	HX_HCSTRING("sourcePause","\x1b","\x9c","\x5d","\xec"),
	HX_HCSTRING("sourcePausev","\xfb","\xfb","\x8a","\xe5"),
	HX_HCSTRING("sourceQueueBuffer","\x56","\x70","\x65","\x56"),
	HX_HCSTRING("sourceQueueBuffers","\x5d","\xdb","\x5c","\x42"),
	HX_HCSTRING("sourceUnqueueBuffer","\xdd","\x29","\x95","\x2e"),
	HX_HCSTRING("sourceUnqueueBuffers","\xf6","\x77","\xef","\x93"),
	HX_HCSTRING("speedOfSound","\x71","\xe7","\x21","\x0a"),
	::String(null())
};

void AL_obj::__register()
{
	hx::Object *dummy = new AL_obj;
	AL_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.audio.openal.AL","\x93","\xcf","\xaa","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AL_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AL_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AL_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< AL_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AL_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AL_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AL_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AL_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_20_boot)
HXLINE(  20)		NONE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_21_boot)
HXLINE(  21)		FALSE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_22_boot)
HXLINE(  22)		TRUE = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_23_boot)
HXLINE(  23)		SOURCE_RELATIVE = (int)514;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_24_boot)
HXLINE(  24)		CONE_INNER_ANGLE = (int)4097;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_25_boot)
HXLINE(  25)		CONE_OUTER_ANGLE = (int)4098;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_26_boot)
HXLINE(  26)		PITCH = (int)4099;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_27_boot)
HXLINE(  27)		POSITION = (int)4100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_28_boot)
HXLINE(  28)		DIRECTION = (int)4101;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_29_boot)
HXLINE(  29)		VELOCITY = (int)4102;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_30_boot)
HXLINE(  30)		LOOPING = (int)4103;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_31_boot)
HXLINE(  31)		BUFFER = (int)4105;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_32_boot)
HXLINE(  32)		GAIN = (int)4106;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_33_boot)
HXLINE(  33)		MIN_GAIN = (int)4109;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_34_boot)
HXLINE(  34)		MAX_GAIN = (int)4110;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_35_boot)
HXLINE(  35)		ORIENTATION = (int)4111;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_36_boot)
HXLINE(  36)		SOURCE_STATE = (int)4112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_37_boot)
HXLINE(  37)		INITIAL = (int)4113;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_38_boot)
HXLINE(  38)		PLAYING = (int)4114;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_39_boot)
HXLINE(  39)		PAUSED = (int)4115;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_40_boot)
HXLINE(  40)		STOPPED = (int)4116;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_41_boot)
HXLINE(  41)		BUFFERS_QUEUED = (int)4117;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_42_boot)
HXLINE(  42)		BUFFERS_PROCESSED = (int)4118;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_43_boot)
HXLINE(  43)		REFERENCE_DISTANCE = (int)4128;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_44_boot)
HXLINE(  44)		ROLLOFF_FACTOR = (int)4129;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_45_boot)
HXLINE(  45)		CONE_OUTER_GAIN = (int)4130;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_46_boot)
HXLINE(  46)		MAX_DISTANCE = (int)4131;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_47_boot)
HXLINE(  47)		SEC_OFFSET = (int)4132;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_48_boot)
HXLINE(  48)		SAMPLE_OFFSET = (int)4133;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_49_boot)
HXLINE(  49)		BYTE_OFFSET = (int)4134;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_50_boot)
HXLINE(  50)		SOURCE_TYPE = (int)4135;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_51_boot)
HXLINE(  51)		STATIC = (int)4136;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_52_boot)
HXLINE(  52)		STREAMING = (int)4137;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_53_boot)
HXLINE(  53)		UNDETERMINED = (int)4144;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_54_boot)
HXLINE(  54)		FORMAT_MONO8 = (int)4352;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_55_boot)
HXLINE(  55)		FORMAT_MONO16 = (int)4353;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_56_boot)
HXLINE(  56)		FORMAT_STEREO8 = (int)4354;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_57_boot)
HXLINE(  57)		FORMAT_STEREO16 = (int)4355;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_58_boot)
HXLINE(  58)		FREQUENCY = (int)8193;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_59_boot)
HXLINE(  59)		BITS = (int)8194;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_60_boot)
HXLINE(  60)		CHANNELS = (int)8195;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_61_boot)
HXLINE(  61)		SIZE = (int)8196;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_62_boot)
HXLINE(  62)		NO_ERROR = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_63_boot)
HXLINE(  63)		INVALID_NAME = (int)40961;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_64_boot)
HXLINE(  64)		INVALID_ENUM = (int)40962;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_65_boot)
HXLINE(  65)		INVALID_VALUE = (int)40963;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_66_boot)
HXLINE(  66)		INVALID_OPERATION = (int)40964;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_67_boot)
HXLINE(  67)		OUT_OF_MEMORY = (int)40965;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_68_boot)
HXLINE(  68)		VENDOR = (int)45057;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_69_boot)
HXLINE(  69)		VERSION = (int)45058;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_70_boot)
HXLINE(  70)		RENDERER = (int)45059;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_71_boot)
HXLINE(  71)		EXTENSIONS = (int)45060;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_72_boot)
HXLINE(  72)		DOPPLER_FACTOR = (int)49152;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_73_boot)
HXLINE(  73)		SPEED_OF_SOUND = (int)49155;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_74_boot)
HXLINE(  74)		DOPPLER_VELOCITY = (int)49153;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_75_boot)
HXLINE(  75)		DISTANCE_MODEL = (int)53248;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_76_boot)
HXLINE(  76)		INVERSE_DISTANCE = (int)53249;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_77_boot)
HXLINE(  77)		INVERSE_DISTANCE_CLAMPED = (int)53250;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_78_boot)
HXLINE(  78)		LINEAR_DISTANCE = (int)53251;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_79_boot)
HXLINE(  79)		LINEAR_DISTANCE_CLAMPED = (int)53252;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_80_boot)
HXLINE(  80)		EXPONENT_DISTANCE = (int)53253;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01a1e8b1534a0217_81_boot)
HXLINE(  81)		EXPONENT_DISTANCE_CLAMPED = (int)53254;
            	}
}

} // end namespace lime
} // end namespace audio
} // end namespace openal
