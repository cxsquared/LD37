// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_audio_WebAudioContext
#include <lime/audio/WebAudioContext.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_15_new,"lime.audio.WebAudioContext","new",0x06d4e58e,"lime.audio.WebAudioContext.new","lime/audio/WebAudioContext.hx",15,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_22_createAnalyser,"lime.audio.WebAudioContext","createAnalyser",0xa04a948d,"lime.audio.WebAudioContext.createAnalyser","lime/audio/WebAudioContext.hx",22,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_23_createBiquadFilter,"lime.audio.WebAudioContext","createBiquadFilter",0x1ec33c14,"lime.audio.WebAudioContext.createBiquadFilter","lime/audio/WebAudioContext.hx",23,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_25_createBuffer,"lime.audio.WebAudioContext","createBuffer",0x3d7fd22e,"lime.audio.WebAudioContext.createBuffer","lime/audio/WebAudioContext.hx",25,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_26_createBufferSource,"lime.audio.WebAudioContext","createBufferSource",0x61cacda9,"lime.audio.WebAudioContext.createBufferSource","lime/audio/WebAudioContext.hx",26,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_27_createChannelMerger,"lime.audio.WebAudioContext","createChannelMerger",0x60a9b46f,"lime.audio.WebAudioContext.createChannelMerger","lime/audio/WebAudioContext.hx",27,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_28_createChannelSplitter,"lime.audio.WebAudioContext","createChannelSplitter",0x1102c43c,"lime.audio.WebAudioContext.createChannelSplitter","lime/audio/WebAudioContext.hx",28,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_29_createConvolver,"lime.audio.WebAudioContext","createConvolver",0xd59fde84,"lime.audio.WebAudioContext.createConvolver","lime/audio/WebAudioContext.hx",29,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_30_createDelay,"lime.audio.WebAudioContext","createDelay",0xa5210215,"lime.audio.WebAudioContext.createDelay","lime/audio/WebAudioContext.hx",30,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_31_createDynamicsCompressor,"lime.audio.WebAudioContext","createDynamicsCompressor",0x41dacca7,"lime.audio.WebAudioContext.createDynamicsCompressor","lime/audio/WebAudioContext.hx",31,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_32_createGain,"lime.audio.WebAudioContext","createGain",0xfcf8be2d,"lime.audio.WebAudioContext.createGain","lime/audio/WebAudioContext.hx",32,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_33_createMediaElementSource,"lime.audio.WebAudioContext","createMediaElementSource",0x6d41b761,"lime.audio.WebAudioContext.createMediaElementSource","lime/audio/WebAudioContext.hx",33,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_34_createMediaStreamSource,"lime.audio.WebAudioContext","createMediaStreamSource",0x62426e11,"lime.audio.WebAudioContext.createMediaStreamSource","lime/audio/WebAudioContext.hx",34,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_35_createOscillator,"lime.audio.WebAudioContext","createOscillator",0x92dbf7ce,"lime.audio.WebAudioContext.createOscillator","lime/audio/WebAudioContext.hx",35,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_36_createPanner,"lime.audio.WebAudioContext","createPanner",0x57cb0c4c,"lime.audio.WebAudioContext.createPanner","lime/audio/WebAudioContext.hx",36,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_37_createScriptProcessor,"lime.audio.WebAudioContext","createScriptProcessor",0xfc238ad9,"lime.audio.WebAudioContext.createScriptProcessor","lime/audio/WebAudioContext.hx",37,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_38_createWaveShaper,"lime.audio.WebAudioContext","createWaveShaper",0x0c1588f8,"lime.audio.WebAudioContext.createWaveShaper","lime/audio/WebAudioContext.hx",38,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_39_createWaveTable,"lime.audio.WebAudioContext","createWaveTable",0x1d2e3f27,"lime.audio.WebAudioContext.createWaveTable","lime/audio/WebAudioContext.hx",39,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_40_decodeAudioData,"lime.audio.WebAudioContext","decodeAudioData",0x4b2fad40,"lime.audio.WebAudioContext.decodeAudioData","lime/audio/WebAudioContext.hx",40,0x0738d4e4)
HX_DEFINE_STACK_FRAME(_hx_pos_4837712923f783e9_41_startRendering,"lime.audio.WebAudioContext","startRendering",0x6831681c,"lime.audio.WebAudioContext.startRendering","lime/audio/WebAudioContext.hx",41,0x0738d4e4)
namespace lime{
namespace audio{

void WebAudioContext_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_15_new)
            	HX_STACK_THIS(this)
            	}

Dynamic WebAudioContext_obj::__CreateEmpty() { return new WebAudioContext_obj; }

void *WebAudioContext_obj::_hx_vtable = 0;

Dynamic WebAudioContext_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< WebAudioContext_obj > _hx_result = new WebAudioContext_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool WebAudioContext_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7aa77ecc;
}

 ::Dynamic WebAudioContext_obj::createAnalyser(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_22_createAnalyser)
            	HX_STACK_THIS(this)
HXLINE(  22)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebAudioContext_obj,createAnalyser,return )

 ::Dynamic WebAudioContext_obj::createBiquadFilter(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_23_createBiquadFilter)
            	HX_STACK_THIS(this)
HXLINE(  23)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebAudioContext_obj,createBiquadFilter,return )

 ::Dynamic WebAudioContext_obj::createBuffer( ::Dynamic buffer,bool mixToMono){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_25_createBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(mixToMono,"mixToMono")
HXLINE(  25)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(WebAudioContext_obj,createBuffer,return )

 ::Dynamic WebAudioContext_obj::createBufferSource(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_26_createBufferSource)
            	HX_STACK_THIS(this)
HXLINE(  26)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebAudioContext_obj,createBufferSource,return )

 ::Dynamic WebAudioContext_obj::createChannelMerger( ::Dynamic numberOfInputs){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_27_createChannelMerger)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(numberOfInputs,"numberOfInputs")
HXLINE(  27)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebAudioContext_obj,createChannelMerger,return )

 ::Dynamic WebAudioContext_obj::createChannelSplitter( ::Dynamic numberOfOutputs){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_28_createChannelSplitter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(numberOfOutputs,"numberOfOutputs")
HXLINE(  28)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebAudioContext_obj,createChannelSplitter,return )

 ::Dynamic WebAudioContext_obj::createConvolver(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_29_createConvolver)
            	HX_STACK_THIS(this)
HXLINE(  29)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebAudioContext_obj,createConvolver,return )

 ::Dynamic WebAudioContext_obj::createDelay( ::Dynamic maxDelayTime){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_30_createDelay)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(maxDelayTime,"maxDelayTime")
HXLINE(  30)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebAudioContext_obj,createDelay,return )

 ::Dynamic WebAudioContext_obj::createDynamicsCompressor(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_31_createDynamicsCompressor)
            	HX_STACK_THIS(this)
HXLINE(  31)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebAudioContext_obj,createDynamicsCompressor,return )

 ::Dynamic WebAudioContext_obj::createGain(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_32_createGain)
            	HX_STACK_THIS(this)
HXLINE(  32)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebAudioContext_obj,createGain,return )

 ::Dynamic WebAudioContext_obj::createMediaElementSource( ::Dynamic mediaElement){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_33_createMediaElementSource)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mediaElement,"mediaElement")
HXLINE(  33)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebAudioContext_obj,createMediaElementSource,return )

 ::Dynamic WebAudioContext_obj::createMediaStreamSource( ::Dynamic mediaStream){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_34_createMediaStreamSource)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mediaStream,"mediaStream")
HXLINE(  34)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WebAudioContext_obj,createMediaStreamSource,return )

 ::Dynamic WebAudioContext_obj::createOscillator(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_35_createOscillator)
            	HX_STACK_THIS(this)
HXLINE(  35)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebAudioContext_obj,createOscillator,return )

 ::Dynamic WebAudioContext_obj::createPanner(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_36_createPanner)
            	HX_STACK_THIS(this)
HXLINE(  36)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebAudioContext_obj,createPanner,return )

 ::Dynamic WebAudioContext_obj::createScriptProcessor(int bufferSize, ::Dynamic numberOfInputChannels, ::Dynamic numberOfOutputChannels){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_37_createScriptProcessor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bufferSize,"bufferSize")
            	HX_STACK_ARG(numberOfInputChannels,"numberOfInputChannels")
            	HX_STACK_ARG(numberOfOutputChannels,"numberOfOutputChannels")
HXLINE(  37)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(WebAudioContext_obj,createScriptProcessor,return )

 ::Dynamic WebAudioContext_obj::createWaveShaper(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_38_createWaveShaper)
            	HX_STACK_THIS(this)
HXLINE(  38)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebAudioContext_obj,createWaveShaper,return )

 ::Dynamic WebAudioContext_obj::createWaveTable( ::Dynamic real, ::Dynamic imag){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_39_createWaveTable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(real,"real")
            	HX_STACK_ARG(imag,"imag")
HXLINE(  39)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(WebAudioContext_obj,createWaveTable,return )

void WebAudioContext_obj::decodeAudioData( ::Dynamic audioData, ::Dynamic successCallback, ::Dynamic errorCallback){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_40_decodeAudioData)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(audioData,"audioData")
            	HX_STACK_ARG(successCallback,"successCallback")
            	HX_STACK_ARG(errorCallback,"errorCallback")
            	}


HX_DEFINE_DYNAMIC_FUNC3(WebAudioContext_obj,decodeAudioData,(void))

void WebAudioContext_obj::startRendering(){
            	HX_STACKFRAME(&_hx_pos_4837712923f783e9_41_startRendering)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(WebAudioContext_obj,startRendering,(void))


WebAudioContext_obj::WebAudioContext_obj()
{
}

void WebAudioContext_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WebAudioContext);
	HX_MARK_MEMBER_NAME(activeSourceCount,"activeSourceCount");
	HX_MARK_MEMBER_NAME(currentTime,"currentTime");
	HX_MARK_MEMBER_NAME(destination,"destination");
	HX_MARK_MEMBER_NAME(listener,"listener");
	HX_MARK_MEMBER_NAME(oncomplete,"oncomplete");
	HX_MARK_MEMBER_NAME(sampleRate,"sampleRate");
	HX_MARK_END_CLASS();
}

void WebAudioContext_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(activeSourceCount,"activeSourceCount");
	HX_VISIT_MEMBER_NAME(currentTime,"currentTime");
	HX_VISIT_MEMBER_NAME(destination,"destination");
	HX_VISIT_MEMBER_NAME(listener,"listener");
	HX_VISIT_MEMBER_NAME(oncomplete,"oncomplete");
	HX_VISIT_MEMBER_NAME(sampleRate,"sampleRate");
}

hx::Val WebAudioContext_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { return hx::Val( listener); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"oncomplete") ) { return hx::Val( oncomplete); }
		if (HX_FIELD_EQ(inName,"sampleRate") ) { return hx::Val( sampleRate); }
		if (HX_FIELD_EQ(inName,"createGain") ) { return hx::Val( createGain_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { return hx::Val( currentTime); }
		if (HX_FIELD_EQ(inName,"destination") ) { return hx::Val( destination); }
		if (HX_FIELD_EQ(inName,"createDelay") ) { return hx::Val( createDelay_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createBuffer") ) { return hx::Val( createBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"createPanner") ) { return hx::Val( createPanner_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createAnalyser") ) { return hx::Val( createAnalyser_dyn()); }
		if (HX_FIELD_EQ(inName,"startRendering") ) { return hx::Val( startRendering_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createConvolver") ) { return hx::Val( createConvolver_dyn()); }
		if (HX_FIELD_EQ(inName,"createWaveTable") ) { return hx::Val( createWaveTable_dyn()); }
		if (HX_FIELD_EQ(inName,"decodeAudioData") ) { return hx::Val( decodeAudioData_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"createOscillator") ) { return hx::Val( createOscillator_dyn()); }
		if (HX_FIELD_EQ(inName,"createWaveShaper") ) { return hx::Val( createWaveShaper_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"activeSourceCount") ) { return hx::Val( activeSourceCount); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createBiquadFilter") ) { return hx::Val( createBiquadFilter_dyn()); }
		if (HX_FIELD_EQ(inName,"createBufferSource") ) { return hx::Val( createBufferSource_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createChannelMerger") ) { return hx::Val( createChannelMerger_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createChannelSplitter") ) { return hx::Val( createChannelSplitter_dyn()); }
		if (HX_FIELD_EQ(inName,"createScriptProcessor") ) { return hx::Val( createScriptProcessor_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"createMediaStreamSource") ) { return hx::Val( createMediaStreamSource_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"createDynamicsCompressor") ) { return hx::Val( createDynamicsCompressor_dyn()); }
		if (HX_FIELD_EQ(inName,"createMediaElementSource") ) { return hx::Val( createMediaElementSource_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val WebAudioContext_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { listener=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"oncomplete") ) { oncomplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sampleRate") ) { sampleRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { currentTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"destination") ) { destination=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"activeSourceCount") ) { activeSourceCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WebAudioContext_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("activeSourceCount","\xce","\xc9","\xf9","\x75"));
	outFields->push(HX_HCSTRING("currentTime","\xe6","\xa4","\x8e","\x85"));
	outFields->push(HX_HCSTRING("destination","\x8e","\x8a","\xfb","\x11"));
	outFields->push(HX_HCSTRING("listener","\x74","\x00","\x32","\x38"));
	outFields->push(HX_HCSTRING("oncomplete","\xd8","\x18","\xcd","\x83"));
	outFields->push(HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo WebAudioContext_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(WebAudioContext_obj,activeSourceCount),HX_HCSTRING("activeSourceCount","\xce","\xc9","\xf9","\x75")},
	{hx::fsFloat,(int)offsetof(WebAudioContext_obj,currentTime),HX_HCSTRING("currentTime","\xe6","\xa4","\x8e","\x85")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(WebAudioContext_obj,destination),HX_HCSTRING("destination","\x8e","\x8a","\xfb","\x11")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(WebAudioContext_obj,listener),HX_HCSTRING("listener","\x74","\x00","\x32","\x38")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(WebAudioContext_obj,oncomplete),HX_HCSTRING("oncomplete","\xd8","\x18","\xcd","\x83")},
	{hx::fsFloat,(int)offsetof(WebAudioContext_obj,sampleRate),HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *WebAudioContext_obj_sStaticStorageInfo = 0;
#endif

static ::String WebAudioContext_obj_sMemberFields[] = {
	HX_HCSTRING("activeSourceCount","\xce","\xc9","\xf9","\x75"),
	HX_HCSTRING("currentTime","\xe6","\xa4","\x8e","\x85"),
	HX_HCSTRING("destination","\x8e","\x8a","\xfb","\x11"),
	HX_HCSTRING("listener","\x74","\x00","\x32","\x38"),
	HX_HCSTRING("oncomplete","\xd8","\x18","\xcd","\x83"),
	HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67"),
	HX_HCSTRING("createAnalyser","\xfb","\xd6","\xc7","\x24"),
	HX_HCSTRING("createBiquadFilter","\x82","\x4d","\x1d","\xee"),
	HX_HCSTRING("createBuffer","\x1c","\xfd","\xe9","\xf2"),
	HX_HCSTRING("createBufferSource","\x17","\xdf","\x24","\x31"),
	HX_HCSTRING("createChannelMerger","\x41","\xe3","\x1e","\x00"),
	HX_HCSTRING("createChannelSplitter","\x8e","\xcb","\x3e","\x5b"),
	HX_HCSTRING("createConvolver","\x56","\xbc","\xbc","\x3e"),
	HX_HCSTRING("createDelay","\xe7","\x0e","\xa2","\x00"),
	HX_HCSTRING("createDynamicsCompressor","\x95","\xa4","\xd0","\xdb"),
	HX_HCSTRING("createGain","\x9b","\xb1","\xec","\x56"),
	HX_HCSTRING("createMediaElementSource","\x4f","\x8f","\x37","\x07"),
	HX_HCSTRING("createMediaStreamSource","\xe3","\x6d","\x0c","\xb9"),
	HX_HCSTRING("createOscillator","\xbc","\x31","\x01","\x23"),
	HX_HCSTRING("createPanner","\x3a","\x37","\x35","\x0d"),
	HX_HCSTRING("createScriptProcessor","\x2b","\x92","\x5f","\x46"),
	HX_HCSTRING("createWaveShaper","\xe6","\xc2","\x3a","\x9c"),
	HX_HCSTRING("createWaveTable","\xf9","\x1c","\x4b","\x86"),
	HX_HCSTRING("decodeAudioData","\x12","\x8b","\x4c","\xb4"),
	HX_HCSTRING("startRendering","\x8a","\xaa","\xae","\xec"),
	::String(null()) };

static void WebAudioContext_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WebAudioContext_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WebAudioContext_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WebAudioContext_obj::__mClass,"__mClass");
};

#endif

hx::Class WebAudioContext_obj::__mClass;

void WebAudioContext_obj::__register()
{
	hx::Object *dummy = new WebAudioContext_obj;
	WebAudioContext_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.audio.WebAudioContext","\x9c","\xc6","\x3b","\x05");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = WebAudioContext_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(WebAudioContext_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< WebAudioContext_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WebAudioContext_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WebAudioContext_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WebAudioContext_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace audio
