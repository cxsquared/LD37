// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_vm_Deque
#include <cpp/vm/Deque.h>
#endif
#ifndef INCLUDED_cpp_vm_Thread
#include <cpp/vm/Thread.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Event_Dynamic_Void
#include <lime/app/Event_Dynamic_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_Int_Void
#include <lime/app/Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_system_ThreadPool
#include <lime/system/ThreadPool.h>
#endif
#ifndef INCLUDED_lime_system__ThreadPool_ThreadPoolMessage
#include <lime/system/_ThreadPool/ThreadPoolMessage.h>
#endif
#ifndef INCLUDED_lime_system__ThreadPool_ThreadPoolMessageType
#include <lime/system/_ThreadPool/ThreadPoolMessageType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b98885ed80fb7e2e_16_new,"lime.system.ThreadPool","new",0xfea2d35e,"lime.system.ThreadPool.new","lime/system/ThreadPool.hx",16,0x8993fbb2)
HX_DEFINE_STACK_FRAME(_hx_pos_b98885ed80fb7e2e_64_queue,"lime.system.ThreadPool","queue",0xd03ecc0f,"lime.system.ThreadPool.queue","lime/system/ThreadPool.hx",64,0x8993fbb2)
HX_DEFINE_STACK_FRAME(_hx_pos_b98885ed80fb7e2e_96_sendComplete,"lime.system.ThreadPool","sendComplete",0x5f287f63,"lime.system.ThreadPool.sendComplete","lime/system/ThreadPool.hx",96,0x8993fbb2)
HX_DEFINE_STACK_FRAME(_hx_pos_b98885ed80fb7e2e_107_sendError,"lime.system.ThreadPool","sendError",0xc461dede,"lime.system.ThreadPool.sendError","lime/system/ThreadPool.hx",107,0x8993fbb2)
HX_DEFINE_STACK_FRAME(_hx_pos_b98885ed80fb7e2e_118_sendProgress,"lime.system.ThreadPool","sendProgress",0x658b7657,"lime.system.ThreadPool.sendProgress","lime/system/ThreadPool.hx",118,0x8993fbb2)
HX_DEFINE_STACK_FRAME(_hx_pos_b98885ed80fb7e2e_130___doWork,"lime.system.ThreadPool","__doWork",0xcfdf765e,"lime.system.ThreadPool.__doWork","lime/system/ThreadPool.hx",130,0x8993fbb2)
HX_DEFINE_STACK_FRAME(_hx_pos_b98885ed80fb7e2e_151___update,"lime.system.ThreadPool","__update",0x37e4556b,"lime.system.ThreadPool.__update","lime/system/ThreadPool.hx",151,0x8993fbb2)
namespace lime{
namespace _hx_system{

void ThreadPool_obj::__construct(hx::Null< int >  __o_minThreads,hx::Null< int >  __o_maxThreads){
int minThreads = __o_minThreads.Default(0);
int maxThreads = __o_maxThreads.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_b98885ed80fb7e2e_16_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(minThreads,"minThreads")
            	HX_STACK_ARG(maxThreads,"maxThreads")
HXLINE(  31)		this->_hx___workResult =  ::cpp::vm::Deque_obj::__alloc( HX_CTX );
HXLINE(  29)		this->_hx___workIncoming =  ::cpp::vm::Deque_obj::__alloc( HX_CTX );
HXLINE(  25)		this->onProgress =  ::lime::app::Event_Dynamic_Void_obj::__alloc( HX_CTX );
HXLINE(  24)		this->onError =  ::lime::app::Event_Dynamic_Void_obj::__alloc( HX_CTX );
HXLINE(  23)		this->onComplete =  ::lime::app::Event_Dynamic_Void_obj::__alloc( HX_CTX );
HXLINE(  20)		this->doWork =  ::lime::app::Event_Dynamic_Void_obj::__alloc( HX_CTX );
HXLINE(  37)		this->minThreads = minThreads;
HXLINE(  38)		this->maxThreads = maxThreads;
HXLINE(  40)		this->currentThreads = (int)0;
HXLINE(  43)		this->_hx___workQueued = (int)0;
HXLINE(  44)		this->_hx___workCompleted = (int)0;
            	}

Dynamic ThreadPool_obj::__CreateEmpty() { return new ThreadPool_obj; }

void *ThreadPool_obj::_hx_vtable = 0;

Dynamic ThreadPool_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ThreadPool_obj > _hx_result = new ThreadPool_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ThreadPool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3ef61f6a;
}

void ThreadPool_obj::queue( ::Dynamic state){
            	HX_GC_STACKFRAME(&_hx_pos_b98885ed80fb7e2e_64_queue)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(state,"state")
HXLINE(  68)		this->_hx___workIncoming->add( ::lime::_hx_system::_ThreadPool::ThreadPoolMessage_obj::__alloc( HX_CTX ,::lime::_hx_system::_ThreadPool::ThreadPoolMessageType_obj::WORK_dyn(),state));
HXLINE(  69)		this->_hx___workQueued++;
HXLINE(  71)		bool _hx_tmp;
HXDLIN(  71)		if ((this->currentThreads < this->maxThreads)) {
HXLINE(  71)			_hx_tmp = (this->currentThreads < (this->_hx___workQueued - this->_hx___workCompleted));
            		}
            		else {
HXLINE(  71)			_hx_tmp = false;
            		}
HXDLIN(  71)		if (_hx_tmp) {
HXLINE(  73)			this->currentThreads++;
HXLINE(  74)			::cpp::vm::Thread_obj::create(this->_hx___doWork_dyn());
            		}
HXLINE(  78)		if (!(::lime::app::Application_obj::current->onUpdate->has(this->_hx___update_dyn()))) {
HXLINE(  80)			::lime::app::Application_obj::current->onUpdate->add(this->_hx___update_dyn(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ThreadPool_obj,queue,(void))

void ThreadPool_obj::sendComplete( ::Dynamic state){
            	HX_GC_STACKFRAME(&_hx_pos_b98885ed80fb7e2e_96_sendComplete)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(state,"state")
HXLINE(  96)		this->_hx___workResult->add( ::lime::_hx_system::_ThreadPool::ThreadPoolMessage_obj::__alloc( HX_CTX ,::lime::_hx_system::_ThreadPool::ThreadPoolMessageType_obj::COMPLETE_dyn(),state));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ThreadPool_obj,sendComplete,(void))

void ThreadPool_obj::sendError( ::Dynamic state){
            	HX_GC_STACKFRAME(&_hx_pos_b98885ed80fb7e2e_107_sendError)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(state,"state")
HXLINE( 107)		this->_hx___workResult->add( ::lime::_hx_system::_ThreadPool::ThreadPoolMessage_obj::__alloc( HX_CTX ,::lime::_hx_system::_ThreadPool::ThreadPoolMessageType_obj::ERROR_dyn(),state));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ThreadPool_obj,sendError,(void))

void ThreadPool_obj::sendProgress( ::Dynamic state){
            	HX_GC_STACKFRAME(&_hx_pos_b98885ed80fb7e2e_118_sendProgress)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(state,"state")
HXLINE( 118)		this->_hx___workResult->add( ::lime::_hx_system::_ThreadPool::ThreadPoolMessage_obj::__alloc( HX_CTX ,::lime::_hx_system::_ThreadPool::ThreadPoolMessageType_obj::PROGRESS_dyn(),state));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ThreadPool_obj,sendProgress,(void))

void ThreadPool_obj::_hx___doWork(){
            	HX_STACKFRAME(&_hx_pos_b98885ed80fb7e2e_130___doWork)
            	HX_STACK_THIS(this)
HXLINE( 130)		while(true){
HXLINE( 132)			HX_VARI(  ::lime::_hx_system::_ThreadPool::ThreadPoolMessage,message) = this->_hx___workIncoming->pop(true).StaticCast<  ::lime::_hx_system::_ThreadPool::ThreadPoolMessage >();
HXLINE( 134)			if (hx::IsEq( message->type,::lime::_hx_system::_ThreadPool::ThreadPoolMessageType_obj::WORK_dyn() )) {
HXLINE( 136)				this->doWork->dispatch(message->state);
            			}
            			else {
HXLINE( 138)				if (hx::IsEq( message->type,::lime::_hx_system::_ThreadPool::ThreadPoolMessageType_obj::EXIT_dyn() )) {
HXLINE( 140)					goto _hx_goto_5;
            				}
            			}
            		}
            		_hx_goto_5:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ThreadPool_obj,_hx___doWork,(void))

void ThreadPool_obj::_hx___update(int deltaTime){
            	HX_GC_STACKFRAME(&_hx_pos_b98885ed80fb7e2e_151___update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deltaTime,"deltaTime")
HXLINE( 151)		if ((this->_hx___workQueued > this->_hx___workCompleted)) {
HXLINE( 153)			HX_VARI(  ::lime::_hx_system::_ThreadPool::ThreadPoolMessage,message) = this->_hx___workResult->pop(false).StaticCast<  ::lime::_hx_system::_ThreadPool::ThreadPoolMessage >();
HXLINE( 155)			while(hx::IsNotNull( message )){
HXLINE( 157)				switch((int)(_hx_getEnumValueIndex(message->type))){
            					case (int)0: case (int)1: {
HXLINE( 165)						this->_hx___workCompleted++;
HXLINE( 167)						bool _hx_tmp;
HXDLIN( 167)						if ((this->currentThreads <= (this->_hx___workQueued - this->_hx___workCompleted))) {
HXLINE( 167)							_hx_tmp = (this->currentThreads > this->maxThreads);
            						}
            						else {
HXLINE( 167)							_hx_tmp = true;
            						}
HXDLIN( 167)						if (_hx_tmp) {
HXLINE( 169)							this->currentThreads--;
HXLINE( 170)							this->_hx___workIncoming->add( ::lime::_hx_system::_ThreadPool::ThreadPoolMessage_obj::__alloc( HX_CTX ,::lime::_hx_system::_ThreadPool::ThreadPoolMessageType_obj::EXIT_dyn(),null()));
            						}
HXLINE( 174)						if (hx::IsEq( message->type,::lime::_hx_system::_ThreadPool::ThreadPoolMessageType_obj::COMPLETE_dyn() )) {
HXLINE( 176)							this->onComplete->dispatch(message->state);
            						}
            						else {
HXLINE( 180)							this->onError->dispatch(message->state);
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 161)						this->onProgress->dispatch(message->state);
            					}
            					break;
            					default:{
            					}
            				}
HXLINE( 188)				message = this->_hx___workResult->pop(false).StaticCast<  ::lime::_hx_system::_ThreadPool::ThreadPoolMessage >();
            			}
            		}
            		else {
HXLINE( 196)			bool _hx_tmp1;
HXDLIN( 196)			if ((this->currentThreads == (int)0)) {
HXLINE( 196)				_hx_tmp1 = (this->minThreads <= (int)0);
            			}
            			else {
HXLINE( 196)				_hx_tmp1 = false;
            			}
HXDLIN( 196)			if (_hx_tmp1) {
HXLINE( 198)				::lime::app::Application_obj::current->onUpdate->remove(this->_hx___update_dyn());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ThreadPool_obj,_hx___update,(void))


hx::ObjectPtr< ThreadPool_obj > ThreadPool_obj::__new(hx::Null< int >  __o_minThreads,hx::Null< int >  __o_maxThreads) {
	hx::ObjectPtr< ThreadPool_obj > __this = new ThreadPool_obj();
	__this->__construct(__o_minThreads,__o_maxThreads);
	return __this;
}

hx::ObjectPtr< ThreadPool_obj > ThreadPool_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_minThreads,hx::Null< int >  __o_maxThreads) {
	ThreadPool_obj *__this = (ThreadPool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ThreadPool_obj), true, "lime.system.ThreadPool"));
	*(void **)__this = ThreadPool_obj::_hx_vtable;
	__this->__construct(__o_minThreads,__o_maxThreads);
	return __this;
}

ThreadPool_obj::ThreadPool_obj()
{
}

void ThreadPool_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ThreadPool);
	HX_MARK_MEMBER_NAME(currentThreads,"currentThreads");
	HX_MARK_MEMBER_NAME(doWork,"doWork");
	HX_MARK_MEMBER_NAME(maxThreads,"maxThreads");
	HX_MARK_MEMBER_NAME(minThreads,"minThreads");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(onError,"onError");
	HX_MARK_MEMBER_NAME(onProgress,"onProgress");
	HX_MARK_MEMBER_NAME(_hx___workCompleted,"__workCompleted");
	HX_MARK_MEMBER_NAME(_hx___workIncoming,"__workIncoming");
	HX_MARK_MEMBER_NAME(_hx___workQueued,"__workQueued");
	HX_MARK_MEMBER_NAME(_hx___workResult,"__workResult");
	HX_MARK_END_CLASS();
}

void ThreadPool_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentThreads,"currentThreads");
	HX_VISIT_MEMBER_NAME(doWork,"doWork");
	HX_VISIT_MEMBER_NAME(maxThreads,"maxThreads");
	HX_VISIT_MEMBER_NAME(minThreads,"minThreads");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(onError,"onError");
	HX_VISIT_MEMBER_NAME(onProgress,"onProgress");
	HX_VISIT_MEMBER_NAME(_hx___workCompleted,"__workCompleted");
	HX_VISIT_MEMBER_NAME(_hx___workIncoming,"__workIncoming");
	HX_VISIT_MEMBER_NAME(_hx___workQueued,"__workQueued");
	HX_VISIT_MEMBER_NAME(_hx___workResult,"__workResult");
}

hx::Val ThreadPool_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { return hx::Val( queue_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"doWork") ) { return hx::Val( doWork); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onError") ) { return hx::Val( onError); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__doWork") ) { return hx::Val( _hx___doWork_dyn()); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sendError") ) { return hx::Val( sendError_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxThreads") ) { return hx::Val( maxThreads); }
		if (HX_FIELD_EQ(inName,"minThreads") ) { return hx::Val( minThreads); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete); }
		if (HX_FIELD_EQ(inName,"onProgress") ) { return hx::Val( onProgress); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__workQueued") ) { return hx::Val( _hx___workQueued); }
		if (HX_FIELD_EQ(inName,"__workResult") ) { return hx::Val( _hx___workResult); }
		if (HX_FIELD_EQ(inName,"sendComplete") ) { return hx::Val( sendComplete_dyn()); }
		if (HX_FIELD_EQ(inName,"sendProgress") ) { return hx::Val( sendProgress_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentThreads") ) { return hx::Val( currentThreads); }
		if (HX_FIELD_EQ(inName,"__workIncoming") ) { return hx::Val( _hx___workIncoming); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__workCompleted") ) { return hx::Val( _hx___workCompleted); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ThreadPool_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"doWork") ) { doWork=inValue.Cast<  ::lime::app::Event_Dynamic_Void >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onError") ) { onError=inValue.Cast<  ::lime::app::Event_Dynamic_Void >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxThreads") ) { maxThreads=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minThreads") ) { minThreads=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::lime::app::Event_Dynamic_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onProgress") ) { onProgress=inValue.Cast<  ::lime::app::Event_Dynamic_Void >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__workQueued") ) { _hx___workQueued=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__workResult") ) { _hx___workResult=inValue.Cast<  ::cpp::vm::Deque >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentThreads") ) { currentThreads=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__workIncoming") ) { _hx___workIncoming=inValue.Cast<  ::cpp::vm::Deque >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__workCompleted") ) { _hx___workCompleted=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ThreadPool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentThreads","\x30","\x6b","\x26","\x61"));
	outFields->push(HX_HCSTRING("doWork","\xfc","\xa6","\x00","\x1f"));
	outFields->push(HX_HCSTRING("maxThreads","\x25","\x70","\xb6","\xbd"));
	outFields->push(HX_HCSTRING("minThreads","\xf7","\x42","\x49","\x19"));
	outFields->push(HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"));
	outFields->push(HX_HCSTRING("onError","\x29","\x6a","\x67","\x09"));
	outFields->push(HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"));
	outFields->push(HX_HCSTRING("__workCompleted","\x5a","\x76","\x64","\x29"));
	outFields->push(HX_HCSTRING("__workIncoming","\xf7","\x3a","\x04","\x52"));
	outFields->push(HX_HCSTRING("__workQueued","\x84","\xf5","\xb2","\xef"));
	outFields->push(HX_HCSTRING("__workResult","\xae","\x0c","\xe6","\x28"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ThreadPool_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ThreadPool_obj,currentThreads),HX_HCSTRING("currentThreads","\x30","\x6b","\x26","\x61")},
	{hx::fsObject /*::lime::app::Event_Dynamic_Void*/ ,(int)offsetof(ThreadPool_obj,doWork),HX_HCSTRING("doWork","\xfc","\xa6","\x00","\x1f")},
	{hx::fsInt,(int)offsetof(ThreadPool_obj,maxThreads),HX_HCSTRING("maxThreads","\x25","\x70","\xb6","\xbd")},
	{hx::fsInt,(int)offsetof(ThreadPool_obj,minThreads),HX_HCSTRING("minThreads","\xf7","\x42","\x49","\x19")},
	{hx::fsObject /*::lime::app::Event_Dynamic_Void*/ ,(int)offsetof(ThreadPool_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsObject /*::lime::app::Event_Dynamic_Void*/ ,(int)offsetof(ThreadPool_obj,onError),HX_HCSTRING("onError","\x29","\x6a","\x67","\x09")},
	{hx::fsObject /*::lime::app::Event_Dynamic_Void*/ ,(int)offsetof(ThreadPool_obj,onProgress),HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63")},
	{hx::fsInt,(int)offsetof(ThreadPool_obj,_hx___workCompleted),HX_HCSTRING("__workCompleted","\x5a","\x76","\x64","\x29")},
	{hx::fsObject /*::cpp::vm::Deque*/ ,(int)offsetof(ThreadPool_obj,_hx___workIncoming),HX_HCSTRING("__workIncoming","\xf7","\x3a","\x04","\x52")},
	{hx::fsInt,(int)offsetof(ThreadPool_obj,_hx___workQueued),HX_HCSTRING("__workQueued","\x84","\xf5","\xb2","\xef")},
	{hx::fsObject /*::cpp::vm::Deque*/ ,(int)offsetof(ThreadPool_obj,_hx___workResult),HX_HCSTRING("__workResult","\xae","\x0c","\xe6","\x28")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ThreadPool_obj_sStaticStorageInfo = 0;
#endif

static ::String ThreadPool_obj_sMemberFields[] = {
	HX_HCSTRING("currentThreads","\x30","\x6b","\x26","\x61"),
	HX_HCSTRING("doWork","\xfc","\xa6","\x00","\x1f"),
	HX_HCSTRING("maxThreads","\x25","\x70","\xb6","\xbd"),
	HX_HCSTRING("minThreads","\xf7","\x42","\x49","\x19"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("onError","\x29","\x6a","\x67","\x09"),
	HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"),
	HX_HCSTRING("__workCompleted","\x5a","\x76","\x64","\x29"),
	HX_HCSTRING("__workIncoming","\xf7","\x3a","\x04","\x52"),
	HX_HCSTRING("__workQueued","\x84","\xf5","\xb2","\xef"),
	HX_HCSTRING("__workResult","\xae","\x0c","\xe6","\x28"),
	HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d"),
	HX_HCSTRING("sendComplete","\x21","\xd2","\x84","\xc0"),
	HX_HCSTRING("sendError","\x60","\x89","\x99","\x33"),
	HX_HCSTRING("sendProgress","\x15","\xc9","\xe7","\xc6"),
	HX_HCSTRING("__doWork","\x1c","\x12","\x30","\xc7"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	::String(null()) };

static void ThreadPool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ThreadPool_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ThreadPool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ThreadPool_obj::__mClass,"__mClass");
};

#endif

hx::Class ThreadPool_obj::__mClass;

void ThreadPool_obj::__register()
{
	hx::Object *dummy = new ThreadPool_obj;
	ThreadPool_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.system.ThreadPool","\x6c","\x8c","\x6a","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ThreadPool_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ThreadPool_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ThreadPool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ThreadPool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ThreadPool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ThreadPool_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace system
