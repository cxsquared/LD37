// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLFramebuffer
#include <lime/graphics/opengl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLProgram
#include <lime/graphics/opengl/GLProgram.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLRenderbuffer
#include <lime/graphics/opengl/GLRenderbuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLShader
#include <lime/graphics/opengl/GLShader.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_11_new,"lime.graphics.GLRenderContext","new",0x262d869c,"lime.graphics.GLRenderContext.new","lime/graphics/GLRenderContext.hx",11,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_375_activeTexture,"lime.graphics.GLRenderContext","activeTexture",0xfa246cf1,"lime.graphics.GLRenderContext.activeTexture","lime/graphics/GLRenderContext.hx",375,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_382_attachShader,"lime.graphics.GLRenderContext","attachShader",0x8c2b730e,"lime.graphics.GLRenderContext.attachShader","lime/graphics/GLRenderContext.hx",382,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_389_bindAttribLocation,"lime.graphics.GLRenderContext","bindAttribLocation",0x60fd5380,"lime.graphics.GLRenderContext.bindAttribLocation","lime/graphics/GLRenderContext.hx",389,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_396_bindBuffer,"lime.graphics.GLRenderContext","bindBuffer",0x74fa5be1,"lime.graphics.GLRenderContext.bindBuffer","lime/graphics/GLRenderContext.hx",396,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_403_bindFramebuffer,"lime.graphics.GLRenderContext","bindFramebuffer",0x2111e66c,"lime.graphics.GLRenderContext.bindFramebuffer","lime/graphics/GLRenderContext.hx",403,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_410_bindRenderbuffer,"lime.graphics.GLRenderContext","bindRenderbuffer",0x5523ca77,"lime.graphics.GLRenderContext.bindRenderbuffer","lime/graphics/GLRenderContext.hx",410,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_417_bindTexture,"lime.graphics.GLRenderContext","bindTexture",0xd3662eda,"lime.graphics.GLRenderContext.bindTexture","lime/graphics/GLRenderContext.hx",417,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_424_blendColor,"lime.graphics.GLRenderContext","blendColor",0x5eeffc96,"lime.graphics.GLRenderContext.blendColor","lime/graphics/GLRenderContext.hx",424,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_431_blendEquation,"lime.graphics.GLRenderContext","blendEquation",0xa627f239,"lime.graphics.GLRenderContext.blendEquation","lime/graphics/GLRenderContext.hx",431,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_438_blendEquationSeparate,"lime.graphics.GLRenderContext","blendEquationSeparate",0xb2f82ebc,"lime.graphics.GLRenderContext.blendEquationSeparate","lime/graphics/GLRenderContext.hx",438,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_445_blendFunc,"lime.graphics.GLRenderContext","blendFunc",0x97aa0771,"lime.graphics.GLRenderContext.blendFunc","lime/graphics/GLRenderContext.hx",445,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_452_blendFuncSeparate,"lime.graphics.GLRenderContext","blendFuncSeparate",0xe8e63bf4,"lime.graphics.GLRenderContext.blendFuncSeparate","lime/graphics/GLRenderContext.hx",452,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_459_bufferData,"lime.graphics.GLRenderContext","bufferData",0x0faf888e,"lime.graphics.GLRenderContext.bufferData","lime/graphics/GLRenderContext.hx",459,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_466_bufferSubData,"lime.graphics.GLRenderContext","bufferSubData",0xe95f4fe6,"lime.graphics.GLRenderContext.bufferSubData","lime/graphics/GLRenderContext.hx",466,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_473_checkFramebufferStatus,"lime.graphics.GLRenderContext","checkFramebufferStatus",0x1cdbc55b,"lime.graphics.GLRenderContext.checkFramebufferStatus","lime/graphics/GLRenderContext.hx",473,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_480_clear,"lime.graphics.GLRenderContext","clear",0xe0bc2ec9,"lime.graphics.GLRenderContext.clear","lime/graphics/GLRenderContext.hx",480,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_487_clearColor,"lime.graphics.GLRenderContext","clearColor",0x9ba279da,"lime.graphics.GLRenderContext.clearColor","lime/graphics/GLRenderContext.hx",487,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_494_clearDepth,"lime.graphics.GLRenderContext","clearDepth",0x286ff97a,"lime.graphics.GLRenderContext.clearDepth","lime/graphics/GLRenderContext.hx",494,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_501_clearStencil,"lime.graphics.GLRenderContext","clearStencil",0x35361233,"lime.graphics.GLRenderContext.clearStencil","lime/graphics/GLRenderContext.hx",501,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_508_colorMask,"lime.graphics.GLRenderContext","colorMask",0xb3d1d72b,"lime.graphics.GLRenderContext.colorMask","lime/graphics/GLRenderContext.hx",508,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_515_compileShader,"lime.graphics.GLRenderContext","compileShader",0x7e2cca34,"lime.graphics.GLRenderContext.compileShader","lime/graphics/GLRenderContext.hx",515,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_522_compressedTexImage2D,"lime.graphics.GLRenderContext","compressedTexImage2D",0x35a35eeb,"lime.graphics.GLRenderContext.compressedTexImage2D","lime/graphics/GLRenderContext.hx",522,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_529_compressedTexSubImage2D,"lime.graphics.GLRenderContext","compressedTexSubImage2D",0x3de2720f,"lime.graphics.GLRenderContext.compressedTexSubImage2D","lime/graphics/GLRenderContext.hx",529,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_536_copyTexImage2D,"lime.graphics.GLRenderContext","copyTexImage2D",0x4c0a8c1f,"lime.graphics.GLRenderContext.copyTexImage2D","lime/graphics/GLRenderContext.hx",536,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_543_copyTexSubImage2D,"lime.graphics.GLRenderContext","copyTexSubImage2D",0xc2d47d5b,"lime.graphics.GLRenderContext.copyTexSubImage2D","lime/graphics/GLRenderContext.hx",543,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_550_createBuffer,"lime.graphics.GLRenderContext","createBuffer",0xcc9d9f60,"lime.graphics.GLRenderContext.createBuffer","lime/graphics/GLRenderContext.hx",550,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_557_createFramebuffer,"lime.graphics.GLRenderContext","createFramebuffer",0xeb0e968d,"lime.graphics.GLRenderContext.createFramebuffer","lime/graphics/GLRenderContext.hx",557,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_564_createProgram,"lime.graphics.GLRenderContext","createProgram",0x7fb67c24,"lime.graphics.GLRenderContext.createProgram","lime/graphics/GLRenderContext.hx",564,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_571_createRenderbuffer,"lime.graphics.GLRenderContext","createRenderbuffer",0x48413736,"lime.graphics.GLRenderContext.createRenderbuffer","lime/graphics/GLRenderContext.hx",571,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_578_createShader,"lime.graphics.GLRenderContext","createShader",0x1929a185,"lime.graphics.GLRenderContext.createShader","lime/graphics/GLRenderContext.hx",578,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_585_createTexture,"lime.graphics.GLRenderContext","createTexture",0x2a9dfa7b,"lime.graphics.GLRenderContext.createTexture","lime/graphics/GLRenderContext.hx",585,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_592_cullFace,"lime.graphics.GLRenderContext","cullFace",0xa4ce17b3,"lime.graphics.GLRenderContext.cullFace","lime/graphics/GLRenderContext.hx",592,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_599_deleteBuffer,"lime.graphics.GLRenderContext","deleteBuffer",0x10e085cf,"lime.graphics.GLRenderContext.deleteBuffer","lime/graphics/GLRenderContext.hx",599,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_606_deleteFramebuffer,"lime.graphics.GLRenderContext","deleteFramebuffer",0x6e26fdbe,"lime.graphics.GLRenderContext.deleteFramebuffer","lime/graphics/GLRenderContext.hx",606,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_613_deleteProgram,"lime.graphics.GLRenderContext","deleteProgram",0xf5fd36d5,"lime.graphics.GLRenderContext.deleteProgram","lime/graphics/GLRenderContext.hx",613,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_620_deleteRenderbuffer,"lime.graphics.GLRenderContext","deleteRenderbuffer",0x7a831ae5,"lime.graphics.GLRenderContext.deleteRenderbuffer","lime/graphics/GLRenderContext.hx",620,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_627_deleteShader,"lime.graphics.GLRenderContext","deleteShader",0x5d6c87f4,"lime.graphics.GLRenderContext.deleteShader","lime/graphics/GLRenderContext.hx",627,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_634_deleteTexture,"lime.graphics.GLRenderContext","deleteTexture",0xa0e4b52c,"lime.graphics.GLRenderContext.deleteTexture","lime/graphics/GLRenderContext.hx",634,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_641_depthFunc,"lime.graphics.GLRenderContext","depthFunc",0x2a565123,"lime.graphics.GLRenderContext.depthFunc","lime/graphics/GLRenderContext.hx",641,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_648_depthMask,"lime.graphics.GLRenderContext","depthMask",0x2ee7a6cb,"lime.graphics.GLRenderContext.depthMask","lime/graphics/GLRenderContext.hx",648,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_655_depthRange,"lime.graphics.GLRenderContext","depthRange",0xbcc762fe,"lime.graphics.GLRenderContext.depthRange","lime/graphics/GLRenderContext.hx",655,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_662_detachShader,"lime.graphics.GLRenderContext","detachShader",0xc461731c,"lime.graphics.GLRenderContext.detachShader","lime/graphics/GLRenderContext.hx",662,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_669_disable,"lime.graphics.GLRenderContext","disable",0xb14fee24,"lime.graphics.GLRenderContext.disable","lime/graphics/GLRenderContext.hx",669,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_676_disableVertexAttribArray,"lime.graphics.GLRenderContext","disableVertexAttribArray",0xbb346227,"lime.graphics.GLRenderContext.disableVertexAttribArray","lime/graphics/GLRenderContext.hx",676,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_683_drawArrays,"lime.graphics.GLRenderContext","drawArrays",0x75efbd22,"lime.graphics.GLRenderContext.drawArrays","lime/graphics/GLRenderContext.hx",683,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_690_drawElements,"lime.graphics.GLRenderContext","drawElements",0x336b649f,"lime.graphics.GLRenderContext.drawElements","lime/graphics/GLRenderContext.hx",690,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_697_enable,"lime.graphics.GLRenderContext","enable",0xb4cc85c7,"lime.graphics.GLRenderContext.enable","lime/graphics/GLRenderContext.hx",697,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_704_enableVertexAttribArray,"lime.graphics.GLRenderContext","enableVertexAttribArray",0xb3bf0324,"lime.graphics.GLRenderContext.enableVertexAttribArray","lime/graphics/GLRenderContext.hx",704,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_711_finish,"lime.graphics.GLRenderContext","finish",0x42c41797,"lime.graphics.GLRenderContext.finish","lime/graphics/GLRenderContext.hx",711,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_718_flush,"lime.graphics.GLRenderContext","flush",0x9afc2000,"lime.graphics.GLRenderContext.flush","lime/graphics/GLRenderContext.hx",718,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_725_framebufferRenderbuffer,"lime.graphics.GLRenderContext","framebufferRenderbuffer",0x3e17999f,"lime.graphics.GLRenderContext.framebufferRenderbuffer","lime/graphics/GLRenderContext.hx",725,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_732_framebufferTexture2D,"lime.graphics.GLRenderContext","framebufferTexture2D",0x3567ed04,"lime.graphics.GLRenderContext.framebufferTexture2D","lime/graphics/GLRenderContext.hx",732,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_739_frontFace,"lime.graphics.GLRenderContext","frontFace",0x10cf0d22,"lime.graphics.GLRenderContext.frontFace","lime/graphics/GLRenderContext.hx",739,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_746_generateMipmap,"lime.graphics.GLRenderContext","generateMipmap",0xc2a191e1,"lime.graphics.GLRenderContext.generateMipmap","lime/graphics/GLRenderContext.hx",746,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_753_getActiveAttrib,"lime.graphics.GLRenderContext","getActiveAttrib",0x9cd2aba2,"lime.graphics.GLRenderContext.getActiveAttrib","lime/graphics/GLRenderContext.hx",753,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_760_getActiveUniform,"lime.graphics.GLRenderContext","getActiveUniform",0x17ba49dc,"lime.graphics.GLRenderContext.getActiveUniform","lime/graphics/GLRenderContext.hx",760,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_767_getAttachedShaders,"lime.graphics.GLRenderContext","getAttachedShaders",0xd643dbf8,"lime.graphics.GLRenderContext.getAttachedShaders","lime/graphics/GLRenderContext.hx",767,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_774_getAttribLocation,"lime.graphics.GLRenderContext","getAttribLocation",0x7b35c211,"lime.graphics.GLRenderContext.getAttribLocation","lime/graphics/GLRenderContext.hx",774,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_781_getBufferParameter,"lime.graphics.GLRenderContext","getBufferParameter",0x578105d7,"lime.graphics.GLRenderContext.getBufferParameter","lime/graphics/GLRenderContext.hx",781,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_788_getContextAttributes,"lime.graphics.GLRenderContext","getContextAttributes",0xbf276074,"lime.graphics.GLRenderContext.getContextAttributes","lime/graphics/GLRenderContext.hx",788,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_795_getError,"lime.graphics.GLRenderContext","getError",0xcb9d0b96,"lime.graphics.GLRenderContext.getError","lime/graphics/GLRenderContext.hx",795,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_802_getExtension,"lime.graphics.GLRenderContext","getExtension",0xce1ad24d,"lime.graphics.GLRenderContext.getExtension","lime/graphics/GLRenderContext.hx",802,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_809_getFramebufferAttachmentParameter,"lime.graphics.GLRenderContext","getFramebufferAttachmentParameter",0x36d69ecb,"lime.graphics.GLRenderContext.getFramebufferAttachmentParameter","lime/graphics/GLRenderContext.hx",809,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_816_getParameter,"lime.graphics.GLRenderContext","getParameter",0x31ba7477,"lime.graphics.GLRenderContext.getParameter","lime/graphics/GLRenderContext.hx",816,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_823_getProgramInfoLog,"lime.graphics.GLRenderContext","getProgramInfoLog",0xec189904,"lime.graphics.GLRenderContext.getProgramInfoLog","lime/graphics/GLRenderContext.hx",823,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_830_getProgramParameter,"lime.graphics.GLRenderContext","getProgramParameter",0xc6e7b177,"lime.graphics.GLRenderContext.getProgramParameter","lime/graphics/GLRenderContext.hx",830,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_837_getRenderbufferParameter,"lime.graphics.GLRenderContext","getRenderbufferParameter",0xad97b9c1,"lime.graphics.GLRenderContext.getRenderbufferParameter","lime/graphics/GLRenderContext.hx",837,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_844_getShaderInfoLog,"lime.graphics.GLRenderContext","getShaderInfoLog",0x3434d1df,"lime.graphics.GLRenderContext.getShaderInfoLog","lime/graphics/GLRenderContext.hx",844,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_851_getShaderParameter,"lime.graphics.GLRenderContext","getShaderParameter",0x79281712,"lime.graphics.GLRenderContext.getShaderParameter","lime/graphics/GLRenderContext.hx",851,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_858_getShaderPrecisionFormat,"lime.graphics.GLRenderContext","getShaderPrecisionFormat",0x3f8fb13e,"lime.graphics.GLRenderContext.getShaderPrecisionFormat","lime/graphics/GLRenderContext.hx",858,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_865_getShaderSource,"lime.graphics.GLRenderContext","getShaderSource",0xfeb4c3d2,"lime.graphics.GLRenderContext.getShaderSource","lime/graphics/GLRenderContext.hx",865,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_872_getSupportedExtensions,"lime.graphics.GLRenderContext","getSupportedExtensions",0xb3d41830,"lime.graphics.GLRenderContext.getSupportedExtensions","lime/graphics/GLRenderContext.hx",872,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_879_getTexParameter,"lime.graphics.GLRenderContext","getTexParameter",0x0c83b8b4,"lime.graphics.GLRenderContext.getTexParameter","lime/graphics/GLRenderContext.hx",879,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_886_getUniform,"lime.graphics.GLRenderContext","getUniform",0x81019082,"lime.graphics.GLRenderContext.getUniform","lime/graphics/GLRenderContext.hx",886,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_893_getUniformLocation,"lime.graphics.GLRenderContext","getUniformLocation",0x92a10cd7,"lime.graphics.GLRenderContext.getUniformLocation","lime/graphics/GLRenderContext.hx",893,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_900_getVertexAttrib,"lime.graphics.GLRenderContext","getVertexAttrib",0xdccc4fc0,"lime.graphics.GLRenderContext.getVertexAttrib","lime/graphics/GLRenderContext.hx",900,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_907_getVertexAttribOffset,"lime.graphics.GLRenderContext","getVertexAttribOffset",0x625eab73,"lime.graphics.GLRenderContext.getVertexAttribOffset","lime/graphics/GLRenderContext.hx",907,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_914_hint,"lime.graphics.GLRenderContext","hint",0x3db3fbcb,"lime.graphics.GLRenderContext.hint","lime/graphics/GLRenderContext.hx",914,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_921_isBuffer,"lime.graphics.GLRenderContext","isBuffer",0x219a88ce,"lime.graphics.GLRenderContext.isBuffer","lime/graphics/GLRenderContext.hx",921,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_928_isContextLost,"lime.graphics.GLRenderContext","isContextLost",0xd15a38e5,"lime.graphics.GLRenderContext.isContextLost","lime/graphics/GLRenderContext.hx",928,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_935_isEnabled,"lime.graphics.GLRenderContext","isEnabled",0x123d8cf3,"lime.graphics.GLRenderContext.isEnabled","lime/graphics/GLRenderContext.hx",935,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_942_isFramebuffer,"lime.graphics.GLRenderContext","isFramebuffer",0x26e6be5f,"lime.graphics.GLRenderContext.isFramebuffer","lime/graphics/GLRenderContext.hx",942,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_949_isProgram,"lime.graphics.GLRenderContext","isProgram",0x8805d2f6,"lime.graphics.GLRenderContext.isProgram","lime/graphics/GLRenderContext.hx",949,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_956_isRenderbuffer,"lime.graphics.GLRenderContext","isRenderbuffer",0x698be724,"lime.graphics.GLRenderContext.isRenderbuffer","lime/graphics/GLRenderContext.hx",956,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_963_isShader,"lime.graphics.GLRenderContext","isShader",0x6e268af3,"lime.graphics.GLRenderContext.isShader","lime/graphics/GLRenderContext.hx",963,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_970_isTexture,"lime.graphics.GLRenderContext","isTexture",0x32ed514d,"lime.graphics.GLRenderContext.isTexture","lime/graphics/GLRenderContext.hx",970,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_977_lineWidth,"lime.graphics.GLRenderContext","lineWidth",0xa16bc4ae,"lime.graphics.GLRenderContext.lineWidth","lime/graphics/GLRenderContext.hx",977,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_984_linkProgram,"lime.graphics.GLRenderContext","linkProgram",0xc18fffe6,"lime.graphics.GLRenderContext.linkProgram","lime/graphics/GLRenderContext.hx",984,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_991_pixelStorei,"lime.graphics.GLRenderContext","pixelStorei",0xb8dc86ca,"lime.graphics.GLRenderContext.pixelStorei","lime/graphics/GLRenderContext.hx",991,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_998_polygonOffset,"lime.graphics.GLRenderContext","polygonOffset",0x09c77ee9,"lime.graphics.GLRenderContext.polygonOffset","lime/graphics/GLRenderContext.hx",998,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1005_readPixels,"lime.graphics.GLRenderContext","readPixels",0x02619c67,"lime.graphics.GLRenderContext.readPixels","lime/graphics/GLRenderContext.hx",1005,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1012_renderbufferStorage,"lime.graphics.GLRenderContext","renderbufferStorage",0xb7bb8f41,"lime.graphics.GLRenderContext.renderbufferStorage","lime/graphics/GLRenderContext.hx",1012,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1019_sampleCoverage,"lime.graphics.GLRenderContext","sampleCoverage",0xa3152376,"lime.graphics.GLRenderContext.sampleCoverage","lime/graphics/GLRenderContext.hx",1019,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1026_scissor,"lime.graphics.GLRenderContext","scissor",0x04deac58,"lime.graphics.GLRenderContext.scissor","lime/graphics/GLRenderContext.hx",1026,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1033_shaderSource,"lime.graphics.GLRenderContext","shaderSource",0x7bcdf024,"lime.graphics.GLRenderContext.shaderSource","lime/graphics/GLRenderContext.hx",1033,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1040_stencilFunc,"lime.graphics.GLRenderContext","stencilFunc",0x78d2d59c,"lime.graphics.GLRenderContext.stencilFunc","lime/graphics/GLRenderContext.hx",1040,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1047_stencilFuncSeparate,"lime.graphics.GLRenderContext","stencilFuncSeparate",0xe319ad1f,"lime.graphics.GLRenderContext.stencilFuncSeparate","lime/graphics/GLRenderContext.hx",1047,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1054_stencilMask,"lime.graphics.GLRenderContext","stencilMask",0x7d642b44,"lime.graphics.GLRenderContext.stencilMask","lime/graphics/GLRenderContext.hx",1054,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1061_stencilMaskSeparate,"lime.graphics.GLRenderContext","stencilMaskSeparate",0xf6f4eac7,"lime.graphics.GLRenderContext.stencilMaskSeparate","lime/graphics/GLRenderContext.hx",1061,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1068_stencilOp,"lime.graphics.GLRenderContext","stencilOp",0xe6fa8579,"lime.graphics.GLRenderContext.stencilOp","lime/graphics/GLRenderContext.hx",1068,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1075_stencilOpSeparate,"lime.graphics.GLRenderContext","stencilOpSeparate",0x717001fc,"lime.graphics.GLRenderContext.stencilOpSeparate","lime/graphics/GLRenderContext.hx",1075,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1082_texImage2D,"lime.graphics.GLRenderContext","texImage2D",0x35a3460a,"lime.graphics.GLRenderContext.texImage2D","lime/graphics/GLRenderContext.hx",1082,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1089_texParameterf,"lime.graphics.GLRenderContext","texParameterf",0xdfab80a0,"lime.graphics.GLRenderContext.texParameterf","lime/graphics/GLRenderContext.hx",1089,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1096_texParameteri,"lime.graphics.GLRenderContext","texParameteri",0xdfab80a3,"lime.graphics.GLRenderContext.texParameteri","lime/graphics/GLRenderContext.hx",1096,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1103_texSubImage2D,"lime.graphics.GLRenderContext","texSubImage2D",0xcc0a8850,"lime.graphics.GLRenderContext.texSubImage2D","lime/graphics/GLRenderContext.hx",1103,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1110_uniform1f,"lime.graphics.GLRenderContext","uniform1f",0x97ec2c85,"lime.graphics.GLRenderContext.uniform1f","lime/graphics/GLRenderContext.hx",1110,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1117_uniform1fv,"lime.graphics.GLRenderContext","uniform1fv",0x56bac851,"lime.graphics.GLRenderContext.uniform1fv","lime/graphics/GLRenderContext.hx",1117,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1124_uniform1i,"lime.graphics.GLRenderContext","uniform1i",0x97ec2c88,"lime.graphics.GLRenderContext.uniform1i","lime/graphics/GLRenderContext.hx",1124,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1131_uniform1iv,"lime.graphics.GLRenderContext","uniform1iv",0x56bacaee,"lime.graphics.GLRenderContext.uniform1iv","lime/graphics/GLRenderContext.hx",1131,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1138_uniform2f,"lime.graphics.GLRenderContext","uniform2f",0x97ec2d64,"lime.graphics.GLRenderContext.uniform2f","lime/graphics/GLRenderContext.hx",1138,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1145_uniform2fv,"lime.graphics.GLRenderContext","uniform2fv",0x56bb8a92,"lime.graphics.GLRenderContext.uniform2fv","lime/graphics/GLRenderContext.hx",1145,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1152_uniform2i,"lime.graphics.GLRenderContext","uniform2i",0x97ec2d67,"lime.graphics.GLRenderContext.uniform2i","lime/graphics/GLRenderContext.hx",1152,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1159_uniform2iv,"lime.graphics.GLRenderContext","uniform2iv",0x56bb8d2f,"lime.graphics.GLRenderContext.uniform2iv","lime/graphics/GLRenderContext.hx",1159,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1166_uniform3f,"lime.graphics.GLRenderContext","uniform3f",0x97ec2e43,"lime.graphics.GLRenderContext.uniform3f","lime/graphics/GLRenderContext.hx",1166,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1173_uniform3fv,"lime.graphics.GLRenderContext","uniform3fv",0x56bc4cd3,"lime.graphics.GLRenderContext.uniform3fv","lime/graphics/GLRenderContext.hx",1173,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1180_uniform3i,"lime.graphics.GLRenderContext","uniform3i",0x97ec2e46,"lime.graphics.GLRenderContext.uniform3i","lime/graphics/GLRenderContext.hx",1180,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1187_uniform3iv,"lime.graphics.GLRenderContext","uniform3iv",0x56bc4f70,"lime.graphics.GLRenderContext.uniform3iv","lime/graphics/GLRenderContext.hx",1187,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1194_uniform4f,"lime.graphics.GLRenderContext","uniform4f",0x97ec2f22,"lime.graphics.GLRenderContext.uniform4f","lime/graphics/GLRenderContext.hx",1194,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1201_uniform4fv,"lime.graphics.GLRenderContext","uniform4fv",0x56bd0f14,"lime.graphics.GLRenderContext.uniform4fv","lime/graphics/GLRenderContext.hx",1201,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1208_uniform4i,"lime.graphics.GLRenderContext","uniform4i",0x97ec2f25,"lime.graphics.GLRenderContext.uniform4i","lime/graphics/GLRenderContext.hx",1208,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1215_uniform4iv,"lime.graphics.GLRenderContext","uniform4iv",0x56bd11b1,"lime.graphics.GLRenderContext.uniform4iv","lime/graphics/GLRenderContext.hx",1215,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1222_uniformMatrix2fv,"lime.graphics.GLRenderContext","uniformMatrix2fv",0x05c59ed1,"lime.graphics.GLRenderContext.uniformMatrix2fv","lime/graphics/GLRenderContext.hx",1222,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1229_uniformMatrix3fv,"lime.graphics.GLRenderContext","uniformMatrix3fv",0x05c66112,"lime.graphics.GLRenderContext.uniformMatrix3fv","lime/graphics/GLRenderContext.hx",1229,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1236_uniformMatrix4fv,"lime.graphics.GLRenderContext","uniformMatrix4fv",0x05c72353,"lime.graphics.GLRenderContext.uniformMatrix4fv","lime/graphics/GLRenderContext.hx",1236,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1250_useProgram,"lime.graphics.GLRenderContext","useProgram",0x72e83641,"lime.graphics.GLRenderContext.useProgram","lime/graphics/GLRenderContext.hx",1250,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1257_validateProgram,"lime.graphics.GLRenderContext","validateProgram",0x28bfa0ca,"lime.graphics.GLRenderContext.validateProgram","lime/graphics/GLRenderContext.hx",1257,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1264_vertexAttrib1f,"lime.graphics.GLRenderContext","vertexAttrib1f",0xbb4a4fa7,"lime.graphics.GLRenderContext.vertexAttrib1f","lime/graphics/GLRenderContext.hx",1264,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1271_vertexAttrib1fv,"lime.graphics.GLRenderContext","vertexAttrib1fv",0x25bb62ef,"lime.graphics.GLRenderContext.vertexAttrib1fv","lime/graphics/GLRenderContext.hx",1271,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1278_vertexAttrib2f,"lime.graphics.GLRenderContext","vertexAttrib2f",0xbb4a5086,"lime.graphics.GLRenderContext.vertexAttrib2f","lime/graphics/GLRenderContext.hx",1278,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1285_vertexAttrib2fv,"lime.graphics.GLRenderContext","vertexAttrib2fv",0x25bc2530,"lime.graphics.GLRenderContext.vertexAttrib2fv","lime/graphics/GLRenderContext.hx",1285,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1292_vertexAttrib3f,"lime.graphics.GLRenderContext","vertexAttrib3f",0xbb4a5165,"lime.graphics.GLRenderContext.vertexAttrib3f","lime/graphics/GLRenderContext.hx",1292,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1299_vertexAttrib3fv,"lime.graphics.GLRenderContext","vertexAttrib3fv",0x25bce771,"lime.graphics.GLRenderContext.vertexAttrib3fv","lime/graphics/GLRenderContext.hx",1299,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1306_vertexAttrib4f,"lime.graphics.GLRenderContext","vertexAttrib4f",0xbb4a5244,"lime.graphics.GLRenderContext.vertexAttrib4f","lime/graphics/GLRenderContext.hx",1306,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1313_vertexAttrib4fv,"lime.graphics.GLRenderContext","vertexAttrib4fv",0x25bda9b2,"lime.graphics.GLRenderContext.vertexAttrib4fv","lime/graphics/GLRenderContext.hx",1313,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1320_vertexAttribPointer,"lime.graphics.GLRenderContext","vertexAttribPointer",0x7000f2cb,"lime.graphics.GLRenderContext.vertexAttribPointer","lime/graphics/GLRenderContext.hx",1320,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1327_viewport,"lime.graphics.GLRenderContext","viewport",0x95417caa,"lime.graphics.GLRenderContext.viewport","lime/graphics/GLRenderContext.hx",1327,0xbdd53034)
HX_DEFINE_STACK_FRAME(_hx_pos_a1401d9a0dc31d47_1332_get_version,"lime.graphics.GLRenderContext","get_version",0x3b00996b,"lime.graphics.GLRenderContext.get_version","lime/graphics/GLRenderContext.hx",1332,0xbdd53034)
namespace lime{
namespace graphics{

void GLRenderContext_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_11_new)
            	HX_STACK_THIS(this)
HXLINE( 361)		this->BROWSER_DEFAULT_WEBGL = (int)37444;
HXLINE( 360)		this->UNPACK_COLORSPACE_CONVERSION_WEBGL = (int)37443;
HXLINE( 359)		this->CONTEXT_LOST_WEBGL = (int)37442;
HXLINE( 358)		this->UNPACK_PREMULTIPLY_ALPHA_WEBGL = (int)37441;
HXLINE( 357)		this->UNPACK_FLIP_Y_WEBGL = (int)37440;
HXLINE( 355)		this->INVALID_FRAMEBUFFER_OPERATION = (int)1286;
HXLINE( 353)		this->MAX_RENDERBUFFER_SIZE = (int)34024;
HXLINE( 352)		this->RENDERBUFFER_BINDING = (int)36007;
HXLINE( 351)		this->FRAMEBUFFER_BINDING = (int)36006;
HXLINE( 349)		this->FRAMEBUFFER_UNSUPPORTED = (int)36061;
HXLINE( 348)		this->FRAMEBUFFER_INCOMPLETE_DIMENSIONS = (int)36057;
HXLINE( 347)		this->FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = (int)36055;
HXLINE( 346)		this->FRAMEBUFFER_INCOMPLETE_ATTACHMENT = (int)36054;
HXLINE( 345)		this->FRAMEBUFFER_COMPLETE = (int)36053;
HXLINE( 343)		this->NONE = (int)0;
HXLINE( 341)		this->DEPTH_STENCIL_ATTACHMENT = (int)33306;
HXLINE( 340)		this->STENCIL_ATTACHMENT = (int)36128;
HXLINE( 339)		this->DEPTH_ATTACHMENT = (int)36096;
HXLINE( 338)		this->COLOR_ATTACHMENT0 = (int)36064;
HXLINE( 336)		this->FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = (int)36051;
HXLINE( 335)		this->FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = (int)36050;
HXLINE( 334)		this->FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = (int)36049;
HXLINE( 333)		this->FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = (int)36048;
HXLINE( 331)		this->RENDERBUFFER_STENCIL_SIZE = (int)36181;
HXLINE( 330)		this->RENDERBUFFER_DEPTH_SIZE = (int)36180;
HXLINE( 329)		this->RENDERBUFFER_ALPHA_SIZE = (int)36179;
HXLINE( 328)		this->RENDERBUFFER_BLUE_SIZE = (int)36178;
HXLINE( 327)		this->RENDERBUFFER_GREEN_SIZE = (int)36177;
HXLINE( 326)		this->RENDERBUFFER_RED_SIZE = (int)36176;
HXLINE( 325)		this->RENDERBUFFER_INTERNAL_FORMAT = (int)36164;
HXLINE( 324)		this->RENDERBUFFER_HEIGHT = (int)36163;
HXLINE( 323)		this->RENDERBUFFER_WIDTH = (int)36162;
HXLINE( 321)		this->DEPTH_STENCIL = (int)34041;
HXLINE( 320)		this->STENCIL_INDEX8 = (int)36168;
HXLINE( 319)		this->STENCIL_INDEX = (int)6401;
HXLINE( 318)		this->DEPTH_COMPONENT16 = (int)33189;
HXLINE( 317)		this->RGB565 = (int)36194;
HXLINE( 316)		this->RGB5_A1 = (int)32855;
HXLINE( 315)		this->RGBA4 = (int)32854;
HXLINE( 313)		this->RENDERBUFFER = (int)36161;
HXLINE( 312)		this->FRAMEBUFFER = (int)36160;
HXLINE( 310)		this->HIGH_INT = (int)36341;
HXLINE( 309)		this->MEDIUM_INT = (int)36340;
HXLINE( 308)		this->LOW_INT = (int)36339;
HXLINE( 307)		this->HIGH_FLOAT = (int)36338;
HXLINE( 306)		this->MEDIUM_FLOAT = (int)36337;
HXLINE( 305)		this->LOW_FLOAT = (int)36336;
HXLINE( 303)		this->COMPILE_STATUS = (int)35713;
HXLINE( 301)		this->POINT_SPRITE = (int)34913;
HXLINE( 300)		this->VERTEX_PROGRAM_POINT_SIZE = (int)34370;
HXLINE( 298)		this->VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = (int)34975;
HXLINE( 297)		this->VERTEX_ATTRIB_ARRAY_POINTER = (int)34373;
HXLINE( 296)		this->VERTEX_ATTRIB_ARRAY_NORMALIZED = (int)34922;
HXLINE( 295)		this->VERTEX_ATTRIB_ARRAY_TYPE = (int)34341;
HXLINE( 294)		this->VERTEX_ATTRIB_ARRAY_STRIDE = (int)34340;
HXLINE( 293)		this->VERTEX_ATTRIB_ARRAY_SIZE = (int)34339;
HXLINE( 292)		this->VERTEX_ATTRIB_ARRAY_ENABLED = (int)34338;
HXLINE( 290)		this->SAMPLER_CUBE = (int)35680;
HXLINE( 289)		this->SAMPLER_2D = (int)35678;
HXLINE( 288)		this->FLOAT_MAT4 = (int)35676;
HXLINE( 287)		this->FLOAT_MAT3 = (int)35675;
HXLINE( 286)		this->FLOAT_MAT2 = (int)35674;
HXLINE( 285)		this->BOOL_VEC4 = (int)35673;
HXLINE( 284)		this->BOOL_VEC3 = (int)35672;
HXLINE( 283)		this->BOOL_VEC2 = (int)35671;
HXLINE( 282)		this->BOOL = (int)35670;
HXLINE( 281)		this->INT_VEC4 = (int)35669;
HXLINE( 280)		this->INT_VEC3 = (int)35668;
HXLINE( 279)		this->INT_VEC2 = (int)35667;
HXLINE( 278)		this->FLOAT_VEC4 = (int)35666;
HXLINE( 277)		this->FLOAT_VEC3 = (int)35665;
HXLINE( 276)		this->FLOAT_VEC2 = (int)35664;
HXLINE( 274)		this->MIRRORED_REPEAT = (int)33648;
HXLINE( 273)		this->CLAMP_TO_EDGE = (int)33071;
HXLINE( 272)		this->REPEAT = (int)10497;
HXLINE( 270)		this->ACTIVE_TEXTURE = (int)34016;
HXLINE( 269)		this->TEXTURE31 = (int)34015;
HXLINE( 268)		this->TEXTURE30 = (int)34014;
HXLINE( 267)		this->TEXTURE29 = (int)34013;
HXLINE( 266)		this->TEXTURE28 = (int)34012;
HXLINE( 265)		this->TEXTURE27 = (int)34011;
HXLINE( 264)		this->TEXTURE26 = (int)34010;
HXLINE( 263)		this->TEXTURE25 = (int)34009;
HXLINE( 262)		this->TEXTURE24 = (int)34008;
HXLINE( 261)		this->TEXTURE23 = (int)34007;
HXLINE( 260)		this->TEXTURE22 = (int)34006;
HXLINE( 259)		this->TEXTURE21 = (int)34005;
HXLINE( 258)		this->TEXTURE20 = (int)34004;
HXLINE( 257)		this->TEXTURE19 = (int)34003;
HXLINE( 256)		this->TEXTURE18 = (int)34002;
HXLINE( 255)		this->TEXTURE17 = (int)34001;
HXLINE( 254)		this->TEXTURE16 = (int)34000;
HXLINE( 253)		this->TEXTURE15 = (int)33999;
HXLINE( 252)		this->TEXTURE14 = (int)33998;
HXLINE( 251)		this->TEXTURE13 = (int)33997;
HXLINE( 250)		this->TEXTURE12 = (int)33996;
HXLINE( 249)		this->TEXTURE11 = (int)33995;
HXLINE( 248)		this->TEXTURE10 = (int)33994;
HXLINE( 247)		this->TEXTURE9 = (int)33993;
HXLINE( 246)		this->TEXTURE8 = (int)33992;
HXLINE( 245)		this->TEXTURE7 = (int)33991;
HXLINE( 244)		this->TEXTURE6 = (int)33990;
HXLINE( 243)		this->TEXTURE5 = (int)33989;
HXLINE( 242)		this->TEXTURE4 = (int)33988;
HXLINE( 241)		this->TEXTURE3 = (int)33987;
HXLINE( 240)		this->TEXTURE2 = (int)33986;
HXLINE( 239)		this->TEXTURE1 = (int)33985;
HXLINE( 238)		this->TEXTURE0 = (int)33984;
HXLINE( 236)		this->MAX_CUBE_MAP_TEXTURE_SIZE = (int)34076;
HXLINE( 235)		this->TEXTURE_CUBE_MAP_NEGATIVE_Z = (int)34074;
HXLINE( 234)		this->TEXTURE_CUBE_MAP_POSITIVE_Z = (int)34073;
HXLINE( 233)		this->TEXTURE_CUBE_MAP_NEGATIVE_Y = (int)34072;
HXLINE( 232)		this->TEXTURE_CUBE_MAP_POSITIVE_Y = (int)34071;
HXLINE( 231)		this->TEXTURE_CUBE_MAP_NEGATIVE_X = (int)34070;
HXLINE( 230)		this->TEXTURE_CUBE_MAP_POSITIVE_X = (int)34069;
HXLINE( 229)		this->TEXTURE_BINDING_CUBE_MAP = (int)34068;
HXLINE( 228)		this->TEXTURE_CUBE_MAP = (int)34067;
HXLINE( 226)		this->TEXTURE = (int)5890;
HXLINE( 225)		this->TEXTURE_2D = (int)3553;
HXLINE( 223)		this->TEXTURE_WRAP_T = (int)10243;
HXLINE( 222)		this->TEXTURE_WRAP_S = (int)10242;
HXLINE( 221)		this->TEXTURE_MIN_FILTER = (int)10241;
HXLINE( 220)		this->TEXTURE_MAG_FILTER = (int)10240;
HXLINE( 218)		this->LINEAR_MIPMAP_LINEAR = (int)9987;
HXLINE( 217)		this->NEAREST_MIPMAP_LINEAR = (int)9986;
HXLINE( 216)		this->LINEAR_MIPMAP_NEAREST = (int)9985;
HXLINE( 215)		this->NEAREST_MIPMAP_NEAREST = (int)9984;
HXLINE( 213)		this->LINEAR = (int)9729;
HXLINE( 212)		this->NEAREST = (int)9728;
HXLINE( 210)		this->VERSION = (int)7938;
HXLINE( 209)		this->RENDERER = (int)7937;
HXLINE( 208)		this->VENDOR = (int)7936;
HXLINE( 206)		this->DECR_WRAP = (int)34056;
HXLINE( 205)		this->INCR_WRAP = (int)34055;
HXLINE( 204)		this->INVERT = (int)5386;
HXLINE( 203)		this->DECR = (int)7683;
HXLINE( 202)		this->INCR = (int)7682;
HXLINE( 201)		this->REPLACE = (int)7681;
HXLINE( 200)		this->KEEP = (int)7680;
HXLINE( 198)		this->ALWAYS = (int)519;
HXLINE( 197)		this->GEQUAL = (int)518;
HXLINE( 196)		this->NOTEQUAL = (int)517;
HXLINE( 195)		this->GREATER = (int)516;
HXLINE( 194)		this->LEQUAL = (int)515;
HXLINE( 193)		this->EQUAL = (int)514;
HXLINE( 192)		this->LESS = (int)513;
HXLINE( 191)		this->NEVER = (int)512;
HXLINE( 189)		this->CURRENT_PROGRAM = (int)35725;
HXLINE( 188)		this->SHADING_LANGUAGE_VERSION = (int)35724;
HXLINE( 187)		this->ACTIVE_ATTRIBUTES = (int)35721;
HXLINE( 186)		this->ACTIVE_UNIFORMS = (int)35718;
HXLINE( 185)		this->ATTACHED_SHADERS = (int)35717;
HXLINE( 184)		this->VALIDATE_STATUS = (int)35715;
HXLINE( 183)		this->LINK_STATUS = (int)35714;
HXLINE( 182)		this->DELETE_STATUS = (int)35712;
HXLINE( 181)		this->SHADER_TYPE = (int)35663;
HXLINE( 180)		this->MAX_FRAGMENT_UNIFORM_VECTORS = (int)36349;
HXLINE( 179)		this->MAX_TEXTURE_IMAGE_UNITS = (int)34930;
HXLINE( 178)		this->MAX_VERTEX_TEXTURE_IMAGE_UNITS = (int)35660;
HXLINE( 177)		this->MAX_COMBINED_TEXTURE_IMAGE_UNITS = (int)35661;
HXLINE( 176)		this->MAX_VARYING_VECTORS = (int)36348;
HXLINE( 175)		this->MAX_VERTEX_UNIFORM_VECTORS = (int)36347;
HXLINE( 174)		this->MAX_VERTEX_ATTRIBS = (int)34921;
HXLINE( 173)		this->VERTEX_SHADER = (int)35633;
HXLINE( 172)		this->FRAGMENT_SHADER = (int)35632;
HXLINE( 170)		this->UNSIGNED_SHORT_5_6_5 = (int)33635;
HXLINE( 169)		this->UNSIGNED_SHORT_5_5_5_1 = (int)32820;
HXLINE( 168)		this->UNSIGNED_SHORT_4_4_4_4 = (int)32819;
HXLINE( 166)		this->LUMINANCE_ALPHA = (int)6410;
HXLINE( 165)		this->LUMINANCE = (int)6409;
HXLINE( 164)		this->BGRA_EXT = (int)32993;
HXLINE( 163)		this->BGR_EXT = (int)32992;
HXLINE( 162)		this->RGBA = (int)6408;
HXLINE( 161)		this->RGB = (int)6407;
HXLINE( 160)		this->ALPHA = (int)6406;
HXLINE( 159)		this->DEPTH_COMPONENT = (int)6402;
HXLINE( 157)		this->FLOAT = (int)5126;
HXLINE( 156)		this->UNSIGNED_INT = (int)5125;
HXLINE( 155)		this->INT = (int)5124;
HXLINE( 154)		this->UNSIGNED_SHORT = (int)5123;
HXLINE( 153)		this->SHORT = (int)5122;
HXLINE( 152)		this->UNSIGNED_BYTE = (int)5121;
HXLINE( 151)		this->BYTE = (int)5120;
HXLINE( 149)		this->GENERATE_MIPMAP_HINT = (int)33170;
HXLINE( 147)		this->NICEST = (int)4354;
HXLINE( 146)		this->FASTEST = (int)4353;
HXLINE( 145)		this->DONT_CARE = (int)4352;
HXLINE( 143)		this->COMPRESSED_TEXTURE_FORMATS = (int)34467;
HXLINE( 141)		this->SAMPLE_COVERAGE_INVERT = (int)32939;
HXLINE( 140)		this->SAMPLE_COVERAGE_VALUE = (int)32938;
HXLINE( 139)		this->SAMPLES = (int)32937;
HXLINE( 138)		this->SAMPLE_BUFFERS = (int)32936;
HXLINE( 137)		this->TEXTURE_BINDING_2D = (int)32873;
HXLINE( 136)		this->POLYGON_OFFSET_FACTOR = (int)32824;
HXLINE( 134)		this->POLYGON_OFFSET_UNITS = (int)10752;
HXLINE( 133)		this->STENCIL_BITS = (int)3415;
HXLINE( 132)		this->DEPTH_BITS = (int)3414;
HXLINE( 131)		this->ALPHA_BITS = (int)3413;
HXLINE( 130)		this->BLUE_BITS = (int)3412;
HXLINE( 129)		this->GREEN_BITS = (int)3411;
HXLINE( 128)		this->RED_BITS = (int)3410;
HXLINE( 127)		this->SUBPIXEL_BITS = (int)3408;
HXLINE( 126)		this->MAX_VIEWPORT_DIMS = (int)3386;
HXLINE( 125)		this->MAX_TEXTURE_SIZE = (int)3379;
HXLINE( 124)		this->PACK_ALIGNMENT = (int)3333;
HXLINE( 123)		this->UNPACK_ALIGNMENT = (int)3317;
HXLINE( 122)		this->COLOR_WRITEMASK = (int)3107;
HXLINE( 121)		this->COLOR_CLEAR_VALUE = (int)3106;
HXLINE( 119)		this->SCISSOR_BOX = (int)3088;
HXLINE( 118)		this->VIEWPORT = (int)2978;
HXLINE( 117)		this->STENCIL_BACK_WRITEMASK = (int)36005;
HXLINE( 116)		this->STENCIL_BACK_VALUE_MASK = (int)36004;
HXLINE( 115)		this->STENCIL_BACK_REF = (int)36003;
HXLINE( 114)		this->STENCIL_BACK_PASS_DEPTH_PASS = (int)34819;
HXLINE( 113)		this->STENCIL_BACK_PASS_DEPTH_FAIL = (int)34818;
HXLINE( 112)		this->STENCIL_BACK_FAIL = (int)34817;
HXLINE( 111)		this->STENCIL_BACK_FUNC = (int)34816;
HXLINE( 110)		this->STENCIL_WRITEMASK = (int)2968;
HXLINE( 109)		this->STENCIL_VALUE_MASK = (int)2963;
HXLINE( 108)		this->STENCIL_REF = (int)2967;
HXLINE( 107)		this->STENCIL_PASS_DEPTH_PASS = (int)2966;
HXLINE( 106)		this->STENCIL_PASS_DEPTH_FAIL = (int)2965;
HXLINE( 105)		this->STENCIL_FAIL = (int)2964;
HXLINE( 104)		this->STENCIL_FUNC = (int)2962;
HXLINE( 103)		this->STENCIL_CLEAR_VALUE = (int)2961;
HXLINE( 102)		this->DEPTH_FUNC = (int)2932;
HXLINE( 101)		this->DEPTH_CLEAR_VALUE = (int)2931;
HXLINE( 100)		this->DEPTH_WRITEMASK = (int)2930;
HXLINE(  99)		this->DEPTH_RANGE = (int)2928;
HXLINE(  98)		this->FRONT_FACE = (int)2886;
HXLINE(  97)		this->CULL_FACE_MODE = (int)2885;
HXLINE(  96)		this->ALIASED_LINE_WIDTH_RANGE = (int)33902;
HXLINE(  95)		this->ALIASED_POINT_SIZE_RANGE = (int)33901;
HXLINE(  94)		this->LINE_WIDTH = (int)2849;
HXLINE(  92)		this->CCW = (int)2305;
HXLINE(  91)		this->CW = (int)2304;
HXLINE(  89)		this->OUT_OF_MEMORY = (int)1285;
HXLINE(  88)		this->INVALID_OPERATION = (int)1282;
HXLINE(  87)		this->INVALID_VALUE = (int)1281;
HXLINE(  86)		this->INVALID_ENUM = (int)1280;
HXLINE(  85)		this->NO_ERROR = (int)0;
HXLINE(  83)		this->SAMPLE_COVERAGE = (int)32928;
HXLINE(  82)		this->SAMPLE_ALPHA_TO_COVERAGE = (int)32926;
HXLINE(  81)		this->POLYGON_OFFSET_FILL = (int)32823;
HXLINE(  80)		this->SCISSOR_TEST = (int)3089;
HXLINE(  79)		this->DEPTH_TEST = (int)2929;
HXLINE(  78)		this->STENCIL_TEST = (int)2960;
HXLINE(  77)		this->DITHER = (int)3024;
HXLINE(  76)		this->BLEND = (int)3042;
HXLINE(  75)		this->CULL_FACE = (int)2884;
HXLINE(  73)		this->FRONT_AND_BACK = (int)1032;
HXLINE(  72)		this->BACK = (int)1029;
HXLINE(  71)		this->FRONT = (int)1028;
HXLINE(  69)		this->CURRENT_VERTEX_ATTRIB = (int)34342;
HXLINE(  67)		this->BUFFER_USAGE = (int)34661;
HXLINE(  66)		this->BUFFER_SIZE = (int)34660;
HXLINE(  64)		this->DYNAMIC_DRAW = (int)35048;
HXLINE(  63)		this->STATIC_DRAW = (int)35044;
HXLINE(  62)		this->STREAM_DRAW = (int)35040;
HXLINE(  60)		this->ELEMENT_ARRAY_BUFFER_BINDING = (int)34965;
HXLINE(  59)		this->ARRAY_BUFFER_BINDING = (int)34964;
HXLINE(  58)		this->ELEMENT_ARRAY_BUFFER = (int)34963;
HXLINE(  57)		this->ARRAY_BUFFER = (int)34962;
HXLINE(  55)		this->BLEND_COLOR = (int)32773;
HXLINE(  54)		this->ONE_MINUS_CONSTANT_ALPHA = (int)32772;
HXLINE(  53)		this->CONSTANT_ALPHA = (int)32771;
HXLINE(  52)		this->ONE_MINUS_CONSTANT_COLOR = (int)32770;
HXLINE(  51)		this->CONSTANT_COLOR = (int)32769;
HXLINE(  50)		this->BLEND_SRC_ALPHA = (int)32971;
HXLINE(  49)		this->BLEND_DST_ALPHA = (int)32970;
HXLINE(  48)		this->BLEND_SRC_RGB = (int)32969;
HXLINE(  47)		this->BLEND_DST_RGB = (int)32968;
HXLINE(  45)		this->FUNC_REVERSE_SUBTRACT = (int)32779;
HXLINE(  44)		this->FUNC_SUBTRACT = (int)32778;
HXLINE(  42)		this->BLEND_EQUATION_ALPHA = (int)34877;
HXLINE(  41)		this->BLEND_EQUATION_RGB = (int)32777;
HXLINE(  40)		this->BLEND_EQUATION = (int)32777;
HXLINE(  39)		this->FUNC_ADD = (int)32774;
HXLINE(  37)		this->SRC_ALPHA_SATURATE = (int)776;
HXLINE(  36)		this->ONE_MINUS_DST_COLOR = (int)775;
HXLINE(  35)		this->DST_COLOR = (int)774;
HXLINE(  33)		this->ONE_MINUS_DST_ALPHA = (int)773;
HXLINE(  32)		this->DST_ALPHA = (int)772;
HXLINE(  31)		this->ONE_MINUS_SRC_ALPHA = (int)771;
HXLINE(  30)		this->SRC_ALPHA = (int)770;
HXLINE(  29)		this->ONE_MINUS_SRC_COLOR = (int)769;
HXLINE(  28)		this->SRC_COLOR = (int)768;
HXLINE(  27)		this->ONE = (int)1;
HXLINE(  26)		this->ZERO = (int)0;
HXLINE(  24)		this->TRIANGLE_FAN = (int)6;
HXLINE(  23)		this->TRIANGLE_STRIP = (int)5;
HXLINE(  22)		this->TRIANGLES = (int)4;
HXLINE(  21)		this->LINE_STRIP = (int)3;
HXLINE(  20)		this->LINE_LOOP = (int)2;
HXLINE(  19)		this->LINES = (int)1;
HXLINE(  18)		this->POINTS = (int)0;
HXLINE(  16)		this->COLOR_BUFFER_BIT = (int)16384;
HXLINE(  15)		this->STENCIL_BUFFER_BIT = (int)1024;
HXLINE(  14)		this->DEPTH_BUFFER_BIT = (int)256;
            	}

Dynamic GLRenderContext_obj::__CreateEmpty() { return new GLRenderContext_obj; }

void *GLRenderContext_obj::_hx_vtable = 0;

Dynamic GLRenderContext_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLRenderContext_obj > _hx_result = new GLRenderContext_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLRenderContext_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f2a22a4;
}

void GLRenderContext_obj::activeTexture(int texture){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_375_activeTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(texture,"texture")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,activeTexture,(void))

void GLRenderContext_obj::attachShader( ::lime::graphics::opengl::GLProgram program, ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_382_attachShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(shader,"shader")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,attachShader,(void))

void GLRenderContext_obj::bindAttribLocation( ::lime::graphics::opengl::GLProgram program,int index,::String name){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_389_bindAttribLocation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(name,"name")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,bindAttribLocation,(void))

void GLRenderContext_obj::bindBuffer(int target, ::lime::graphics::opengl::GLBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_396_bindBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(buffer,"buffer")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,bindBuffer,(void))

void GLRenderContext_obj::bindFramebuffer(int target, ::lime::graphics::opengl::GLFramebuffer framebuffer){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_403_bindFramebuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(framebuffer,"framebuffer")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,bindFramebuffer,(void))

void GLRenderContext_obj::bindRenderbuffer(int target, ::lime::graphics::opengl::GLRenderbuffer renderbuffer){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_410_bindRenderbuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(renderbuffer,"renderbuffer")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,bindRenderbuffer,(void))

void GLRenderContext_obj::bindTexture(int target, ::lime::graphics::opengl::GLTexture texture){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_417_bindTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(texture,"texture")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,bindTexture,(void))

void GLRenderContext_obj::blendColor(Float red,Float green,Float blue,Float alpha){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_424_blendColor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,blendColor,(void))

void GLRenderContext_obj::blendEquation(int mode){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_431_blendEquation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,blendEquation,(void))

void GLRenderContext_obj::blendEquationSeparate(int modeRGB,int modeAlpha){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_438_blendEquationSeparate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(modeRGB,"modeRGB")
            	HX_STACK_ARG(modeAlpha,"modeAlpha")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,blendEquationSeparate,(void))

void GLRenderContext_obj::blendFunc(int sfactor,int dfactor){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_445_blendFunc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sfactor,"sfactor")
            	HX_STACK_ARG(dfactor,"dfactor")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,blendFunc,(void))

void GLRenderContext_obj::blendFuncSeparate(int srcRGB,int dstRGB,int srcAlpha,int dstAlpha){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_452_blendFuncSeparate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(srcRGB,"srcRGB")
            	HX_STACK_ARG(dstRGB,"dstRGB")
            	HX_STACK_ARG(srcAlpha,"srcAlpha")
            	HX_STACK_ARG(dstAlpha,"dstAlpha")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,blendFuncSeparate,(void))

void GLRenderContext_obj::bufferData(int target, ::lime::utils::ArrayBufferView data,int usage){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_459_bufferData)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(usage,"usage")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,bufferData,(void))

void GLRenderContext_obj::bufferSubData(int target,int offset, ::lime::utils::ArrayBufferView data){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_466_bufferSubData)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(data,"data")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,bufferSubData,(void))

int GLRenderContext_obj::checkFramebufferStatus(int target){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_473_checkFramebufferStatus)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
HXLINE( 473)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,checkFramebufferStatus,return )

void GLRenderContext_obj::clear(int mask){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_480_clear)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,clear,(void))

void GLRenderContext_obj::clearColor(Float red,Float green,Float blue,Float alpha){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_487_clearColor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,clearColor,(void))

void GLRenderContext_obj::clearDepth(Float depth){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_494_clearDepth)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(depth,"depth")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,clearDepth,(void))

void GLRenderContext_obj::clearStencil(int s){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_501_clearStencil)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,clearStencil,(void))

void GLRenderContext_obj::colorMask(bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_508_colorMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,colorMask,(void))

void GLRenderContext_obj::compileShader( ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_515_compileShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,compileShader,(void))

void GLRenderContext_obj::compressedTexImage2D(int target,int level,int internalformat,int width,int height,int border, ::lime::utils::ArrayBufferView data){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_522_compressedTexImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(internalformat,"internalformat")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(border,"border")
            	HX_STACK_ARG(data,"data")
            	}


HX_DEFINE_DYNAMIC_FUNC7(GLRenderContext_obj,compressedTexImage2D,(void))

void GLRenderContext_obj::compressedTexSubImage2D(int target,int level,int xoffset,int yoffset,int width,int height,int format, ::lime::utils::ArrayBufferView data){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_529_compressedTexSubImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(xoffset,"xoffset")
            	HX_STACK_ARG(yoffset,"yoffset")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(data,"data")
            	}


HX_DEFINE_DYNAMIC_FUNC8(GLRenderContext_obj,compressedTexSubImage2D,(void))

void GLRenderContext_obj::copyTexImage2D(int target,int level,int internalformat,int x,int y,int width,int height,int border){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_536_copyTexImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(internalformat,"internalformat")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(border,"border")
            	}


HX_DEFINE_DYNAMIC_FUNC8(GLRenderContext_obj,copyTexImage2D,(void))

void GLRenderContext_obj::copyTexSubImage2D(int target,int level,int xoffset,int yoffset,int x,int y,int width,int height){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_543_copyTexSubImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(xoffset,"xoffset")
            	HX_STACK_ARG(yoffset,"yoffset")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	}


HX_DEFINE_DYNAMIC_FUNC8(GLRenderContext_obj,copyTexSubImage2D,(void))

 ::lime::graphics::opengl::GLBuffer GLRenderContext_obj::createBuffer(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_550_createBuffer)
            	HX_STACK_THIS(this)
HXLINE( 550)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,createBuffer,return )

 ::lime::graphics::opengl::GLFramebuffer GLRenderContext_obj::createFramebuffer(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_557_createFramebuffer)
            	HX_STACK_THIS(this)
HXLINE( 557)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,createFramebuffer,return )

 ::lime::graphics::opengl::GLProgram GLRenderContext_obj::createProgram(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_564_createProgram)
            	HX_STACK_THIS(this)
HXLINE( 564)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,createProgram,return )

 ::lime::graphics::opengl::GLRenderbuffer GLRenderContext_obj::createRenderbuffer(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_571_createRenderbuffer)
            	HX_STACK_THIS(this)
HXLINE( 571)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,createRenderbuffer,return )

 ::lime::graphics::opengl::GLShader GLRenderContext_obj::createShader(int type){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_578_createShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE( 578)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,createShader,return )

 ::lime::graphics::opengl::GLTexture GLRenderContext_obj::createTexture(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_585_createTexture)
            	HX_STACK_THIS(this)
HXLINE( 585)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,createTexture,return )

void GLRenderContext_obj::cullFace(int mode){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_592_cullFace)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,cullFace,(void))

void GLRenderContext_obj::deleteBuffer( ::lime::graphics::opengl::GLBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_599_deleteBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,deleteBuffer,(void))

void GLRenderContext_obj::deleteFramebuffer( ::lime::graphics::opengl::GLFramebuffer framebuffer){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_606_deleteFramebuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(framebuffer,"framebuffer")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,deleteFramebuffer,(void))

void GLRenderContext_obj::deleteProgram( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_613_deleteProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,deleteProgram,(void))

void GLRenderContext_obj::deleteRenderbuffer( ::lime::graphics::opengl::GLRenderbuffer renderbuffer){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_620_deleteRenderbuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderbuffer,"renderbuffer")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,deleteRenderbuffer,(void))

void GLRenderContext_obj::deleteShader( ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_627_deleteShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,deleteShader,(void))

void GLRenderContext_obj::deleteTexture( ::lime::graphics::opengl::GLTexture texture){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_634_deleteTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(texture,"texture")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,deleteTexture,(void))

void GLRenderContext_obj::depthFunc(int func){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_641_depthFunc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(func,"func")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,depthFunc,(void))

void GLRenderContext_obj::depthMask(bool flag){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_648_depthMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(flag,"flag")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,depthMask,(void))

void GLRenderContext_obj::depthRange(Float zNear,Float zFar){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_655_depthRange)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(zNear,"zNear")
            	HX_STACK_ARG(zFar,"zFar")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,depthRange,(void))

void GLRenderContext_obj::detachShader( ::lime::graphics::opengl::GLProgram program, ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_662_detachShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(shader,"shader")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,detachShader,(void))

void GLRenderContext_obj::disable(int cap){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_669_disable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cap,"cap")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,disable,(void))

void GLRenderContext_obj::disableVertexAttribArray(int index){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_676_disableVertexAttribArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,disableVertexAttribArray,(void))

void GLRenderContext_obj::drawArrays(int mode,int first,int count){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_683_drawArrays)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
            	HX_STACK_ARG(first,"first")
            	HX_STACK_ARG(count,"count")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,drawArrays,(void))

void GLRenderContext_obj::drawElements(int mode,int count,int type,int offset){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_690_drawElements)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
            	HX_STACK_ARG(count,"count")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(offset,"offset")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,drawElements,(void))

void GLRenderContext_obj::enable(int cap){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_697_enable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cap,"cap")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,enable,(void))

void GLRenderContext_obj::enableVertexAttribArray(int index){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_704_enableVertexAttribArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,enableVertexAttribArray,(void))

void GLRenderContext_obj::finish(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_711_finish)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,finish,(void))

void GLRenderContext_obj::flush(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_718_flush)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,flush,(void))

void GLRenderContext_obj::framebufferRenderbuffer(int target,int attachment,int renderbuffertarget, ::lime::graphics::opengl::GLRenderbuffer renderbuffer){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_725_framebufferRenderbuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(attachment,"attachment")
            	HX_STACK_ARG(renderbuffertarget,"renderbuffertarget")
            	HX_STACK_ARG(renderbuffer,"renderbuffer")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,framebufferRenderbuffer,(void))

void GLRenderContext_obj::framebufferTexture2D(int target,int attachment,int textarget, ::lime::graphics::opengl::GLTexture texture,int level){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_732_framebufferTexture2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(attachment,"attachment")
            	HX_STACK_ARG(textarget,"textarget")
            	HX_STACK_ARG(texture,"texture")
            	HX_STACK_ARG(level,"level")
            	}


HX_DEFINE_DYNAMIC_FUNC5(GLRenderContext_obj,framebufferTexture2D,(void))

void GLRenderContext_obj::frontFace(int mode){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_739_frontFace)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,frontFace,(void))

void GLRenderContext_obj::generateMipmap(int target){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_746_generateMipmap)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,generateMipmap,(void))

 ::Dynamic GLRenderContext_obj::getActiveAttrib( ::lime::graphics::opengl::GLProgram program,int index){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_753_getActiveAttrib)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(index,"index")
HXLINE( 753)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getActiveAttrib,return )

 ::Dynamic GLRenderContext_obj::getActiveUniform( ::lime::graphics::opengl::GLProgram program,int index){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_760_getActiveUniform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(index,"index")
HXLINE( 760)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getActiveUniform,return )

::Array< ::Dynamic> GLRenderContext_obj::getAttachedShaders( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_767_getAttachedShaders)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE( 767)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,getAttachedShaders,return )

int GLRenderContext_obj::getAttribLocation( ::lime::graphics::opengl::GLProgram program,::String name){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_774_getAttribLocation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(name,"name")
HXLINE( 774)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getAttribLocation,return )

int GLRenderContext_obj::getBufferParameter(int target,int pname){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_781_getBufferParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(pname,"pname")
HXLINE( 781)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getBufferParameter,return )

 ::Dynamic GLRenderContext_obj::getContextAttributes(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_788_getContextAttributes)
            	HX_STACK_THIS(this)
HXLINE( 788)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,getContextAttributes,return )

int GLRenderContext_obj::getError(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_795_getError)
            	HX_STACK_THIS(this)
HXLINE( 795)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,getError,return )

 ::Dynamic GLRenderContext_obj::getExtension(::String name){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_802_getExtension)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 802)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,getExtension,return )

int GLRenderContext_obj::getFramebufferAttachmentParameter(int target,int attachment,int pname){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_809_getFramebufferAttachmentParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(attachment,"attachment")
            	HX_STACK_ARG(pname,"pname")
HXLINE( 809)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,getFramebufferAttachmentParameter,return )

 ::Dynamic GLRenderContext_obj::getParameter(int pname){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_816_getParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pname,"pname")
HXLINE( 816)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,getParameter,return )

::String GLRenderContext_obj::getProgramInfoLog( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_823_getProgramInfoLog)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE( 823)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,getProgramInfoLog,return )

int GLRenderContext_obj::getProgramParameter( ::lime::graphics::opengl::GLProgram program,int pname){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_830_getProgramParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(pname,"pname")
HXLINE( 830)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getProgramParameter,return )

int GLRenderContext_obj::getRenderbufferParameter(int target,int pname){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_837_getRenderbufferParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(pname,"pname")
HXLINE( 837)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getRenderbufferParameter,return )

::String GLRenderContext_obj::getShaderInfoLog( ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_844_getShaderInfoLog)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
HXLINE( 844)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,getShaderInfoLog,return )

int GLRenderContext_obj::getShaderParameter( ::lime::graphics::opengl::GLShader shader,int pname){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_851_getShaderParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
            	HX_STACK_ARG(pname,"pname")
HXLINE( 851)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getShaderParameter,return )

 ::Dynamic GLRenderContext_obj::getShaderPrecisionFormat(int shadertype,int precisiontype){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_858_getShaderPrecisionFormat)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shadertype,"shadertype")
            	HX_STACK_ARG(precisiontype,"precisiontype")
HXLINE( 858)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getShaderPrecisionFormat,return )

::String GLRenderContext_obj::getShaderSource( ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_865_getShaderSource)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
HXLINE( 865)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,getShaderSource,return )

::Array< ::String > GLRenderContext_obj::getSupportedExtensions(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_872_getSupportedExtensions)
            	HX_STACK_THIS(this)
HXLINE( 872)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,getSupportedExtensions,return )

int GLRenderContext_obj::getTexParameter(int target,int pname){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_879_getTexParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(pname,"pname")
HXLINE( 879)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getTexParameter,return )

 ::Dynamic GLRenderContext_obj::getUniform( ::lime::graphics::opengl::GLProgram program,int location){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_886_getUniform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(location,"location")
HXLINE( 886)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getUniform,return )

int GLRenderContext_obj::getUniformLocation( ::lime::graphics::opengl::GLProgram program,::String name){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_893_getUniformLocation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(name,"name")
HXLINE( 893)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getUniformLocation,return )

int GLRenderContext_obj::getVertexAttrib(int index,int pname){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_900_getVertexAttrib)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(pname,"pname")
HXLINE( 900)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getVertexAttrib,return )

int GLRenderContext_obj::getVertexAttribOffset(int index,int pname){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_907_getVertexAttribOffset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(pname,"pname")
HXLINE( 907)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,getVertexAttribOffset,return )

void GLRenderContext_obj::hint(int target,int mode){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_914_hint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(mode,"mode")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,hint,(void))

bool GLRenderContext_obj::isBuffer( ::lime::graphics::opengl::GLBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_921_isBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 921)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,isBuffer,return )

bool GLRenderContext_obj::isContextLost(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_928_isContextLost)
            	HX_STACK_THIS(this)
HXLINE( 928)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,isContextLost,return )

bool GLRenderContext_obj::isEnabled(int cap){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_935_isEnabled)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cap,"cap")
HXLINE( 935)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,isEnabled,return )

bool GLRenderContext_obj::isFramebuffer( ::lime::graphics::opengl::GLFramebuffer framebuffer){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_942_isFramebuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(framebuffer,"framebuffer")
HXLINE( 942)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,isFramebuffer,return )

bool GLRenderContext_obj::isProgram( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_949_isProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE( 949)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,isProgram,return )

bool GLRenderContext_obj::isRenderbuffer( ::lime::graphics::opengl::GLRenderbuffer renderbuffer){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_956_isRenderbuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderbuffer,"renderbuffer")
HXLINE( 956)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,isRenderbuffer,return )

bool GLRenderContext_obj::isShader( ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_963_isShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
HXLINE( 963)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,isShader,return )

bool GLRenderContext_obj::isTexture( ::lime::graphics::opengl::GLTexture texture){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_970_isTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(texture,"texture")
HXLINE( 970)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,isTexture,return )

void GLRenderContext_obj::lineWidth(Float width){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_977_lineWidth)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,lineWidth,(void))

void GLRenderContext_obj::linkProgram( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_984_linkProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,linkProgram,(void))

void GLRenderContext_obj::pixelStorei(int pname,int param){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_991_pixelStorei)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pname,"pname")
            	HX_STACK_ARG(param,"param")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,pixelStorei,(void))

void GLRenderContext_obj::polygonOffset(Float factor,Float units){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_998_polygonOffset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(factor,"factor")
            	HX_STACK_ARG(units,"units")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,polygonOffset,(void))

void GLRenderContext_obj::readPixels(int x,int y,int width,int height,int format,int type, ::lime::utils::ArrayBufferView pixels){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1005_readPixels)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(pixels,"pixels")
            	}


HX_DEFINE_DYNAMIC_FUNC7(GLRenderContext_obj,readPixels,(void))

void GLRenderContext_obj::renderbufferStorage(int target,int internalformat,int width,int height){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1012_renderbufferStorage)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(internalformat,"internalformat")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,renderbufferStorage,(void))

void GLRenderContext_obj::sampleCoverage(Float value,bool invert){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1019_sampleCoverage)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(invert,"invert")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,sampleCoverage,(void))

void GLRenderContext_obj::scissor(int x,int y,int width,int height){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1026_scissor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,scissor,(void))

void GLRenderContext_obj::shaderSource( ::lime::graphics::opengl::GLShader shader,::String source){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1033_shaderSource)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
            	HX_STACK_ARG(source,"source")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,shaderSource,(void))

void GLRenderContext_obj::stencilFunc(int func,int ref,int mask){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1040_stencilFunc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(ref,"ref")
            	HX_STACK_ARG(mask,"mask")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,stencilFunc,(void))

void GLRenderContext_obj::stencilFuncSeparate(int face,int func,int ref,int mask){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1047_stencilFuncSeparate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(face,"face")
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(ref,"ref")
            	HX_STACK_ARG(mask,"mask")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,stencilFuncSeparate,(void))

void GLRenderContext_obj::stencilMask(int mask){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1054_stencilMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,stencilMask,(void))

void GLRenderContext_obj::stencilMaskSeparate(int face,int mask){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1061_stencilMaskSeparate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(face,"face")
            	HX_STACK_ARG(mask,"mask")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,stencilMaskSeparate,(void))

void GLRenderContext_obj::stencilOp(int fail,int zfail,int zpass){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1068_stencilOp)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fail,"fail")
            	HX_STACK_ARG(zfail,"zfail")
            	HX_STACK_ARG(zpass,"zpass")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,stencilOp,(void))

void GLRenderContext_obj::stencilOpSeparate(int face,int fail,int zfail,int zpass){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1075_stencilOpSeparate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(face,"face")
            	HX_STACK_ARG(fail,"fail")
            	HX_STACK_ARG(zfail,"zfail")
            	HX_STACK_ARG(zpass,"zpass")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,stencilOpSeparate,(void))

void GLRenderContext_obj::texImage2D(int target,int level,int internalformat,int width,int height,int border,int format,int type, ::lime::utils::ArrayBufferView pixels){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1082_texImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(internalformat,"internalformat")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(border,"border")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(pixels,"pixels")
            	}


HX_DEFINE_DYNAMIC_FUNC9(GLRenderContext_obj,texImage2D,(void))

void GLRenderContext_obj::texParameterf(int target,int pname,Float param){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1089_texParameterf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(pname,"pname")
            	HX_STACK_ARG(param,"param")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,texParameterf,(void))

void GLRenderContext_obj::texParameteri(int target,int pname,int param){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1096_texParameteri)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(pname,"pname")
            	HX_STACK_ARG(param,"param")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,texParameteri,(void))

void GLRenderContext_obj::texSubImage2D(int target,int level,int xoffset,int yoffset,int width,int height,int format,int type, ::lime::utils::ArrayBufferView pixels){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1103_texSubImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(xoffset,"xoffset")
            	HX_STACK_ARG(yoffset,"yoffset")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(pixels,"pixels")
            	}


HX_DEFINE_DYNAMIC_FUNC9(GLRenderContext_obj,texSubImage2D,(void))

void GLRenderContext_obj::uniform1f(int location,Float x){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1110_uniform1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,uniform1f,(void))

void GLRenderContext_obj::uniform1fv(int location, ::lime::utils::ArrayBufferView x){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1117_uniform1fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,uniform1fv,(void))

void GLRenderContext_obj::uniform1i(int location,int x){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1124_uniform1i)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,uniform1i,(void))

void GLRenderContext_obj::uniform1iv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1131_uniform1iv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,uniform1iv,(void))

void GLRenderContext_obj::uniform2f(int location,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1138_uniform2f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,uniform2f,(void))

void GLRenderContext_obj::uniform2fv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1145_uniform2fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,uniform2fv,(void))

void GLRenderContext_obj::uniform2i(int location,int x,int y){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1152_uniform2i)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,uniform2i,(void))

void GLRenderContext_obj::uniform2iv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1159_uniform2iv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,uniform2iv,(void))

void GLRenderContext_obj::uniform3f(int location,Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1166_uniform3f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,uniform3f,(void))

void GLRenderContext_obj::uniform3fv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1173_uniform3fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,uniform3fv,(void))

void GLRenderContext_obj::uniform3i(int location,int x,int y,int z){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1180_uniform3i)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,uniform3i,(void))

void GLRenderContext_obj::uniform3iv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1187_uniform3iv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,uniform3iv,(void))

void GLRenderContext_obj::uniform4f(int location,Float x,Float y,Float z,Float w){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1194_uniform4f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(w,"w")
            	}


HX_DEFINE_DYNAMIC_FUNC5(GLRenderContext_obj,uniform4f,(void))

void GLRenderContext_obj::uniform4fv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1201_uniform4fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,uniform4fv,(void))

void GLRenderContext_obj::uniform4i(int location,int x,int y,int z,int w){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1208_uniform4i)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(w,"w")
            	}


HX_DEFINE_DYNAMIC_FUNC5(GLRenderContext_obj,uniform4i,(void))

void GLRenderContext_obj::uniform4iv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1215_uniform4iv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,uniform4iv,(void))

void GLRenderContext_obj::uniformMatrix2fv(int location,bool transpose, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1222_uniformMatrix2fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(transpose,"transpose")
            	HX_STACK_ARG(v,"v")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,uniformMatrix2fv,(void))

void GLRenderContext_obj::uniformMatrix3fv(int location,bool transpose, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1229_uniformMatrix3fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(transpose,"transpose")
            	HX_STACK_ARG(v,"v")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,uniformMatrix3fv,(void))

void GLRenderContext_obj::uniformMatrix4fv(int location,bool transpose, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1236_uniformMatrix4fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(transpose,"transpose")
            	HX_STACK_ARG(v,"v")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,uniformMatrix4fv,(void))

void GLRenderContext_obj::useProgram( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1250_useProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,useProgram,(void))

void GLRenderContext_obj::validateProgram( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1257_validateProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderContext_obj,validateProgram,(void))

void GLRenderContext_obj::vertexAttrib1f(int indx,Float x){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1264_vertexAttrib1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(x,"x")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,vertexAttrib1f,(void))

void GLRenderContext_obj::vertexAttrib1fv(int indx, ::lime::utils::ArrayBufferView values){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1271_vertexAttrib1fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(values,"values")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,vertexAttrib1fv,(void))

void GLRenderContext_obj::vertexAttrib2f(int indx,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1278_vertexAttrib2f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	}


HX_DEFINE_DYNAMIC_FUNC3(GLRenderContext_obj,vertexAttrib2f,(void))

void GLRenderContext_obj::vertexAttrib2fv(int indx, ::lime::utils::ArrayBufferView values){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1285_vertexAttrib2fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(values,"values")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,vertexAttrib2fv,(void))

void GLRenderContext_obj::vertexAttrib3f(int indx,Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1292_vertexAttrib3f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,vertexAttrib3f,(void))

void GLRenderContext_obj::vertexAttrib3fv(int indx, ::lime::utils::ArrayBufferView values){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1299_vertexAttrib3fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(values,"values")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,vertexAttrib3fv,(void))

void GLRenderContext_obj::vertexAttrib4f(int indx,Float x,Float y,Float z,Float w){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1306_vertexAttrib4f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(w,"w")
            	}


HX_DEFINE_DYNAMIC_FUNC5(GLRenderContext_obj,vertexAttrib4f,(void))

void GLRenderContext_obj::vertexAttrib4fv(int indx, ::lime::utils::ArrayBufferView values){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1313_vertexAttrib4fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(values,"values")
            	}


HX_DEFINE_DYNAMIC_FUNC2(GLRenderContext_obj,vertexAttrib4fv,(void))

void GLRenderContext_obj::vertexAttribPointer(int indx,int size,int type,bool normalized,int stride,int offset){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1320_vertexAttribPointer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(normalized,"normalized")
            	HX_STACK_ARG(stride,"stride")
            	HX_STACK_ARG(offset,"offset")
            	}


HX_DEFINE_DYNAMIC_FUNC6(GLRenderContext_obj,vertexAttribPointer,(void))

void GLRenderContext_obj::viewport(int x,int y,int width,int height){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1327_viewport)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLRenderContext_obj,viewport,(void))

int GLRenderContext_obj::get_version(){
            	HX_STACKFRAME(&_hx_pos_a1401d9a0dc31d47_1332_get_version)
            	HX_STACK_THIS(this)
HXLINE(1332)		return (int)2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLRenderContext_obj,get_version,return )


hx::ObjectPtr< GLRenderContext_obj > GLRenderContext_obj::__new() {
	hx::ObjectPtr< GLRenderContext_obj > __this = new GLRenderContext_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< GLRenderContext_obj > GLRenderContext_obj::__alloc(hx::Ctx *_hx_ctx) {
	GLRenderContext_obj *__this = (GLRenderContext_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GLRenderContext_obj), false, "lime.graphics.GLRenderContext"));
	*(void **)__this = GLRenderContext_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GLRenderContext_obj::GLRenderContext_obj()
{
}

hx::Val GLRenderContext_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"CW") ) { return hx::Val( CW); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ONE") ) { return hx::Val( ONE); }
		if (HX_FIELD_EQ(inName,"CCW") ) { return hx::Val( CCW); }
		if (HX_FIELD_EQ(inName,"INT") ) { return hx::Val( INT); }
		if (HX_FIELD_EQ(inName,"RGB") ) { return hx::Val( RGB); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ZERO") ) { return hx::Val( ZERO); }
		if (HX_FIELD_EQ(inName,"BACK") ) { return hx::Val( BACK); }
		if (HX_FIELD_EQ(inName,"BYTE") ) { return hx::Val( BYTE); }
		if (HX_FIELD_EQ(inName,"RGBA") ) { return hx::Val( RGBA); }
		if (HX_FIELD_EQ(inName,"LESS") ) { return hx::Val( LESS); }
		if (HX_FIELD_EQ(inName,"KEEP") ) { return hx::Val( KEEP); }
		if (HX_FIELD_EQ(inName,"INCR") ) { return hx::Val( INCR); }
		if (HX_FIELD_EQ(inName,"DECR") ) { return hx::Val( DECR); }
		if (HX_FIELD_EQ(inName,"BOOL") ) { return hx::Val( BOOL); }
		if (HX_FIELD_EQ(inName,"NONE") ) { return hx::Val( NONE); }
		if (HX_FIELD_EQ(inName,"hint") ) { return hx::Val( hint_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"LINES") ) { return hx::Val( LINES); }
		if (HX_FIELD_EQ(inName,"FRONT") ) { return hx::Val( FRONT); }
		if (HX_FIELD_EQ(inName,"BLEND") ) { return hx::Val( BLEND); }
		if (HX_FIELD_EQ(inName,"SHORT") ) { return hx::Val( SHORT); }
		if (HX_FIELD_EQ(inName,"FLOAT") ) { return hx::Val( FLOAT); }
		if (HX_FIELD_EQ(inName,"ALPHA") ) { return hx::Val( ALPHA); }
		if (HX_FIELD_EQ(inName,"NEVER") ) { return hx::Val( NEVER); }
		if (HX_FIELD_EQ(inName,"EQUAL") ) { return hx::Val( EQUAL); }
		if (HX_FIELD_EQ(inName,"RGBA4") ) { return hx::Val( RGBA4); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"POINTS") ) { return hx::Val( POINTS); }
		if (HX_FIELD_EQ(inName,"DITHER") ) { return hx::Val( DITHER); }
		if (HX_FIELD_EQ(inName,"NICEST") ) { return hx::Val( NICEST); }
		if (HX_FIELD_EQ(inName,"LEQUAL") ) { return hx::Val( LEQUAL); }
		if (HX_FIELD_EQ(inName,"GEQUAL") ) { return hx::Val( GEQUAL); }
		if (HX_FIELD_EQ(inName,"ALWAYS") ) { return hx::Val( ALWAYS); }
		if (HX_FIELD_EQ(inName,"INVERT") ) { return hx::Val( INVERT); }
		if (HX_FIELD_EQ(inName,"VENDOR") ) { return hx::Val( VENDOR); }
		if (HX_FIELD_EQ(inName,"LINEAR") ) { return hx::Val( LINEAR); }
		if (HX_FIELD_EQ(inName,"REPEAT") ) { return hx::Val( REPEAT); }
		if (HX_FIELD_EQ(inName,"RGB565") ) { return hx::Val( RGB565); }
		if (HX_FIELD_EQ(inName,"enable") ) { return hx::Val( enable_dyn()); }
		if (HX_FIELD_EQ(inName,"finish") ) { return hx::Val( finish_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"SAMPLES") ) { return hx::Val( SAMPLES); }
		if (HX_FIELD_EQ(inName,"FASTEST") ) { return hx::Val( FASTEST); }
		if (HX_FIELD_EQ(inName,"BGR_EXT") ) { return hx::Val( BGR_EXT); }
		if (HX_FIELD_EQ(inName,"GREATER") ) { return hx::Val( GREATER); }
		if (HX_FIELD_EQ(inName,"REPLACE") ) { return hx::Val( REPLACE); }
		if (HX_FIELD_EQ(inName,"VERSION") ) { return hx::Val( VERSION); }
		if (HX_FIELD_EQ(inName,"NEAREST") ) { return hx::Val( NEAREST); }
		if (HX_FIELD_EQ(inName,"TEXTURE") ) { return hx::Val( TEXTURE); }
		if (HX_FIELD_EQ(inName,"LOW_INT") ) { return hx::Val( LOW_INT); }
		if (HX_FIELD_EQ(inName,"RGB5_A1") ) { return hx::Val( RGB5_A1); }
		if (HX_FIELD_EQ(inName,"version") ) { return hx::Val( inCallProp == hx::paccAlways ? get_version() : version); }
		if (HX_FIELD_EQ(inName,"disable") ) { return hx::Val( disable_dyn()); }
		if (HX_FIELD_EQ(inName,"scissor") ) { return hx::Val( scissor_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"FUNC_ADD") ) { return hx::Val( FUNC_ADD); }
		if (HX_FIELD_EQ(inName,"NO_ERROR") ) { return hx::Val( NO_ERROR); }
		if (HX_FIELD_EQ(inName,"VIEWPORT") ) { return hx::Val( VIEWPORT); }
		if (HX_FIELD_EQ(inName,"RED_BITS") ) { return hx::Val( RED_BITS); }
		if (HX_FIELD_EQ(inName,"BGRA_EXT") ) { return hx::Val( BGRA_EXT); }
		if (HX_FIELD_EQ(inName,"NOTEQUAL") ) { return hx::Val( NOTEQUAL); }
		if (HX_FIELD_EQ(inName,"RENDERER") ) { return hx::Val( RENDERER); }
		if (HX_FIELD_EQ(inName,"TEXTURE0") ) { return hx::Val( TEXTURE0); }
		if (HX_FIELD_EQ(inName,"TEXTURE1") ) { return hx::Val( TEXTURE1); }
		if (HX_FIELD_EQ(inName,"TEXTURE2") ) { return hx::Val( TEXTURE2); }
		if (HX_FIELD_EQ(inName,"TEXTURE3") ) { return hx::Val( TEXTURE3); }
		if (HX_FIELD_EQ(inName,"TEXTURE4") ) { return hx::Val( TEXTURE4); }
		if (HX_FIELD_EQ(inName,"TEXTURE5") ) { return hx::Val( TEXTURE5); }
		if (HX_FIELD_EQ(inName,"TEXTURE6") ) { return hx::Val( TEXTURE6); }
		if (HX_FIELD_EQ(inName,"TEXTURE7") ) { return hx::Val( TEXTURE7); }
		if (HX_FIELD_EQ(inName,"TEXTURE8") ) { return hx::Val( TEXTURE8); }
		if (HX_FIELD_EQ(inName,"TEXTURE9") ) { return hx::Val( TEXTURE9); }
		if (HX_FIELD_EQ(inName,"INT_VEC2") ) { return hx::Val( INT_VEC2); }
		if (HX_FIELD_EQ(inName,"INT_VEC3") ) { return hx::Val( INT_VEC3); }
		if (HX_FIELD_EQ(inName,"INT_VEC4") ) { return hx::Val( INT_VEC4); }
		if (HX_FIELD_EQ(inName,"HIGH_INT") ) { return hx::Val( HIGH_INT); }
		if (HX_FIELD_EQ(inName,"cullFace") ) { return hx::Val( cullFace_dyn()); }
		if (HX_FIELD_EQ(inName,"getError") ) { return hx::Val( getError_dyn()); }
		if (HX_FIELD_EQ(inName,"isBuffer") ) { return hx::Val( isBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"isShader") ) { return hx::Val( isShader_dyn()); }
		if (HX_FIELD_EQ(inName,"viewport") ) { return hx::Val( viewport_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"LINE_LOOP") ) { return hx::Val( LINE_LOOP); }
		if (HX_FIELD_EQ(inName,"TRIANGLES") ) { return hx::Val( TRIANGLES); }
		if (HX_FIELD_EQ(inName,"SRC_COLOR") ) { return hx::Val( SRC_COLOR); }
		if (HX_FIELD_EQ(inName,"SRC_ALPHA") ) { return hx::Val( SRC_ALPHA); }
		if (HX_FIELD_EQ(inName,"DST_ALPHA") ) { return hx::Val( DST_ALPHA); }
		if (HX_FIELD_EQ(inName,"DST_COLOR") ) { return hx::Val( DST_COLOR); }
		if (HX_FIELD_EQ(inName,"CULL_FACE") ) { return hx::Val( CULL_FACE); }
		if (HX_FIELD_EQ(inName,"BLUE_BITS") ) { return hx::Val( BLUE_BITS); }
		if (HX_FIELD_EQ(inName,"DONT_CARE") ) { return hx::Val( DONT_CARE); }
		if (HX_FIELD_EQ(inName,"LUMINANCE") ) { return hx::Val( LUMINANCE); }
		if (HX_FIELD_EQ(inName,"INCR_WRAP") ) { return hx::Val( INCR_WRAP); }
		if (HX_FIELD_EQ(inName,"DECR_WRAP") ) { return hx::Val( DECR_WRAP); }
		if (HX_FIELD_EQ(inName,"TEXTURE10") ) { return hx::Val( TEXTURE10); }
		if (HX_FIELD_EQ(inName,"TEXTURE11") ) { return hx::Val( TEXTURE11); }
		if (HX_FIELD_EQ(inName,"TEXTURE12") ) { return hx::Val( TEXTURE12); }
		if (HX_FIELD_EQ(inName,"TEXTURE13") ) { return hx::Val( TEXTURE13); }
		if (HX_FIELD_EQ(inName,"TEXTURE14") ) { return hx::Val( TEXTURE14); }
		if (HX_FIELD_EQ(inName,"TEXTURE15") ) { return hx::Val( TEXTURE15); }
		if (HX_FIELD_EQ(inName,"TEXTURE16") ) { return hx::Val( TEXTURE16); }
		if (HX_FIELD_EQ(inName,"TEXTURE17") ) { return hx::Val( TEXTURE17); }
		if (HX_FIELD_EQ(inName,"TEXTURE18") ) { return hx::Val( TEXTURE18); }
		if (HX_FIELD_EQ(inName,"TEXTURE19") ) { return hx::Val( TEXTURE19); }
		if (HX_FIELD_EQ(inName,"TEXTURE20") ) { return hx::Val( TEXTURE20); }
		if (HX_FIELD_EQ(inName,"TEXTURE21") ) { return hx::Val( TEXTURE21); }
		if (HX_FIELD_EQ(inName,"TEXTURE22") ) { return hx::Val( TEXTURE22); }
		if (HX_FIELD_EQ(inName,"TEXTURE23") ) { return hx::Val( TEXTURE23); }
		if (HX_FIELD_EQ(inName,"TEXTURE24") ) { return hx::Val( TEXTURE24); }
		if (HX_FIELD_EQ(inName,"TEXTURE25") ) { return hx::Val( TEXTURE25); }
		if (HX_FIELD_EQ(inName,"TEXTURE26") ) { return hx::Val( TEXTURE26); }
		if (HX_FIELD_EQ(inName,"TEXTURE27") ) { return hx::Val( TEXTURE27); }
		if (HX_FIELD_EQ(inName,"TEXTURE28") ) { return hx::Val( TEXTURE28); }
		if (HX_FIELD_EQ(inName,"TEXTURE29") ) { return hx::Val( TEXTURE29); }
		if (HX_FIELD_EQ(inName,"TEXTURE30") ) { return hx::Val( TEXTURE30); }
		if (HX_FIELD_EQ(inName,"TEXTURE31") ) { return hx::Val( TEXTURE31); }
		if (HX_FIELD_EQ(inName,"BOOL_VEC2") ) { return hx::Val( BOOL_VEC2); }
		if (HX_FIELD_EQ(inName,"BOOL_VEC3") ) { return hx::Val( BOOL_VEC3); }
		if (HX_FIELD_EQ(inName,"BOOL_VEC4") ) { return hx::Val( BOOL_VEC4); }
		if (HX_FIELD_EQ(inName,"LOW_FLOAT") ) { return hx::Val( LOW_FLOAT); }
		if (HX_FIELD_EQ(inName,"blendFunc") ) { return hx::Val( blendFunc_dyn()); }
		if (HX_FIELD_EQ(inName,"colorMask") ) { return hx::Val( colorMask_dyn()); }
		if (HX_FIELD_EQ(inName,"depthFunc") ) { return hx::Val( depthFunc_dyn()); }
		if (HX_FIELD_EQ(inName,"depthMask") ) { return hx::Val( depthMask_dyn()); }
		if (HX_FIELD_EQ(inName,"frontFace") ) { return hx::Val( frontFace_dyn()); }
		if (HX_FIELD_EQ(inName,"isEnabled") ) { return hx::Val( isEnabled_dyn()); }
		if (HX_FIELD_EQ(inName,"isProgram") ) { return hx::Val( isProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"isTexture") ) { return hx::Val( isTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"lineWidth") ) { return hx::Val( lineWidth_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilOp") ) { return hx::Val( stencilOp_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform1f") ) { return hx::Val( uniform1f_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform1i") ) { return hx::Val( uniform1i_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform2f") ) { return hx::Val( uniform2f_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform2i") ) { return hx::Val( uniform2i_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform3f") ) { return hx::Val( uniform3f_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform3i") ) { return hx::Val( uniform3i_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform4f") ) { return hx::Val( uniform4f_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform4i") ) { return hx::Val( uniform4i_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"LINE_STRIP") ) { return hx::Val( LINE_STRIP); }
		if (HX_FIELD_EQ(inName,"DEPTH_TEST") ) { return hx::Val( DEPTH_TEST); }
		if (HX_FIELD_EQ(inName,"LINE_WIDTH") ) { return hx::Val( LINE_WIDTH); }
		if (HX_FIELD_EQ(inName,"FRONT_FACE") ) { return hx::Val( FRONT_FACE); }
		if (HX_FIELD_EQ(inName,"DEPTH_FUNC") ) { return hx::Val( DEPTH_FUNC); }
		if (HX_FIELD_EQ(inName,"GREEN_BITS") ) { return hx::Val( GREEN_BITS); }
		if (HX_FIELD_EQ(inName,"ALPHA_BITS") ) { return hx::Val( ALPHA_BITS); }
		if (HX_FIELD_EQ(inName,"DEPTH_BITS") ) { return hx::Val( DEPTH_BITS); }
		if (HX_FIELD_EQ(inName,"TEXTURE_2D") ) { return hx::Val( TEXTURE_2D); }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC2") ) { return hx::Val( FLOAT_VEC2); }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC3") ) { return hx::Val( FLOAT_VEC3); }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC4") ) { return hx::Val( FLOAT_VEC4); }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT2") ) { return hx::Val( FLOAT_MAT2); }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT3") ) { return hx::Val( FLOAT_MAT3); }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT4") ) { return hx::Val( FLOAT_MAT4); }
		if (HX_FIELD_EQ(inName,"SAMPLER_2D") ) { return hx::Val( SAMPLER_2D); }
		if (HX_FIELD_EQ(inName,"HIGH_FLOAT") ) { return hx::Val( HIGH_FLOAT); }
		if (HX_FIELD_EQ(inName,"MEDIUM_INT") ) { return hx::Val( MEDIUM_INT); }
		if (HX_FIELD_EQ(inName,"bindBuffer") ) { return hx::Val( bindBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"blendColor") ) { return hx::Val( blendColor_dyn()); }
		if (HX_FIELD_EQ(inName,"bufferData") ) { return hx::Val( bufferData_dyn()); }
		if (HX_FIELD_EQ(inName,"clearColor") ) { return hx::Val( clearColor_dyn()); }
		if (HX_FIELD_EQ(inName,"clearDepth") ) { return hx::Val( clearDepth_dyn()); }
		if (HX_FIELD_EQ(inName,"depthRange") ) { return hx::Val( depthRange_dyn()); }
		if (HX_FIELD_EQ(inName,"drawArrays") ) { return hx::Val( drawArrays_dyn()); }
		if (HX_FIELD_EQ(inName,"getUniform") ) { return hx::Val( getUniform_dyn()); }
		if (HX_FIELD_EQ(inName,"readPixels") ) { return hx::Val( readPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"texImage2D") ) { return hx::Val( texImage2D_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform1fv") ) { return hx::Val( uniform1fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform1iv") ) { return hx::Val( uniform1iv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform2fv") ) { return hx::Val( uniform2fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform2iv") ) { return hx::Val( uniform2iv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform3fv") ) { return hx::Val( uniform3fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform3iv") ) { return hx::Val( uniform3iv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform4fv") ) { return hx::Val( uniform4fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform4iv") ) { return hx::Val( uniform4iv_dyn()); }
		if (HX_FIELD_EQ(inName,"useProgram") ) { return hx::Val( useProgram_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BLEND_COLOR") ) { return hx::Val( BLEND_COLOR); }
		if (HX_FIELD_EQ(inName,"STREAM_DRAW") ) { return hx::Val( STREAM_DRAW); }
		if (HX_FIELD_EQ(inName,"STATIC_DRAW") ) { return hx::Val( STATIC_DRAW); }
		if (HX_FIELD_EQ(inName,"BUFFER_SIZE") ) { return hx::Val( BUFFER_SIZE); }
		if (HX_FIELD_EQ(inName,"DEPTH_RANGE") ) { return hx::Val( DEPTH_RANGE); }
		if (HX_FIELD_EQ(inName,"STENCIL_REF") ) { return hx::Val( STENCIL_REF); }
		if (HX_FIELD_EQ(inName,"SCISSOR_BOX") ) { return hx::Val( SCISSOR_BOX); }
		if (HX_FIELD_EQ(inName,"SHADER_TYPE") ) { return hx::Val( SHADER_TYPE); }
		if (HX_FIELD_EQ(inName,"LINK_STATUS") ) { return hx::Val( LINK_STATUS); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER") ) { return hx::Val( FRAMEBUFFER); }
		if (HX_FIELD_EQ(inName,"bindTexture") ) { return hx::Val( bindTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"linkProgram") ) { return hx::Val( linkProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"pixelStorei") ) { return hx::Val( pixelStorei_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilFunc") ) { return hx::Val( stencilFunc_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilMask") ) { return hx::Val( stencilMask_dyn()); }
		if (HX_FIELD_EQ(inName,"get_version") ) { return hx::Val( get_version_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"TRIANGLE_FAN") ) { return hx::Val( TRIANGLE_FAN); }
		if (HX_FIELD_EQ(inName,"ARRAY_BUFFER") ) { return hx::Val( ARRAY_BUFFER); }
		if (HX_FIELD_EQ(inName,"DYNAMIC_DRAW") ) { return hx::Val( DYNAMIC_DRAW); }
		if (HX_FIELD_EQ(inName,"BUFFER_USAGE") ) { return hx::Val( BUFFER_USAGE); }
		if (HX_FIELD_EQ(inName,"STENCIL_TEST") ) { return hx::Val( STENCIL_TEST); }
		if (HX_FIELD_EQ(inName,"SCISSOR_TEST") ) { return hx::Val( SCISSOR_TEST); }
		if (HX_FIELD_EQ(inName,"INVALID_ENUM") ) { return hx::Val( INVALID_ENUM); }
		if (HX_FIELD_EQ(inName,"STENCIL_FUNC") ) { return hx::Val( STENCIL_FUNC); }
		if (HX_FIELD_EQ(inName,"STENCIL_FAIL") ) { return hx::Val( STENCIL_FAIL); }
		if (HX_FIELD_EQ(inName,"STENCIL_BITS") ) { return hx::Val( STENCIL_BITS); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_INT") ) { return hx::Val( UNSIGNED_INT); }
		if (HX_FIELD_EQ(inName,"SAMPLER_CUBE") ) { return hx::Val( SAMPLER_CUBE); }
		if (HX_FIELD_EQ(inName,"POINT_SPRITE") ) { return hx::Val( POINT_SPRITE); }
		if (HX_FIELD_EQ(inName,"MEDIUM_FLOAT") ) { return hx::Val( MEDIUM_FLOAT); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER") ) { return hx::Val( RENDERBUFFER); }
		if (HX_FIELD_EQ(inName,"attachShader") ) { return hx::Val( attachShader_dyn()); }
		if (HX_FIELD_EQ(inName,"clearStencil") ) { return hx::Val( clearStencil_dyn()); }
		if (HX_FIELD_EQ(inName,"createBuffer") ) { return hx::Val( createBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"createShader") ) { return hx::Val( createShader_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteBuffer") ) { return hx::Val( deleteBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteShader") ) { return hx::Val( deleteShader_dyn()); }
		if (HX_FIELD_EQ(inName,"detachShader") ) { return hx::Val( detachShader_dyn()); }
		if (HX_FIELD_EQ(inName,"drawElements") ) { return hx::Val( drawElements_dyn()); }
		if (HX_FIELD_EQ(inName,"getExtension") ) { return hx::Val( getExtension_dyn()); }
		if (HX_FIELD_EQ(inName,"getParameter") ) { return hx::Val( getParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"shaderSource") ) { return hx::Val( shaderSource_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"FUNC_SUBTRACT") ) { return hx::Val( FUNC_SUBTRACT); }
		if (HX_FIELD_EQ(inName,"BLEND_DST_RGB") ) { return hx::Val( BLEND_DST_RGB); }
		if (HX_FIELD_EQ(inName,"BLEND_SRC_RGB") ) { return hx::Val( BLEND_SRC_RGB); }
		if (HX_FIELD_EQ(inName,"INVALID_VALUE") ) { return hx::Val( INVALID_VALUE); }
		if (HX_FIELD_EQ(inName,"OUT_OF_MEMORY") ) { return hx::Val( OUT_OF_MEMORY); }
		if (HX_FIELD_EQ(inName,"SUBPIXEL_BITS") ) { return hx::Val( SUBPIXEL_BITS); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_BYTE") ) { return hx::Val( UNSIGNED_BYTE); }
		if (HX_FIELD_EQ(inName,"VERTEX_SHADER") ) { return hx::Val( VERTEX_SHADER); }
		if (HX_FIELD_EQ(inName,"DELETE_STATUS") ) { return hx::Val( DELETE_STATUS); }
		if (HX_FIELD_EQ(inName,"CLAMP_TO_EDGE") ) { return hx::Val( CLAMP_TO_EDGE); }
		if (HX_FIELD_EQ(inName,"STENCIL_INDEX") ) { return hx::Val( STENCIL_INDEX); }
		if (HX_FIELD_EQ(inName,"DEPTH_STENCIL") ) { return hx::Val( DEPTH_STENCIL); }
		if (HX_FIELD_EQ(inName,"activeTexture") ) { return hx::Val( activeTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"blendEquation") ) { return hx::Val( blendEquation_dyn()); }
		if (HX_FIELD_EQ(inName,"bufferSubData") ) { return hx::Val( bufferSubData_dyn()); }
		if (HX_FIELD_EQ(inName,"compileShader") ) { return hx::Val( compileShader_dyn()); }
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteProgram") ) { return hx::Val( deleteProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteTexture") ) { return hx::Val( deleteTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"isContextLost") ) { return hx::Val( isContextLost_dyn()); }
		if (HX_FIELD_EQ(inName,"isFramebuffer") ) { return hx::Val( isFramebuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"polygonOffset") ) { return hx::Val( polygonOffset_dyn()); }
		if (HX_FIELD_EQ(inName,"texParameterf") ) { return hx::Val( texParameterf_dyn()); }
		if (HX_FIELD_EQ(inName,"texParameteri") ) { return hx::Val( texParameteri_dyn()); }
		if (HX_FIELD_EQ(inName,"texSubImage2D") ) { return hx::Val( texSubImage2D_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"TRIANGLE_STRIP") ) { return hx::Val( TRIANGLE_STRIP); }
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION") ) { return hx::Val( BLEND_EQUATION); }
		if (HX_FIELD_EQ(inName,"CONSTANT_COLOR") ) { return hx::Val( CONSTANT_COLOR); }
		if (HX_FIELD_EQ(inName,"CONSTANT_ALPHA") ) { return hx::Val( CONSTANT_ALPHA); }
		if (HX_FIELD_EQ(inName,"FRONT_AND_BACK") ) { return hx::Val( FRONT_AND_BACK); }
		if (HX_FIELD_EQ(inName,"CULL_FACE_MODE") ) { return hx::Val( CULL_FACE_MODE); }
		if (HX_FIELD_EQ(inName,"PACK_ALIGNMENT") ) { return hx::Val( PACK_ALIGNMENT); }
		if (HX_FIELD_EQ(inName,"SAMPLE_BUFFERS") ) { return hx::Val( SAMPLE_BUFFERS); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT") ) { return hx::Val( UNSIGNED_SHORT); }
		if (HX_FIELD_EQ(inName,"TEXTURE_WRAP_S") ) { return hx::Val( TEXTURE_WRAP_S); }
		if (HX_FIELD_EQ(inName,"TEXTURE_WRAP_T") ) { return hx::Val( TEXTURE_WRAP_T); }
		if (HX_FIELD_EQ(inName,"ACTIVE_TEXTURE") ) { return hx::Val( ACTIVE_TEXTURE); }
		if (HX_FIELD_EQ(inName,"COMPILE_STATUS") ) { return hx::Val( COMPILE_STATUS); }
		if (HX_FIELD_EQ(inName,"STENCIL_INDEX8") ) { return hx::Val( STENCIL_INDEX8); }
		if (HX_FIELD_EQ(inName,"copyTexImage2D") ) { return hx::Val( copyTexImage2D_dyn()); }
		if (HX_FIELD_EQ(inName,"generateMipmap") ) { return hx::Val( generateMipmap_dyn()); }
		if (HX_FIELD_EQ(inName,"isRenderbuffer") ) { return hx::Val( isRenderbuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"sampleCoverage") ) { return hx::Val( sampleCoverage_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib1f") ) { return hx::Val( vertexAttrib1f_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib2f") ) { return hx::Val( vertexAttrib2f_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib3f") ) { return hx::Val( vertexAttrib3f_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib4f") ) { return hx::Val( vertexAttrib4f_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"BLEND_DST_ALPHA") ) { return hx::Val( BLEND_DST_ALPHA); }
		if (HX_FIELD_EQ(inName,"BLEND_SRC_ALPHA") ) { return hx::Val( BLEND_SRC_ALPHA); }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE") ) { return hx::Val( SAMPLE_COVERAGE); }
		if (HX_FIELD_EQ(inName,"DEPTH_WRITEMASK") ) { return hx::Val( DEPTH_WRITEMASK); }
		if (HX_FIELD_EQ(inName,"COLOR_WRITEMASK") ) { return hx::Val( COLOR_WRITEMASK); }
		if (HX_FIELD_EQ(inName,"DEPTH_COMPONENT") ) { return hx::Val( DEPTH_COMPONENT); }
		if (HX_FIELD_EQ(inName,"LUMINANCE_ALPHA") ) { return hx::Val( LUMINANCE_ALPHA); }
		if (HX_FIELD_EQ(inName,"FRAGMENT_SHADER") ) { return hx::Val( FRAGMENT_SHADER); }
		if (HX_FIELD_EQ(inName,"VALIDATE_STATUS") ) { return hx::Val( VALIDATE_STATUS); }
		if (HX_FIELD_EQ(inName,"ACTIVE_UNIFORMS") ) { return hx::Val( ACTIVE_UNIFORMS); }
		if (HX_FIELD_EQ(inName,"CURRENT_PROGRAM") ) { return hx::Val( CURRENT_PROGRAM); }
		if (HX_FIELD_EQ(inName,"MIRRORED_REPEAT") ) { return hx::Val( MIRRORED_REPEAT); }
		if (HX_FIELD_EQ(inName,"bindFramebuffer") ) { return hx::Val( bindFramebuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getActiveAttrib") ) { return hx::Val( getActiveAttrib_dyn()); }
		if (HX_FIELD_EQ(inName,"getShaderSource") ) { return hx::Val( getShaderSource_dyn()); }
		if (HX_FIELD_EQ(inName,"getTexParameter") ) { return hx::Val( getTexParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"getVertexAttrib") ) { return hx::Val( getVertexAttrib_dyn()); }
		if (HX_FIELD_EQ(inName,"validateProgram") ) { return hx::Val( validateProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib1fv") ) { return hx::Val( vertexAttrib1fv_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib2fv") ) { return hx::Val( vertexAttrib2fv_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib3fv") ) { return hx::Val( vertexAttrib3fv_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib4fv") ) { return hx::Val( vertexAttrib4fv_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"DEPTH_BUFFER_BIT") ) { return hx::Val( DEPTH_BUFFER_BIT); }
		if (HX_FIELD_EQ(inName,"COLOR_BUFFER_BIT") ) { return hx::Val( COLOR_BUFFER_BIT); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_REF") ) { return hx::Val( STENCIL_BACK_REF); }
		if (HX_FIELD_EQ(inName,"UNPACK_ALIGNMENT") ) { return hx::Val( UNPACK_ALIGNMENT); }
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_SIZE") ) { return hx::Val( MAX_TEXTURE_SIZE); }
		if (HX_FIELD_EQ(inName,"ATTACHED_SHADERS") ) { return hx::Val( ATTACHED_SHADERS); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP") ) { return hx::Val( TEXTURE_CUBE_MAP); }
		if (HX_FIELD_EQ(inName,"DEPTH_ATTACHMENT") ) { return hx::Val( DEPTH_ATTACHMENT); }
		if (HX_FIELD_EQ(inName,"bindRenderbuffer") ) { return hx::Val( bindRenderbuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getActiveUniform") ) { return hx::Val( getActiveUniform_dyn()); }
		if (HX_FIELD_EQ(inName,"getShaderInfoLog") ) { return hx::Val( getShaderInfoLog_dyn()); }
		if (HX_FIELD_EQ(inName,"uniformMatrix2fv") ) { return hx::Val( uniformMatrix2fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniformMatrix3fv") ) { return hx::Val( uniformMatrix3fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniformMatrix4fv") ) { return hx::Val( uniformMatrix4fv_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"INVALID_OPERATION") ) { return hx::Val( INVALID_OPERATION); }
		if (HX_FIELD_EQ(inName,"DEPTH_CLEAR_VALUE") ) { return hx::Val( DEPTH_CLEAR_VALUE); }
		if (HX_FIELD_EQ(inName,"STENCIL_WRITEMASK") ) { return hx::Val( STENCIL_WRITEMASK); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_FUNC") ) { return hx::Val( STENCIL_BACK_FUNC); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_FAIL") ) { return hx::Val( STENCIL_BACK_FAIL); }
		if (HX_FIELD_EQ(inName,"COLOR_CLEAR_VALUE") ) { return hx::Val( COLOR_CLEAR_VALUE); }
		if (HX_FIELD_EQ(inName,"MAX_VIEWPORT_DIMS") ) { return hx::Val( MAX_VIEWPORT_DIMS); }
		if (HX_FIELD_EQ(inName,"ACTIVE_ATTRIBUTES") ) { return hx::Val( ACTIVE_ATTRIBUTES); }
		if (HX_FIELD_EQ(inName,"DEPTH_COMPONENT16") ) { return hx::Val( DEPTH_COMPONENT16); }
		if (HX_FIELD_EQ(inName,"COLOR_ATTACHMENT0") ) { return hx::Val( COLOR_ATTACHMENT0); }
		if (HX_FIELD_EQ(inName,"blendFuncSeparate") ) { return hx::Val( blendFuncSeparate_dyn()); }
		if (HX_FIELD_EQ(inName,"copyTexSubImage2D") ) { return hx::Val( copyTexSubImage2D_dyn()); }
		if (HX_FIELD_EQ(inName,"createFramebuffer") ) { return hx::Val( createFramebuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteFramebuffer") ) { return hx::Val( deleteFramebuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getAttribLocation") ) { return hx::Val( getAttribLocation_dyn()); }
		if (HX_FIELD_EQ(inName,"getProgramInfoLog") ) { return hx::Val( getProgramInfoLog_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilOpSeparate") ) { return hx::Val( stencilOpSeparate_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"STENCIL_BUFFER_BIT") ) { return hx::Val( STENCIL_BUFFER_BIT); }
		if (HX_FIELD_EQ(inName,"SRC_ALPHA_SATURATE") ) { return hx::Val( SRC_ALPHA_SATURATE); }
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION_RGB") ) { return hx::Val( BLEND_EQUATION_RGB); }
		if (HX_FIELD_EQ(inName,"STENCIL_VALUE_MASK") ) { return hx::Val( STENCIL_VALUE_MASK); }
		if (HX_FIELD_EQ(inName,"TEXTURE_BINDING_2D") ) { return hx::Val( TEXTURE_BINDING_2D); }
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_ATTRIBS") ) { return hx::Val( MAX_VERTEX_ATTRIBS); }
		if (HX_FIELD_EQ(inName,"TEXTURE_MAG_FILTER") ) { return hx::Val( TEXTURE_MAG_FILTER); }
		if (HX_FIELD_EQ(inName,"TEXTURE_MIN_FILTER") ) { return hx::Val( TEXTURE_MIN_FILTER); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_WIDTH") ) { return hx::Val( RENDERBUFFER_WIDTH); }
		if (HX_FIELD_EQ(inName,"STENCIL_ATTACHMENT") ) { return hx::Val( STENCIL_ATTACHMENT); }
		if (HX_FIELD_EQ(inName,"CONTEXT_LOST_WEBGL") ) { return hx::Val( CONTEXT_LOST_WEBGL); }
		if (HX_FIELD_EQ(inName,"bindAttribLocation") ) { return hx::Val( bindAttribLocation_dyn()); }
		if (HX_FIELD_EQ(inName,"createRenderbuffer") ) { return hx::Val( createRenderbuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteRenderbuffer") ) { return hx::Val( deleteRenderbuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getAttachedShaders") ) { return hx::Val( getAttachedShaders_dyn()); }
		if (HX_FIELD_EQ(inName,"getBufferParameter") ) { return hx::Val( getBufferParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"getShaderParameter") ) { return hx::Val( getShaderParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"getUniformLocation") ) { return hx::Val( getUniformLocation_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"ONE_MINUS_SRC_COLOR") ) { return hx::Val( ONE_MINUS_SRC_COLOR); }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_SRC_ALPHA") ) { return hx::Val( ONE_MINUS_SRC_ALPHA); }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_DST_ALPHA") ) { return hx::Val( ONE_MINUS_DST_ALPHA); }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_DST_COLOR") ) { return hx::Val( ONE_MINUS_DST_COLOR); }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_FILL") ) { return hx::Val( POLYGON_OFFSET_FILL); }
		if (HX_FIELD_EQ(inName,"STENCIL_CLEAR_VALUE") ) { return hx::Val( STENCIL_CLEAR_VALUE); }
		if (HX_FIELD_EQ(inName,"MAX_VARYING_VECTORS") ) { return hx::Val( MAX_VARYING_VECTORS); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_HEIGHT") ) { return hx::Val( RENDERBUFFER_HEIGHT); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_BINDING") ) { return hx::Val( FRAMEBUFFER_BINDING); }
		if (HX_FIELD_EQ(inName,"UNPACK_FLIP_Y_WEBGL") ) { return hx::Val( UNPACK_FLIP_Y_WEBGL); }
		if (HX_FIELD_EQ(inName,"getProgramParameter") ) { return hx::Val( getProgramParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"renderbufferStorage") ) { return hx::Val( renderbufferStorage_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilFuncSeparate") ) { return hx::Val( stencilFuncSeparate_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilMaskSeparate") ) { return hx::Val( stencilMaskSeparate_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttribPointer") ) { return hx::Val( vertexAttribPointer_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION_ALPHA") ) { return hx::Val( BLEND_EQUATION_ALPHA); }
		if (HX_FIELD_EQ(inName,"ELEMENT_ARRAY_BUFFER") ) { return hx::Val( ELEMENT_ARRAY_BUFFER); }
		if (HX_FIELD_EQ(inName,"ARRAY_BUFFER_BINDING") ) { return hx::Val( ARRAY_BUFFER_BINDING); }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_UNITS") ) { return hx::Val( POLYGON_OFFSET_UNITS); }
		if (HX_FIELD_EQ(inName,"GENERATE_MIPMAP_HINT") ) { return hx::Val( GENERATE_MIPMAP_HINT); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_5_6_5") ) { return hx::Val( UNSIGNED_SHORT_5_6_5); }
		if (HX_FIELD_EQ(inName,"LINEAR_MIPMAP_LINEAR") ) { return hx::Val( LINEAR_MIPMAP_LINEAR); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_COMPLETE") ) { return hx::Val( FRAMEBUFFER_COMPLETE); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_BINDING") ) { return hx::Val( RENDERBUFFER_BINDING); }
		if (HX_FIELD_EQ(inName,"compressedTexImage2D") ) { return hx::Val( compressedTexImage2D_dyn()); }
		if (HX_FIELD_EQ(inName,"framebufferTexture2D") ) { return hx::Val( framebufferTexture2D_dyn()); }
		if (HX_FIELD_EQ(inName,"getContextAttributes") ) { return hx::Val( getContextAttributes_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"FUNC_REVERSE_SUBTRACT") ) { return hx::Val( FUNC_REVERSE_SUBTRACT); }
		if (HX_FIELD_EQ(inName,"CURRENT_VERTEX_ATTRIB") ) { return hx::Val( CURRENT_VERTEX_ATTRIB); }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_FACTOR") ) { return hx::Val( POLYGON_OFFSET_FACTOR); }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE_VALUE") ) { return hx::Val( SAMPLE_COVERAGE_VALUE); }
		if (HX_FIELD_EQ(inName,"LINEAR_MIPMAP_NEAREST") ) { return hx::Val( LINEAR_MIPMAP_NEAREST); }
		if (HX_FIELD_EQ(inName,"NEAREST_MIPMAP_LINEAR") ) { return hx::Val( NEAREST_MIPMAP_LINEAR); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_RED_SIZE") ) { return hx::Val( RENDERBUFFER_RED_SIZE); }
		if (HX_FIELD_EQ(inName,"MAX_RENDERBUFFER_SIZE") ) { return hx::Val( MAX_RENDERBUFFER_SIZE); }
		if (HX_FIELD_EQ(inName,"BROWSER_DEFAULT_WEBGL") ) { return hx::Val( BROWSER_DEFAULT_WEBGL); }
		if (HX_FIELD_EQ(inName,"blendEquationSeparate") ) { return hx::Val( blendEquationSeparate_dyn()); }
		if (HX_FIELD_EQ(inName,"getVertexAttribOffset") ) { return hx::Val( getVertexAttribOffset_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_WRITEMASK") ) { return hx::Val( STENCIL_BACK_WRITEMASK); }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE_INVERT") ) { return hx::Val( SAMPLE_COVERAGE_INVERT); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_4_4_4_4") ) { return hx::Val( UNSIGNED_SHORT_4_4_4_4); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_5_5_5_1") ) { return hx::Val( UNSIGNED_SHORT_5_5_5_1); }
		if (HX_FIELD_EQ(inName,"NEAREST_MIPMAP_NEAREST") ) { return hx::Val( NEAREST_MIPMAP_NEAREST); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_BLUE_SIZE") ) { return hx::Val( RENDERBUFFER_BLUE_SIZE); }
		if (HX_FIELD_EQ(inName,"checkFramebufferStatus") ) { return hx::Val( checkFramebufferStatus_dyn()); }
		if (HX_FIELD_EQ(inName,"getSupportedExtensions") ) { return hx::Val( getSupportedExtensions_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"STENCIL_PASS_DEPTH_FAIL") ) { return hx::Val( STENCIL_PASS_DEPTH_FAIL); }
		if (HX_FIELD_EQ(inName,"STENCIL_PASS_DEPTH_PASS") ) { return hx::Val( STENCIL_PASS_DEPTH_PASS); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_VALUE_MASK") ) { return hx::Val( STENCIL_BACK_VALUE_MASK); }
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_IMAGE_UNITS") ) { return hx::Val( MAX_TEXTURE_IMAGE_UNITS); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_GREEN_SIZE") ) { return hx::Val( RENDERBUFFER_GREEN_SIZE); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_ALPHA_SIZE") ) { return hx::Val( RENDERBUFFER_ALPHA_SIZE); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_DEPTH_SIZE") ) { return hx::Val( RENDERBUFFER_DEPTH_SIZE); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_UNSUPPORTED") ) { return hx::Val( FRAMEBUFFER_UNSUPPORTED); }
		if (HX_FIELD_EQ(inName,"compressedTexSubImage2D") ) { return hx::Val( compressedTexSubImage2D_dyn()); }
		if (HX_FIELD_EQ(inName,"enableVertexAttribArray") ) { return hx::Val( enableVertexAttribArray_dyn()); }
		if (HX_FIELD_EQ(inName,"framebufferRenderbuffer") ) { return hx::Val( framebufferRenderbuffer_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"ONE_MINUS_CONSTANT_COLOR") ) { return hx::Val( ONE_MINUS_CONSTANT_COLOR); }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_CONSTANT_ALPHA") ) { return hx::Val( ONE_MINUS_CONSTANT_ALPHA); }
		if (HX_FIELD_EQ(inName,"SAMPLE_ALPHA_TO_COVERAGE") ) { return hx::Val( SAMPLE_ALPHA_TO_COVERAGE); }
		if (HX_FIELD_EQ(inName,"ALIASED_POINT_SIZE_RANGE") ) { return hx::Val( ALIASED_POINT_SIZE_RANGE); }
		if (HX_FIELD_EQ(inName,"ALIASED_LINE_WIDTH_RANGE") ) { return hx::Val( ALIASED_LINE_WIDTH_RANGE); }
		if (HX_FIELD_EQ(inName,"SHADING_LANGUAGE_VERSION") ) { return hx::Val( SHADING_LANGUAGE_VERSION); }
		if (HX_FIELD_EQ(inName,"TEXTURE_BINDING_CUBE_MAP") ) { return hx::Val( TEXTURE_BINDING_CUBE_MAP); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_SIZE") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_SIZE); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_TYPE") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_TYPE); }
		if (HX_FIELD_EQ(inName,"DEPTH_STENCIL_ATTACHMENT") ) { return hx::Val( DEPTH_STENCIL_ATTACHMENT); }
		if (HX_FIELD_EQ(inName,"disableVertexAttribArray") ) { return hx::Val( disableVertexAttribArray_dyn()); }
		if (HX_FIELD_EQ(inName,"getRenderbufferParameter") ) { return hx::Val( getRenderbufferParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"getShaderPrecisionFormat") ) { return hx::Val( getShaderPrecisionFormat_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"MAX_CUBE_MAP_TEXTURE_SIZE") ) { return hx::Val( MAX_CUBE_MAP_TEXTURE_SIZE); }
		if (HX_FIELD_EQ(inName,"VERTEX_PROGRAM_POINT_SIZE") ) { return hx::Val( VERTEX_PROGRAM_POINT_SIZE); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_STENCIL_SIZE") ) { return hx::Val( RENDERBUFFER_STENCIL_SIZE); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"COMPRESSED_TEXTURE_FORMATS") ) { return hx::Val( COMPRESSED_TEXTURE_FORMATS); }
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_UNIFORM_VECTORS") ) { return hx::Val( MAX_VERTEX_UNIFORM_VECTORS); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_STRIDE") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_STRIDE); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_X") ) { return hx::Val( TEXTURE_CUBE_MAP_POSITIVE_X); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_X") ) { return hx::Val( TEXTURE_CUBE_MAP_NEGATIVE_X); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_Y") ) { return hx::Val( TEXTURE_CUBE_MAP_POSITIVE_Y); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_Y") ) { return hx::Val( TEXTURE_CUBE_MAP_NEGATIVE_Y); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_Z") ) { return hx::Val( TEXTURE_CUBE_MAP_POSITIVE_Z); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_Z") ) { return hx::Val( TEXTURE_CUBE_MAP_NEGATIVE_Z); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_ENABLED") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_ENABLED); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_POINTER") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_POINTER); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"ELEMENT_ARRAY_BUFFER_BINDING") ) { return hx::Val( ELEMENT_ARRAY_BUFFER_BINDING); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_PASS_DEPTH_FAIL") ) { return hx::Val( STENCIL_BACK_PASS_DEPTH_FAIL); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_PASS_DEPTH_PASS") ) { return hx::Val( STENCIL_BACK_PASS_DEPTH_PASS); }
		if (HX_FIELD_EQ(inName,"MAX_FRAGMENT_UNIFORM_VECTORS") ) { return hx::Val( MAX_FRAGMENT_UNIFORM_VECTORS); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_INTERNAL_FORMAT") ) { return hx::Val( RENDERBUFFER_INTERNAL_FORMAT); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"INVALID_FRAMEBUFFER_OPERATION") ) { return hx::Val( INVALID_FRAMEBUFFER_OPERATION); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_TEXTURE_IMAGE_UNITS") ) { return hx::Val( MAX_VERTEX_TEXTURE_IMAGE_UNITS); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_NORMALIZED") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_NORMALIZED); }
		if (HX_FIELD_EQ(inName,"UNPACK_PREMULTIPLY_ALPHA_WEBGL") ) { return hx::Val( UNPACK_PREMULTIPLY_ALPHA_WEBGL); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"MAX_COMBINED_TEXTURE_IMAGE_UNITS") ) { return hx::Val( MAX_COMBINED_TEXTURE_IMAGE_UNITS); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT") ) { return hx::Val( FRAMEBUFFER_INCOMPLETE_ATTACHMENT); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_DIMENSIONS") ) { return hx::Val( FRAMEBUFFER_INCOMPLETE_DIMENSIONS); }
		if (HX_FIELD_EQ(inName,"getFramebufferAttachmentParameter") ) { return hx::Val( getFramebufferAttachmentParameter_dyn()); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_BUFFER_BINDING); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE") ) { return hx::Val( FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME") ) { return hx::Val( FRAMEBUFFER_ATTACHMENT_OBJECT_NAME); }
		if (HX_FIELD_EQ(inName,"UNPACK_COLORSPACE_CONVERSION_WEBGL") ) { return hx::Val( UNPACK_COLORSPACE_CONVERSION_WEBGL); }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL") ) { return hx::Val( FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL); }
		break;
	case 41:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT") ) { return hx::Val( FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT); }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE") ) { return hx::Val( FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GLRenderContext_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"CW") ) { CW=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ONE") ) { ONE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CCW") ) { CCW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INT") ) { INT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RGB") ) { RGB=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ZERO") ) { ZERO=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BACK") ) { BACK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BYTE") ) { BYTE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RGBA") ) { RGBA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LESS") ) { LESS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"KEEP") ) { KEEP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INCR") ) { INCR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DECR") ) { DECR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BOOL") ) { BOOL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NONE") ) { NONE=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"LINES") ) { LINES=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRONT") ) { FRONT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND") ) { BLEND=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SHORT") ) { SHORT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT") ) { FLOAT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ALPHA") ) { ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NEVER") ) { NEVER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"EQUAL") ) { EQUAL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RGBA4") ) { RGBA4=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"POINTS") ) { POINTS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DITHER") ) { DITHER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NICEST") ) { NICEST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LEQUAL") ) { LEQUAL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GEQUAL") ) { GEQUAL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ALWAYS") ) { ALWAYS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INVERT") ) { INVERT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VENDOR") ) { VENDOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LINEAR") ) { LINEAR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"REPEAT") ) { REPEAT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RGB565") ) { RGB565=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"SAMPLES") ) { SAMPLES=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FASTEST") ) { FASTEST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BGR_EXT") ) { BGR_EXT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GREATER") ) { GREATER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"REPLACE") ) { REPLACE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERSION") ) { VERSION=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NEAREST") ) { NEAREST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE") ) { TEXTURE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LOW_INT") ) { LOW_INT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RGB5_A1") ) { RGB5_A1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"version") ) { version=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"FUNC_ADD") ) { FUNC_ADD=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NO_ERROR") ) { NO_ERROR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VIEWPORT") ) { VIEWPORT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RED_BITS") ) { RED_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BGRA_EXT") ) { BGRA_EXT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NOTEQUAL") ) { NOTEQUAL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERER") ) { RENDERER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE0") ) { TEXTURE0=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE1") ) { TEXTURE1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE2") ) { TEXTURE2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE3") ) { TEXTURE3=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE4") ) { TEXTURE4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE5") ) { TEXTURE5=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE6") ) { TEXTURE6=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE7") ) { TEXTURE7=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE8") ) { TEXTURE8=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE9") ) { TEXTURE9=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INT_VEC2") ) { INT_VEC2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INT_VEC3") ) { INT_VEC3=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INT_VEC4") ) { INT_VEC4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"HIGH_INT") ) { HIGH_INT=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"LINE_LOOP") ) { LINE_LOOP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TRIANGLES") ) { TRIANGLES=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SRC_COLOR") ) { SRC_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SRC_ALPHA") ) { SRC_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DST_ALPHA") ) { DST_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DST_COLOR") ) { DST_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CULL_FACE") ) { CULL_FACE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLUE_BITS") ) { BLUE_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DONT_CARE") ) { DONT_CARE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LUMINANCE") ) { LUMINANCE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INCR_WRAP") ) { INCR_WRAP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DECR_WRAP") ) { DECR_WRAP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE10") ) { TEXTURE10=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE11") ) { TEXTURE11=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE12") ) { TEXTURE12=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE13") ) { TEXTURE13=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE14") ) { TEXTURE14=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE15") ) { TEXTURE15=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE16") ) { TEXTURE16=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE17") ) { TEXTURE17=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE18") ) { TEXTURE18=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE19") ) { TEXTURE19=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE20") ) { TEXTURE20=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE21") ) { TEXTURE21=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE22") ) { TEXTURE22=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE23") ) { TEXTURE23=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE24") ) { TEXTURE24=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE25") ) { TEXTURE25=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE26") ) { TEXTURE26=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE27") ) { TEXTURE27=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE28") ) { TEXTURE28=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE29") ) { TEXTURE29=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE30") ) { TEXTURE30=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE31") ) { TEXTURE31=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BOOL_VEC2") ) { BOOL_VEC2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BOOL_VEC3") ) { BOOL_VEC3=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BOOL_VEC4") ) { BOOL_VEC4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LOW_FLOAT") ) { LOW_FLOAT=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"LINE_STRIP") ) { LINE_STRIP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_TEST") ) { DEPTH_TEST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LINE_WIDTH") ) { LINE_WIDTH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRONT_FACE") ) { FRONT_FACE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_FUNC") ) { DEPTH_FUNC=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GREEN_BITS") ) { GREEN_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ALPHA_BITS") ) { ALPHA_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_BITS") ) { DEPTH_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_2D") ) { TEXTURE_2D=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC2") ) { FLOAT_VEC2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC3") ) { FLOAT_VEC3=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC4") ) { FLOAT_VEC4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT2") ) { FLOAT_MAT2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT3") ) { FLOAT_MAT3=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT4") ) { FLOAT_MAT4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLER_2D") ) { SAMPLER_2D=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"HIGH_FLOAT") ) { HIGH_FLOAT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MEDIUM_INT") ) { MEDIUM_INT=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BLEND_COLOR") ) { BLEND_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STREAM_DRAW") ) { STREAM_DRAW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STATIC_DRAW") ) { STATIC_DRAW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BUFFER_SIZE") ) { BUFFER_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_RANGE") ) { DEPTH_RANGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_REF") ) { STENCIL_REF=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SCISSOR_BOX") ) { SCISSOR_BOX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SHADER_TYPE") ) { SHADER_TYPE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LINK_STATUS") ) { LINK_STATUS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER") ) { FRAMEBUFFER=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"TRIANGLE_FAN") ) { TRIANGLE_FAN=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ARRAY_BUFFER") ) { ARRAY_BUFFER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DYNAMIC_DRAW") ) { DYNAMIC_DRAW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BUFFER_USAGE") ) { BUFFER_USAGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_TEST") ) { STENCIL_TEST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SCISSOR_TEST") ) { SCISSOR_TEST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INVALID_ENUM") ) { INVALID_ENUM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_FUNC") ) { STENCIL_FUNC=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_FAIL") ) { STENCIL_FAIL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BITS") ) { STENCIL_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_INT") ) { UNSIGNED_INT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLER_CUBE") ) { SAMPLER_CUBE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"POINT_SPRITE") ) { POINT_SPRITE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MEDIUM_FLOAT") ) { MEDIUM_FLOAT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER") ) { RENDERBUFFER=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"FUNC_SUBTRACT") ) { FUNC_SUBTRACT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND_DST_RGB") ) { BLEND_DST_RGB=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND_SRC_RGB") ) { BLEND_SRC_RGB=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INVALID_VALUE") ) { INVALID_VALUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"OUT_OF_MEMORY") ) { OUT_OF_MEMORY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SUBPIXEL_BITS") ) { SUBPIXEL_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_BYTE") ) { UNSIGNED_BYTE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_SHADER") ) { VERTEX_SHADER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DELETE_STATUS") ) { DELETE_STATUS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CLAMP_TO_EDGE") ) { CLAMP_TO_EDGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_INDEX") ) { STENCIL_INDEX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_STENCIL") ) { DEPTH_STENCIL=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"TRIANGLE_STRIP") ) { TRIANGLE_STRIP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION") ) { BLEND_EQUATION=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONSTANT_COLOR") ) { CONSTANT_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONSTANT_ALPHA") ) { CONSTANT_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRONT_AND_BACK") ) { FRONT_AND_BACK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CULL_FACE_MODE") ) { CULL_FACE_MODE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"PACK_ALIGNMENT") ) { PACK_ALIGNMENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLE_BUFFERS") ) { SAMPLE_BUFFERS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT") ) { UNSIGNED_SHORT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_WRAP_S") ) { TEXTURE_WRAP_S=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_WRAP_T") ) { TEXTURE_WRAP_T=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ACTIVE_TEXTURE") ) { ACTIVE_TEXTURE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COMPILE_STATUS") ) { COMPILE_STATUS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_INDEX8") ) { STENCIL_INDEX8=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"BLEND_DST_ALPHA") ) { BLEND_DST_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND_SRC_ALPHA") ) { BLEND_SRC_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE") ) { SAMPLE_COVERAGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_WRITEMASK") ) { DEPTH_WRITEMASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COLOR_WRITEMASK") ) { COLOR_WRITEMASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_COMPONENT") ) { DEPTH_COMPONENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LUMINANCE_ALPHA") ) { LUMINANCE_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAGMENT_SHADER") ) { FRAGMENT_SHADER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VALIDATE_STATUS") ) { VALIDATE_STATUS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ACTIVE_UNIFORMS") ) { ACTIVE_UNIFORMS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CURRENT_PROGRAM") ) { CURRENT_PROGRAM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MIRRORED_REPEAT") ) { MIRRORED_REPEAT=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"DEPTH_BUFFER_BIT") ) { DEPTH_BUFFER_BIT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COLOR_BUFFER_BIT") ) { COLOR_BUFFER_BIT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_REF") ) { STENCIL_BACK_REF=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNPACK_ALIGNMENT") ) { UNPACK_ALIGNMENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_SIZE") ) { MAX_TEXTURE_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ATTACHED_SHADERS") ) { ATTACHED_SHADERS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP") ) { TEXTURE_CUBE_MAP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_ATTACHMENT") ) { DEPTH_ATTACHMENT=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"INVALID_OPERATION") ) { INVALID_OPERATION=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_CLEAR_VALUE") ) { DEPTH_CLEAR_VALUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_WRITEMASK") ) { STENCIL_WRITEMASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_FUNC") ) { STENCIL_BACK_FUNC=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_FAIL") ) { STENCIL_BACK_FAIL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COLOR_CLEAR_VALUE") ) { COLOR_CLEAR_VALUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_VIEWPORT_DIMS") ) { MAX_VIEWPORT_DIMS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ACTIVE_ATTRIBUTES") ) { ACTIVE_ATTRIBUTES=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_COMPONENT16") ) { DEPTH_COMPONENT16=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COLOR_ATTACHMENT0") ) { COLOR_ATTACHMENT0=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"STENCIL_BUFFER_BIT") ) { STENCIL_BUFFER_BIT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SRC_ALPHA_SATURATE") ) { SRC_ALPHA_SATURATE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION_RGB") ) { BLEND_EQUATION_RGB=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_VALUE_MASK") ) { STENCIL_VALUE_MASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_BINDING_2D") ) { TEXTURE_BINDING_2D=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_ATTRIBS") ) { MAX_VERTEX_ATTRIBS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_MAG_FILTER") ) { TEXTURE_MAG_FILTER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_MIN_FILTER") ) { TEXTURE_MIN_FILTER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_WIDTH") ) { RENDERBUFFER_WIDTH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_ATTACHMENT") ) { STENCIL_ATTACHMENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTEXT_LOST_WEBGL") ) { CONTEXT_LOST_WEBGL=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"ONE_MINUS_SRC_COLOR") ) { ONE_MINUS_SRC_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_SRC_ALPHA") ) { ONE_MINUS_SRC_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_DST_ALPHA") ) { ONE_MINUS_DST_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_DST_COLOR") ) { ONE_MINUS_DST_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_FILL") ) { POLYGON_OFFSET_FILL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_CLEAR_VALUE") ) { STENCIL_CLEAR_VALUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_VARYING_VECTORS") ) { MAX_VARYING_VECTORS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_HEIGHT") ) { RENDERBUFFER_HEIGHT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_BINDING") ) { FRAMEBUFFER_BINDING=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNPACK_FLIP_Y_WEBGL") ) { UNPACK_FLIP_Y_WEBGL=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION_ALPHA") ) { BLEND_EQUATION_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ELEMENT_ARRAY_BUFFER") ) { ELEMENT_ARRAY_BUFFER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ARRAY_BUFFER_BINDING") ) { ARRAY_BUFFER_BINDING=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_UNITS") ) { POLYGON_OFFSET_UNITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GENERATE_MIPMAP_HINT") ) { GENERATE_MIPMAP_HINT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_5_6_5") ) { UNSIGNED_SHORT_5_6_5=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LINEAR_MIPMAP_LINEAR") ) { LINEAR_MIPMAP_LINEAR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_COMPLETE") ) { FRAMEBUFFER_COMPLETE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_BINDING") ) { RENDERBUFFER_BINDING=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"FUNC_REVERSE_SUBTRACT") ) { FUNC_REVERSE_SUBTRACT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CURRENT_VERTEX_ATTRIB") ) { CURRENT_VERTEX_ATTRIB=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_FACTOR") ) { POLYGON_OFFSET_FACTOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE_VALUE") ) { SAMPLE_COVERAGE_VALUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LINEAR_MIPMAP_NEAREST") ) { LINEAR_MIPMAP_NEAREST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NEAREST_MIPMAP_LINEAR") ) { NEAREST_MIPMAP_LINEAR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_RED_SIZE") ) { RENDERBUFFER_RED_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_RENDERBUFFER_SIZE") ) { MAX_RENDERBUFFER_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BROWSER_DEFAULT_WEBGL") ) { BROWSER_DEFAULT_WEBGL=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_WRITEMASK") ) { STENCIL_BACK_WRITEMASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE_INVERT") ) { SAMPLE_COVERAGE_INVERT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_4_4_4_4") ) { UNSIGNED_SHORT_4_4_4_4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_5_5_5_1") ) { UNSIGNED_SHORT_5_5_5_1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NEAREST_MIPMAP_NEAREST") ) { NEAREST_MIPMAP_NEAREST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_BLUE_SIZE") ) { RENDERBUFFER_BLUE_SIZE=inValue.Cast< int >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"STENCIL_PASS_DEPTH_FAIL") ) { STENCIL_PASS_DEPTH_FAIL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_PASS_DEPTH_PASS") ) { STENCIL_PASS_DEPTH_PASS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_VALUE_MASK") ) { STENCIL_BACK_VALUE_MASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_IMAGE_UNITS") ) { MAX_TEXTURE_IMAGE_UNITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_GREEN_SIZE") ) { RENDERBUFFER_GREEN_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_ALPHA_SIZE") ) { RENDERBUFFER_ALPHA_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_DEPTH_SIZE") ) { RENDERBUFFER_DEPTH_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_UNSUPPORTED") ) { FRAMEBUFFER_UNSUPPORTED=inValue.Cast< int >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"ONE_MINUS_CONSTANT_COLOR") ) { ONE_MINUS_CONSTANT_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_CONSTANT_ALPHA") ) { ONE_MINUS_CONSTANT_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLE_ALPHA_TO_COVERAGE") ) { SAMPLE_ALPHA_TO_COVERAGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ALIASED_POINT_SIZE_RANGE") ) { ALIASED_POINT_SIZE_RANGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ALIASED_LINE_WIDTH_RANGE") ) { ALIASED_LINE_WIDTH_RANGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SHADING_LANGUAGE_VERSION") ) { SHADING_LANGUAGE_VERSION=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_BINDING_CUBE_MAP") ) { TEXTURE_BINDING_CUBE_MAP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_SIZE") ) { VERTEX_ATTRIB_ARRAY_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_TYPE") ) { VERTEX_ATTRIB_ARRAY_TYPE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_STENCIL_ATTACHMENT") ) { DEPTH_STENCIL_ATTACHMENT=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"MAX_CUBE_MAP_TEXTURE_SIZE") ) { MAX_CUBE_MAP_TEXTURE_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_PROGRAM_POINT_SIZE") ) { VERTEX_PROGRAM_POINT_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_STENCIL_SIZE") ) { RENDERBUFFER_STENCIL_SIZE=inValue.Cast< int >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"COMPRESSED_TEXTURE_FORMATS") ) { COMPRESSED_TEXTURE_FORMATS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_UNIFORM_VECTORS") ) { MAX_VERTEX_UNIFORM_VECTORS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_STRIDE") ) { VERTEX_ATTRIB_ARRAY_STRIDE=inValue.Cast< int >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_X") ) { TEXTURE_CUBE_MAP_POSITIVE_X=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_X") ) { TEXTURE_CUBE_MAP_NEGATIVE_X=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_Y") ) { TEXTURE_CUBE_MAP_POSITIVE_Y=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_Y") ) { TEXTURE_CUBE_MAP_NEGATIVE_Y=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_Z") ) { TEXTURE_CUBE_MAP_POSITIVE_Z=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_Z") ) { TEXTURE_CUBE_MAP_NEGATIVE_Z=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_ENABLED") ) { VERTEX_ATTRIB_ARRAY_ENABLED=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_POINTER") ) { VERTEX_ATTRIB_ARRAY_POINTER=inValue.Cast< int >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"ELEMENT_ARRAY_BUFFER_BINDING") ) { ELEMENT_ARRAY_BUFFER_BINDING=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_PASS_DEPTH_FAIL") ) { STENCIL_BACK_PASS_DEPTH_FAIL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_PASS_DEPTH_PASS") ) { STENCIL_BACK_PASS_DEPTH_PASS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_FRAGMENT_UNIFORM_VECTORS") ) { MAX_FRAGMENT_UNIFORM_VECTORS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_INTERNAL_FORMAT") ) { RENDERBUFFER_INTERNAL_FORMAT=inValue.Cast< int >(); return inValue; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"INVALID_FRAMEBUFFER_OPERATION") ) { INVALID_FRAMEBUFFER_OPERATION=inValue.Cast< int >(); return inValue; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_TEXTURE_IMAGE_UNITS") ) { MAX_VERTEX_TEXTURE_IMAGE_UNITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_NORMALIZED") ) { VERTEX_ATTRIB_ARRAY_NORMALIZED=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNPACK_PREMULTIPLY_ALPHA_WEBGL") ) { UNPACK_PREMULTIPLY_ALPHA_WEBGL=inValue.Cast< int >(); return inValue; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"MAX_COMBINED_TEXTURE_IMAGE_UNITS") ) { MAX_COMBINED_TEXTURE_IMAGE_UNITS=inValue.Cast< int >(); return inValue; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT") ) { FRAMEBUFFER_INCOMPLETE_ATTACHMENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_DIMENSIONS") ) { FRAMEBUFFER_INCOMPLETE_DIMENSIONS=inValue.Cast< int >(); return inValue; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING") ) { VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE") ) { FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME") ) { FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNPACK_COLORSPACE_CONVERSION_WEBGL") ) { UNPACK_COLORSPACE_CONVERSION_WEBGL=inValue.Cast< int >(); return inValue; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL") ) { FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=inValue.Cast< int >(); return inValue; }
		break;
	case 41:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT") ) { FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=inValue.Cast< int >(); return inValue; }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE") ) { FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLRenderContext_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("DEPTH_BUFFER_BIT","\xca","\x5b","\xce","\xc6"));
	outFields->push(HX_HCSTRING("STENCIL_BUFFER_BIT","\x71","\x93","\x29","\xde"));
	outFields->push(HX_HCSTRING("COLOR_BUFFER_BIT","\x6a","\xf7","\x74","\xfb"));
	outFields->push(HX_HCSTRING("POINTS","\x23","\xbe","\xb0","\xa9"));
	outFields->push(HX_HCSTRING("LINES","\xdf","\x15","\xf0","\xf2"));
	outFields->push(HX_HCSTRING("LINE_LOOP","\xcf","\x55","\xc1","\x16"));
	outFields->push(HX_HCSTRING("LINE_STRIP","\xed","\x20","\x88","\xdd"));
	outFields->push(HX_HCSTRING("TRIANGLES","\x8b","\xa0","\x99","\x7a"));
	outFields->push(HX_HCSTRING("TRIANGLE_STRIP","\xc1","\x66","\x6c","\xf6"));
	outFields->push(HX_HCSTRING("TRIANGLE_FAN","\x7c","\xee","\x2e","\x91"));
	outFields->push(HX_HCSTRING("ZERO","\x28","\xd7","\xb1","\x3b"));
	outFields->push(HX_HCSTRING("ONE","\x46","\x36","\x3c","\x00"));
	outFields->push(HX_HCSTRING("SRC_COLOR","\x48","\x9e","\xbd","\x5c"));
	outFields->push(HX_HCSTRING("ONE_MINUS_SRC_COLOR","\x20","\x3b","\xe1","\x48"));
	outFields->push(HX_HCSTRING("SRC_ALPHA","\x43","\xd4","\xf7","\x33"));
	outFields->push(HX_HCSTRING("ONE_MINUS_SRC_ALPHA","\x1b","\x71","\x1b","\x20"));
	outFields->push(HX_HCSTRING("DST_ALPHA","\x24","\x02","\xf2","\xd3"));
	outFields->push(HX_HCSTRING("ONE_MINUS_DST_ALPHA","\xfc","\x9e","\x15","\xc0"));
	outFields->push(HX_HCSTRING("DST_COLOR","\x29","\xcc","\xb7","\xfc"));
	outFields->push(HX_HCSTRING("ONE_MINUS_DST_COLOR","\x01","\x69","\xdb","\xe8"));
	outFields->push(HX_HCSTRING("SRC_ALPHA_SATURATE","\xab","\xe2","\x3d","\x33"));
	outFields->push(HX_HCSTRING("FUNC_ADD","\x46","\x78","\x17","\x75"));
	outFields->push(HX_HCSTRING("BLEND_EQUATION","\x9a","\x14","\x92","\x71"));
	outFields->push(HX_HCSTRING("BLEND_EQUATION_RGB","\x88","\x25","\xeb","\x90"));
	outFields->push(HX_HCSTRING("BLEND_EQUATION_ALPHA","\x99","\xaa","\xae","\x37"));
	outFields->push(HX_HCSTRING("FUNC_SUBTRACT","\xaf","\xc0","\xa0","\x17"));
	outFields->push(HX_HCSTRING("FUNC_REVERSE_SUBTRACT","\xcc","\x8d","\xef","\xf3"));
	outFields->push(HX_HCSTRING("BLEND_DST_RGB","\x05","\x87","\xf5","\xec"));
	outFields->push(HX_HCSTRING("BLEND_SRC_RGB","\x64","\x43","\x8c","\x2c"));
	outFields->push(HX_HCSTRING("BLEND_DST_ALPHA","\x56","\x25","\x32","\x74"));
	outFields->push(HX_HCSTRING("BLEND_SRC_ALPHA","\x75","\xf7","\x37","\xd4"));
	outFields->push(HX_HCSTRING("CONSTANT_COLOR","\xe8","\x64","\x8a","\xc8"));
	outFields->push(HX_HCSTRING("ONE_MINUS_CONSTANT_COLOR","\x10","\x39","\xe7","\x06"));
	outFields->push(HX_HCSTRING("CONSTANT_ALPHA","\xe3","\x9a","\xc4","\x9f"));
	outFields->push(HX_HCSTRING("ONE_MINUS_CONSTANT_ALPHA","\x0b","\x6f","\x21","\xde"));
	outFields->push(HX_HCSTRING("BLEND_COLOR","\x75","\xcb","\xc8","\x67"));
	outFields->push(HX_HCSTRING("ARRAY_BUFFER","\x46","\x66","\x17","\xf4"));
	outFields->push(HX_HCSTRING("ELEMENT_ARRAY_BUFFER","\x09","\x05","\x53","\x3d"));
	outFields->push(HX_HCSTRING("ARRAY_BUFFER_BINDING","\xec","\xd4","\xa9","\x79"));
	outFields->push(HX_HCSTRING("ELEMENT_ARRAY_BUFFER_BINDING","\xaf","\x6e","\x96","\xa2"));
	outFields->push(HX_HCSTRING("STREAM_DRAW","\x63","\x7f","\x28","\x15"));
	outFields->push(HX_HCSTRING("STATIC_DRAW","\x75","\x50","\x2f","\xba"));
	outFields->push(HX_HCSTRING("DYNAMIC_DRAW","\x24","\x04","\x1f","\x24"));
	outFields->push(HX_HCSTRING("BUFFER_SIZE","\xa0","\x7b","\x91","\x4c"));
	outFields->push(HX_HCSTRING("BUFFER_USAGE","\x42","\x05","\x11","\xe0"));
	outFields->push(HX_HCSTRING("CURRENT_VERTEX_ATTRIB","\x1f","\x8c","\x2f","\xab"));
	outFields->push(HX_HCSTRING("FRONT","\x89","\x50","\x7c","\x84"));
	outFields->push(HX_HCSTRING("BACK","\x27","\xa2","\xd1","\x2b"));
	outFields->push(HX_HCSTRING("FRONT_AND_BACK","\xa5","\x3d","\x6a","\xc1"));
	outFields->push(HX_HCSTRING("CULL_FACE","\x8a","\xa5","\xf4","\xcf"));
	outFields->push(HX_HCSTRING("BLEND","\x31","\x20","\xe3","\x32"));
	outFields->push(HX_HCSTRING("DITHER","\xe6","\xac","\x41","\x70"));
	outFields->push(HX_HCSTRING("STENCIL_TEST","\xd5","\xdc","\x69","\xd5"));
	outFields->push(HX_HCSTRING("DEPTH_TEST","\x6e","\x6c","\x25","\x28"));
	outFields->push(HX_HCSTRING("SCISSOR_TEST","\xb5","\xbe","\x51","\x59"));
	outFields->push(HX_HCSTRING("POLYGON_OFFSET_FILL","\x4a","\x3d","\x32","\xac"));
	outFields->push(HX_HCSTRING("SAMPLE_ALPHA_TO_COVERAGE","\x16","\x3e","\x56","\xe1"));
	outFields->push(HX_HCSTRING("SAMPLE_COVERAGE","\xdd","\xb7","\x0e","\xc1"));
	outFields->push(HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f"));
	outFields->push(HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13"));
	outFields->push(HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0"));
	outFields->push(HX_HCSTRING("INVALID_OPERATION","\x5f","\xb1","\xc8","\x29"));
	outFields->push(HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1"));
	outFields->push(HX_HCSTRING("CW","\xb4","\x3a","\x00","\x00"));
	outFields->push(HX_HCSTRING("CCW","\xb7","\x11","\x33","\x00"));
	outFields->push(HX_HCSTRING("LINE_WIDTH","\x1b","\x84","\xd2","\x23"));
	outFields->push(HX_HCSTRING("ALIASED_POINT_SIZE_RANGE","\xfe","\xf6","\xa4","\x7b"));
	outFields->push(HX_HCSTRING("ALIASED_LINE_WIDTH_RANGE","\xe9","\x22","\xd5","\x8a"));
	outFields->push(HX_HCSTRING("CULL_FACE_MODE","\x78","\xbd","\x87","\xd1"));
	outFields->push(HX_HCSTRING("FRONT_FACE","\x53","\xb7","\x4d","\xef"));
	outFields->push(HX_HCSTRING("DEPTH_RANGE","\x01","\x9a","\x23","\xcf"));
	outFields->push(HX_HCSTRING("DEPTH_WRITEMASK","\x8f","\x37","\x3f","\x66"));
	outFields->push(HX_HCSTRING("DEPTH_CLEAR_VALUE","\x23","\x17","\x0d","\x1b"));
	outFields->push(HX_HCSTRING("DEPTH_FUNC","\x60","\x8f","\xf0","\x1e"));
	outFields->push(HX_HCSTRING("STENCIL_CLEAR_VALUE","\x9c","\x91","\x82","\x73"));
	outFields->push(HX_HCSTRING("STENCIL_FUNC","\xc7","\xff","\x34","\xcc"));
	outFields->push(HX_HCSTRING("STENCIL_FAIL","\x61","\xce","\x25","\xcc"));
	outFields->push(HX_HCSTRING("STENCIL_PASS_DEPTH_FAIL","\x45","\xca","\xb9","\xc8"));
	outFields->push(HX_HCSTRING("STENCIL_PASS_DEPTH_PASS","\x38","\xf5","\x55","\xcf"));
	outFields->push(HX_HCSTRING("STENCIL_REF","\x10","\x6a","\xa5","\x3c"));
	outFields->push(HX_HCSTRING("STENCIL_VALUE_MASK","\x9d","\x58","\x5e","\xa0"));
	outFields->push(HX_HCSTRING("STENCIL_WRITEMASK","\xc8","\xf1","\xa6","\x49"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_FUNC","\x39","\x78","\xa2","\x90"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_FAIL","\xd3","\x46","\x93","\x90"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_FAIL","\x13","\x23","\x0e","\x34"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_PASS","\x06","\x4e","\xaa","\x3a"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_REF","\xde","\x45","\xb8","\x08"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_VALUE_MASK","\x8f","\xb2","\xc4","\x88"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_WRITEMASK","\x16","\x9c","\x15","\xc2"));
	outFields->push(HX_HCSTRING("VIEWPORT","\x66","\xdc","\x2a","\xf6"));
	outFields->push(HX_HCSTRING("SCISSOR_BOX","\xe8","\x48","\x4c","\x55"));
	outFields->push(HX_HCSTRING("COLOR_CLEAR_VALUE","\x83","\xa7","\x2e","\xf8"));
	outFields->push(HX_HCSTRING("COLOR_WRITEMASK","\xef","\xef","\xf9","\x14"));
	outFields->push(HX_HCSTRING("UNPACK_ALIGNMENT","\xb6","\x2a","\x2e","\x4b"));
	outFields->push(HX_HCSTRING("PACK_ALIGNMENT","\x9d","\xd6","\x85","\xc3"));
	outFields->push(HX_HCSTRING("MAX_TEXTURE_SIZE","\xe0","\x0b","\x5b","\xfb"));
	outFields->push(HX_HCSTRING("MAX_VIEWPORT_DIMS","\xa9","\x2d","\xfb","\x08"));
	outFields->push(HX_HCSTRING("SUBPIXEL_BITS","\x1f","\xac","\x14","\x0a"));
	outFields->push(HX_HCSTRING("RED_BITS","\x14","\xf8","\x9e","\x96"));
	outFields->push(HX_HCSTRING("GREEN_BITS","\x62","\xa9","\x9b","\x94"));
	outFields->push(HX_HCSTRING("BLUE_BITS","\x0b","\x26","\x60","\xa1"));
	outFields->push(HX_HCSTRING("ALPHA_BITS","\xe7","\xfe","\x7b","\xe0"));
	outFields->push(HX_HCSTRING("DEPTH_BITS","\x22","\x9f","\x42","\x1c"));
	outFields->push(HX_HCSTRING("STENCIL_BITS","\x89","\x0f","\x87","\xc9"));
	outFields->push(HX_HCSTRING("POLYGON_OFFSET_UNITS","\xa8","\xe8","\x11","\xa6"));
	outFields->push(HX_HCSTRING("POLYGON_OFFSET_FACTOR","\x56","\x6b","\x12","\x2a"));
	outFields->push(HX_HCSTRING("TEXTURE_BINDING_2D","\x30","\xec","\x98","\xb1"));
	outFields->push(HX_HCSTRING("SAMPLE_BUFFERS","\xfe","\x16","\x71","\x3c"));
	outFields->push(HX_HCSTRING("SAMPLES","\xe9","\x98","\x9d","\x03"));
	outFields->push(HX_HCSTRING("SAMPLE_COVERAGE_VALUE","\x2f","\x7a","\x07","\x69"));
	outFields->push(HX_HCSTRING("SAMPLE_COVERAGE_INVERT","\x78","\x52","\xa5","\xcd"));
	outFields->push(HX_HCSTRING("COMPRESSED_TEXTURE_FORMATS","\x7a","\x13","\xe3","\x12"));
	outFields->push(HX_HCSTRING("DONT_CARE","\x7f","\x9b","\xc1","\xcf"));
	outFields->push(HX_HCSTRING("FASTEST","\x0a","\xa3","\x0d","\x5e"));
	outFields->push(HX_HCSTRING("NICEST","\x7e","\x6d","\x94","\x64"));
	outFields->push(HX_HCSTRING("GENERATE_MIPMAP_HINT","\x94","\xd3","\xd5","\x83"));
	outFields->push(HX_HCSTRING("BYTE","\x08","\xe7","\xe3","\x2b"));
	outFields->push(HX_HCSTRING("UNSIGNED_BYTE","\xd2","\x79","\x6b","\x01"));
	outFields->push(HX_HCSTRING("SHORT","\x5c","\xbc","\x15","\xfa"));
	outFields->push(HX_HCSTRING("UNSIGNED_SHORT","\x52","\x9a","\x2e","\xfb"));
	outFields->push(HX_HCSTRING("INT","\xcf","\xa8","\x37","\x00"));
	outFields->push(HX_HCSTRING("UNSIGNED_INT","\x45","\xfd","\xb9","\x1c"));
	outFields->push(HX_HCSTRING("FLOAT","\x7c","\xfd","\x84","\x80"));
	outFields->push(HX_HCSTRING("DEPTH_COMPONENT","\x01","\x1f","\x62","\x0f"));
	outFields->push(HX_HCSTRING("ALPHA","\x3e","\xdf","\x84","\x9f"));
	outFields->push(HX_HCSTRING("RGB","\xed","\x76","\x3e","\x00"));
	outFields->push(HX_HCSTRING("RGBA","\xb4","\x98","\x69","\x36"));
	outFields->push(HX_HCSTRING("BGR_EXT","\xef","\xba","\xba","\x91"));
	outFields->push(HX_HCSTRING("BGRA_EXT","\x36","\x94","\xc4","\xbc"));
	outFields->push(HX_HCSTRING("LUMINANCE","\xd8","\xa7","\xe0","\x63"));
	outFields->push(HX_HCSTRING("LUMINANCE_ALPHA","\x57","\x40","\xe0","\xbd"));
	outFields->push(HX_HCSTRING("UNSIGNED_SHORT_4_4_4_4","\xa6","\x33","\x71","\x7b"));
	outFields->push(HX_HCSTRING("UNSIGNED_SHORT_5_5_5_1","\x26","\x01","\x6e","\x38"));
	outFields->push(HX_HCSTRING("UNSIGNED_SHORT_5_6_5","\x75","\xbb","\x16","\x8c"));
	outFields->push(HX_HCSTRING("FRAGMENT_SHADER","\xf4","\x26","\x78","\xe9"));
	outFields->push(HX_HCSTRING("VERTEX_SHADER","\xe0","\x69","\x73","\x49"));
	outFields->push(HX_HCSTRING("MAX_VERTEX_ATTRIBS","\x49","\xc9","\x15","\x5f"));
	outFields->push(HX_HCSTRING("MAX_VERTEX_UNIFORM_VECTORS","\x45","\x6c","\x16","\x5a"));
	outFields->push(HX_HCSTRING("MAX_VARYING_VECTORS","\x06","\xb9","\xf7","\x37"));
	outFields->push(HX_HCSTRING("MAX_COMBINED_TEXTURE_IMAGE_UNITS","\xa8","\xd1","\xa6","\x77"));
	outFields->push(HX_HCSTRING("MAX_VERTEX_TEXTURE_IMAGE_UNITS","\xc7","\x90","\x95","\x2b"));
	outFields->push(HX_HCSTRING("MAX_TEXTURE_IMAGE_UNITS","\xcc","\x6c","\x61","\x54"));
	outFields->push(HX_HCSTRING("MAX_FRAGMENT_UNIFORM_VECTORS","\x71","\x49","\xf5","\x0a"));
	outFields->push(HX_HCSTRING("SHADER_TYPE","\x54","\xe5","\x27","\x87"));
	outFields->push(HX_HCSTRING("DELETE_STATUS","\x06","\xe4","\x98","\x1e"));
	outFields->push(HX_HCSTRING("LINK_STATUS","\x17","\x18","\x8f","\x45"));
	outFields->push(HX_HCSTRING("VALIDATE_STATUS","\xfb","\x22","\x07","\xc6"));
	outFields->push(HX_HCSTRING("ATTACHED_SHADERS","\x73","\xd2","\x76","\x75"));
	outFields->push(HX_HCSTRING("ACTIVE_UNIFORMS","\x98","\x7d","\x3a","\x2c"));
	outFields->push(HX_HCSTRING("ACTIVE_ATTRIBUTES","\xf0","\xe5","\xc7","\x4a"));
	outFields->push(HX_HCSTRING("SHADING_LANGUAGE_VERSION","\xe6","\xc4","\xef","\x70"));
	outFields->push(HX_HCSTRING("CURRENT_PROGRAM","\xfe","\x28","\xc0","\x3f"));
	outFields->push(HX_HCSTRING("NEVER","\x6c","\x76","\x1e","\x17"));
	outFields->push(HX_HCSTRING("LESS","\x59","\xdb","\x70","\x32"));
	outFields->push(HX_HCSTRING("EQUAL","\x94","\x07","\x71","\xf0"));
	outFields->push(HX_HCSTRING("LEQUAL","\xc8","\x73","\x90","\x53"));
	outFields->push(HX_HCSTRING("GREATER","\xda","\x64","\x94","\x37"));
	outFields->push(HX_HCSTRING("NOTEQUAL","\xc1","\xc1","\xe9","\xc8"));
	outFields->push(HX_HCSTRING("GEQUAL","\xed","\xa5","\xc7","\x53"));
	outFields->push(HX_HCSTRING("ALWAYS","\xcf","\xba","\x59","\xf9"));
	outFields->push(HX_HCSTRING("KEEP","\x85","\x98","\xc7","\x31"));
	outFields->push(HX_HCSTRING("REPLACE","\x14","\x1c","\xfc","\x2a"));
	outFields->push(HX_HCSTRING("INCR","\xd4","\xfd","\x7b","\x30"));
	outFields->push(HX_HCSTRING("DECR","\x70","\x18","\x27","\x2d"));
	outFields->push(HX_HCSTRING("INVERT","\x16","\x93","\x5b","\x52"));
	outFields->push(HX_HCSTRING("INCR_WRAP","\x55","\x7f","\x68","\x2c"));
	outFields->push(HX_HCSTRING("DECR_WRAP","\x39","\x6f","\xeb","\x0a"));
	outFields->push(HX_HCSTRING("VENDOR","\x88","\x91","\x19","\x51"));
	outFields->push(HX_HCSTRING("RENDERER","\x43","\x55","\x61","\x0c"));
	outFields->push(HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc"));
	outFields->push(HX_HCSTRING("NEAREST","\x3e","\xec","\x9d","\xe5"));
	outFields->push(HX_HCSTRING("LINEAR","\xe5","\xfd","\x22","\x9f"));
	outFields->push(HX_HCSTRING("NEAREST_MIPMAP_NEAREST","\x68","\xb9","\x63","\x7e"));
	outFields->push(HX_HCSTRING("LINEAR_MIPMAP_NEAREST","\xa1","\x9b","\xa4","\x65"));
	outFields->push(HX_HCSTRING("NEAREST_MIPMAP_LINEAR","\xfb","\x83","\xf2","\x3b"));
	outFields->push(HX_HCSTRING("LINEAR_MIPMAP_LINEAR","\xe2","\x8b","\xf8","\x99"));
	outFields->push(HX_HCSTRING("TEXTURE_MAG_FILTER","\x88","\xff","\xd5","\x1e"));
	outFields->push(HX_HCSTRING("TEXTURE_MIN_FILTER","\x69","\x66","\xc2","\x46"));
	outFields->push(HX_HCSTRING("TEXTURE_WRAP_S","\xa2","\x2d","\xc3","\xfe"));
	outFields->push(HX_HCSTRING("TEXTURE_WRAP_T","\xa3","\x2d","\xc3","\xfe"));
	outFields->push(HX_HCSTRING("TEXTURE_2D","\x16","\x0c","\xf8","\xa2"));
	outFields->push(HX_HCSTRING("TEXTURE","\xbb","\x9c","\xb4","\x1e"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP","\x36","\x7a","\xe1","\xad"));
	outFields->push(HX_HCSTRING("TEXTURE_BINDING_CUBE_MAP","\xd0","\x69","\x98","\x75"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_X","\xbb","\x1c","\xee","\x24"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_X","\x77","\x03","\xe2","\x6b"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Y","\xbc","\x1c","\xee","\x24"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Y","\x78","\x03","\xe2","\x6b"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Z","\xbd","\x1c","\xee","\x24"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Z","\x79","\x03","\xe2","\x6b"));
	outFields->push(HX_HCSTRING("MAX_CUBE_MAP_TEXTURE_SIZE","\x77","\xb9","\x24","\x9d"));
	outFields->push(HX_HCSTRING("TEXTURE0","\x15","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE1","\x16","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE2","\x17","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE3","\x18","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE4","\x19","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE5","\x1a","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE6","\x1b","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE7","\x1c","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE8","\x1d","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE9","\x1e","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE10","\x5a","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE11","\x5b","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE12","\x5c","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE13","\x5d","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE14","\x5e","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE15","\x5f","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE16","\x60","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE17","\x61","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE18","\x62","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE19","\x63","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE20","\x39","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE21","\x3a","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE22","\x3b","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE23","\x3c","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE24","\x3d","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE25","\x3e","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE26","\x3f","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE27","\x40","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE28","\x41","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE29","\x42","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE30","\x18","\xae","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE31","\x19","\xae","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("ACTIVE_TEXTURE","\x02","\x1a","\x22","\xce"));
	outFields->push(HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8"));
	outFields->push(HX_HCSTRING("CLAMP_TO_EDGE","\x1d","\xfc","\x5a","\x96"));
	outFields->push(HX_HCSTRING("MIRRORED_REPEAT","\x5c","\x94","\x80","\x4a"));
	outFields->push(HX_HCSTRING("FLOAT_VEC2","\x61","\xac","\xa4","\xeb"));
	outFields->push(HX_HCSTRING("FLOAT_VEC3","\x62","\xac","\xa4","\xeb"));
	outFields->push(HX_HCSTRING("FLOAT_VEC4","\x63","\xac","\xa4","\xeb"));
	outFields->push(HX_HCSTRING("INT_VEC2","\x2e","\x14","\x05","\x7d"));
	outFields->push(HX_HCSTRING("INT_VEC3","\x2f","\x14","\x05","\x7d"));
	outFields->push(HX_HCSTRING("INT_VEC4","\x30","\x14","\x05","\x7d"));
	outFields->push(HX_HCSTRING("BOOL","\x2a","\x4c","\xdc","\x2b"));
	outFields->push(HX_HCSTRING("BOOL_VEC2","\xf3","\x66","\x2b","\x2d"));
	outFields->push(HX_HCSTRING("BOOL_VEC3","\xf4","\x66","\x2b","\x2d"));
	outFields->push(HX_HCSTRING("BOOL_VEC4","\xf5","\x66","\x2b","\x2d"));
	outFields->push(HX_HCSTRING("FLOAT_MAT2","\x95","\xc6","\xae","\xe5"));
	outFields->push(HX_HCSTRING("FLOAT_MAT3","\x96","\xc6","\xae","\xe5"));
	outFields->push(HX_HCSTRING("FLOAT_MAT4","\x97","\xc6","\xae","\xe5"));
	outFields->push(HX_HCSTRING("SAMPLER_2D","\x09","\x2a","\x93","\x6e"));
	outFields->push(HX_HCSTRING("SAMPLER_CUBE","\xec","\x3e","\x82","\xa4"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_ENABLED","\x61","\x99","\x09","\x66"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_SIZE","\xc1","\x07","\xfd","\x08"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_STRIDE","\x19","\x2b","\x41","\x58"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_TYPE","\xba","\x59","\xb2","\x09"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_NORMALIZED","\x37","\xb7","\x22","\x78"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_POINTER","\x9d","\x55","\xfa","\x38"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","\xa6","\x80","\x67","\x97"));
	outFields->push(HX_HCSTRING("VERTEX_PROGRAM_POINT_SIZE","\xe6","\x56","\xbe","\x34"));
	outFields->push(HX_HCSTRING("POINT_SPRITE","\x74","\x93","\x5c","\x14"));
	outFields->push(HX_HCSTRING("COMPILE_STATUS","\xde","\xcb","\x4e","\x8c"));
	outFields->push(HX_HCSTRING("LOW_FLOAT","\x31","\x04","\x74","\xe4"));
	outFields->push(HX_HCSTRING("MEDIUM_FLOAT","\xf2","\x8a","\x46","\xb9"));
	outFields->push(HX_HCSTRING("HIGH_FLOAT","\x9f","\xf9","\x3b","\x47"));
	outFields->push(HX_HCSTRING("LOW_INT","\x44","\x28","\x70","\x45"));
	outFields->push(HX_HCSTRING("MEDIUM_INT","\xc5","\xcc","\xaf","\x4f"));
	outFields->push(HX_HCSTRING("HIGH_INT","\x32","\x46","\x02","\x09"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER","\xcd","\x20","\x84","\x50"));
	outFields->push(HX_HCSTRING("RENDERBUFFER","\xd6","\xa4","\xa4","\xa9"));
	outFields->push(HX_HCSTRING("RGBA4","\x00","\x05","\xfc","\x65"));
	outFields->push(HX_HCSTRING("RGB5_A1","\x47","\x8f","\xf9","\xd8"));
	outFields->push(HX_HCSTRING("RGB565","\xe7","\x41","\x7f","\xd6"));
	outFields->push(HX_HCSTRING("DEPTH_COMPONENT16","\x26","\xcc","\x68","\x43"));
	outFields->push(HX_HCSTRING("STENCIL_INDEX","\x0f","\x79","\xb6","\x97"));
	outFields->push(HX_HCSTRING("STENCIL_INDEX8","\x49","\x74","\xf3","\x27"));
	outFields->push(HX_HCSTRING("DEPTH_STENCIL","\x40","\x2f","\x20","\x2b"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_WIDTH","\x7d","\x1e","\xe1","\x43"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_HEIGHT","\x70","\x07","\x69","\xd7"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_INTERNAL_FORMAT","\x90","\xda","\xeb","\xb5"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_RED_SIZE","\x98","\xa5","\x58","\x5e"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_GREEN_SIZE","\x26","\x9b","\x7d","\x3b"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_BLUE_SIZE","\xdd","\x93","\x86","\xdd"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_ALPHA_SIZE","\xab","\xf0","\x5d","\x87"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_DEPTH_SIZE","\xe6","\x90","\x24","\xc3"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_STENCIL_SIZE","\x8d","\xd5","\x5a","\x9d"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","\x50","\x22","\x44","\x50"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","\xe1","\xa1","\x3a","\x4c"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","\xf6","\x9b","\xba","\x81"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","\xdc","\x4c","\x39","\x8a"));
	outFields->push(HX_HCSTRING("COLOR_ATTACHMENT0","\xb1","\x9a","\xfe","\x86"));
	outFields->push(HX_HCSTRING("DEPTH_ATTACHMENT","\xff","\x54","\xcd","\xe9"));
	outFields->push(HX_HCSTRING("STENCIL_ATTACHMENT","\xa6","\x8c","\x28","\x01"));
	outFields->push(HX_HCSTRING("DEPTH_STENCIL_ATTACHMENT","\xc2","\xe1","\xe1","\x9f"));
	outFields->push(HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_COMPLETE","\xab","\x65","\x7d","\xea"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_ATTACHMENT","\xf2","\xcf","\xb7","\x1d"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","\x8b","\x0a","\xcd","\x77"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_DIMENSIONS","\x5c","\x86","\xe4","\x1c"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_UNSUPPORTED","\xe3","\xa6","\x4e","\xc8"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_BINDING","\x73","\xee","\xae","\xc5"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_BINDING","\x7c","\x23","\x70","\x23"));
	outFields->push(HX_HCSTRING("MAX_RENDERBUFFER_SIZE","\x4f","\xd4","\x3d","\x65"));
	outFields->push(HX_HCSTRING("INVALID_FRAMEBUFFER_OPERATION","\x2d","\xd4","\xc5","\x43"));
	outFields->push(HX_HCSTRING("UNPACK_FLIP_Y_WEBGL","\x0e","\x9f","\x94","\x9d"));
	outFields->push(HX_HCSTRING("UNPACK_PREMULTIPLY_ALPHA_WEBGL","\x73","\x5d","\xcb","\xc6"));
	outFields->push(HX_HCSTRING("CONTEXT_LOST_WEBGL","\x6e","\x67","\x71","\x45"));
	outFields->push(HX_HCSTRING("UNPACK_COLORSPACE_CONVERSION_WEBGL","\x9f","\xd9","\xf0","\xb9"));
	outFields->push(HX_HCSTRING("BROWSER_DEFAULT_WEBGL","\x04","\x04","\x92","\xc0"));
	outFields->push(HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GLRenderContext_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_BUFFER_BIT),HX_HCSTRING("DEPTH_BUFFER_BIT","\xca","\x5b","\xce","\xc6")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_BUFFER_BIT),HX_HCSTRING("STENCIL_BUFFER_BIT","\x71","\x93","\x29","\xde")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,COLOR_BUFFER_BIT),HX_HCSTRING("COLOR_BUFFER_BIT","\x6a","\xf7","\x74","\xfb")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,POINTS),HX_HCSTRING("POINTS","\x23","\xbe","\xb0","\xa9")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LINES),HX_HCSTRING("LINES","\xdf","\x15","\xf0","\xf2")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LINE_LOOP),HX_HCSTRING("LINE_LOOP","\xcf","\x55","\xc1","\x16")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LINE_STRIP),HX_HCSTRING("LINE_STRIP","\xed","\x20","\x88","\xdd")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TRIANGLES),HX_HCSTRING("TRIANGLES","\x8b","\xa0","\x99","\x7a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TRIANGLE_STRIP),HX_HCSTRING("TRIANGLE_STRIP","\xc1","\x66","\x6c","\xf6")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TRIANGLE_FAN),HX_HCSTRING("TRIANGLE_FAN","\x7c","\xee","\x2e","\x91")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ZERO),HX_HCSTRING("ZERO","\x28","\xd7","\xb1","\x3b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ONE),HX_HCSTRING("ONE","\x46","\x36","\x3c","\x00")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SRC_COLOR),HX_HCSTRING("SRC_COLOR","\x48","\x9e","\xbd","\x5c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ONE_MINUS_SRC_COLOR),HX_HCSTRING("ONE_MINUS_SRC_COLOR","\x20","\x3b","\xe1","\x48")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SRC_ALPHA),HX_HCSTRING("SRC_ALPHA","\x43","\xd4","\xf7","\x33")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ONE_MINUS_SRC_ALPHA),HX_HCSTRING("ONE_MINUS_SRC_ALPHA","\x1b","\x71","\x1b","\x20")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DST_ALPHA),HX_HCSTRING("DST_ALPHA","\x24","\x02","\xf2","\xd3")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ONE_MINUS_DST_ALPHA),HX_HCSTRING("ONE_MINUS_DST_ALPHA","\xfc","\x9e","\x15","\xc0")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DST_COLOR),HX_HCSTRING("DST_COLOR","\x29","\xcc","\xb7","\xfc")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ONE_MINUS_DST_COLOR),HX_HCSTRING("ONE_MINUS_DST_COLOR","\x01","\x69","\xdb","\xe8")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SRC_ALPHA_SATURATE),HX_HCSTRING("SRC_ALPHA_SATURATE","\xab","\xe2","\x3d","\x33")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FUNC_ADD),HX_HCSTRING("FUNC_ADD","\x46","\x78","\x17","\x75")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BLEND_EQUATION),HX_HCSTRING("BLEND_EQUATION","\x9a","\x14","\x92","\x71")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BLEND_EQUATION_RGB),HX_HCSTRING("BLEND_EQUATION_RGB","\x88","\x25","\xeb","\x90")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BLEND_EQUATION_ALPHA),HX_HCSTRING("BLEND_EQUATION_ALPHA","\x99","\xaa","\xae","\x37")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FUNC_SUBTRACT),HX_HCSTRING("FUNC_SUBTRACT","\xaf","\xc0","\xa0","\x17")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FUNC_REVERSE_SUBTRACT),HX_HCSTRING("FUNC_REVERSE_SUBTRACT","\xcc","\x8d","\xef","\xf3")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BLEND_DST_RGB),HX_HCSTRING("BLEND_DST_RGB","\x05","\x87","\xf5","\xec")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BLEND_SRC_RGB),HX_HCSTRING("BLEND_SRC_RGB","\x64","\x43","\x8c","\x2c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BLEND_DST_ALPHA),HX_HCSTRING("BLEND_DST_ALPHA","\x56","\x25","\x32","\x74")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BLEND_SRC_ALPHA),HX_HCSTRING("BLEND_SRC_ALPHA","\x75","\xf7","\x37","\xd4")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,CONSTANT_COLOR),HX_HCSTRING("CONSTANT_COLOR","\xe8","\x64","\x8a","\xc8")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ONE_MINUS_CONSTANT_COLOR),HX_HCSTRING("ONE_MINUS_CONSTANT_COLOR","\x10","\x39","\xe7","\x06")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,CONSTANT_ALPHA),HX_HCSTRING("CONSTANT_ALPHA","\xe3","\x9a","\xc4","\x9f")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ONE_MINUS_CONSTANT_ALPHA),HX_HCSTRING("ONE_MINUS_CONSTANT_ALPHA","\x0b","\x6f","\x21","\xde")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BLEND_COLOR),HX_HCSTRING("BLEND_COLOR","\x75","\xcb","\xc8","\x67")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ARRAY_BUFFER),HX_HCSTRING("ARRAY_BUFFER","\x46","\x66","\x17","\xf4")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ELEMENT_ARRAY_BUFFER),HX_HCSTRING("ELEMENT_ARRAY_BUFFER","\x09","\x05","\x53","\x3d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ARRAY_BUFFER_BINDING),HX_HCSTRING("ARRAY_BUFFER_BINDING","\xec","\xd4","\xa9","\x79")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ELEMENT_ARRAY_BUFFER_BINDING),HX_HCSTRING("ELEMENT_ARRAY_BUFFER_BINDING","\xaf","\x6e","\x96","\xa2")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STREAM_DRAW),HX_HCSTRING("STREAM_DRAW","\x63","\x7f","\x28","\x15")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STATIC_DRAW),HX_HCSTRING("STATIC_DRAW","\x75","\x50","\x2f","\xba")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DYNAMIC_DRAW),HX_HCSTRING("DYNAMIC_DRAW","\x24","\x04","\x1f","\x24")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BUFFER_SIZE),HX_HCSTRING("BUFFER_SIZE","\xa0","\x7b","\x91","\x4c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BUFFER_USAGE),HX_HCSTRING("BUFFER_USAGE","\x42","\x05","\x11","\xe0")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,CURRENT_VERTEX_ATTRIB),HX_HCSTRING("CURRENT_VERTEX_ATTRIB","\x1f","\x8c","\x2f","\xab")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRONT),HX_HCSTRING("FRONT","\x89","\x50","\x7c","\x84")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BACK),HX_HCSTRING("BACK","\x27","\xa2","\xd1","\x2b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRONT_AND_BACK),HX_HCSTRING("FRONT_AND_BACK","\xa5","\x3d","\x6a","\xc1")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,CULL_FACE),HX_HCSTRING("CULL_FACE","\x8a","\xa5","\xf4","\xcf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BLEND),HX_HCSTRING("BLEND","\x31","\x20","\xe3","\x32")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DITHER),HX_HCSTRING("DITHER","\xe6","\xac","\x41","\x70")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_TEST),HX_HCSTRING("STENCIL_TEST","\xd5","\xdc","\x69","\xd5")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_TEST),HX_HCSTRING("DEPTH_TEST","\x6e","\x6c","\x25","\x28")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SCISSOR_TEST),HX_HCSTRING("SCISSOR_TEST","\xb5","\xbe","\x51","\x59")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,POLYGON_OFFSET_FILL),HX_HCSTRING("POLYGON_OFFSET_FILL","\x4a","\x3d","\x32","\xac")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SAMPLE_ALPHA_TO_COVERAGE),HX_HCSTRING("SAMPLE_ALPHA_TO_COVERAGE","\x16","\x3e","\x56","\xe1")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SAMPLE_COVERAGE),HX_HCSTRING("SAMPLE_COVERAGE","\xdd","\xb7","\x0e","\xc1")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,NO_ERROR),HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INVALID_ENUM),HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INVALID_VALUE),HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INVALID_OPERATION),HX_HCSTRING("INVALID_OPERATION","\x5f","\xb1","\xc8","\x29")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,OUT_OF_MEMORY),HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,CW),HX_HCSTRING("CW","\xb4","\x3a","\x00","\x00")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,CCW),HX_HCSTRING("CCW","\xb7","\x11","\x33","\x00")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LINE_WIDTH),HX_HCSTRING("LINE_WIDTH","\x1b","\x84","\xd2","\x23")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ALIASED_POINT_SIZE_RANGE),HX_HCSTRING("ALIASED_POINT_SIZE_RANGE","\xfe","\xf6","\xa4","\x7b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ALIASED_LINE_WIDTH_RANGE),HX_HCSTRING("ALIASED_LINE_WIDTH_RANGE","\xe9","\x22","\xd5","\x8a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,CULL_FACE_MODE),HX_HCSTRING("CULL_FACE_MODE","\x78","\xbd","\x87","\xd1")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRONT_FACE),HX_HCSTRING("FRONT_FACE","\x53","\xb7","\x4d","\xef")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_RANGE),HX_HCSTRING("DEPTH_RANGE","\x01","\x9a","\x23","\xcf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_WRITEMASK),HX_HCSTRING("DEPTH_WRITEMASK","\x8f","\x37","\x3f","\x66")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_CLEAR_VALUE),HX_HCSTRING("DEPTH_CLEAR_VALUE","\x23","\x17","\x0d","\x1b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_FUNC),HX_HCSTRING("DEPTH_FUNC","\x60","\x8f","\xf0","\x1e")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_CLEAR_VALUE),HX_HCSTRING("STENCIL_CLEAR_VALUE","\x9c","\x91","\x82","\x73")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_FUNC),HX_HCSTRING("STENCIL_FUNC","\xc7","\xff","\x34","\xcc")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_FAIL),HX_HCSTRING("STENCIL_FAIL","\x61","\xce","\x25","\xcc")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_PASS_DEPTH_FAIL),HX_HCSTRING("STENCIL_PASS_DEPTH_FAIL","\x45","\xca","\xb9","\xc8")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_PASS_DEPTH_PASS),HX_HCSTRING("STENCIL_PASS_DEPTH_PASS","\x38","\xf5","\x55","\xcf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_REF),HX_HCSTRING("STENCIL_REF","\x10","\x6a","\xa5","\x3c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_VALUE_MASK),HX_HCSTRING("STENCIL_VALUE_MASK","\x9d","\x58","\x5e","\xa0")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_WRITEMASK),HX_HCSTRING("STENCIL_WRITEMASK","\xc8","\xf1","\xa6","\x49")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_BACK_FUNC),HX_HCSTRING("STENCIL_BACK_FUNC","\x39","\x78","\xa2","\x90")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_BACK_FAIL),HX_HCSTRING("STENCIL_BACK_FAIL","\xd3","\x46","\x93","\x90")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_BACK_PASS_DEPTH_FAIL),HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_FAIL","\x13","\x23","\x0e","\x34")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_BACK_PASS_DEPTH_PASS),HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_PASS","\x06","\x4e","\xaa","\x3a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_BACK_REF),HX_HCSTRING("STENCIL_BACK_REF","\xde","\x45","\xb8","\x08")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_BACK_VALUE_MASK),HX_HCSTRING("STENCIL_BACK_VALUE_MASK","\x8f","\xb2","\xc4","\x88")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_BACK_WRITEMASK),HX_HCSTRING("STENCIL_BACK_WRITEMASK","\x16","\x9c","\x15","\xc2")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VIEWPORT),HX_HCSTRING("VIEWPORT","\x66","\xdc","\x2a","\xf6")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SCISSOR_BOX),HX_HCSTRING("SCISSOR_BOX","\xe8","\x48","\x4c","\x55")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,COLOR_CLEAR_VALUE),HX_HCSTRING("COLOR_CLEAR_VALUE","\x83","\xa7","\x2e","\xf8")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,COLOR_WRITEMASK),HX_HCSTRING("COLOR_WRITEMASK","\xef","\xef","\xf9","\x14")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,UNPACK_ALIGNMENT),HX_HCSTRING("UNPACK_ALIGNMENT","\xb6","\x2a","\x2e","\x4b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,PACK_ALIGNMENT),HX_HCSTRING("PACK_ALIGNMENT","\x9d","\xd6","\x85","\xc3")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_TEXTURE_SIZE),HX_HCSTRING("MAX_TEXTURE_SIZE","\xe0","\x0b","\x5b","\xfb")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_VIEWPORT_DIMS),HX_HCSTRING("MAX_VIEWPORT_DIMS","\xa9","\x2d","\xfb","\x08")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SUBPIXEL_BITS),HX_HCSTRING("SUBPIXEL_BITS","\x1f","\xac","\x14","\x0a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RED_BITS),HX_HCSTRING("RED_BITS","\x14","\xf8","\x9e","\x96")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,GREEN_BITS),HX_HCSTRING("GREEN_BITS","\x62","\xa9","\x9b","\x94")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BLUE_BITS),HX_HCSTRING("BLUE_BITS","\x0b","\x26","\x60","\xa1")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ALPHA_BITS),HX_HCSTRING("ALPHA_BITS","\xe7","\xfe","\x7b","\xe0")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_BITS),HX_HCSTRING("DEPTH_BITS","\x22","\x9f","\x42","\x1c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_BITS),HX_HCSTRING("STENCIL_BITS","\x89","\x0f","\x87","\xc9")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,POLYGON_OFFSET_UNITS),HX_HCSTRING("POLYGON_OFFSET_UNITS","\xa8","\xe8","\x11","\xa6")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,POLYGON_OFFSET_FACTOR),HX_HCSTRING("POLYGON_OFFSET_FACTOR","\x56","\x6b","\x12","\x2a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_BINDING_2D),HX_HCSTRING("TEXTURE_BINDING_2D","\x30","\xec","\x98","\xb1")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SAMPLE_BUFFERS),HX_HCSTRING("SAMPLE_BUFFERS","\xfe","\x16","\x71","\x3c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SAMPLES),HX_HCSTRING("SAMPLES","\xe9","\x98","\x9d","\x03")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SAMPLE_COVERAGE_VALUE),HX_HCSTRING("SAMPLE_COVERAGE_VALUE","\x2f","\x7a","\x07","\x69")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SAMPLE_COVERAGE_INVERT),HX_HCSTRING("SAMPLE_COVERAGE_INVERT","\x78","\x52","\xa5","\xcd")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,COMPRESSED_TEXTURE_FORMATS),HX_HCSTRING("COMPRESSED_TEXTURE_FORMATS","\x7a","\x13","\xe3","\x12")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DONT_CARE),HX_HCSTRING("DONT_CARE","\x7f","\x9b","\xc1","\xcf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FASTEST),HX_HCSTRING("FASTEST","\x0a","\xa3","\x0d","\x5e")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,NICEST),HX_HCSTRING("NICEST","\x7e","\x6d","\x94","\x64")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,GENERATE_MIPMAP_HINT),HX_HCSTRING("GENERATE_MIPMAP_HINT","\x94","\xd3","\xd5","\x83")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BYTE),HX_HCSTRING("BYTE","\x08","\xe7","\xe3","\x2b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,UNSIGNED_BYTE),HX_HCSTRING("UNSIGNED_BYTE","\xd2","\x79","\x6b","\x01")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SHORT),HX_HCSTRING("SHORT","\x5c","\xbc","\x15","\xfa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,UNSIGNED_SHORT),HX_HCSTRING("UNSIGNED_SHORT","\x52","\x9a","\x2e","\xfb")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INT),HX_HCSTRING("INT","\xcf","\xa8","\x37","\x00")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,UNSIGNED_INT),HX_HCSTRING("UNSIGNED_INT","\x45","\xfd","\xb9","\x1c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FLOAT),HX_HCSTRING("FLOAT","\x7c","\xfd","\x84","\x80")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_COMPONENT),HX_HCSTRING("DEPTH_COMPONENT","\x01","\x1f","\x62","\x0f")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ALPHA),HX_HCSTRING("ALPHA","\x3e","\xdf","\x84","\x9f")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RGB),HX_HCSTRING("RGB","\xed","\x76","\x3e","\x00")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RGBA),HX_HCSTRING("RGBA","\xb4","\x98","\x69","\x36")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BGR_EXT),HX_HCSTRING("BGR_EXT","\xef","\xba","\xba","\x91")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BGRA_EXT),HX_HCSTRING("BGRA_EXT","\x36","\x94","\xc4","\xbc")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LUMINANCE),HX_HCSTRING("LUMINANCE","\xd8","\xa7","\xe0","\x63")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LUMINANCE_ALPHA),HX_HCSTRING("LUMINANCE_ALPHA","\x57","\x40","\xe0","\xbd")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,UNSIGNED_SHORT_4_4_4_4),HX_HCSTRING("UNSIGNED_SHORT_4_4_4_4","\xa6","\x33","\x71","\x7b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,UNSIGNED_SHORT_5_5_5_1),HX_HCSTRING("UNSIGNED_SHORT_5_5_5_1","\x26","\x01","\x6e","\x38")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,UNSIGNED_SHORT_5_6_5),HX_HCSTRING("UNSIGNED_SHORT_5_6_5","\x75","\xbb","\x16","\x8c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAGMENT_SHADER),HX_HCSTRING("FRAGMENT_SHADER","\xf4","\x26","\x78","\xe9")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VERTEX_SHADER),HX_HCSTRING("VERTEX_SHADER","\xe0","\x69","\x73","\x49")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_VERTEX_ATTRIBS),HX_HCSTRING("MAX_VERTEX_ATTRIBS","\x49","\xc9","\x15","\x5f")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_VERTEX_UNIFORM_VECTORS),HX_HCSTRING("MAX_VERTEX_UNIFORM_VECTORS","\x45","\x6c","\x16","\x5a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_VARYING_VECTORS),HX_HCSTRING("MAX_VARYING_VECTORS","\x06","\xb9","\xf7","\x37")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_COMBINED_TEXTURE_IMAGE_UNITS),HX_HCSTRING("MAX_COMBINED_TEXTURE_IMAGE_UNITS","\xa8","\xd1","\xa6","\x77")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_VERTEX_TEXTURE_IMAGE_UNITS),HX_HCSTRING("MAX_VERTEX_TEXTURE_IMAGE_UNITS","\xc7","\x90","\x95","\x2b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_TEXTURE_IMAGE_UNITS),HX_HCSTRING("MAX_TEXTURE_IMAGE_UNITS","\xcc","\x6c","\x61","\x54")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_FRAGMENT_UNIFORM_VECTORS),HX_HCSTRING("MAX_FRAGMENT_UNIFORM_VECTORS","\x71","\x49","\xf5","\x0a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SHADER_TYPE),HX_HCSTRING("SHADER_TYPE","\x54","\xe5","\x27","\x87")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DELETE_STATUS),HX_HCSTRING("DELETE_STATUS","\x06","\xe4","\x98","\x1e")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LINK_STATUS),HX_HCSTRING("LINK_STATUS","\x17","\x18","\x8f","\x45")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VALIDATE_STATUS),HX_HCSTRING("VALIDATE_STATUS","\xfb","\x22","\x07","\xc6")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ATTACHED_SHADERS),HX_HCSTRING("ATTACHED_SHADERS","\x73","\xd2","\x76","\x75")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ACTIVE_UNIFORMS),HX_HCSTRING("ACTIVE_UNIFORMS","\x98","\x7d","\x3a","\x2c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ACTIVE_ATTRIBUTES),HX_HCSTRING("ACTIVE_ATTRIBUTES","\xf0","\xe5","\xc7","\x4a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SHADING_LANGUAGE_VERSION),HX_HCSTRING("SHADING_LANGUAGE_VERSION","\xe6","\xc4","\xef","\x70")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,CURRENT_PROGRAM),HX_HCSTRING("CURRENT_PROGRAM","\xfe","\x28","\xc0","\x3f")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,NEVER),HX_HCSTRING("NEVER","\x6c","\x76","\x1e","\x17")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LESS),HX_HCSTRING("LESS","\x59","\xdb","\x70","\x32")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,EQUAL),HX_HCSTRING("EQUAL","\x94","\x07","\x71","\xf0")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LEQUAL),HX_HCSTRING("LEQUAL","\xc8","\x73","\x90","\x53")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,GREATER),HX_HCSTRING("GREATER","\xda","\x64","\x94","\x37")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,NOTEQUAL),HX_HCSTRING("NOTEQUAL","\xc1","\xc1","\xe9","\xc8")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,GEQUAL),HX_HCSTRING("GEQUAL","\xed","\xa5","\xc7","\x53")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ALWAYS),HX_HCSTRING("ALWAYS","\xcf","\xba","\x59","\xf9")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,KEEP),HX_HCSTRING("KEEP","\x85","\x98","\xc7","\x31")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,REPLACE),HX_HCSTRING("REPLACE","\x14","\x1c","\xfc","\x2a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INCR),HX_HCSTRING("INCR","\xd4","\xfd","\x7b","\x30")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DECR),HX_HCSTRING("DECR","\x70","\x18","\x27","\x2d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INVERT),HX_HCSTRING("INVERT","\x16","\x93","\x5b","\x52")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INCR_WRAP),HX_HCSTRING("INCR_WRAP","\x55","\x7f","\x68","\x2c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DECR_WRAP),HX_HCSTRING("DECR_WRAP","\x39","\x6f","\xeb","\x0a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VENDOR),HX_HCSTRING("VENDOR","\x88","\x91","\x19","\x51")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERER),HX_HCSTRING("RENDERER","\x43","\x55","\x61","\x0c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VERSION),HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,NEAREST),HX_HCSTRING("NEAREST","\x3e","\xec","\x9d","\xe5")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LINEAR),HX_HCSTRING("LINEAR","\xe5","\xfd","\x22","\x9f")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,NEAREST_MIPMAP_NEAREST),HX_HCSTRING("NEAREST_MIPMAP_NEAREST","\x68","\xb9","\x63","\x7e")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LINEAR_MIPMAP_NEAREST),HX_HCSTRING("LINEAR_MIPMAP_NEAREST","\xa1","\x9b","\xa4","\x65")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,NEAREST_MIPMAP_LINEAR),HX_HCSTRING("NEAREST_MIPMAP_LINEAR","\xfb","\x83","\xf2","\x3b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LINEAR_MIPMAP_LINEAR),HX_HCSTRING("LINEAR_MIPMAP_LINEAR","\xe2","\x8b","\xf8","\x99")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_MAG_FILTER),HX_HCSTRING("TEXTURE_MAG_FILTER","\x88","\xff","\xd5","\x1e")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_MIN_FILTER),HX_HCSTRING("TEXTURE_MIN_FILTER","\x69","\x66","\xc2","\x46")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_WRAP_S),HX_HCSTRING("TEXTURE_WRAP_S","\xa2","\x2d","\xc3","\xfe")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_WRAP_T),HX_HCSTRING("TEXTURE_WRAP_T","\xa3","\x2d","\xc3","\xfe")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_2D),HX_HCSTRING("TEXTURE_2D","\x16","\x0c","\xf8","\xa2")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE),HX_HCSTRING("TEXTURE","\xbb","\x9c","\xb4","\x1e")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_CUBE_MAP),HX_HCSTRING("TEXTURE_CUBE_MAP","\x36","\x7a","\xe1","\xad")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_BINDING_CUBE_MAP),HX_HCSTRING("TEXTURE_BINDING_CUBE_MAP","\xd0","\x69","\x98","\x75")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_CUBE_MAP_POSITIVE_X),HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_X","\xbb","\x1c","\xee","\x24")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_CUBE_MAP_NEGATIVE_X),HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_X","\x77","\x03","\xe2","\x6b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_CUBE_MAP_POSITIVE_Y),HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Y","\xbc","\x1c","\xee","\x24")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_CUBE_MAP_NEGATIVE_Y),HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Y","\x78","\x03","\xe2","\x6b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_CUBE_MAP_POSITIVE_Z),HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Z","\xbd","\x1c","\xee","\x24")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE_CUBE_MAP_NEGATIVE_Z),HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Z","\x79","\x03","\xe2","\x6b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_CUBE_MAP_TEXTURE_SIZE),HX_HCSTRING("MAX_CUBE_MAP_TEXTURE_SIZE","\x77","\xb9","\x24","\x9d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE0),HX_HCSTRING("TEXTURE0","\x15","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE1),HX_HCSTRING("TEXTURE1","\x16","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE2),HX_HCSTRING("TEXTURE2","\x17","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE3),HX_HCSTRING("TEXTURE3","\x18","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE4),HX_HCSTRING("TEXTURE4","\x19","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE5),HX_HCSTRING("TEXTURE5","\x1a","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE6),HX_HCSTRING("TEXTURE6","\x1b","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE7),HX_HCSTRING("TEXTURE7","\x1c","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE8),HX_HCSTRING("TEXTURE8","\x1d","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE9),HX_HCSTRING("TEXTURE9","\x1e","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE10),HX_HCSTRING("TEXTURE10","\x5a","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE11),HX_HCSTRING("TEXTURE11","\x5b","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE12),HX_HCSTRING("TEXTURE12","\x5c","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE13),HX_HCSTRING("TEXTURE13","\x5d","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE14),HX_HCSTRING("TEXTURE14","\x5e","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE15),HX_HCSTRING("TEXTURE15","\x5f","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE16),HX_HCSTRING("TEXTURE16","\x60","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE17),HX_HCSTRING("TEXTURE17","\x61","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE18),HX_HCSTRING("TEXTURE18","\x62","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE19),HX_HCSTRING("TEXTURE19","\x63","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE20),HX_HCSTRING("TEXTURE20","\x39","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE21),HX_HCSTRING("TEXTURE21","\x3a","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE22),HX_HCSTRING("TEXTURE22","\x3b","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE23),HX_HCSTRING("TEXTURE23","\x3c","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE24),HX_HCSTRING("TEXTURE24","\x3d","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE25),HX_HCSTRING("TEXTURE25","\x3e","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE26),HX_HCSTRING("TEXTURE26","\x3f","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE27),HX_HCSTRING("TEXTURE27","\x40","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE28),HX_HCSTRING("TEXTURE28","\x41","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE29),HX_HCSTRING("TEXTURE29","\x42","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE30),HX_HCSTRING("TEXTURE30","\x18","\xae","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,TEXTURE31),HX_HCSTRING("TEXTURE31","\x19","\xae","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,ACTIVE_TEXTURE),HX_HCSTRING("ACTIVE_TEXTURE","\x02","\x1a","\x22","\xce")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,REPEAT),HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,CLAMP_TO_EDGE),HX_HCSTRING("CLAMP_TO_EDGE","\x1d","\xfc","\x5a","\x96")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MIRRORED_REPEAT),HX_HCSTRING("MIRRORED_REPEAT","\x5c","\x94","\x80","\x4a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FLOAT_VEC2),HX_HCSTRING("FLOAT_VEC2","\x61","\xac","\xa4","\xeb")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FLOAT_VEC3),HX_HCSTRING("FLOAT_VEC3","\x62","\xac","\xa4","\xeb")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FLOAT_VEC4),HX_HCSTRING("FLOAT_VEC4","\x63","\xac","\xa4","\xeb")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INT_VEC2),HX_HCSTRING("INT_VEC2","\x2e","\x14","\x05","\x7d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INT_VEC3),HX_HCSTRING("INT_VEC3","\x2f","\x14","\x05","\x7d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INT_VEC4),HX_HCSTRING("INT_VEC4","\x30","\x14","\x05","\x7d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BOOL),HX_HCSTRING("BOOL","\x2a","\x4c","\xdc","\x2b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BOOL_VEC2),HX_HCSTRING("BOOL_VEC2","\xf3","\x66","\x2b","\x2d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BOOL_VEC3),HX_HCSTRING("BOOL_VEC3","\xf4","\x66","\x2b","\x2d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BOOL_VEC4),HX_HCSTRING("BOOL_VEC4","\xf5","\x66","\x2b","\x2d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FLOAT_MAT2),HX_HCSTRING("FLOAT_MAT2","\x95","\xc6","\xae","\xe5")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FLOAT_MAT3),HX_HCSTRING("FLOAT_MAT3","\x96","\xc6","\xae","\xe5")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FLOAT_MAT4),HX_HCSTRING("FLOAT_MAT4","\x97","\xc6","\xae","\xe5")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SAMPLER_2D),HX_HCSTRING("SAMPLER_2D","\x09","\x2a","\x93","\x6e")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,SAMPLER_CUBE),HX_HCSTRING("SAMPLER_CUBE","\xec","\x3e","\x82","\xa4")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VERTEX_ATTRIB_ARRAY_ENABLED),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_ENABLED","\x61","\x99","\x09","\x66")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VERTEX_ATTRIB_ARRAY_SIZE),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_SIZE","\xc1","\x07","\xfd","\x08")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VERTEX_ATTRIB_ARRAY_STRIDE),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_STRIDE","\x19","\x2b","\x41","\x58")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VERTEX_ATTRIB_ARRAY_TYPE),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_TYPE","\xba","\x59","\xb2","\x09")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VERTEX_ATTRIB_ARRAY_NORMALIZED),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_NORMALIZED","\x37","\xb7","\x22","\x78")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VERTEX_ATTRIB_ARRAY_POINTER),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_POINTER","\x9d","\x55","\xfa","\x38")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VERTEX_ATTRIB_ARRAY_BUFFER_BINDING),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","\xa6","\x80","\x67","\x97")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,VERTEX_PROGRAM_POINT_SIZE),HX_HCSTRING("VERTEX_PROGRAM_POINT_SIZE","\xe6","\x56","\xbe","\x34")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,POINT_SPRITE),HX_HCSTRING("POINT_SPRITE","\x74","\x93","\x5c","\x14")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,COMPILE_STATUS),HX_HCSTRING("COMPILE_STATUS","\xde","\xcb","\x4e","\x8c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LOW_FLOAT),HX_HCSTRING("LOW_FLOAT","\x31","\x04","\x74","\xe4")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MEDIUM_FLOAT),HX_HCSTRING("MEDIUM_FLOAT","\xf2","\x8a","\x46","\xb9")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,HIGH_FLOAT),HX_HCSTRING("HIGH_FLOAT","\x9f","\xf9","\x3b","\x47")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,LOW_INT),HX_HCSTRING("LOW_INT","\x44","\x28","\x70","\x45")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MEDIUM_INT),HX_HCSTRING("MEDIUM_INT","\xc5","\xcc","\xaf","\x4f")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,HIGH_INT),HX_HCSTRING("HIGH_INT","\x32","\x46","\x02","\x09")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER),HX_HCSTRING("FRAMEBUFFER","\xcd","\x20","\x84","\x50")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER),HX_HCSTRING("RENDERBUFFER","\xd6","\xa4","\xa4","\xa9")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RGBA4),HX_HCSTRING("RGBA4","\x00","\x05","\xfc","\x65")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RGB5_A1),HX_HCSTRING("RGB5_A1","\x47","\x8f","\xf9","\xd8")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RGB565),HX_HCSTRING("RGB565","\xe7","\x41","\x7f","\xd6")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_COMPONENT16),HX_HCSTRING("DEPTH_COMPONENT16","\x26","\xcc","\x68","\x43")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_INDEX),HX_HCSTRING("STENCIL_INDEX","\x0f","\x79","\xb6","\x97")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_INDEX8),HX_HCSTRING("STENCIL_INDEX8","\x49","\x74","\xf3","\x27")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_STENCIL),HX_HCSTRING("DEPTH_STENCIL","\x40","\x2f","\x20","\x2b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER_WIDTH),HX_HCSTRING("RENDERBUFFER_WIDTH","\x7d","\x1e","\xe1","\x43")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER_HEIGHT),HX_HCSTRING("RENDERBUFFER_HEIGHT","\x70","\x07","\x69","\xd7")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER_INTERNAL_FORMAT),HX_HCSTRING("RENDERBUFFER_INTERNAL_FORMAT","\x90","\xda","\xeb","\xb5")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER_RED_SIZE),HX_HCSTRING("RENDERBUFFER_RED_SIZE","\x98","\xa5","\x58","\x5e")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER_GREEN_SIZE),HX_HCSTRING("RENDERBUFFER_GREEN_SIZE","\x26","\x9b","\x7d","\x3b")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER_BLUE_SIZE),HX_HCSTRING("RENDERBUFFER_BLUE_SIZE","\xdd","\x93","\x86","\xdd")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER_ALPHA_SIZE),HX_HCSTRING("RENDERBUFFER_ALPHA_SIZE","\xab","\xf0","\x5d","\x87")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER_DEPTH_SIZE),HX_HCSTRING("RENDERBUFFER_DEPTH_SIZE","\xe6","\x90","\x24","\xc3")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER_STENCIL_SIZE),HX_HCSTRING("RENDERBUFFER_STENCIL_SIZE","\x8d","\xd5","\x5a","\x9d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE),HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","\x50","\x22","\x44","\x50")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER_ATTACHMENT_OBJECT_NAME),HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","\xe1","\xa1","\x3a","\x4c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL),HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","\xf6","\x9b","\xba","\x81")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE),HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","\xdc","\x4c","\x39","\x8a")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,COLOR_ATTACHMENT0),HX_HCSTRING("COLOR_ATTACHMENT0","\xb1","\x9a","\xfe","\x86")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_ATTACHMENT),HX_HCSTRING("DEPTH_ATTACHMENT","\xff","\x54","\xcd","\xe9")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,STENCIL_ATTACHMENT),HX_HCSTRING("STENCIL_ATTACHMENT","\xa6","\x8c","\x28","\x01")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,DEPTH_STENCIL_ATTACHMENT),HX_HCSTRING("DEPTH_STENCIL_ATTACHMENT","\xc2","\xe1","\xe1","\x9f")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,NONE),HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER_COMPLETE),HX_HCSTRING("FRAMEBUFFER_COMPLETE","\xab","\x65","\x7d","\xea")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER_INCOMPLETE_ATTACHMENT),HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_ATTACHMENT","\xf2","\xcf","\xb7","\x1d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT),HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","\x8b","\x0a","\xcd","\x77")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER_INCOMPLETE_DIMENSIONS),HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_DIMENSIONS","\x5c","\x86","\xe4","\x1c")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER_UNSUPPORTED),HX_HCSTRING("FRAMEBUFFER_UNSUPPORTED","\xe3","\xa6","\x4e","\xc8")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,FRAMEBUFFER_BINDING),HX_HCSTRING("FRAMEBUFFER_BINDING","\x73","\xee","\xae","\xc5")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,RENDERBUFFER_BINDING),HX_HCSTRING("RENDERBUFFER_BINDING","\x7c","\x23","\x70","\x23")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,MAX_RENDERBUFFER_SIZE),HX_HCSTRING("MAX_RENDERBUFFER_SIZE","\x4f","\xd4","\x3d","\x65")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,INVALID_FRAMEBUFFER_OPERATION),HX_HCSTRING("INVALID_FRAMEBUFFER_OPERATION","\x2d","\xd4","\xc5","\x43")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,UNPACK_FLIP_Y_WEBGL),HX_HCSTRING("UNPACK_FLIP_Y_WEBGL","\x0e","\x9f","\x94","\x9d")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,UNPACK_PREMULTIPLY_ALPHA_WEBGL),HX_HCSTRING("UNPACK_PREMULTIPLY_ALPHA_WEBGL","\x73","\x5d","\xcb","\xc6")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,CONTEXT_LOST_WEBGL),HX_HCSTRING("CONTEXT_LOST_WEBGL","\x6e","\x67","\x71","\x45")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,UNPACK_COLORSPACE_CONVERSION_WEBGL),HX_HCSTRING("UNPACK_COLORSPACE_CONVERSION_WEBGL","\x9f","\xd9","\xf0","\xb9")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,BROWSER_DEFAULT_WEBGL),HX_HCSTRING("BROWSER_DEFAULT_WEBGL","\x04","\x04","\x92","\xc0")},
	{hx::fsInt,(int)offsetof(GLRenderContext_obj,version),HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GLRenderContext_obj_sStaticStorageInfo = 0;
#endif

static ::String GLRenderContext_obj_sMemberFields[] = {
	HX_HCSTRING("DEPTH_BUFFER_BIT","\xca","\x5b","\xce","\xc6"),
	HX_HCSTRING("STENCIL_BUFFER_BIT","\x71","\x93","\x29","\xde"),
	HX_HCSTRING("COLOR_BUFFER_BIT","\x6a","\xf7","\x74","\xfb"),
	HX_HCSTRING("POINTS","\x23","\xbe","\xb0","\xa9"),
	HX_HCSTRING("LINES","\xdf","\x15","\xf0","\xf2"),
	HX_HCSTRING("LINE_LOOP","\xcf","\x55","\xc1","\x16"),
	HX_HCSTRING("LINE_STRIP","\xed","\x20","\x88","\xdd"),
	HX_HCSTRING("TRIANGLES","\x8b","\xa0","\x99","\x7a"),
	HX_HCSTRING("TRIANGLE_STRIP","\xc1","\x66","\x6c","\xf6"),
	HX_HCSTRING("TRIANGLE_FAN","\x7c","\xee","\x2e","\x91"),
	HX_HCSTRING("ZERO","\x28","\xd7","\xb1","\x3b"),
	HX_HCSTRING("ONE","\x46","\x36","\x3c","\x00"),
	HX_HCSTRING("SRC_COLOR","\x48","\x9e","\xbd","\x5c"),
	HX_HCSTRING("ONE_MINUS_SRC_COLOR","\x20","\x3b","\xe1","\x48"),
	HX_HCSTRING("SRC_ALPHA","\x43","\xd4","\xf7","\x33"),
	HX_HCSTRING("ONE_MINUS_SRC_ALPHA","\x1b","\x71","\x1b","\x20"),
	HX_HCSTRING("DST_ALPHA","\x24","\x02","\xf2","\xd3"),
	HX_HCSTRING("ONE_MINUS_DST_ALPHA","\xfc","\x9e","\x15","\xc0"),
	HX_HCSTRING("DST_COLOR","\x29","\xcc","\xb7","\xfc"),
	HX_HCSTRING("ONE_MINUS_DST_COLOR","\x01","\x69","\xdb","\xe8"),
	HX_HCSTRING("SRC_ALPHA_SATURATE","\xab","\xe2","\x3d","\x33"),
	HX_HCSTRING("FUNC_ADD","\x46","\x78","\x17","\x75"),
	HX_HCSTRING("BLEND_EQUATION","\x9a","\x14","\x92","\x71"),
	HX_HCSTRING("BLEND_EQUATION_RGB","\x88","\x25","\xeb","\x90"),
	HX_HCSTRING("BLEND_EQUATION_ALPHA","\x99","\xaa","\xae","\x37"),
	HX_HCSTRING("FUNC_SUBTRACT","\xaf","\xc0","\xa0","\x17"),
	HX_HCSTRING("FUNC_REVERSE_SUBTRACT","\xcc","\x8d","\xef","\xf3"),
	HX_HCSTRING("BLEND_DST_RGB","\x05","\x87","\xf5","\xec"),
	HX_HCSTRING("BLEND_SRC_RGB","\x64","\x43","\x8c","\x2c"),
	HX_HCSTRING("BLEND_DST_ALPHA","\x56","\x25","\x32","\x74"),
	HX_HCSTRING("BLEND_SRC_ALPHA","\x75","\xf7","\x37","\xd4"),
	HX_HCSTRING("CONSTANT_COLOR","\xe8","\x64","\x8a","\xc8"),
	HX_HCSTRING("ONE_MINUS_CONSTANT_COLOR","\x10","\x39","\xe7","\x06"),
	HX_HCSTRING("CONSTANT_ALPHA","\xe3","\x9a","\xc4","\x9f"),
	HX_HCSTRING("ONE_MINUS_CONSTANT_ALPHA","\x0b","\x6f","\x21","\xde"),
	HX_HCSTRING("BLEND_COLOR","\x75","\xcb","\xc8","\x67"),
	HX_HCSTRING("ARRAY_BUFFER","\x46","\x66","\x17","\xf4"),
	HX_HCSTRING("ELEMENT_ARRAY_BUFFER","\x09","\x05","\x53","\x3d"),
	HX_HCSTRING("ARRAY_BUFFER_BINDING","\xec","\xd4","\xa9","\x79"),
	HX_HCSTRING("ELEMENT_ARRAY_BUFFER_BINDING","\xaf","\x6e","\x96","\xa2"),
	HX_HCSTRING("STREAM_DRAW","\x63","\x7f","\x28","\x15"),
	HX_HCSTRING("STATIC_DRAW","\x75","\x50","\x2f","\xba"),
	HX_HCSTRING("DYNAMIC_DRAW","\x24","\x04","\x1f","\x24"),
	HX_HCSTRING("BUFFER_SIZE","\xa0","\x7b","\x91","\x4c"),
	HX_HCSTRING("BUFFER_USAGE","\x42","\x05","\x11","\xe0"),
	HX_HCSTRING("CURRENT_VERTEX_ATTRIB","\x1f","\x8c","\x2f","\xab"),
	HX_HCSTRING("FRONT","\x89","\x50","\x7c","\x84"),
	HX_HCSTRING("BACK","\x27","\xa2","\xd1","\x2b"),
	HX_HCSTRING("FRONT_AND_BACK","\xa5","\x3d","\x6a","\xc1"),
	HX_HCSTRING("CULL_FACE","\x8a","\xa5","\xf4","\xcf"),
	HX_HCSTRING("BLEND","\x31","\x20","\xe3","\x32"),
	HX_HCSTRING("DITHER","\xe6","\xac","\x41","\x70"),
	HX_HCSTRING("STENCIL_TEST","\xd5","\xdc","\x69","\xd5"),
	HX_HCSTRING("DEPTH_TEST","\x6e","\x6c","\x25","\x28"),
	HX_HCSTRING("SCISSOR_TEST","\xb5","\xbe","\x51","\x59"),
	HX_HCSTRING("POLYGON_OFFSET_FILL","\x4a","\x3d","\x32","\xac"),
	HX_HCSTRING("SAMPLE_ALPHA_TO_COVERAGE","\x16","\x3e","\x56","\xe1"),
	HX_HCSTRING("SAMPLE_COVERAGE","\xdd","\xb7","\x0e","\xc1"),
	HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f"),
	HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13"),
	HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0"),
	HX_HCSTRING("INVALID_OPERATION","\x5f","\xb1","\xc8","\x29"),
	HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1"),
	HX_HCSTRING("CW","\xb4","\x3a","\x00","\x00"),
	HX_HCSTRING("CCW","\xb7","\x11","\x33","\x00"),
	HX_HCSTRING("LINE_WIDTH","\x1b","\x84","\xd2","\x23"),
	HX_HCSTRING("ALIASED_POINT_SIZE_RANGE","\xfe","\xf6","\xa4","\x7b"),
	HX_HCSTRING("ALIASED_LINE_WIDTH_RANGE","\xe9","\x22","\xd5","\x8a"),
	HX_HCSTRING("CULL_FACE_MODE","\x78","\xbd","\x87","\xd1"),
	HX_HCSTRING("FRONT_FACE","\x53","\xb7","\x4d","\xef"),
	HX_HCSTRING("DEPTH_RANGE","\x01","\x9a","\x23","\xcf"),
	HX_HCSTRING("DEPTH_WRITEMASK","\x8f","\x37","\x3f","\x66"),
	HX_HCSTRING("DEPTH_CLEAR_VALUE","\x23","\x17","\x0d","\x1b"),
	HX_HCSTRING("DEPTH_FUNC","\x60","\x8f","\xf0","\x1e"),
	HX_HCSTRING("STENCIL_CLEAR_VALUE","\x9c","\x91","\x82","\x73"),
	HX_HCSTRING("STENCIL_FUNC","\xc7","\xff","\x34","\xcc"),
	HX_HCSTRING("STENCIL_FAIL","\x61","\xce","\x25","\xcc"),
	HX_HCSTRING("STENCIL_PASS_DEPTH_FAIL","\x45","\xca","\xb9","\xc8"),
	HX_HCSTRING("STENCIL_PASS_DEPTH_PASS","\x38","\xf5","\x55","\xcf"),
	HX_HCSTRING("STENCIL_REF","\x10","\x6a","\xa5","\x3c"),
	HX_HCSTRING("STENCIL_VALUE_MASK","\x9d","\x58","\x5e","\xa0"),
	HX_HCSTRING("STENCIL_WRITEMASK","\xc8","\xf1","\xa6","\x49"),
	HX_HCSTRING("STENCIL_BACK_FUNC","\x39","\x78","\xa2","\x90"),
	HX_HCSTRING("STENCIL_BACK_FAIL","\xd3","\x46","\x93","\x90"),
	HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_FAIL","\x13","\x23","\x0e","\x34"),
	HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_PASS","\x06","\x4e","\xaa","\x3a"),
	HX_HCSTRING("STENCIL_BACK_REF","\xde","\x45","\xb8","\x08"),
	HX_HCSTRING("STENCIL_BACK_VALUE_MASK","\x8f","\xb2","\xc4","\x88"),
	HX_HCSTRING("STENCIL_BACK_WRITEMASK","\x16","\x9c","\x15","\xc2"),
	HX_HCSTRING("VIEWPORT","\x66","\xdc","\x2a","\xf6"),
	HX_HCSTRING("SCISSOR_BOX","\xe8","\x48","\x4c","\x55"),
	HX_HCSTRING("COLOR_CLEAR_VALUE","\x83","\xa7","\x2e","\xf8"),
	HX_HCSTRING("COLOR_WRITEMASK","\xef","\xef","\xf9","\x14"),
	HX_HCSTRING("UNPACK_ALIGNMENT","\xb6","\x2a","\x2e","\x4b"),
	HX_HCSTRING("PACK_ALIGNMENT","\x9d","\xd6","\x85","\xc3"),
	HX_HCSTRING("MAX_TEXTURE_SIZE","\xe0","\x0b","\x5b","\xfb"),
	HX_HCSTRING("MAX_VIEWPORT_DIMS","\xa9","\x2d","\xfb","\x08"),
	HX_HCSTRING("SUBPIXEL_BITS","\x1f","\xac","\x14","\x0a"),
	HX_HCSTRING("RED_BITS","\x14","\xf8","\x9e","\x96"),
	HX_HCSTRING("GREEN_BITS","\x62","\xa9","\x9b","\x94"),
	HX_HCSTRING("BLUE_BITS","\x0b","\x26","\x60","\xa1"),
	HX_HCSTRING("ALPHA_BITS","\xe7","\xfe","\x7b","\xe0"),
	HX_HCSTRING("DEPTH_BITS","\x22","\x9f","\x42","\x1c"),
	HX_HCSTRING("STENCIL_BITS","\x89","\x0f","\x87","\xc9"),
	HX_HCSTRING("POLYGON_OFFSET_UNITS","\xa8","\xe8","\x11","\xa6"),
	HX_HCSTRING("POLYGON_OFFSET_FACTOR","\x56","\x6b","\x12","\x2a"),
	HX_HCSTRING("TEXTURE_BINDING_2D","\x30","\xec","\x98","\xb1"),
	HX_HCSTRING("SAMPLE_BUFFERS","\xfe","\x16","\x71","\x3c"),
	HX_HCSTRING("SAMPLES","\xe9","\x98","\x9d","\x03"),
	HX_HCSTRING("SAMPLE_COVERAGE_VALUE","\x2f","\x7a","\x07","\x69"),
	HX_HCSTRING("SAMPLE_COVERAGE_INVERT","\x78","\x52","\xa5","\xcd"),
	HX_HCSTRING("COMPRESSED_TEXTURE_FORMATS","\x7a","\x13","\xe3","\x12"),
	HX_HCSTRING("DONT_CARE","\x7f","\x9b","\xc1","\xcf"),
	HX_HCSTRING("FASTEST","\x0a","\xa3","\x0d","\x5e"),
	HX_HCSTRING("NICEST","\x7e","\x6d","\x94","\x64"),
	HX_HCSTRING("GENERATE_MIPMAP_HINT","\x94","\xd3","\xd5","\x83"),
	HX_HCSTRING("BYTE","\x08","\xe7","\xe3","\x2b"),
	HX_HCSTRING("UNSIGNED_BYTE","\xd2","\x79","\x6b","\x01"),
	HX_HCSTRING("SHORT","\x5c","\xbc","\x15","\xfa"),
	HX_HCSTRING("UNSIGNED_SHORT","\x52","\x9a","\x2e","\xfb"),
	HX_HCSTRING("INT","\xcf","\xa8","\x37","\x00"),
	HX_HCSTRING("UNSIGNED_INT","\x45","\xfd","\xb9","\x1c"),
	HX_HCSTRING("FLOAT","\x7c","\xfd","\x84","\x80"),
	HX_HCSTRING("DEPTH_COMPONENT","\x01","\x1f","\x62","\x0f"),
	HX_HCSTRING("ALPHA","\x3e","\xdf","\x84","\x9f"),
	HX_HCSTRING("RGB","\xed","\x76","\x3e","\x00"),
	HX_HCSTRING("RGBA","\xb4","\x98","\x69","\x36"),
	HX_HCSTRING("BGR_EXT","\xef","\xba","\xba","\x91"),
	HX_HCSTRING("BGRA_EXT","\x36","\x94","\xc4","\xbc"),
	HX_HCSTRING("LUMINANCE","\xd8","\xa7","\xe0","\x63"),
	HX_HCSTRING("LUMINANCE_ALPHA","\x57","\x40","\xe0","\xbd"),
	HX_HCSTRING("UNSIGNED_SHORT_4_4_4_4","\xa6","\x33","\x71","\x7b"),
	HX_HCSTRING("UNSIGNED_SHORT_5_5_5_1","\x26","\x01","\x6e","\x38"),
	HX_HCSTRING("UNSIGNED_SHORT_5_6_5","\x75","\xbb","\x16","\x8c"),
	HX_HCSTRING("FRAGMENT_SHADER","\xf4","\x26","\x78","\xe9"),
	HX_HCSTRING("VERTEX_SHADER","\xe0","\x69","\x73","\x49"),
	HX_HCSTRING("MAX_VERTEX_ATTRIBS","\x49","\xc9","\x15","\x5f"),
	HX_HCSTRING("MAX_VERTEX_UNIFORM_VECTORS","\x45","\x6c","\x16","\x5a"),
	HX_HCSTRING("MAX_VARYING_VECTORS","\x06","\xb9","\xf7","\x37"),
	HX_HCSTRING("MAX_COMBINED_TEXTURE_IMAGE_UNITS","\xa8","\xd1","\xa6","\x77"),
	HX_HCSTRING("MAX_VERTEX_TEXTURE_IMAGE_UNITS","\xc7","\x90","\x95","\x2b"),
	HX_HCSTRING("MAX_TEXTURE_IMAGE_UNITS","\xcc","\x6c","\x61","\x54"),
	HX_HCSTRING("MAX_FRAGMENT_UNIFORM_VECTORS","\x71","\x49","\xf5","\x0a"),
	HX_HCSTRING("SHADER_TYPE","\x54","\xe5","\x27","\x87"),
	HX_HCSTRING("DELETE_STATUS","\x06","\xe4","\x98","\x1e"),
	HX_HCSTRING("LINK_STATUS","\x17","\x18","\x8f","\x45"),
	HX_HCSTRING("VALIDATE_STATUS","\xfb","\x22","\x07","\xc6"),
	HX_HCSTRING("ATTACHED_SHADERS","\x73","\xd2","\x76","\x75"),
	HX_HCSTRING("ACTIVE_UNIFORMS","\x98","\x7d","\x3a","\x2c"),
	HX_HCSTRING("ACTIVE_ATTRIBUTES","\xf0","\xe5","\xc7","\x4a"),
	HX_HCSTRING("SHADING_LANGUAGE_VERSION","\xe6","\xc4","\xef","\x70"),
	HX_HCSTRING("CURRENT_PROGRAM","\xfe","\x28","\xc0","\x3f"),
	HX_HCSTRING("NEVER","\x6c","\x76","\x1e","\x17"),
	HX_HCSTRING("LESS","\x59","\xdb","\x70","\x32"),
	HX_HCSTRING("EQUAL","\x94","\x07","\x71","\xf0"),
	HX_HCSTRING("LEQUAL","\xc8","\x73","\x90","\x53"),
	HX_HCSTRING("GREATER","\xda","\x64","\x94","\x37"),
	HX_HCSTRING("NOTEQUAL","\xc1","\xc1","\xe9","\xc8"),
	HX_HCSTRING("GEQUAL","\xed","\xa5","\xc7","\x53"),
	HX_HCSTRING("ALWAYS","\xcf","\xba","\x59","\xf9"),
	HX_HCSTRING("KEEP","\x85","\x98","\xc7","\x31"),
	HX_HCSTRING("REPLACE","\x14","\x1c","\xfc","\x2a"),
	HX_HCSTRING("INCR","\xd4","\xfd","\x7b","\x30"),
	HX_HCSTRING("DECR","\x70","\x18","\x27","\x2d"),
	HX_HCSTRING("INVERT","\x16","\x93","\x5b","\x52"),
	HX_HCSTRING("INCR_WRAP","\x55","\x7f","\x68","\x2c"),
	HX_HCSTRING("DECR_WRAP","\x39","\x6f","\xeb","\x0a"),
	HX_HCSTRING("VENDOR","\x88","\x91","\x19","\x51"),
	HX_HCSTRING("RENDERER","\x43","\x55","\x61","\x0c"),
	HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc"),
	HX_HCSTRING("NEAREST","\x3e","\xec","\x9d","\xe5"),
	HX_HCSTRING("LINEAR","\xe5","\xfd","\x22","\x9f"),
	HX_HCSTRING("NEAREST_MIPMAP_NEAREST","\x68","\xb9","\x63","\x7e"),
	HX_HCSTRING("LINEAR_MIPMAP_NEAREST","\xa1","\x9b","\xa4","\x65"),
	HX_HCSTRING("NEAREST_MIPMAP_LINEAR","\xfb","\x83","\xf2","\x3b"),
	HX_HCSTRING("LINEAR_MIPMAP_LINEAR","\xe2","\x8b","\xf8","\x99"),
	HX_HCSTRING("TEXTURE_MAG_FILTER","\x88","\xff","\xd5","\x1e"),
	HX_HCSTRING("TEXTURE_MIN_FILTER","\x69","\x66","\xc2","\x46"),
	HX_HCSTRING("TEXTURE_WRAP_S","\xa2","\x2d","\xc3","\xfe"),
	HX_HCSTRING("TEXTURE_WRAP_T","\xa3","\x2d","\xc3","\xfe"),
	HX_HCSTRING("TEXTURE_2D","\x16","\x0c","\xf8","\xa2"),
	HX_HCSTRING("TEXTURE","\xbb","\x9c","\xb4","\x1e"),
	HX_HCSTRING("TEXTURE_CUBE_MAP","\x36","\x7a","\xe1","\xad"),
	HX_HCSTRING("TEXTURE_BINDING_CUBE_MAP","\xd0","\x69","\x98","\x75"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_X","\xbb","\x1c","\xee","\x24"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_X","\x77","\x03","\xe2","\x6b"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Y","\xbc","\x1c","\xee","\x24"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Y","\x78","\x03","\xe2","\x6b"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Z","\xbd","\x1c","\xee","\x24"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Z","\x79","\x03","\xe2","\x6b"),
	HX_HCSTRING("MAX_CUBE_MAP_TEXTURE_SIZE","\x77","\xb9","\x24","\x9d"),
	HX_HCSTRING("TEXTURE0","\x15","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE1","\x16","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE2","\x17","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE3","\x18","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE4","\x19","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE5","\x1a","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE6","\x1b","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE7","\x1c","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE8","\x1d","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE9","\x1e","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE10","\x5a","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE11","\x5b","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE12","\x5c","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE13","\x5d","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE14","\x5e","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE15","\x5f","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE16","\x60","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE17","\x61","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE18","\x62","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE19","\x63","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE20","\x39","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE21","\x3a","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE22","\x3b","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE23","\x3c","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE24","\x3d","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE25","\x3e","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE26","\x3f","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE27","\x40","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE28","\x41","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE29","\x42","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE30","\x18","\xae","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE31","\x19","\xae","\xa1","\xaa"),
	HX_HCSTRING("ACTIVE_TEXTURE","\x02","\x1a","\x22","\xce"),
	HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8"),
	HX_HCSTRING("CLAMP_TO_EDGE","\x1d","\xfc","\x5a","\x96"),
	HX_HCSTRING("MIRRORED_REPEAT","\x5c","\x94","\x80","\x4a"),
	HX_HCSTRING("FLOAT_VEC2","\x61","\xac","\xa4","\xeb"),
	HX_HCSTRING("FLOAT_VEC3","\x62","\xac","\xa4","\xeb"),
	HX_HCSTRING("FLOAT_VEC4","\x63","\xac","\xa4","\xeb"),
	HX_HCSTRING("INT_VEC2","\x2e","\x14","\x05","\x7d"),
	HX_HCSTRING("INT_VEC3","\x2f","\x14","\x05","\x7d"),
	HX_HCSTRING("INT_VEC4","\x30","\x14","\x05","\x7d"),
	HX_HCSTRING("BOOL","\x2a","\x4c","\xdc","\x2b"),
	HX_HCSTRING("BOOL_VEC2","\xf3","\x66","\x2b","\x2d"),
	HX_HCSTRING("BOOL_VEC3","\xf4","\x66","\x2b","\x2d"),
	HX_HCSTRING("BOOL_VEC4","\xf5","\x66","\x2b","\x2d"),
	HX_HCSTRING("FLOAT_MAT2","\x95","\xc6","\xae","\xe5"),
	HX_HCSTRING("FLOAT_MAT3","\x96","\xc6","\xae","\xe5"),
	HX_HCSTRING("FLOAT_MAT4","\x97","\xc6","\xae","\xe5"),
	HX_HCSTRING("SAMPLER_2D","\x09","\x2a","\x93","\x6e"),
	HX_HCSTRING("SAMPLER_CUBE","\xec","\x3e","\x82","\xa4"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_ENABLED","\x61","\x99","\x09","\x66"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_SIZE","\xc1","\x07","\xfd","\x08"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_STRIDE","\x19","\x2b","\x41","\x58"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_TYPE","\xba","\x59","\xb2","\x09"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_NORMALIZED","\x37","\xb7","\x22","\x78"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_POINTER","\x9d","\x55","\xfa","\x38"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","\xa6","\x80","\x67","\x97"),
	HX_HCSTRING("VERTEX_PROGRAM_POINT_SIZE","\xe6","\x56","\xbe","\x34"),
	HX_HCSTRING("POINT_SPRITE","\x74","\x93","\x5c","\x14"),
	HX_HCSTRING("COMPILE_STATUS","\xde","\xcb","\x4e","\x8c"),
	HX_HCSTRING("LOW_FLOAT","\x31","\x04","\x74","\xe4"),
	HX_HCSTRING("MEDIUM_FLOAT","\xf2","\x8a","\x46","\xb9"),
	HX_HCSTRING("HIGH_FLOAT","\x9f","\xf9","\x3b","\x47"),
	HX_HCSTRING("LOW_INT","\x44","\x28","\x70","\x45"),
	HX_HCSTRING("MEDIUM_INT","\xc5","\xcc","\xaf","\x4f"),
	HX_HCSTRING("HIGH_INT","\x32","\x46","\x02","\x09"),
	HX_HCSTRING("FRAMEBUFFER","\xcd","\x20","\x84","\x50"),
	HX_HCSTRING("RENDERBUFFER","\xd6","\xa4","\xa4","\xa9"),
	HX_HCSTRING("RGBA4","\x00","\x05","\xfc","\x65"),
	HX_HCSTRING("RGB5_A1","\x47","\x8f","\xf9","\xd8"),
	HX_HCSTRING("RGB565","\xe7","\x41","\x7f","\xd6"),
	HX_HCSTRING("DEPTH_COMPONENT16","\x26","\xcc","\x68","\x43"),
	HX_HCSTRING("STENCIL_INDEX","\x0f","\x79","\xb6","\x97"),
	HX_HCSTRING("STENCIL_INDEX8","\x49","\x74","\xf3","\x27"),
	HX_HCSTRING("DEPTH_STENCIL","\x40","\x2f","\x20","\x2b"),
	HX_HCSTRING("RENDERBUFFER_WIDTH","\x7d","\x1e","\xe1","\x43"),
	HX_HCSTRING("RENDERBUFFER_HEIGHT","\x70","\x07","\x69","\xd7"),
	HX_HCSTRING("RENDERBUFFER_INTERNAL_FORMAT","\x90","\xda","\xeb","\xb5"),
	HX_HCSTRING("RENDERBUFFER_RED_SIZE","\x98","\xa5","\x58","\x5e"),
	HX_HCSTRING("RENDERBUFFER_GREEN_SIZE","\x26","\x9b","\x7d","\x3b"),
	HX_HCSTRING("RENDERBUFFER_BLUE_SIZE","\xdd","\x93","\x86","\xdd"),
	HX_HCSTRING("RENDERBUFFER_ALPHA_SIZE","\xab","\xf0","\x5d","\x87"),
	HX_HCSTRING("RENDERBUFFER_DEPTH_SIZE","\xe6","\x90","\x24","\xc3"),
	HX_HCSTRING("RENDERBUFFER_STENCIL_SIZE","\x8d","\xd5","\x5a","\x9d"),
	HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","\x50","\x22","\x44","\x50"),
	HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","\xe1","\xa1","\x3a","\x4c"),
	HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","\xf6","\x9b","\xba","\x81"),
	HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","\xdc","\x4c","\x39","\x8a"),
	HX_HCSTRING("COLOR_ATTACHMENT0","\xb1","\x9a","\xfe","\x86"),
	HX_HCSTRING("DEPTH_ATTACHMENT","\xff","\x54","\xcd","\xe9"),
	HX_HCSTRING("STENCIL_ATTACHMENT","\xa6","\x8c","\x28","\x01"),
	HX_HCSTRING("DEPTH_STENCIL_ATTACHMENT","\xc2","\xe1","\xe1","\x9f"),
	HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"),
	HX_HCSTRING("FRAMEBUFFER_COMPLETE","\xab","\x65","\x7d","\xea"),
	HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_ATTACHMENT","\xf2","\xcf","\xb7","\x1d"),
	HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","\x8b","\x0a","\xcd","\x77"),
	HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_DIMENSIONS","\x5c","\x86","\xe4","\x1c"),
	HX_HCSTRING("FRAMEBUFFER_UNSUPPORTED","\xe3","\xa6","\x4e","\xc8"),
	HX_HCSTRING("FRAMEBUFFER_BINDING","\x73","\xee","\xae","\xc5"),
	HX_HCSTRING("RENDERBUFFER_BINDING","\x7c","\x23","\x70","\x23"),
	HX_HCSTRING("MAX_RENDERBUFFER_SIZE","\x4f","\xd4","\x3d","\x65"),
	HX_HCSTRING("INVALID_FRAMEBUFFER_OPERATION","\x2d","\xd4","\xc5","\x43"),
	HX_HCSTRING("UNPACK_FLIP_Y_WEBGL","\x0e","\x9f","\x94","\x9d"),
	HX_HCSTRING("UNPACK_PREMULTIPLY_ALPHA_WEBGL","\x73","\x5d","\xcb","\xc6"),
	HX_HCSTRING("CONTEXT_LOST_WEBGL","\x6e","\x67","\x71","\x45"),
	HX_HCSTRING("UNPACK_COLORSPACE_CONVERSION_WEBGL","\x9f","\xd9","\xf0","\xb9"),
	HX_HCSTRING("BROWSER_DEFAULT_WEBGL","\x04","\x04","\x92","\xc0"),
	HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"),
	HX_HCSTRING("activeTexture","\xb5","\x13","\xaa","\x56"),
	HX_HCSTRING("attachShader","\xca","\xd0","\x77","\xb2"),
	HX_HCSTRING("bindAttribLocation","\x3c","\xa6","\x30","\x1e"),
	HX_HCSTRING("bindBuffer","\x9d","\x92","\xbe","\xf8"),
	HX_HCSTRING("bindFramebuffer","\x30","\xc6","\x61","\xe7"),
	HX_HCSTRING("bindRenderbuffer","\x33","\xb6","\xb7","\x14"),
	HX_HCSTRING("bindTexture","\x9e","\xdc","\x51","\x9b"),
	HX_HCSTRING("blendColor","\x52","\x33","\xb4","\xe2"),
	HX_HCSTRING("blendEquation","\xfd","\x98","\xad","\x02"),
	HX_HCSTRING("blendEquationSeparate","\x80","\x39","\x68","\xa7"),
	HX_HCSTRING("blendFunc","\x35","\xfc","\x9b","\x07"),
	HX_HCSTRING("blendFuncSeparate","\xb8","\x94","\xc0","\xca"),
	HX_HCSTRING("bufferData","\x4a","\xbf","\x73","\x93"),
	HX_HCSTRING("bufferSubData","\xaa","\xf6","\xe4","\x45"),
	HX_HCSTRING("checkFramebufferStatus","\x17","\x26","\x75","\x0a"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clearColor","\x96","\xb0","\x66","\x1f"),
	HX_HCSTRING("clearDepth","\x36","\x30","\x34","\xac"),
	HX_HCSTRING("clearStencil","\xef","\x6f","\x82","\x5b"),
	HX_HCSTRING("colorMask","\xef","\xcb","\xc3","\x23"),
	HX_HCSTRING("compileShader","\xf8","\x70","\xb2","\xda"),
	HX_HCSTRING("compressedTexImage2D","\xa7","\xd8","\x5d","\x24"),
	HX_HCSTRING("compressedTexSubImage2D","\xd3","\xb5","\x7d","\x36"),
	HX_HCSTRING("copyTexImage2D","\xdb","\xd0","\x76","\xe4"),
	HX_HCSTRING("copyTexSubImage2D","\x1f","\xd6","\xae","\xa4"),
	HX_HCSTRING("createBuffer","\x1c","\xfd","\xe9","\xf2"),
	HX_HCSTRING("createFramebuffer","\x51","\xef","\xe8","\xcc"),
	HX_HCSTRING("createProgram","\xe8","\x22","\x3c","\xdc"),
	HX_HCSTRING("createRenderbuffer","\xf2","\x89","\x74","\x05"),
	HX_HCSTRING("createShader","\x41","\xff","\x75","\x3f"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("cullFace","\x6f","\xe7","\x31","\xac"),
	HX_HCSTRING("deleteBuffer","\x8b","\xe3","\x2c","\x37"),
	HX_HCSTRING("deleteFramebuffer","\x82","\x56","\x01","\x50"),
	HX_HCSTRING("deleteProgram","\x99","\xdd","\x82","\x52"),
	HX_HCSTRING("deleteRenderbuffer","\xa1","\x6d","\xb6","\x37"),
	HX_HCSTRING("deleteShader","\xb0","\xe5","\xb8","\x83"),
	HX_HCSTRING("deleteTexture","\xf0","\x5b","\x6a","\xfd"),
	HX_HCSTRING("depthFunc","\xe7","\x45","\x48","\x9a"),
	HX_HCSTRING("depthMask","\x8f","\x9b","\xd9","\x9e"),
	HX_HCSTRING("depthRange","\xba","\x99","\x8b","\x40"),
	HX_HCSTRING("detachShader","\xd8","\xd0","\xad","\xea"),
	HX_HCSTRING("disable","\xe8","\x69","\x58","\xb1"),
	HX_HCSTRING("disableVertexAttribArray","\xe3","\x69","\x74","\x4a"),
	HX_HCSTRING("drawArrays","\xde","\xf3","\xb3","\xf9"),
	HX_HCSTRING("drawElements","\x5b","\xc2","\xb7","\x59"),
	HX_HCSTRING("enable","\x83","\xae","\x87","\xf8"),
	HX_HCSTRING("enableVertexAttribArray","\xe8","\x46","\x5a","\xac"),
	HX_HCSTRING("finish","\x53","\x40","\x7f","\x86"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("framebufferRenderbuffer","\x63","\xdd","\xb2","\x36"),
	HX_HCSTRING("framebufferTexture2D","\xc0","\x66","\x22","\x24"),
	HX_HCSTRING("frontFace","\xe6","\x01","\xc1","\x80"),
	HX_HCSTRING("generateMipmap","\x9d","\xd6","\x0d","\x5b"),
	HX_HCSTRING("getActiveAttrib","\x66","\x8b","\x22","\x63"),
	HX_HCSTRING("getActiveUniform","\x98","\x35","\x4e","\xd7"),
	HX_HCSTRING("getAttachedShaders","\xb4","\x2e","\x77","\x93"),
	HX_HCSTRING("getAttribLocation","\xd5","\x1a","\x10","\x5d"),
	HX_HCSTRING("getBufferParameter","\x93","\x58","\xb4","\x14"),
	HX_HCSTRING("getContextAttributes","\x30","\xda","\xe1","\xad"),
	HX_HCSTRING("getError","\x52","\xdb","\x00","\xd3"),
	HX_HCSTRING("getExtension","\x09","\x30","\x67","\xf4"),
	HX_HCSTRING("getFramebufferAttachmentParameter","\x8f","\xbf","\x8d","\xff"),
	HX_HCSTRING("getParameter","\x33","\xd2","\x06","\x58"),
	HX_HCSTRING("getProgramInfoLog","\xc8","\xf1","\xf2","\xcd"),
	HX_HCSTRING("getProgramParameter","\x3b","\xc3","\x9c","\x96"),
	HX_HCSTRING("getRenderbufferParameter","\x7d","\xc1","\xd7","\x3c"),
	HX_HCSTRING("getShaderInfoLog","\x9b","\xbd","\xc8","\xf3"),
	HX_HCSTRING("getShaderParameter","\xce","\x69","\x5b","\x36"),
	HX_HCSTRING("getShaderPrecisionFormat","\xfa","\xb8","\xcf","\xce"),
	HX_HCSTRING("getShaderSource","\x96","\xa3","\x04","\xc5"),
	HX_HCSTRING("getSupportedExtensions","\xec","\x78","\x6d","\xa1"),
	HX_HCSTRING("getTexParameter","\x78","\x98","\xd3","\xd2"),
	HX_HCSTRING("getUniform","\x3e","\xc7","\xc5","\x04"),
	HX_HCSTRING("getUniformLocation","\x93","\x5f","\xd4","\x4f"),
	HX_HCSTRING("getVertexAttrib","\x84","\x2f","\x1c","\xa3"),
	HX_HCSTRING("getVertexAttribOffset","\x37","\xb6","\xce","\x56"),
	HX_HCSTRING("hint","\x87","\x3d","\x0e","\x45"),
	HX_HCSTRING("isBuffer","\x8a","\x58","\xfe","\x28"),
	HX_HCSTRING("isContextLost","\xa9","\xdf","\xdf","\x2d"),
	HX_HCSTRING("isEnabled","\xb7","\x81","\x2f","\x82"),
	HX_HCSTRING("isFramebuffer","\x23","\x65","\x6c","\x83"),
	HX_HCSTRING("isProgram","\xba","\xc7","\xf7","\xf7"),
	HX_HCSTRING("isRenderbuffer","\xe0","\x2b","\xf8","\x01"),
	HX_HCSTRING("isShader","\xaf","\x5a","\x8a","\x75"),
	HX_HCSTRING("isTexture","\x11","\x46","\xdf","\xa2"),
	HX_HCSTRING("lineWidth","\x72","\xb9","\x5d","\x11"),
	HX_HCSTRING("linkProgram","\xaa","\xad","\x7b","\x89"),
	HX_HCSTRING("pixelStorei","\x8e","\x34","\xc8","\x80"),
	HX_HCSTRING("polygonOffset","\xad","\x25","\x4d","\x66"),
	HX_HCSTRING("readPixels","\x23","\xd3","\x25","\x86"),
	HX_HCSTRING("renderbufferStorage","\x05","\xa1","\x70","\x87"),
	HX_HCSTRING("sampleCoverage","\x32","\x68","\x81","\x3b"),
	HX_HCSTRING("scissor","\x1c","\x28","\xe7","\x04"),
	HX_HCSTRING("shaderSource","\xe0","\x4d","\x1a","\xa2"),
	HX_HCSTRING("stencilFunc","\x60","\x83","\xbe","\x40"),
	HX_HCSTRING("stencilFuncSeparate","\xe3","\xbe","\xce","\xb2"),
	HX_HCSTRING("stencilMask","\x08","\xd9","\x4f","\x45"),
	HX_HCSTRING("stencilMaskSeparate","\x8b","\xfc","\xa9","\xc6"),
	HX_HCSTRING("stencilOp","\x3d","\x7a","\xec","\x56"),
	HX_HCSTRING("stencilOpSeparate","\xc0","\x5a","\x4a","\x53"),
	HX_HCSTRING("texImage2D","\xc6","\x7c","\x67","\xb9"),
	HX_HCSTRING("texParameterf","\x64","\x27","\x31","\x3c"),
	HX_HCSTRING("texParameteri","\x67","\x27","\x31","\x3c"),
	HX_HCSTRING("texSubImage2D","\x14","\x2f","\x90","\x28"),
	HX_HCSTRING("uniform1f","\x49","\x21","\xde","\x07"),
	HX_HCSTRING("uniform1fv","\x0d","\xff","\x7e","\xda"),
	HX_HCSTRING("uniform1i","\x4c","\x21","\xde","\x07"),
	HX_HCSTRING("uniform1iv","\xaa","\x01","\x7f","\xda"),
	HX_HCSTRING("uniform2f","\x28","\x22","\xde","\x07"),
	HX_HCSTRING("uniform2fv","\x4e","\xc1","\x7f","\xda"),
	HX_HCSTRING("uniform2i","\x2b","\x22","\xde","\x07"),
	HX_HCSTRING("uniform2iv","\xeb","\xc3","\x7f","\xda"),
	HX_HCSTRING("uniform3f","\x07","\x23","\xde","\x07"),
	HX_HCSTRING("uniform3fv","\x8f","\x83","\x80","\xda"),
	HX_HCSTRING("uniform3i","\x0a","\x23","\xde","\x07"),
	HX_HCSTRING("uniform3iv","\x2c","\x86","\x80","\xda"),
	HX_HCSTRING("uniform4f","\xe6","\x23","\xde","\x07"),
	HX_HCSTRING("uniform4fv","\xd0","\x45","\x81","\xda"),
	HX_HCSTRING("uniform4i","\xe9","\x23","\xde","\x07"),
	HX_HCSTRING("uniform4iv","\x6d","\x48","\x81","\xda"),
	HX_HCSTRING("uniformMatrix2fv","\x8d","\x8a","\x59","\xc5"),
	HX_HCSTRING("uniformMatrix3fv","\xce","\x4c","\x5a","\xc5"),
	HX_HCSTRING("uniformMatrix4fv","\x0f","\x0f","\x5b","\xc5"),
	HX_HCSTRING("useProgram","\xfd","\x6c","\xac","\xf6"),
	HX_HCSTRING("validateProgram","\x8e","\x80","\x0f","\xef"),
	HX_HCSTRING("vertexAttrib1f","\x63","\x94","\xb6","\x53"),
	HX_HCSTRING("vertexAttrib1fv","\xb3","\x42","\x0b","\xec"),
	HX_HCSTRING("vertexAttrib2f","\x42","\x95","\xb6","\x53"),
	HX_HCSTRING("vertexAttrib2fv","\xf4","\x04","\x0c","\xec"),
	HX_HCSTRING("vertexAttrib3f","\x21","\x96","\xb6","\x53"),
	HX_HCSTRING("vertexAttrib3fv","\x35","\xc7","\x0c","\xec"),
	HX_HCSTRING("vertexAttrib4f","\x00","\x97","\xb6","\x53"),
	HX_HCSTRING("vertexAttrib4fv","\x76","\x89","\x0d","\xec"),
	HX_HCSTRING("vertexAttribPointer","\x8f","\x04","\xb6","\x3f"),
	HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c"),
	HX_HCSTRING("get_version","\x2f","\x47","\xec","\x02"),
	::String(null()) };

static void GLRenderContext_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLRenderContext_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLRenderContext_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLRenderContext_obj::__mClass,"__mClass");
};

#endif

hx::Class GLRenderContext_obj::__mClass;

void GLRenderContext_obj::__register()
{
	hx::Object *dummy = new GLRenderContext_obj;
	GLRenderContext_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.GLRenderContext","\xaa","\x48","\x0f","\x98");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLRenderContext_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLRenderContext_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLRenderContext_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLRenderContext_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLRenderContext_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLRenderContext_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace graphics
