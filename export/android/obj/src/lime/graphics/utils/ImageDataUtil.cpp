// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_graphics_utils__ImageDataUtil_ImageDataView
#include <lime/graphics/utils/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_color__RGBA_RGBA_Impl_
#include <lime/math/color/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_29_colorTransform,"lime.graphics.utils.ImageDataUtil","colorTransform",0x2c17e9b7,"lime.graphics.utils.ImageDataUtil.colorTransform","lime/graphics/utils/ImageDataUtil.hx",29,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_74_copyChannel,"lime.graphics.utils.ImageDataUtil","copyChannel",0xa41162a0,"lime.graphics.utils.ImageDataUtil.copyChannel","lime/graphics/utils/ImageDataUtil.hx",74,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_158_copyPixels,"lime.graphics.utils.ImageDataUtil","copyPixels",0x95aa37f0,"lime.graphics.utils.ImageDataUtil.copyPixels","lime/graphics/utils/ImageDataUtil.hx",158,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_304_fillRect,"lime.graphics.utils.ImageDataUtil","fillRect",0x163460f5,"lime.graphics.utils.ImageDataUtil.fillRect","lime/graphics/utils/ImageDataUtil.hx",304,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_355_floodFill,"lime.graphics.utils.ImageDataUtil","floodFill",0xfbc79ff3,"lime.graphics.utils.ImageDataUtil.floodFill","lime/graphics/utils/ImageDataUtil.hx",355,0x494d921f)
static const int _hx_array_data_f0237280_19[] = {
	(int)0,(int)-1,(int)1,(int)0,
};
static const int _hx_array_data_f0237280_20[] = {
	(int)-1,(int)0,(int)0,(int)1,
};
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_437_getColorBoundsRect,"lime.graphics.utils.ImageDataUtil","getColorBoundsRect",0xfea06eb4,"lime.graphics.utils.ImageDataUtil.getColorBoundsRect","lime/graphics/utils/ImageDataUtil.hx",437,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_604_getPixel,"lime.graphics.utils.ImageDataUtil","getPixel",0xcbf5f1be,"lime.graphics.utils.ImageDataUtil.getPixel","lime/graphics/utils/ImageDataUtil.hx",604,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_622_getPixel32,"lime.graphics.utils.ImageDataUtil","getPixel32",0x2aa489dd,"lime.graphics.utils.ImageDataUtil.getPixel32","lime/graphics/utils/ImageDataUtil.hx",622,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_639_getPixels,"lime.graphics.utils.ImageDataUtil","getPixels",0xab3d94f5,"lime.graphics.utils.ImageDataUtil.getPixels","lime/graphics/utils/ImageDataUtil.hx",639,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_693_merge,"lime.graphics.utils.ImageDataUtil","merge",0xf0318e4a,"lime.graphics.utils.ImageDataUtil.merge","lime/graphics/utils/ImageDataUtil.hx",693,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_745_multiplyAlpha,"lime.graphics.utils.ImageDataUtil","multiplyAlpha",0xb898c02c,"lime.graphics.utils.ImageDataUtil.multiplyAlpha","lime/graphics/utils/ImageDataUtil.hx",745,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_774_resize,"lime.graphics.utils.ImageDataUtil","resize",0x3b9e8e22,"lime.graphics.utils.ImageDataUtil.resize","lime/graphics/utils/ImageDataUtil.hx",774,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_847_resizeBuffer,"lime.graphics.utils.ImageDataUtil","resizeBuffer",0x390004c2,"lime.graphics.utils.ImageDataUtil.resizeBuffer","lime/graphics/utils/ImageDataUtil.hx",847,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_877_setFormat,"lime.graphics.utils.ImageDataUtil","setFormat",0xff73210b,"lime.graphics.utils.ImageDataUtil.setFormat","lime/graphics/utils/ImageDataUtil.hx",877,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_966_setPixel,"lime.graphics.utils.ImageDataUtil","setPixel",0x7a534b32,"lime.graphics.utils.ImageDataUtil.setPixel","lime/graphics/utils/ImageDataUtil.hx",966,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_991_setPixel32,"lime.graphics.utils.ImageDataUtil","setPixel32",0x2e222851,"lime.graphics.utils.ImageDataUtil.setPixel32","lime/graphics/utils/ImageDataUtil.hx",991,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1011_setPixels,"lime.graphics.utils.ImageDataUtil","setPixels",0x8e8e8101,"lime.graphics.utils.ImageDataUtil.setPixels","lime/graphics/utils/ImageDataUtil.hx",1011,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1060_threshold,"lime.graphics.utils.ImageDataUtil","threshold",0xd6e0e03d,"lime.graphics.utils.ImageDataUtil.threshold","lime/graphics/utils/ImageDataUtil.hx",1060,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1178_unmultiplyAlpha,"lime.graphics.utils.ImageDataUtil","unmultiplyAlpha",0xa6ce9eb3,"lime.graphics.utils.ImageDataUtil.unmultiplyAlpha","lime/graphics/utils/ImageDataUtil.hx",1178,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1207___pixelCompare,"lime.graphics.utils.ImageDataUtil","__pixelCompare",0x0cbb8c0d,"lime.graphics.utils.ImageDataUtil.__pixelCompare","lime/graphics/utils/ImageDataUtil.hx",1207,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1269_lime_image_data_util_color_transform,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_color_transform",0x3cac7168,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_color_transform","lime/graphics/utils/ImageDataUtil.hx",1269,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1270_lime_image_data_util_copy_channel,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_copy_channel",0x470716e1,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_copy_channel","lime/graphics/utils/ImageDataUtil.hx",1270,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1271_lime_image_data_util_copy_pixels,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_copy_pixels",0x941986cf,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_copy_pixels","lime/graphics/utils/ImageDataUtil.hx",1271,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1272_lime_image_data_util_fill_rect,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_fill_rect",0xea105ab8,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_fill_rect","lime/graphics/utils/ImageDataUtil.hx",1272,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1273_lime_image_data_util_flood_fill,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_flood_fill",0x954481cc,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_flood_fill","lime/graphics/utils/ImageDataUtil.hx",1273,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1274_lime_image_data_util_get_pixels,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_get_pixels",0xafc6d8de,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_get_pixels","lime/graphics/utils/ImageDataUtil.hx",1274,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1275_lime_image_data_util_merge,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_merge",0x6bf371d0,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_merge","lime/graphics/utils/ImageDataUtil.hx",1275,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1276_lime_image_data_util_multiply_alpha,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_multiply_alpha",0xa72191ab,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_multiply_alpha","lime/graphics/utils/ImageDataUtil.hx",1276,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1277_lime_image_data_util_resize,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_resize",0x0983bfdc,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_resize","lime/graphics/utils/ImageDataUtil.hx",1277,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1278_lime_image_data_util_set_format,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_set_format",0x2429175c,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_set_format","lime/graphics/utils/ImageDataUtil.hx",1278,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1279_lime_image_data_util_set_pixels,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_set_pixels",0xb3447752,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_set_pixels","lime/graphics/utils/ImageDataUtil.hx",1279,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1280_lime_image_data_util_threshold,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_threshold",0xe481fec3,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_threshold","lime/graphics/utils/ImageDataUtil.hx",1280,0x494d921f)
HX_DEFINE_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1281_lime_image_data_util_unmultiply_alpha,"lime.graphics.utils.ImageDataUtil","lime_image_data_util_unmultiply_alpha",0x26f04bc4,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_unmultiply_alpha","lime/graphics/utils/ImageDataUtil.hx",1281,0x494d921f)
namespace lime{
namespace graphics{
namespace utils{

void ImageDataUtil_obj::__construct() { }

Dynamic ImageDataUtil_obj::__CreateEmpty() { return new ImageDataUtil_obj; }

void *ImageDataUtil_obj::_hx_vtable = 0;

Dynamic ImageDataUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDataUtil_obj > _hx_result = new ImageDataUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageDataUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20ce0976;
}

void ImageDataUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_29_colorTransform)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(colorMatrix,"colorMatrix")
HXLINE(  31)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE(  32)		if (hx::IsNull( data )) {
HXLINE(  32)			return;
            		}
HXLINE(  35)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE(  39)			HX_VARI( int,format) = image->buffer->format;
HXLINE(  40)			HX_VARI( bool,premultiplied) = image->buffer->premultiplied;
HXLINE(  42)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,dataView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(  44)			HX_VARI(  ::lime::utils::ArrayBufferView,alphaTable) = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getAlphaTable(colorMatrix);
HXLINE(  45)			HX_VARI(  ::lime::utils::ArrayBufferView,redTable) = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getRedTable(colorMatrix);
HXLINE(  46)			HX_VARI(  ::lime::utils::ArrayBufferView,greenTable) = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getGreenTable(colorMatrix);
HXLINE(  47)			HX_VARI(  ::lime::utils::ArrayBufferView,blueTable) = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getBlueTable(colorMatrix);
HXLINE(  49)			HX_VAR( int,row);
HXDLIN(  49)			HX_VAR( int,offset);
HXDLIN(  49)			HX_VAR( int,pixel);
HXLINE(  51)			{
HXLINE(  51)				HX_VARI( int,_g1) = (int)0;
HXDLIN(  51)				HX_VARI( int,_g) = dataView->height;
HXDLIN(  51)				while((_g1 < _g)){
HXLINE(  51)					_g1 = (_g1 + (int)1);
HXLINE(  53)					row = (dataView->offset + (dataView->stride * (_g1 - (int)1)));
HXLINE(  55)					{
HXLINE(  55)						HX_VARI( int,_g3) = (int)0;
HXDLIN(  55)						HX_VARI( int,_g2) = dataView->width;
HXDLIN(  55)						while((_g3 < _g2)){
HXLINE(  55)							_g3 = (_g3 + (int)1);
HXLINE(  57)							offset = (row + ((_g3 - (int)1) * (int)4));
HXLINE(  59)							{
HXLINE(  59)								switch((int)(format)){
            									case (int)0: {
HXLINE(  59)										int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(  59)										int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN(  59)										int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN(  59)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  59)										int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN(  59)										int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN(  59)										int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255);
HXDLIN(  59)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  59)										int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN(  59)										int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN(  59)										int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(  59)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  59)								if (premultiplied) {
HXLINE(  59)									bool _hx_tmp;
HXDLIN(  59)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE(  59)										_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  59)										_hx_tmp = false;
            									}
HXDLIN(  59)									if (_hx_tmp) {
HXLINE(  59)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN(  59)										{
HXLINE(  59)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  59)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  59)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  59)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  59)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  59)											pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  60)							{
HXLINE(  60)								int r4 = ((int)::__hxcpp_memory_get_byte(redTable->buffer->b,(redTable->byteOffset + ((int)((int)pixel >> (int)(int)24) & (int)(int)255))) & (int)(int)255);
HXDLIN(  60)								int g4 = ((int)::__hxcpp_memory_get_byte(greenTable->buffer->b,(greenTable->byteOffset + ((int)((int)pixel >> (int)(int)16) & (int)(int)255))) & (int)(int)255);
HXDLIN(  60)								int b3 = ((int)::__hxcpp_memory_get_byte(blueTable->buffer->b,(blueTable->byteOffset + ((int)((int)pixel >> (int)(int)8) & (int)(int)255))) & (int)(int)255);
HXDLIN(  60)								pixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaTable->buffer->b,(alphaTable->byteOffset + ((int)pixel & (int)(int)255))) & (int)(int)255) & (int)(int)255));
            							}
HXLINE(  61)							{
HXLINE(  61)								if (premultiplied) {
HXLINE(  61)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(  61)										if ((pixel != (int)0)) {
HXLINE(  61)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE(  61)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(  61)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(  61)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this4->byteOffset + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(  61)											pixel = ((int)((int)((int)((int)((int)((int)(((int)((int)pixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)pixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)pixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN(  61)								switch((int)(format)){
            									case (int)0: {
HXLINE(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)pixel & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)pixel & (int)(int)255));
HXDLIN(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(  61)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)pixel & (int)(int)255));
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  69)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,colorTransform,(void))

void ImageDataUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_74_copyChannel)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(sourceChannel,"sourceChannel")
            	HX_STACK_ARG(destChannel,"destChannel")
HXLINE(  76)		HX_VAR( int,destIdx);
HXDLIN(  76)		switch((int)(_hx_getEnumValueIndex(destChannel))){
            			case (int)0: {
HXLINE(  76)				destIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE(  76)				destIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  76)				destIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE(  76)				destIdx = (int)3;
            			}
            			break;
            		}
HXLINE(  85)		HX_VAR( int,srcIdx);
HXDLIN(  85)		switch((int)(_hx_getEnumValueIndex(sourceChannel))){
            			case (int)0: {
HXLINE(  85)				srcIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE(  85)				srcIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  85)				srcIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE(  85)				srcIdx = (int)3;
            			}
            			break;
            		}
HXLINE(  94)		HX_VARI(  ::lime::utils::ArrayBufferView,srcData) = sourceImage->buffer->data;
HXLINE(  95)		HX_VARI(  ::lime::utils::ArrayBufferView,destData) = image->buffer->data;
HXLINE(  97)		bool _hx_tmp;
HXDLIN(  97)		if (hx::IsNotNull( srcData )) {
HXLINE(  97)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE(  97)			_hx_tmp = true;
            		}
HXDLIN(  97)		if (_hx_tmp) {
HXLINE(  97)			return;
            		}
HXLINE( 100)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE( 104)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,srcView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 105)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,destView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE( 107)			HX_VARI( int,srcFormat) = sourceImage->buffer->format;
HXLINE( 108)			HX_VARI( int,destFormat) = image->buffer->format;
HXLINE( 109)			HX_VARI( bool,srcPremultiplied) = sourceImage->buffer->premultiplied;
HXLINE( 110)			HX_VARI( bool,destPremultiplied) = image->buffer->premultiplied;
HXLINE( 112)			HX_VAR( int,srcPosition);
HXDLIN( 112)			HX_VAR( int,destPosition);
HXDLIN( 112)			HX_VAR( int,srcPixel);
HXDLIN( 112)			HX_VAR( int,destPixel);
HXDLIN( 112)			HX_VARI( int,value) = (int)0;
HXLINE( 114)			{
HXLINE( 114)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 114)				HX_VARI( int,_g) = destView->height;
HXDLIN( 114)				while((_g1 < _g)){
HXLINE( 114)					_g1 = (_g1 + (int)1);
HXDLIN( 114)					HX_VARI( int,y) = (_g1 - (int)1);
HXLINE( 116)					srcPosition = (srcView->offset + (srcView->stride * y));
HXLINE( 117)					destPosition = (destView->offset + (destView->stride * y));
HXLINE( 119)					{
HXLINE( 119)						HX_VARI( int,_g3) = (int)0;
HXDLIN( 119)						HX_VARI( int,_g2) = destView->width;
HXDLIN( 119)						while((_g3 < _g2)){
HXLINE( 119)							_g3 = (_g3 + (int)1);
HXLINE( 121)							{
HXLINE( 121)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE( 121)										int r = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN( 121)										int g = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 121)										int b = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 121)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 121)										int r1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 121)										int g1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 121)										int b1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)3))) & (int)(int)255);
HXDLIN( 121)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 121)										int r2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 121)										int g2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 121)										int b2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN( 121)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 121)								if (srcPremultiplied) {
HXLINE( 121)									bool _hx_tmp1;
HXDLIN( 121)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE( 121)										_hx_tmp1 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 121)										_hx_tmp1 = false;
            									}
HXDLIN( 121)									if (_hx_tmp1) {
HXLINE( 121)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN( 121)										{
HXLINE( 121)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 121)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)srcPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 121)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 121)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)srcPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 121)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 121)											srcPixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)srcPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 122)							{
HXLINE( 122)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 122)										int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 122)										int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 122)										int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 122)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 122)										int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 122)										int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 122)										int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 122)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 122)										int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 122)										int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 122)										int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 122)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 122)								if (destPremultiplied) {
HXLINE( 122)									bool _hx_tmp2;
HXDLIN( 122)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 122)										_hx_tmp2 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 122)										_hx_tmp2 = false;
            									}
HXDLIN( 122)									if (_hx_tmp2) {
HXLINE( 122)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 122)										{
HXLINE( 122)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 122)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 122)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)											destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 124)							switch((int)(srcIdx)){
            								case (int)0: {
HXLINE( 126)									value = ((int)((int)srcPixel >> (int)(int)24) & (int)(int)255);
            								}
            								break;
            								case (int)1: {
HXLINE( 127)									value = ((int)((int)srcPixel >> (int)(int)16) & (int)(int)255);
            								}
            								break;
            								case (int)2: {
HXLINE( 128)									value = ((int)((int)srcPixel >> (int)(int)8) & (int)(int)255);
            								}
            								break;
            								case (int)3: {
HXLINE( 129)									value = ((int)srcPixel & (int)(int)255);
            								}
            								break;
            							}
HXLINE( 133)							switch((int)(destIdx)){
            								case (int)0: {
HXLINE( 135)									destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 136)									destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 137)									destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)3: {
HXLINE( 138)									destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value & (int)(int)255));
            								}
            								break;
            							}
HXLINE( 142)							{
HXLINE( 142)								if (destPremultiplied) {
HXLINE( 142)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 142)										if ((destPixel != (int)0)) {
HXLINE( 142)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 142)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 142)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 142)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this7->byteOffset + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 142)											destPixel = ((int)((int)((int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 142)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)destPixel & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)destPixel & (int)(int)255));
HXDLIN( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 142)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)destPixel & (int)(int)255));
            									}
            									break;
            								}
            							}
HXLINE( 144)							srcPosition = (srcPosition + (int)4);
HXLINE( 145)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 153)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,copyChannel,(void))

void ImageDataUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_158_copyPixels)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(alphaImage,"alphaImage")
            	HX_STACK_ARG(alphaPoint,"alphaPoint")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
HXLINE( 161)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE( 165)			HX_VARI(  ::lime::utils::ArrayBufferView,sourceData) = sourceImage->buffer->data;
HXLINE( 166)			HX_VARI(  ::lime::utils::ArrayBufferView,destData) = image->buffer->data;
HXLINE( 168)			bool _hx_tmp;
HXDLIN( 168)			if (hx::IsNotNull( sourceData )) {
HXLINE( 168)				_hx_tmp = hx::IsNull( destData );
            			}
            			else {
HXLINE( 168)				_hx_tmp = true;
            			}
HXDLIN( 168)			if (_hx_tmp) {
HXLINE( 168)				return;
            			}
HXLINE( 170)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,sourceView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 171)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,destView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE( 173)			HX_VARI( int,sourceFormat) = sourceImage->buffer->format;
HXLINE( 174)			HX_VARI( int,destFormat) = image->buffer->format;
HXLINE( 175)			HX_VARI( bool,sourcePremultiplied) = sourceImage->buffer->premultiplied;
HXLINE( 176)			HX_VARI( bool,destPremultiplied) = image->buffer->premultiplied;
HXLINE( 178)			HX_VAR( int,sourcePosition);
HXDLIN( 178)			HX_VAR( int,destPosition);
HXDLIN( 178)			HX_VAR( int,sourcePixel);
HXLINE( 180)			bool _hx_tmp1;
HXDLIN( 180)			if (!(!(mergeAlpha))) {
HXLINE( 180)				_hx_tmp1 = !(sourceImage->get_transparent());
            			}
            			else {
HXLINE( 180)				_hx_tmp1 = true;
            			}
HXDLIN( 180)			if (_hx_tmp1) {
HXLINE( 182)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 182)				HX_VARI( int,_g) = destView->height;
HXDLIN( 182)				while((_g1 < _g)){
HXLINE( 182)					_g1 = (_g1 + (int)1);
HXDLIN( 182)					HX_VARI( int,y) = (_g1 - (int)1);
HXLINE( 184)					sourcePosition = (sourceView->offset + (sourceView->stride * y));
HXLINE( 185)					destPosition = (destView->offset + (destView->stride * y));
HXLINE( 187)					{
HXLINE( 187)						HX_VARI( int,_g3) = (int)0;
HXDLIN( 187)						HX_VARI( int,_g2) = destView->width;
HXDLIN( 187)						while((_g3 < _g2)){
HXLINE( 187)							_g3 = (_g3 + (int)1);
HXLINE( 189)							{
HXLINE( 189)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 189)										int r = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 189)										int g = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 189)										int b = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 189)										sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 189)										int r1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 189)										int g1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 189)										int b1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 189)										sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 189)										int r2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 189)										int g2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 189)										int b2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 189)										sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 189)								if (sourcePremultiplied) {
HXLINE( 189)									bool _hx_tmp2;
HXDLIN( 189)									if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 189)										_hx_tmp2 = (((int)sourcePixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 189)										_hx_tmp2 = false;
            									}
HXDLIN( 189)									if (_hx_tmp2) {
HXLINE( 189)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 189)										{
HXLINE( 189)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 189)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 189)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 189)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 189)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 189)											sourcePixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 190)							{
HXLINE( 190)								if (destPremultiplied) {
HXLINE( 190)									if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 190)										if ((sourcePixel != (int)0)) {
HXLINE( 190)											sourcePixel = (int)0;
            										}
            									}
            									else {
HXLINE( 190)										if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 190)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 190)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this4->byteOffset + (((int)sourcePixel & (int)(int)255) * (int)4)));
HXDLIN( 190)											sourcePixel = ((int)((int)((int)((int)((int)((int)(((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 190)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)sourcePixel & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)sourcePixel & (int)(int)255));
HXDLIN( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 190)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)sourcePixel & (int)(int)255));
            									}
            									break;
            								}
            							}
HXLINE( 192)							sourcePosition = (sourcePosition + (int)4);
HXLINE( 193)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            			else {
HXLINE( 201)				HX_VAR( Float,sourceAlpha);
HXDLIN( 201)				HX_VAR( Float,destAlpha);
HXDLIN( 201)				HX_VAR( Float,oneMinusSourceAlpha);
HXDLIN( 201)				HX_VAR( Float,blendAlpha);
HXLINE( 202)				HX_VAR( int,destPixel);
HXLINE( 204)				if (hx::IsNull( alphaImage )) {
HXLINE( 206)					HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN( 206)					HX_VARI_NAME( int,_g4,"_g") = destView->height;
HXDLIN( 206)					while((_g11 < _g4)){
HXLINE( 206)						_g11 = (_g11 + (int)1);
HXDLIN( 206)						HX_VARI_NAME( int,y1,"y") = (_g11 - (int)1);
HXLINE( 208)						sourcePosition = (sourceView->offset + (sourceView->stride * y1));
HXLINE( 209)						destPosition = (destView->offset + (destView->stride * y1));
HXLINE( 211)						{
HXLINE( 211)							HX_VARI_NAME( int,_g31,"_g3") = (int)0;
HXDLIN( 211)							HX_VARI_NAME( int,_g21,"_g2") = destView->width;
HXDLIN( 211)							while((_g31 < _g21)){
HXLINE( 211)								_g31 = (_g31 + (int)1);
HXLINE( 213)								{
HXLINE( 213)									switch((int)(sourceFormat)){
            										case (int)0: {
HXLINE( 213)											int r4 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 213)											int g4 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 213)											int b3 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 213)											sourcePixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 213)											int r5 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 213)											int g5 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 213)											int b4 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 213)											sourcePixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 213)											int r6 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 213)											int g6 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 213)											int b5 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 213)											sourcePixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXDLIN( 213)									if (sourcePremultiplied) {
HXLINE( 213)										bool _hx_tmp3;
HXDLIN( 213)										if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 213)											_hx_tmp3 = (((int)sourcePixel & (int)(int)255) != (int)255);
            										}
            										else {
HXLINE( 213)											_hx_tmp3 = false;
            										}
HXDLIN( 213)										if (_hx_tmp3) {
HXLINE( 213)											::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 213)											{
HXLINE( 213)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 213)												int r7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 213)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 213)												int g7 = ((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 213)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 213)												sourcePixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
            								}
HXLINE( 214)								{
HXLINE( 214)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE( 214)											int r8 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 214)											int g8 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 214)											int b6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 214)											destPixel = ((int)((int)((int)((int)((int)r8 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g8 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 214)											int r9 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 214)											int g9 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 214)											int b7 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 214)											destPixel = ((int)((int)((int)((int)((int)r9 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g9 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b7 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 214)											int r10 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 214)											int g10 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 214)											int b8 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 214)											destPixel = ((int)((int)((int)((int)((int)r10 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g10 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b8 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXDLIN( 214)									if (destPremultiplied) {
HXLINE( 214)										bool _hx_tmp4;
HXDLIN( 214)										if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 214)											_hx_tmp4 = (((int)destPixel & (int)(int)255) != (int)255);
            										}
            										else {
HXLINE( 214)											_hx_tmp4 = false;
            										}
HXDLIN( 214)										if (_hx_tmp4) {
HXLINE( 214)											::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 214)											{
HXLINE( 214)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this8,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 214)												int r11 = ((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 214)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this9,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 214)												int g11 = ((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 214)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this10,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 214)												destPixel = ((int)((int)((int)((int)((int)r11 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g11 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
            								}
HXLINE( 216)								sourceAlpha = ((Float)((int)sourcePixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 217)								destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 218)								oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 219)								blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 221)								if ((blendAlpha == (int)0)) {
HXLINE( 223)									destPixel = (int)0;
            								}
            								else {
HXLINE( 227)									{
HXLINE( 227)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this11,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 227)										destPixel = ((int)((int)((int)((int)((int)((int)::__hxcpp_memory_get_byte(this11->buffer->b,(this11->byteOffset + ::Math_obj::round(((Float)((((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255) * sourceAlpha) + ((((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            									}
HXLINE( 228)									{
HXLINE( 228)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this12,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 228)										destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this12->buffer->b,(this12->byteOffset + ::Math_obj::round(((Float)((((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255) * sourceAlpha) + ((((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            									}
HXLINE( 229)									{
HXLINE( 229)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this13,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 229)										destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round(((Float)((((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255) * sourceAlpha) + ((((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            									}
HXLINE( 230)									{
HXLINE( 230)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this14,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 230)										destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & (int)(int)255) & (int)(int)255));
            									}
            								}
HXLINE( 234)								{
HXLINE( 234)									if (destPremultiplied) {
HXLINE( 234)										if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 234)											if ((destPixel != (int)0)) {
HXLINE( 234)												destPixel = (int)0;
            											}
            										}
            										else {
HXLINE( 234)											if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 234)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this15,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 234)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this15->buffer->b,(this15->byteOffset + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 234)												destPixel = ((int)((int)((int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN( 234)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)destPixel & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)destPixel & (int)(int)255));
HXDLIN( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 234)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)destPixel & (int)(int)255));
            										}
            										break;
            									}
            								}
HXLINE( 236)								sourcePosition = (sourcePosition + (int)4);
HXLINE( 237)								destPosition = (destPosition + (int)4);
            							}
            						}
            					}
            				}
            				else {
HXLINE( 245)					if (hx::IsNull( alphaPoint )) {
HXLINE( 245)						alphaPoint =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            					}
HXLINE( 247)					HX_VARI(  ::lime::utils::ArrayBufferView,alphaData) = alphaImage->buffer->data;
HXLINE( 248)					HX_VARI( int,alphaFormat) = alphaImage->buffer->format;
HXLINE( 249)					HX_VARI( bool,alphaPremultiplied) = alphaImage->buffer->premultiplied;
HXLINE( 251)					HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,alphaView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,alphaImage, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,alphaPoint->x,alphaPoint->y,destView->width,destView->height));
HXLINE( 252)					HX_VAR( int,alphaPosition);
HXDLIN( 252)					HX_VAR( int,alphaPixel);
HXLINE( 254)					{
HXLINE( 254)						HX_VARI_NAME( int,_g12,"_g1") = (int)0;
HXDLIN( 254)						HX_VARI_NAME( int,_g5,"_g") = alphaView->height;
HXDLIN( 254)						while((_g12 < _g5)){
HXLINE( 254)							_g12 = (_g12 + (int)1);
HXDLIN( 254)							HX_VARI_NAME( int,y2,"y") = (_g12 - (int)1);
HXLINE( 256)							sourcePosition = (sourceView->offset + (sourceView->stride * y2));
HXLINE( 257)							destPosition = (destView->offset + (destView->stride * y2));
HXLINE( 258)							alphaPosition = (alphaView->offset + (alphaView->stride * y2));
HXLINE( 260)							{
HXLINE( 260)								HX_VARI_NAME( int,_g32,"_g3") = (int)0;
HXDLIN( 260)								HX_VARI_NAME( int,_g22,"_g2") = alphaView->width;
HXDLIN( 260)								while((_g32 < _g22)){
HXLINE( 260)									_g32 = (_g32 + (int)1);
HXLINE( 262)									{
HXLINE( 262)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 262)												int r12 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 262)												int g12 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 262)												int b9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 262)												sourcePixel = ((int)((int)((int)((int)((int)r12 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g12 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b9 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 262)												int r13 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 262)												int g13 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 262)												int b10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 262)												sourcePixel = ((int)((int)((int)((int)((int)r13 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g13 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b10 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 262)												int r14 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 262)												int g14 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 262)												int b11 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 262)												sourcePixel = ((int)((int)((int)((int)((int)r14 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g14 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b11 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 262)										if (sourcePremultiplied) {
HXLINE( 262)											bool _hx_tmp5;
HXDLIN( 262)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 262)												_hx_tmp5 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 262)												_hx_tmp5 = false;
            											}
HXDLIN( 262)											if (_hx_tmp5) {
HXLINE( 262)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 262)												{
HXLINE( 262)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this16,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 262)													int r15 = ((int)::__hxcpp_memory_get_byte(this16->buffer->b,(this16->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 262)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this17,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 262)													int g15 = ((int)::__hxcpp_memory_get_byte(this17->buffer->b,(this17->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 262)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this18,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 262)													sourcePixel = ((int)((int)((int)((int)((int)r15 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g15 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 263)									{
HXLINE( 263)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 263)												int r16 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 263)												int g16 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 263)												int b12 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 263)												destPixel = ((int)((int)((int)((int)((int)r16 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g16 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b12 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 263)												int r17 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 263)												int g17 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 263)												int b13 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 263)												destPixel = ((int)((int)((int)((int)((int)r17 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g17 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b13 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 263)												int r18 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 263)												int g18 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 263)												int b14 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 263)												destPixel = ((int)((int)((int)((int)((int)r18 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g18 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b14 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 263)										if (destPremultiplied) {
HXLINE( 263)											bool _hx_tmp6;
HXDLIN( 263)											if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 263)												_hx_tmp6 = (((int)destPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 263)												_hx_tmp6 = false;
            											}
HXDLIN( 263)											if (_hx_tmp6) {
HXLINE( 263)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 263)												{
HXLINE( 263)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this19,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 263)													int r19 = ((int)::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 263)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this20,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 263)													int g19 = ((int)::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 263)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this21,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 263)													destPixel = ((int)((int)((int)((int)((int)r19 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g19 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 264)									{
HXLINE( 264)										switch((int)(alphaFormat)){
            											case (int)0: {
HXLINE( 264)												int r20 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 264)												int g20 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 264)												int b15 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 264)												alphaPixel = ((int)((int)((int)((int)((int)r20 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g20 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b15 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 264)												int r21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 264)												int g21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 264)												int b16 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + (int)3))) & (int)(int)255);
HXDLIN( 264)												alphaPixel = ((int)((int)((int)((int)((int)r21 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g21 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b16 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 264)												int r22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 264)												int g22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 264)												int b17 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 264)												alphaPixel = ((int)((int)((int)((int)((int)r22 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g22 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b17 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 264)										if (alphaPremultiplied) {
HXLINE( 264)											bool _hx_tmp7;
HXDLIN( 264)											if ((((int)alphaPixel & (int)(int)255) != (int)0)) {
HXLINE( 264)												_hx_tmp7 = (((int)alphaPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 264)												_hx_tmp7 = false;
            											}
HXDLIN( 264)											if (_hx_tmp7) {
HXLINE( 264)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)alphaPixel & (int)(int)255));
HXDLIN( 264)												{
HXLINE( 264)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this22,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 264)													int r23 = ((int)::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((((int)((int)alphaPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 264)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this23,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 264)													int g23 = ((int)::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((((int)((int)alphaPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 264)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this24,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 264)													alphaPixel = ((int)((int)((int)((int)((int)r23 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g23 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round((((int)((int)alphaPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)alphaPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 266)									sourceAlpha = ((Float)((int)alphaPixel & (int)(int)255) / (Float)(int)255);
HXLINE( 267)									destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)(int)255);
HXLINE( 268)									oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 269)									blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 271)									if ((blendAlpha == (int)0)) {
HXLINE( 273)										destPixel = (int)0;
            									}
            									else {
HXLINE( 277)										{
HXLINE( 277)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this25,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 277)											destPixel = ((int)((int)((int)((int)((int)((int)::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round(((Float)((((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255) * sourceAlpha) + ((((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 278)										{
HXLINE( 278)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this26,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 278)											destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this26->buffer->b,(this26->byteOffset + ::Math_obj::round(((Float)((((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255) * sourceAlpha) + ((((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 279)										{
HXLINE( 279)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this27,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 279)											destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round(((Float)((((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255) * sourceAlpha) + ((((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 280)										{
HXLINE( 280)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this28,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 280)											destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(this28->buffer->b,(this28->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & (int)(int)255) & (int)(int)255));
            										}
            									}
HXLINE( 284)									{
HXLINE( 284)										if (destPremultiplied) {
HXLINE( 284)											if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 284)												if ((destPixel != (int)0)) {
HXLINE( 284)													destPixel = (int)0;
            												}
            											}
            											else {
HXLINE( 284)												if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 284)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this29,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 284)													::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this29->buffer->b,(this29->byteOffset + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 284)													destPixel = ((int)((int)((int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
HXDLIN( 284)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)destPixel & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)destPixel & (int)(int)255));
HXDLIN( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 284)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)destPixel & (int)(int)255));
            											}
            											break;
            										}
            									}
HXLINE( 286)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 287)									destPosition = (destPosition + (int)4);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 299)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,copyPixels,(void))

void ImageDataUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int color,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_304_fillRect)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 306)		HX_VAR( int,fillColor);
HXLINE( 308)		switch((int)(format)){
            			case (int)1: {
HXLINE( 310)				HX_VARI( int,argb) = color;
HXDLIN( 310)				HX_VARI( int,rgba) = (int)0;
HXDLIN( 310)				rgba = ((int)((int)((int)((int)((int)((int)((int)argb >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)argb >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)argb >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 310)				fillColor = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 311)				HX_VARI( int,bgra) = color;
HXDLIN( 311)				HX_VARI_NAME( int,rgba1,"rgba") = (int)0;
HXDLIN( 311)				rgba1 = ((int)((int)((int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 311)				fillColor = rgba1;
            			}
            			break;
            			default:{
HXLINE( 312)				fillColor = color;
            			}
            		}
HXLINE( 316)		if (!(image->get_transparent())) {
HXLINE( 318)			fillColor = ((int)((int)((int)((int)((int)((int)((int)fillColor >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)fillColor >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)fillColor >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE( 322)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE( 323)		if (hx::IsNull( data )) {
HXLINE( 323)			return;
            		}
HXLINE( 326)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE( 330)			HX_VARI_NAME( int,format1,"format") = image->buffer->format;
HXLINE( 331)			HX_VARI( bool,premultiplied) = image->buffer->premultiplied;
HXLINE( 333)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,dataView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 334)			HX_VAR( int,row);
HXLINE( 336)			{
HXLINE( 336)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 336)				HX_VARI( int,_g) = dataView->height;
HXDLIN( 336)				while((_g1 < _g)){
HXLINE( 336)					_g1 = (_g1 + (int)1);
HXLINE( 338)					row = (dataView->offset + (dataView->stride * (_g1 - (int)1)));
HXLINE( 340)					{
HXLINE( 340)						HX_VARI( int,_g3) = (int)0;
HXDLIN( 340)						HX_VARI( int,_g2) = dataView->width;
HXDLIN( 340)						while((_g3 < _g2)){
HXLINE( 340)							_g3 = (_g3 + (int)1);
HXLINE( 342)							{
HXLINE( 342)								HX_VARI( int,offset) = (row + ((_g3 - (int)1) * (int)4));
HXDLIN( 342)								if (premultiplied) {
HXLINE( 342)									if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 342)										if ((fillColor != (int)0)) {
HXLINE( 342)											fillColor = (int)0;
            										}
            									}
            									else {
HXLINE( 342)										if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 342)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 342)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + (((int)fillColor & (int)(int)255) * (int)4)));
HXDLIN( 342)											fillColor = ((int)((int)((int)((int)((int)((int)(((int)((int)fillColor >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)fillColor >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)fillColor >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)fillColor & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 342)								switch((int)(format1)){
            									case (int)0: {
HXLINE( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)((int)fillColor >> (int)(int)24) & (int)(int)255));
HXDLIN( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)fillColor >> (int)(int)16) & (int)(int)255));
HXDLIN( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)fillColor >> (int)(int)8) & (int)(int)255));
HXDLIN( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)fillColor & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)fillColor & (int)(int)255));
HXDLIN( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)fillColor >> (int)(int)24) & (int)(int)255));
HXDLIN( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)fillColor >> (int)(int)16) & (int)(int)255));
HXDLIN( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)((int)fillColor >> (int)(int)8) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)((int)fillColor >> (int)(int)8) & (int)(int)255));
HXDLIN( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)fillColor >> (int)(int)16) & (int)(int)255));
HXDLIN( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)fillColor >> (int)(int)24) & (int)(int)255));
HXDLIN( 342)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)fillColor & (int)(int)255));
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 350)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,fillRect,(void))

void ImageDataUtil_obj::floodFill( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_355_floodFill)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 357)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE( 358)		if (hx::IsNull( data )) {
HXLINE( 358)			return;
            		}
HXLINE( 360)		if ((format == (int)1)) {
HXLINE( 360)			color = ((int)((int)((int)color & (int)(int)16777215) << (int)(int)8) | (int)((int)((int)color >> (int)(int)24) & (int)(int)255));
            		}
HXLINE( 363)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE( 367)			HX_VARI_NAME( int,format1,"format") = image->buffer->format;
HXLINE( 368)			HX_VARI( bool,premultiplied) = image->buffer->premultiplied;
HXLINE( 370)			HX_VARI( int,fillColor) = color;
HXLINE( 372)			HX_VAR( int,hitColor);
HXLINE( 373)			{
HXLINE( 373)				HX_VARI( int,offset) = (((y + image->offsetY) * (image->buffer->width * (int)4)) + ((x + image->offsetX) * (int)4));
HXDLIN( 373)				switch((int)(format1)){
            					case (int)0: {
HXLINE( 373)						int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 373)						int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 373)						int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 373)						hitColor = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)1: {
HXLINE( 373)						int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 373)						int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 373)						int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255);
HXDLIN( 373)						hitColor = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)2: {
HXLINE( 373)						int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 373)						int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 373)						int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 373)						hitColor = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            				}
HXDLIN( 373)				if (premultiplied) {
HXLINE( 373)					bool _hx_tmp;
HXDLIN( 373)					if ((((int)hitColor & (int)(int)255) != (int)0)) {
HXLINE( 373)						_hx_tmp = (((int)hitColor & (int)(int)255) != (int)255);
            					}
            					else {
HXLINE( 373)						_hx_tmp = false;
            					}
HXDLIN( 373)					if (_hx_tmp) {
HXLINE( 373)						::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)hitColor & (int)(int)255));
HXDLIN( 373)						{
HXLINE( 373)							HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 373)							int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)hitColor >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 373)							HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 373)							int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)hitColor >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 373)							HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 373)							hitColor = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)hitColor >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hitColor & (int)(int)255) & (int)(int)255));
            						}
            					}
            				}
            			}
HXLINE( 375)			if (!(image->get_transparent())) {
HXLINE( 377)				fillColor = ((int)((int)((int)((int)((int)((int)((int)fillColor >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)fillColor >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)fillColor >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 378)				hitColor = ((int)((int)((int)((int)((int)((int)((int)hitColor >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)hitColor >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)hitColor >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            			}
HXLINE( 382)			if ((fillColor == hitColor)) {
HXLINE( 382)				return;
            			}
HXLINE( 384)			HX_VARI( ::Array< int >,dx) = ::Array_obj< int >::fromData( _hx_array_data_f0237280_19,4);
HXLINE( 385)			HX_VARI( ::Array< int >,dy) = ::Array_obj< int >::fromData( _hx_array_data_f0237280_20,4);
HXLINE( 387)			HX_VARI( int,minX) = -(image->offsetX);
HXLINE( 388)			HX_VARI( int,minY) = -(image->offsetY);
HXLINE( 389)			HX_VARI( int,maxX) = (minX + image->width);
HXLINE( 390)			HX_VARI( int,maxY) = (minY + image->height);
HXLINE( 392)			HX_VARI( ::Array< int >,queue) = ::Array_obj< int >::__new();
HXLINE( 393)			queue->push(x);
HXLINE( 394)			queue->push(y);
HXLINE( 396)			HX_VAR(  ::Dynamic,curPointX);
HXDLIN( 396)			HX_VAR(  ::Dynamic,curPointY);
HXDLIN( 396)			HX_VAR( int,nextPointX);
HXDLIN( 396)			HX_VAR( int,nextPointY);
HXDLIN( 396)			HX_VAR( int,nextPointOffset);
HXDLIN( 396)			HX_VAR( int,readColor);
HXLINE( 398)			while((queue->length > (int)0)){
HXLINE( 400)				curPointY = queue->pop();
HXLINE( 401)				curPointX = queue->pop();
HXLINE( 403)				{
HXLINE( 403)					HX_VARI( int,_g) = (int)0;
HXDLIN( 403)					while((_g < (int)4)){
HXLINE( 403)						_g = (_g + (int)1);
HXDLIN( 403)						HX_VARI( int,i) = (_g - (int)1);
HXLINE( 405)						nextPointX = (curPointX + dx->__get(i));
HXLINE( 406)						nextPointY = (curPointY + dy->__get(i));
HXLINE( 408)						bool _hx_tmp1;
HXDLIN( 408)						bool _hx_tmp2;
HXDLIN( 408)						bool _hx_tmp3;
HXDLIN( 408)						if ((nextPointX >= minX)) {
HXLINE( 408)							_hx_tmp3 = (nextPointY < minY);
            						}
            						else {
HXLINE( 408)							_hx_tmp3 = true;
            						}
HXDLIN( 408)						if (!(_hx_tmp3)) {
HXLINE( 408)							_hx_tmp2 = (nextPointX >= maxX);
            						}
            						else {
HXLINE( 408)							_hx_tmp2 = true;
            						}
HXDLIN( 408)						if (!(_hx_tmp2)) {
HXLINE( 408)							_hx_tmp1 = (nextPointY >= maxY);
            						}
            						else {
HXLINE( 408)							_hx_tmp1 = true;
            						}
HXDLIN( 408)						if (_hx_tmp1) {
HXLINE( 410)							continue;
            						}
HXLINE( 414)						nextPointOffset = (((nextPointY * image->width) + nextPointX) * (int)4);
HXLINE( 415)						{
HXLINE( 415)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 415)									int r4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255);
HXDLIN( 415)									int g4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 415)									int b3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 415)									readColor = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 415)									int r5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 415)									int g5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 415)									int b4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)3))) & (int)(int)255);
HXDLIN( 415)									readColor = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 415)									int r6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 415)									int g6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 415)									int b5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255);
HXDLIN( 415)									readColor = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            							}
HXDLIN( 415)							if (premultiplied) {
HXLINE( 415)								bool _hx_tmp4;
HXDLIN( 415)								if ((((int)readColor & (int)(int)255) != (int)0)) {
HXLINE( 415)									_hx_tmp4 = (((int)readColor & (int)(int)255) != (int)255);
            								}
            								else {
HXLINE( 415)									_hx_tmp4 = false;
            								}
HXDLIN( 415)								if (_hx_tmp4) {
HXLINE( 415)									::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)readColor & (int)(int)255));
HXDLIN( 415)									{
HXLINE( 415)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 415)										int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)((int)readColor >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 415)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 415)										int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)((int)readColor >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 415)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 415)										readColor = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)((int)readColor >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)readColor & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
            						}
HXLINE( 417)						if ((readColor == hitColor)) {
HXLINE( 419)							{
HXLINE( 419)								if (premultiplied) {
HXLINE( 419)									if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 419)										if ((fillColor != (int)0)) {
HXLINE( 419)											fillColor = (int)0;
            										}
            									}
            									else {
HXLINE( 419)										if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 419)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 419)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this7->byteOffset + (((int)fillColor & (int)(int)255) * (int)4)));
HXDLIN( 419)											fillColor = ((int)((int)((int)((int)((int)((int)(((int)((int)fillColor >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)fillColor >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)fillColor >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)fillColor & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 419)								switch((int)(format1)){
            									case (int)0: {
HXLINE( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),((int)((int)fillColor >> (int)(int)24) & (int)(int)255));
HXDLIN( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)1)),((int)((int)fillColor >> (int)(int)16) & (int)(int)255));
HXDLIN( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)2)),((int)((int)fillColor >> (int)(int)8) & (int)(int)255));
HXDLIN( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)3)),((int)fillColor & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),((int)fillColor & (int)(int)255));
HXDLIN( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)1)),((int)((int)fillColor >> (int)(int)24) & (int)(int)255));
HXDLIN( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)2)),((int)((int)fillColor >> (int)(int)16) & (int)(int)255));
HXDLIN( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)3)),((int)((int)fillColor >> (int)(int)8) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),((int)((int)fillColor >> (int)(int)8) & (int)(int)255));
HXDLIN( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)1)),((int)((int)fillColor >> (int)(int)16) & (int)(int)255));
HXDLIN( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)2)),((int)((int)fillColor >> (int)(int)24) & (int)(int)255));
HXDLIN( 419)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + (int)3)),((int)fillColor & (int)(int)255));
            									}
            									break;
            								}
            							}
HXLINE( 421)							queue->push(nextPointX);
HXLINE( 422)							queue->push(nextPointY);
            						}
            					}
            				}
            			}
            		}
HXLINE( 432)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,floodFill,(void))

 ::lime::math::Rectangle ImageDataUtil_obj::getColorBoundsRect( ::lime::graphics::Image image,int mask,int color,hx::Null< bool >  __o_findColor,int format){
bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_437_getColorBoundsRect)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(findColor,"findColor")
            	HX_STACK_ARG(format,"format")
HXLINE( 439)		HX_VARI( int,left) = (image->width + (int)1);
HXLINE( 440)		HX_VARI( int,right) = (int)0;
HXLINE( 441)		HX_VARI( int,top) = (image->height + (int)1);
HXLINE( 442)		HX_VARI( int,bottom) = (int)0;
HXLINE( 444)		HX_VAR( int,_color);
HXDLIN( 444)		HX_VAR( int,_mask);
HXLINE( 446)		switch((int)(format)){
            			case (int)1: {
HXLINE( 450)				HX_VARI( int,argb) = color;
HXDLIN( 450)				HX_VARI( int,rgba) = (int)0;
HXDLIN( 450)				rgba = ((int)((int)((int)((int)((int)((int)((int)argb >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)argb >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)argb >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 450)				_color = rgba;
HXLINE( 451)				HX_VARI_NAME( int,argb1,"argb") = mask;
HXDLIN( 451)				HX_VARI_NAME( int,rgba1,"rgba") = (int)0;
HXDLIN( 451)				rgba1 = ((int)((int)((int)((int)((int)((int)((int)argb1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)argb1 >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)argb1 >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 451)				_mask = rgba1;
            			}
            			break;
            			case (int)2: {
HXLINE( 455)				HX_VARI( int,bgra) = color;
HXDLIN( 455)				HX_VARI_NAME( int,rgba2,"rgba") = (int)0;
HXDLIN( 455)				rgba2 = ((int)((int)((int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 455)				_color = rgba2;
HXLINE( 456)				HX_VARI_NAME( int,bgra1,"bgra") = mask;
HXDLIN( 456)				HX_VARI_NAME( int,rgba3,"rgba") = (int)0;
HXDLIN( 456)				rgba3 = ((int)((int)((int)((int)((int)((int)((int)bgra1 >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra1 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN( 456)				_mask = rgba3;
            			}
            			break;
            			default:{
HXLINE( 460)				_color = color;
HXLINE( 461)				_mask = mask;
            			}
            		}
HXLINE( 465)		if (!(image->get_transparent())) {
HXLINE( 467)			_color = ((int)((int)((int)((int)((int)((int)((int)_color >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)_color >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)_color >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 468)			_mask = ((int)((int)((int)((int)((int)((int)((int)_mask >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)_mask >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)_mask >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE( 472)		HX_VAR( int,pixel);
HXDLIN( 472)		HX_VAR( bool,hit);
HXLINE( 474)		{
HXLINE( 474)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 474)			HX_VARI( int,_g) = image->width;
HXDLIN( 474)			while((_g1 < _g)){
HXLINE( 474)				_g1 = (_g1 + (int)1);
HXDLIN( 474)				HX_VARI( int,x) = (_g1 - (int)1);
HXLINE( 476)				hit = false;
HXLINE( 478)				{
HXLINE( 478)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 478)					HX_VARI( int,_g2) = image->height;
HXDLIN( 478)					while((_g3 < _g2)){
HXLINE( 478)						_g3 = (_g3 + (int)1);
HXLINE( 480)						pixel = image->getPixel32(x,(_g3 - (int)1),(int)0);
HXLINE( 481)						if (findColor) {
HXLINE( 481)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 481)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 483)						if (hit) {
HXLINE( 485)							if ((x < left)) {
HXLINE( 485)								left = x;
            							}
HXLINE( 486)							goto _hx_goto_22;
            						}
            					}
            					_hx_goto_22:;
            				}
HXLINE( 492)				if (hit) {
HXLINE( 494)					goto _hx_goto_21;
            				}
            			}
            			_hx_goto_21:;
            		}
HXLINE( 500)		HX_VAR( int,ix);
HXLINE( 502)		{
HXLINE( 502)			HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN( 502)			HX_VARI_NAME( int,_g4,"_g") = image->width;
HXDLIN( 502)			while((_g11 < _g4)){
HXLINE( 502)				_g11 = (_g11 + (int)1);
HXLINE( 504)				ix = ((image->width - (int)1) - (_g11 - (int)1));
HXLINE( 505)				hit = false;
HXLINE( 507)				{
HXLINE( 507)					HX_VARI_NAME( int,_g31,"_g3") = (int)0;
HXDLIN( 507)					HX_VARI_NAME( int,_g21,"_g2") = image->height;
HXDLIN( 507)					while((_g31 < _g21)){
HXLINE( 507)						_g31 = (_g31 + (int)1);
HXLINE( 509)						pixel = image->getPixel32(ix,(_g31 - (int)1),(int)0);
HXLINE( 510)						if (findColor) {
HXLINE( 510)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 510)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 512)						if (hit) {
HXLINE( 514)							if ((ix > right)) {
HXLINE( 514)								right = ix;
            							}
HXLINE( 515)							goto _hx_goto_24;
            						}
            					}
            					_hx_goto_24:;
            				}
HXLINE( 521)				if (hit) {
HXLINE( 523)					goto _hx_goto_23;
            				}
            			}
            			_hx_goto_23:;
            		}
HXLINE( 529)		{
HXLINE( 529)			HX_VARI_NAME( int,_g12,"_g1") = (int)0;
HXDLIN( 529)			HX_VARI_NAME( int,_g5,"_g") = image->height;
HXDLIN( 529)			while((_g12 < _g5)){
HXLINE( 529)				_g12 = (_g12 + (int)1);
HXDLIN( 529)				HX_VARI( int,y) = (_g12 - (int)1);
HXLINE( 531)				hit = false;
HXLINE( 533)				{
HXLINE( 533)					HX_VARI_NAME( int,_g32,"_g3") = (int)0;
HXDLIN( 533)					HX_VARI_NAME( int,_g22,"_g2") = image->width;
HXDLIN( 533)					while((_g32 < _g22)){
HXLINE( 533)						_g32 = (_g32 + (int)1);
HXLINE( 535)						pixel = image->getPixel32((_g32 - (int)1),y,(int)0);
HXLINE( 536)						if (findColor) {
HXLINE( 536)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 536)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 538)						if (hit) {
HXLINE( 540)							if ((y < top)) {
HXLINE( 540)								top = y;
            							}
HXLINE( 541)							goto _hx_goto_26;
            						}
            					}
            					_hx_goto_26:;
            				}
HXLINE( 547)				if (hit) {
HXLINE( 549)					goto _hx_goto_25;
            				}
            			}
            			_hx_goto_25:;
            		}
HXLINE( 555)		HX_VAR( int,iy);
HXLINE( 557)		{
HXLINE( 557)			HX_VARI_NAME( int,_g13,"_g1") = (int)0;
HXDLIN( 557)			HX_VARI_NAME( int,_g6,"_g") = image->height;
HXDLIN( 557)			while((_g13 < _g6)){
HXLINE( 557)				_g13 = (_g13 + (int)1);
HXLINE( 559)				iy = ((image->height - (int)1) - (_g13 - (int)1));
HXLINE( 560)				hit = false;
HXLINE( 562)				{
HXLINE( 562)					HX_VARI_NAME( int,_g33,"_g3") = (int)0;
HXDLIN( 562)					HX_VARI_NAME( int,_g23,"_g2") = image->width;
HXDLIN( 562)					while((_g33 < _g23)){
HXLINE( 562)						_g33 = (_g33 + (int)1);
HXLINE( 564)						pixel = image->getPixel32((_g33 - (int)1),iy,(int)0);
HXLINE( 565)						if (findColor) {
HXLINE( 565)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 565)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 567)						if (hit) {
HXLINE( 569)							if ((iy > bottom)) {
HXLINE( 569)								bottom = iy;
            							}
HXLINE( 570)							goto _hx_goto_28;
            						}
            					}
            					_hx_goto_28:;
            				}
HXLINE( 576)				if (hit) {
HXLINE( 578)					goto _hx_goto_27;
            				}
            			}
            			_hx_goto_27:;
            		}
HXLINE( 584)		HX_VARI( int,w) = (right - left);
HXLINE( 585)		HX_VARI( int,h) = (bottom - top);
HXLINE( 587)		if ((w > (int)0)) {
HXLINE( 587)			w = (w + (int)1);
            		}
HXLINE( 588)		if ((h > (int)0)) {
HXLINE( 588)			h = (h + (int)1);
            		}
HXLINE( 590)		if ((w < (int)0)) {
HXLINE( 590)			w = (int)0;
            		}
HXLINE( 591)		if ((h < (int)0)) {
HXLINE( 591)			h = (int)0;
            		}
HXLINE( 593)		if ((left == right)) {
HXLINE( 593)			w = (int)1;
            		}
HXLINE( 594)		if ((top == bottom)) {
HXLINE( 594)			h = (int)1;
            		}
HXLINE( 596)		if ((left > image->width)) {
HXLINE( 596)			left = (int)0;
            		}
HXLINE( 597)		if ((top > image->height)) {
HXLINE( 597)			top = (int)0;
            		}
HXLINE( 599)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,left,top,w,h);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,getColorBoundsRect,return )

int ImageDataUtil_obj::getPixel( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_604_getPixel)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(format,"format")
HXLINE( 606)		HX_VAR( int,pixel);
HXLINE( 608)		{
HXLINE( 608)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXDLIN( 608)			HX_VARI( int,offset) = ((((int)4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * (int)4));
HXDLIN( 608)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 608)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 608)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 608)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 608)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 608)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 608)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 608)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 608)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255);
HXDLIN( 608)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 608)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 608)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 608)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 608)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 608)			if (premultiplied) {
HXLINE( 608)				bool _hx_tmp;
HXDLIN( 608)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 608)					_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 608)					_hx_tmp = false;
            				}
HXDLIN( 608)				if (_hx_tmp) {
HXLINE( 608)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 608)					{
HXLINE( 608)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 608)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 608)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 608)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 608)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 608)						pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 609)		pixel = ((int)((int)((int)((int)((int)((int)((int)pixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)0);
HXLINE( 611)		switch((int)(format)){
            			case (int)1: {
HXLINE( 613)				HX_VARI( int,argb) = (int)0;
HXDLIN( 613)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)pixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 613)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 614)				HX_VARI( int,bgra) = (int)0;
HXDLIN( 614)				bgra = ((int)((int)((int)((int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)pixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 614)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 615)				return pixel;
            			}
            		}
HXLINE( 611)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel,return )

int ImageDataUtil_obj::getPixel32( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_622_getPixel32)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(format,"format")
HXLINE( 624)		HX_VAR( int,pixel);
HXLINE( 626)		{
HXLINE( 626)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXDLIN( 626)			HX_VARI( int,offset) = ((((int)4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * (int)4));
HXDLIN( 626)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 626)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 626)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 626)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 626)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 626)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 626)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 626)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 626)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255);
HXDLIN( 626)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 626)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 626)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 626)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 626)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 626)			if (premultiplied) {
HXLINE( 626)				bool _hx_tmp;
HXDLIN( 626)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 626)					_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 626)					_hx_tmp = false;
            				}
HXDLIN( 626)				if (_hx_tmp) {
HXLINE( 626)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 626)					{
HXLINE( 626)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 626)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 626)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 626)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 626)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 626)						pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 628)		switch((int)(format)){
            			case (int)1: {
HXLINE( 630)				HX_VARI( int,argb) = (int)0;
HXDLIN( 630)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)pixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 630)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 631)				HX_VARI( int,bgra) = (int)0;
HXDLIN( 631)				bgra = ((int)((int)((int)((int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)pixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 631)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 632)				return pixel;
            			}
            		}
HXLINE( 628)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel32,return )

 ::haxe::io::Bytes ImageDataUtil_obj::getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_639_getPixels)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(format,"format")
HXLINE( 641)		if (hx::IsNull( image->buffer->data )) {
HXLINE( 641)			return null();
            		}
HXLINE( 644)		HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc((::Std_obj::_hx_int((rect->width * rect->height)) * (int)4));
HXLINE( 647)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE( 651)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE( 652)			HX_VARI( int,sourceFormat) = image->buffer->format;
HXLINE( 653)			HX_VARI( bool,premultiplied) = image->buffer->premultiplied;
HXLINE( 655)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,dataView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 656)			HX_VAR( int,position);
HXDLIN( 656)			HX_VAR( int,argb);
HXDLIN( 656)			HX_VAR( int,bgra);
HXDLIN( 656)			HX_VAR( int,pixel);
HXLINE( 657)			HX_VARI( int,destPosition) = (int)0;
HXLINE( 659)			{
HXLINE( 659)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 659)				HX_VARI( int,_g) = dataView->height;
HXDLIN( 659)				while((_g1 < _g)){
HXLINE( 659)					_g1 = (_g1 + (int)1);
HXLINE( 661)					position = (dataView->offset + (dataView->stride * (_g1 - (int)1)));
HXLINE( 663)					{
HXLINE( 663)						HX_VARI( int,_g3) = (int)0;
HXDLIN( 663)						HX_VARI( int,_g2) = dataView->width;
HXDLIN( 663)						while((_g3 < _g2)){
HXLINE( 663)							_g3 = (_g3 + (int)1);
HXLINE( 665)							{
HXLINE( 665)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 665)										int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255);
HXDLIN( 665)										int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + (int)1))) & (int)(int)255);
HXDLIN( 665)										int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + (int)2))) & (int)(int)255);
HXDLIN( 665)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 665)										int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + (int)1))) & (int)(int)255);
HXDLIN( 665)										int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + (int)2))) & (int)(int)255);
HXDLIN( 665)										int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + (int)3))) & (int)(int)255);
HXDLIN( 665)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 665)										int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + (int)2))) & (int)(int)255);
HXDLIN( 665)										int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + (int)1))) & (int)(int)255);
HXDLIN( 665)										int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255);
HXDLIN( 665)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 665)								if (premultiplied) {
HXLINE( 665)									bool _hx_tmp;
HXDLIN( 665)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 665)										_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 665)										_hx_tmp = false;
            									}
HXDLIN( 665)									if (_hx_tmp) {
HXLINE( 665)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 665)										{
HXLINE( 665)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 665)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 665)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 665)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 665)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 665)											pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 667)							switch((int)(format)){
            								case (int)1: {
HXLINE( 669)									HX_VARI_NAME( int,argb1,"argb") = (int)0;
HXDLIN( 669)									argb1 = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)pixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 669)									argb = argb1;
HXDLIN( 669)									pixel = argb;
            								}
            								break;
            								case (int)2: {
HXLINE( 670)									HX_VARI_NAME( int,bgra1,"bgra") = (int)0;
HXDLIN( 670)									bgra1 = ((int)((int)((int)((int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)pixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 670)									bgra = bgra1;
HXDLIN( 670)									pixel = bgra;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 675)							{
HXLINE( 675)								destPosition = (destPosition + (int)1);
HXDLIN( 675)								bytes->b[(destPosition - (int)1)] = ((int)((int)pixel >> (int)(int)24) & (int)(int)255);
            							}
HXLINE( 676)							{
HXLINE( 676)								destPosition = (destPosition + (int)1);
HXDLIN( 676)								bytes->b[(destPosition - (int)1)] = ((int)((int)pixel >> (int)(int)16) & (int)(int)255);
            							}
HXLINE( 677)							{
HXLINE( 677)								destPosition = (destPosition + (int)1);
HXDLIN( 677)								bytes->b[(destPosition - (int)1)] = ((int)((int)pixel >> (int)(int)8) & (int)(int)255);
            							}
HXLINE( 678)							{
HXLINE( 678)								destPosition = (destPosition + (int)1);
HXDLIN( 678)								bytes->b[(destPosition - (int)1)] = ((int)pixel & (int)(int)255);
            							}
HXLINE( 680)							position = (position + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 688)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,getPixels,return )

void ImageDataUtil_obj::merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_693_merge)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
HXLINE( 695)		bool _hx_tmp;
HXDLIN( 695)		if (hx::IsNotNull( image->buffer->data )) {
HXLINE( 695)			_hx_tmp = hx::IsNull( sourceImage->buffer->data );
            		}
            		else {
HXLINE( 695)			_hx_tmp = true;
            		}
HXDLIN( 695)		if (_hx_tmp) {
HXLINE( 695)			return;
            		}
HXLINE( 698)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE( 702)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,sourceView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 703)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,destView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE( 705)			HX_VARI(  ::lime::utils::ArrayBufferView,sourceData) = sourceImage->buffer->data;
HXLINE( 706)			HX_VARI(  ::lime::utils::ArrayBufferView,destData) = image->buffer->data;
HXLINE( 707)			HX_VARI( int,sourceFormat) = sourceImage->buffer->format;
HXLINE( 708)			HX_VARI( int,destFormat) = image->buffer->format;
HXLINE( 709)			HX_VARI( bool,sourcePremultiplied) = sourceImage->buffer->premultiplied;
HXLINE( 710)			HX_VARI( bool,destPremultiplied) = image->buffer->premultiplied;
HXLINE( 712)			HX_VAR( int,sourcePosition);
HXDLIN( 712)			HX_VAR( int,destPosition);
HXDLIN( 712)			HX_VAR( int,sourcePixel);
HXDLIN( 712)			HX_VAR( int,destPixel);
HXLINE( 714)			{
HXLINE( 714)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 714)				HX_VARI( int,_g) = destView->height;
HXDLIN( 714)				while((_g1 < _g)){
HXLINE( 714)					_g1 = (_g1 + (int)1);
HXDLIN( 714)					HX_VARI( int,y) = (_g1 - (int)1);
HXLINE( 716)					sourcePosition = (sourceView->offset + (sourceView->stride * y));
HXLINE( 717)					destPosition = (destView->offset + (destView->stride * y));
HXLINE( 719)					{
HXLINE( 719)						HX_VARI( int,_g3) = (int)0;
HXDLIN( 719)						HX_VARI( int,_g2) = destView->width;
HXDLIN( 719)						while((_g3 < _g2)){
HXLINE( 719)							_g3 = (_g3 + (int)1);
HXLINE( 721)							{
HXLINE( 721)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 721)										int r = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 721)										int g = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 721)										int b = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 721)										sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 721)										int r1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 721)										int g1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 721)										int b1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 721)										sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 721)										int r2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 721)										int g2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 721)										int b2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 721)										sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 721)								if (sourcePremultiplied) {
HXLINE( 721)									bool _hx_tmp1;
HXDLIN( 721)									if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 721)										_hx_tmp1 = (((int)sourcePixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 721)										_hx_tmp1 = false;
            									}
HXDLIN( 721)									if (_hx_tmp1) {
HXLINE( 721)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 721)										{
HXLINE( 721)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 721)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 721)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 721)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 721)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 721)											sourcePixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 722)							{
HXLINE( 722)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 722)										int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 722)										int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 722)										int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 722)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 722)										int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 722)										int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 722)										int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 722)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 722)										int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 722)										int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 722)										int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 722)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 722)								if (destPremultiplied) {
HXLINE( 722)									bool _hx_tmp2;
HXDLIN( 722)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 722)										_hx_tmp2 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 722)										_hx_tmp2 = false;
            									}
HXDLIN( 722)									if (_hx_tmp2) {
HXLINE( 722)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 722)										{
HXLINE( 722)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 722)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 722)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 722)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 722)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 722)											destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 724)							destPixel = ((int)((int)((int)((int)((int)::Std_obj::_hx_int(((Float)((((int)((int)sourcePixel >> (int)(int)24) & (int)(int)255) * redMultiplier) + (((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * ((int)256 - redMultiplier))) / (Float)(int)256)) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
HXLINE( 725)							destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)::Std_obj::_hx_int(((Float)((((int)((int)sourcePixel >> (int)(int)16) & (int)(int)255) * greenMultiplier) + (((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * ((int)256 - greenMultiplier))) / (Float)(int)256)) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
HXLINE( 726)							destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)::Std_obj::_hx_int(((Float)((((int)((int)sourcePixel >> (int)(int)8) & (int)(int)255) * blueMultiplier) + (((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * ((int)256 - blueMultiplier))) / (Float)(int)256)) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
HXLINE( 727)							destPixel = ((int)((int)((int)((int)((int)((int)((int)destPixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)destPixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)destPixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)::Std_obj::_hx_int(((Float)((((int)sourcePixel & (int)(int)255) * alphaMultiplier) + (((int)destPixel & (int)(int)255) * ((int)256 - alphaMultiplier))) / (Float)(int)256)) & (int)(int)255));
HXLINE( 729)							{
HXLINE( 729)								if (destPremultiplied) {
HXLINE( 729)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 729)										if ((destPixel != (int)0)) {
HXLINE( 729)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 729)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 729)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 729)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this7->byteOffset + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 729)											destPixel = ((int)((int)((int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)destPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 729)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)destPixel & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)destPixel & (int)(int)255));
HXDLIN( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)destPixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)destPixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)destPixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 729)										::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)destPixel & (int)(int)255));
            									}
            									break;
            								}
            							}
HXLINE( 731)							sourcePosition = (sourcePosition + (int)4);
HXLINE( 732)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 740)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,merge,(void))

void ImageDataUtil_obj::multiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_745_multiplyAlpha)
            	HX_STACK_ARG(image,"image")
HXLINE( 747)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE( 748)		bool _hx_tmp;
HXDLIN( 748)		if (hx::IsNotNull( data )) {
HXLINE( 748)			_hx_tmp = !(image->buffer->transparent);
            		}
            		else {
HXLINE( 748)			_hx_tmp = true;
            		}
HXDLIN( 748)		if (_hx_tmp) {
HXLINE( 748)			return;
            		}
HXLINE( 751)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE( 755)			HX_VARI( int,format) = image->buffer->format;
HXLINE( 756)			HX_VARI( int,length) = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE( 757)			HX_VAR( int,pixel);
HXLINE( 759)			{
HXLINE( 759)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 759)				while((_g1 < length)){
HXLINE( 759)					_g1 = (_g1 + (int)1);
HXDLIN( 759)					HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 761)					{
HXLINE( 761)						HX_VARI( int,offset) = (i * (int)4);
HXDLIN( 761)						switch((int)(format)){
            							case (int)0: {
HXLINE( 761)								int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 761)								int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 761)								int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 761)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE( 761)								int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 761)								int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 761)								int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255);
HXDLIN( 761)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE( 761)								int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 761)								int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 761)								int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 761)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
            					}
HXLINE( 762)					{
HXLINE( 762)						HX_VARI_NAME( int,offset1,"offset") = (i * (int)4);
HXDLIN( 762)						if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE( 762)							if ((pixel != (int)0)) {
HXLINE( 762)								pixel = (int)0;
            							}
            						}
            						else {
HXLINE( 762)							if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE( 762)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 762)								::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN( 762)								pixel = ((int)((int)((int)((int)((int)((int)(((int)((int)pixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)pixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)pixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            							}
            						}
HXDLIN( 762)						switch((int)(format)){
            							case (int)0: {
HXLINE( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)2)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)3)),((int)pixel & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),((int)pixel & (int)(int)255));
HXDLIN( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)1)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)2)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)3)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)2)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 762)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)3)),((int)pixel & (int)(int)255));
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE( 768)		image->buffer->premultiplied = true;
HXLINE( 769)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,multiplyAlpha,(void))

void ImageDataUtil_obj::resize( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_774_resize)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(newWidth,"newWidth")
            	HX_STACK_ARG(newHeight,"newHeight")
HXLINE( 776)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) = image->buffer;
HXLINE( 777)		bool _hx_tmp;
HXDLIN( 777)		if ((buffer->width == newWidth)) {
HXLINE( 777)			_hx_tmp = (buffer->height == newHeight);
            		}
            		else {
HXLINE( 777)			_hx_tmp = false;
            		}
HXDLIN( 777)		if (_hx_tmp) {
HXLINE( 777)			return;
            		}
HXLINE( 778)		HX_VARI(  ::Dynamic,elements) = ((newWidth * newHeight) * (int)4);
HXDLIN( 778)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 778)		if (hx::IsNotNull( elements )) {
HXLINE( 778)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            		}
            		else {
HXLINE( 778)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            		}
HXDLIN( 778)		HX_VARI(  ::lime::graphics::ImageBuffer,newBuffer) =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,newWidth,newHeight,null(),null());
HXLINE( 781)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE( 785)			HX_VARI( int,imageWidth) = image->width;
HXLINE( 786)			HX_VARI( int,imageHeight) = image->height;
HXLINE( 788)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->get_data();
HXLINE( 789)			HX_VARI(  ::lime::utils::ArrayBufferView,newData) = newBuffer->data;
HXLINE( 790)			HX_VAR( int,sourceIndex);
HXDLIN( 790)			HX_VAR( int,sourceIndexX);
HXDLIN( 790)			HX_VAR( int,sourceIndexY);
HXDLIN( 790)			HX_VAR( int,sourceIndexXY);
HXDLIN( 790)			HX_VAR( int,index);
HXLINE( 791)			HX_VAR( int,sourceX);
HXDLIN( 791)			HX_VAR( int,sourceY);
HXLINE( 792)			HX_VAR( Float,u);
HXDLIN( 792)			HX_VAR( Float,v);
HXDLIN( 792)			HX_VAR( Float,uRatio);
HXDLIN( 792)			HX_VAR( Float,vRatio);
HXDLIN( 792)			HX_VAR( Float,uOpposite);
HXDLIN( 792)			HX_VAR( Float,vOpposite);
HXLINE( 794)			{
HXLINE( 794)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 794)				while((_g1 < newHeight)){
HXLINE( 794)					_g1 = (_g1 + (int)1);
HXDLIN( 794)					HX_VARI( int,y) = (_g1 - (int)1);
HXLINE( 796)					{
HXLINE( 796)						HX_VARI( int,_g3) = (int)0;
HXDLIN( 796)						while((_g3 < newWidth)){
HXLINE( 796)							_g3 = (_g3 + (int)1);
HXDLIN( 796)							HX_VARI( int,x) = (_g3 - (int)1);
HXLINE( 800)							u = ((((Float)(x + ((Float)0.5)) / (Float)newWidth) * imageWidth) - ((Float)0.5));
HXLINE( 801)							v = ((((Float)(y + ((Float)0.5)) / (Float)newHeight) * imageHeight) - ((Float)0.5));
HXLINE( 803)							sourceX = ::Std_obj::_hx_int(u);
HXLINE( 804)							sourceY = ::Std_obj::_hx_int(v);
HXLINE( 806)							sourceIndex = (((sourceY * imageWidth) + sourceX) * (int)4);
HXLINE( 807)							if ((sourceX < (imageWidth - (int)1))) {
HXLINE( 807)								sourceIndexX = (sourceIndex + (int)4);
            							}
            							else {
HXLINE( 807)								sourceIndexX = sourceIndex;
            							}
HXLINE( 808)							if ((sourceY < (imageHeight - (int)1))) {
HXLINE( 808)								sourceIndexY = (sourceIndex + (imageWidth * (int)4));
            							}
            							else {
HXLINE( 808)								sourceIndexY = sourceIndex;
            							}
HXLINE( 809)							if ((sourceIndexX != sourceIndex)) {
HXLINE( 809)								sourceIndexXY = (sourceIndexY + (int)4);
            							}
            							else {
HXLINE( 809)								sourceIndexXY = sourceIndexY;
            							}
HXLINE( 811)							index = (((y * newWidth) + x) * (int)4);
HXLINE( 813)							uRatio = (u - sourceX);
HXLINE( 814)							vRatio = (v - sourceY);
HXLINE( 815)							uOpposite = ((int)1 - uRatio);
HXLINE( 816)							vOpposite = ((int)1 - vRatio);
HXLINE( 818)							{
HXLINE( 818)								HX_VARI_NAME( int,_hx_int,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & (int)(int)255);
HXDLIN( 818)								Float val;
HXDLIN( 818)								if ((_hx_int < (int)0)) {
HXLINE( 818)									val = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE( 818)									val = (_hx_int + ((Float)0.0));
            								}
HXDLIN( 818)								HX_VARI_NAME( int,int1,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexX)) & (int)(int)255);
HXDLIN( 818)								Float val1;
HXDLIN( 818)								if ((int1 < (int)0)) {
HXLINE( 818)									val1 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE( 818)									val1 = (int1 + ((Float)0.0));
            								}
HXDLIN( 818)								HX_VARI_NAME( int,int2,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexY)) & (int)(int)255);
HXDLIN( 818)								Float val2;
HXDLIN( 818)								if ((int2 < (int)0)) {
HXLINE( 818)									val2 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE( 818)									val2 = (int2 + ((Float)0.0));
            								}
HXDLIN( 818)								HX_VARI_NAME( int,int3,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexXY)) & (int)(int)255);
HXDLIN( 818)								Float val3;
HXDLIN( 818)								if ((int3 < (int)0)) {
HXLINE( 818)									val3 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE( 818)									val3 = (int3 + ((Float)0.0));
            								}
HXDLIN( 818)								HX_VARI_NAME( int,val4,"val") = ::Std_obj::_hx_int(((((val * uOpposite) + (val1 * uRatio)) * vOpposite) + (((val2 * uOpposite) + (val3 * uRatio)) * vRatio)));
HXDLIN( 818)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val4);
            							}
HXLINE( 819)							{
HXLINE( 819)								HX_VARI_NAME( int,int4,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + (int)1))) & (int)(int)255);
HXDLIN( 819)								Float val5;
HXDLIN( 819)								if ((int4 < (int)0)) {
HXLINE( 819)									val5 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE( 819)									val5 = (int4 + ((Float)0.0));
            								}
HXDLIN( 819)								HX_VARI_NAME( int,int5,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexX + (int)1))) & (int)(int)255);
HXDLIN( 819)								Float val6;
HXDLIN( 819)								if ((int5 < (int)0)) {
HXLINE( 819)									val6 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE( 819)									val6 = (int5 + ((Float)0.0));
            								}
HXDLIN( 819)								HX_VARI_NAME( int,int6,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexY + (int)1))) & (int)(int)255);
HXDLIN( 819)								Float val7;
HXDLIN( 819)								if ((int6 < (int)0)) {
HXLINE( 819)									val7 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE( 819)									val7 = (int6 + ((Float)0.0));
            								}
HXDLIN( 819)								HX_VARI_NAME( int,int7,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexXY + (int)1))) & (int)(int)255);
HXDLIN( 819)								Float val8;
HXDLIN( 819)								if ((int7 < (int)0)) {
HXLINE( 819)									val8 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE( 819)									val8 = (int7 + ((Float)0.0));
            								}
HXDLIN( 819)								HX_VARI_NAME( int,val9,"val") = ::Std_obj::_hx_int(((((val5 * uOpposite) + (val6 * uRatio)) * vOpposite) + (((val7 * uOpposite) + (val8 * uRatio)) * vRatio)));
HXDLIN( 819)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + (int)1)),val9);
            							}
HXLINE( 820)							{
HXLINE( 820)								HX_VARI_NAME( int,int8,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + (int)2))) & (int)(int)255);
HXDLIN( 820)								Float val10;
HXDLIN( 820)								if ((int8 < (int)0)) {
HXLINE( 820)									val10 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE( 820)									val10 = (int8 + ((Float)0.0));
            								}
HXDLIN( 820)								HX_VARI_NAME( int,int9,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexX + (int)2))) & (int)(int)255);
HXDLIN( 820)								Float val11;
HXDLIN( 820)								if ((int9 < (int)0)) {
HXLINE( 820)									val11 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE( 820)									val11 = (int9 + ((Float)0.0));
            								}
HXDLIN( 820)								HX_VARI_NAME( int,int10,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexY + (int)2))) & (int)(int)255);
HXDLIN( 820)								Float val12;
HXDLIN( 820)								if ((int10 < (int)0)) {
HXLINE( 820)									val12 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE( 820)									val12 = (int10 + ((Float)0.0));
            								}
HXDLIN( 820)								HX_VARI_NAME( int,int11,"int") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexXY + (int)2))) & (int)(int)255);
HXDLIN( 820)								Float val13;
HXDLIN( 820)								if ((int11 < (int)0)) {
HXLINE( 820)									val13 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE( 820)									val13 = (int11 + ((Float)0.0));
            								}
HXDLIN( 820)								HX_VARI_NAME( int,val14,"val") = ::Std_obj::_hx_int(((((val10 * uOpposite) + (val11 * uRatio)) * vOpposite) + (((val12 * uOpposite) + (val13 * uRatio)) * vRatio)));
HXDLIN( 820)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + (int)2)),val14);
            							}
HXLINE( 824)							bool _hx_tmp1;
HXDLIN( 824)							bool _hx_tmp2;
HXDLIN( 824)							if (hx::IsNotEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexX + (int)3))) & (int)(int)255),(int)0 )) {
HXLINE( 824)								_hx_tmp2 = hx::IsEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexY + (int)3))) & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE( 824)								_hx_tmp2 = true;
            							}
HXDLIN( 824)							if (!(_hx_tmp2)) {
HXLINE( 824)								_hx_tmp1 = hx::IsEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexXY + (int)3))) & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE( 824)								_hx_tmp1 = true;
            							}
HXDLIN( 824)							if (_hx_tmp1) {
HXLINE( 826)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + (int)3)),(int)0);
            							}
            							else {
HXLINE( 830)								HX_VARI_NAME( int,val15,"val") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + (int)3))) & (int)(int)255);
HXDLIN( 830)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + (int)3)),val15);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 840)		buffer->data = newBuffer->data;
HXLINE( 841)		buffer->width = newWidth;
HXLINE( 842)		buffer->height = newHeight;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resize,(void))

void ImageDataUtil_obj::resizeBuffer( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_847_resizeBuffer)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(newWidth,"newWidth")
            	HX_STACK_ARG(newHeight,"newHeight")
HXLINE( 849)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) = image->buffer;
HXLINE( 850)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->get_data();
HXLINE( 851)		HX_VARI(  ::Dynamic,elements) = ((newWidth * newHeight) * (int)4);
HXDLIN( 851)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 851)		if (hx::IsNotNull( elements )) {
HXLINE( 851)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            		}
            		else {
HXLINE( 851)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            		}
HXDLIN( 851)		HX_VARI(  ::lime::utils::ArrayBufferView,newData) = this1;
HXLINE( 852)		HX_VAR( int,sourceIndex);
HXDLIN( 852)		HX_VAR( int,index);
HXLINE( 854)		{
HXLINE( 854)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 854)			HX_VARI( int,_g) = buffer->height;
HXDLIN( 854)			while((_g1 < _g)){
HXLINE( 854)				_g1 = (_g1 + (int)1);
HXDLIN( 854)				HX_VARI( int,y) = (_g1 - (int)1);
HXLINE( 856)				{
HXLINE( 856)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 856)					HX_VARI( int,_g2) = buffer->width;
HXDLIN( 856)					while((_g3 < _g2)){
HXLINE( 856)						_g3 = (_g3 + (int)1);
HXDLIN( 856)						HX_VARI( int,x) = (_g3 - (int)1);
HXLINE( 858)						sourceIndex = (((y * buffer->width) + x) * (int)4);
HXLINE( 859)						index = (((y * newWidth) + x) * (int)4);
HXLINE( 861)						{
HXLINE( 861)							HX_VARI( int,val) = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & (int)(int)255);
HXDLIN( 861)							::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val);
            						}
HXLINE( 862)						{
HXLINE( 862)							HX_VARI_NAME( int,val1,"val") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + (int)1))) & (int)(int)255);
HXDLIN( 862)							::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + (int)1)),val1);
            						}
HXLINE( 863)						{
HXLINE( 863)							HX_VARI_NAME( int,val2,"val") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + (int)2))) & (int)(int)255);
HXDLIN( 863)							::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + (int)2)),val2);
            						}
HXLINE( 864)						{
HXLINE( 864)							HX_VARI_NAME( int,val3,"val") = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + (int)3))) & (int)(int)255);
HXDLIN( 864)							::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + (int)3)),val3);
            						}
            					}
            				}
            			}
            		}
HXLINE( 870)		buffer->data = newData;
HXLINE( 871)		buffer->width = newWidth;
HXLINE( 872)		buffer->height = newHeight;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resizeBuffer,(void))

void ImageDataUtil_obj::setFormat( ::lime::graphics::Image image,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_877_setFormat)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(format,"format")
HXLINE( 879)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE( 880)		if (hx::IsNull( data )) {
HXLINE( 880)			return;
            		}
HXLINE( 883)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE( 887)			HX_VAR( int,index);
HXLINE( 888)			HX_VARI( int,length) = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE( 889)			HX_VAR( int,r1);
HXDLIN( 889)			HX_VAR( int,g1);
HXDLIN( 889)			HX_VAR( int,b1);
HXDLIN( 889)			HX_VAR( int,a1);
HXDLIN( 889)			HX_VAR( int,r2);
HXDLIN( 889)			HX_VAR( int,g2);
HXDLIN( 889)			HX_VAR( int,b2);
HXDLIN( 889)			HX_VAR( int,a2);
HXLINE( 890)			HX_VAR(  ::Dynamic,r);
HXDLIN( 890)			HX_VAR(  ::Dynamic,g);
HXDLIN( 890)			HX_VAR(  ::Dynamic,b);
HXDLIN( 890)			HX_VAR(  ::Dynamic,a);
HXLINE( 892)			switch((int)(image->get_format())){
            				case (int)0: {
HXLINE( 896)					r1 = (int)0;
HXLINE( 897)					g1 = (int)1;
HXLINE( 898)					b1 = (int)2;
HXLINE( 899)					a1 = (int)3;
            				}
            				break;
            				case (int)1: {
HXLINE( 903)					r1 = (int)1;
HXLINE( 904)					g1 = (int)2;
HXLINE( 905)					b1 = (int)3;
HXLINE( 906)					a1 = (int)0;
            				}
            				break;
            				case (int)2: {
HXLINE( 910)					r1 = (int)2;
HXLINE( 911)					g1 = (int)1;
HXLINE( 912)					b1 = (int)0;
HXLINE( 913)					a1 = (int)3;
            				}
            				break;
            			}
HXLINE( 917)			switch((int)(format)){
            				case (int)0: {
HXLINE( 921)					r2 = (int)0;
HXLINE( 922)					g2 = (int)1;
HXLINE( 923)					b2 = (int)2;
HXLINE( 924)					a2 = (int)3;
            				}
            				break;
            				case (int)1: {
HXLINE( 928)					r2 = (int)1;
HXLINE( 929)					g2 = (int)2;
HXLINE( 930)					b2 = (int)3;
HXLINE( 931)					a2 = (int)0;
            				}
            				break;
            				case (int)2: {
HXLINE( 935)					r2 = (int)2;
HXLINE( 936)					g2 = (int)1;
HXLINE( 937)					b2 = (int)0;
HXLINE( 938)					a2 = (int)3;
            				}
            				break;
            			}
HXLINE( 942)			{
HXLINE( 942)				HX_VARI( int,_g2) = (int)0;
HXDLIN( 942)				while((_g2 < length)){
HXLINE( 942)					_g2 = (_g2 + (int)1);
HXLINE( 944)					index = ((_g2 - (int)1) * (int)4);
HXLINE( 946)					r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + r1))) & (int)(int)255);
HXLINE( 947)					g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + g1))) & (int)(int)255);
HXLINE( 948)					b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + b1))) & (int)(int)255);
HXLINE( 949)					a = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + a1))) & (int)(int)255);
HXLINE( 951)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + r2)),r);
HXLINE( 952)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + g2)),g);
HXLINE( 953)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + b2)),b);
HXLINE( 954)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + a2)),a);
            				}
            			}
            		}
HXLINE( 960)		image->buffer->format = format;
HXLINE( 961)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,setFormat,(void))

void ImageDataUtil_obj::setPixel( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_966_setPixel)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 968)		HX_VAR( int,pixel);
HXLINE( 970)		switch((int)(format)){
            			case (int)1: {
HXLINE( 972)				HX_VARI( int,argb) = color;
HXDLIN( 972)				HX_VARI( int,rgba) = (int)0;
HXDLIN( 972)				rgba = ((int)((int)((int)((int)((int)((int)((int)argb >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)argb >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)argb >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 972)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 973)				HX_VARI( int,bgra) = color;
HXDLIN( 973)				HX_VARI_NAME( int,rgba1,"rgba") = (int)0;
HXDLIN( 973)				rgba1 = ((int)((int)((int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 973)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE( 974)				pixel = color;
            			}
            		}
HXLINE( 980)		HX_VARI( int,source) = (int)0;
HXLINE( 981)		{
HXLINE( 981)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXDLIN( 981)			HX_VARI( int,offset) = ((((int)4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * (int)4));
HXDLIN( 981)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 981)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 981)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 981)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 981)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 981)					source = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 981)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 981)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 981)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255);
HXDLIN( 981)					source = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 981)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN( 981)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN( 981)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 981)					source = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 981)			if (premultiplied) {
HXLINE( 981)				bool _hx_tmp;
HXDLIN( 981)				if ((((int)source & (int)(int)255) != (int)0)) {
HXLINE( 981)					_hx_tmp = (((int)source & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 981)					_hx_tmp = false;
            				}
HXDLIN( 981)				if (_hx_tmp) {
HXLINE( 981)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)source & (int)(int)255));
HXDLIN( 981)					{
HXLINE( 981)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 981)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)source >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 981)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 981)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)source >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 981)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 981)						source = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)source >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)source & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 983)		pixel = ((int)((int)((int)((int)((int)((int)((int)pixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)source & (int)(int)255) & (int)(int)255));
HXLINE( 984)		{
HXLINE( 984)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,data1,"data") = image->buffer->data;
HXDLIN( 984)			HX_VARI_NAME( int,offset1,"offset") = ((((int)4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * (int)4));
HXDLIN( 984)			int format1 = image->buffer->format;
HXDLIN( 984)			if (image->buffer->premultiplied) {
HXLINE( 984)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE( 984)					if ((pixel != (int)0)) {
HXLINE( 984)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE( 984)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE( 984)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 984)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this4->byteOffset + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN( 984)						pixel = ((int)((int)((int)((int)((int)((int)(((int)((int)pixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)pixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)pixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXDLIN( 984)			switch((int)(format1)){
            				case (int)0: {
HXLINE( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + (int)2)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + (int)3)),((int)pixel & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),((int)pixel & (int)(int)255));
HXDLIN( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + (int)1)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + (int)2)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + (int)3)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + (int)2)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN( 984)					::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + (int)3)),((int)pixel & (int)(int)255));
            				}
            				break;
            			}
            		}
HXLINE( 986)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel,(void))

void ImageDataUtil_obj::setPixel32( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_991_setPixel32)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 993)		HX_VAR( int,pixel);
HXLINE( 995)		switch((int)(format)){
            			case (int)1: {
HXLINE( 997)				HX_VARI( int,argb) = color;
HXDLIN( 997)				HX_VARI( int,rgba) = (int)0;
HXDLIN( 997)				rgba = ((int)((int)((int)((int)((int)((int)((int)argb >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)argb >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)argb >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 997)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 998)				HX_VARI( int,bgra) = color;
HXDLIN( 998)				HX_VARI_NAME( int,rgba1,"rgba") = (int)0;
HXDLIN( 998)				rgba1 = ((int)((int)((int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 998)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE( 999)				pixel = color;
            			}
            		}
HXLINE(1003)		if (!(image->get_transparent())) {
HXLINE(1003)			pixel = ((int)((int)((int)((int)((int)((int)((int)pixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE(1004)		{
HXLINE(1004)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXDLIN(1004)			HX_VARI( int,offset) = ((((int)4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * (int)4));
HXDLIN(1004)			int format1 = image->buffer->format;
HXDLIN(1004)			if (image->buffer->premultiplied) {
HXLINE(1004)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1004)					if ((pixel != (int)0)) {
HXLINE(1004)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1004)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1004)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1004)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1004)						pixel = ((int)((int)((int)((int)((int)((int)(((int)((int)pixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)pixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)pixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXDLIN(1004)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)pixel & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)pixel & (int)(int)255));
HXDLIN(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1004)					::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)pixel & (int)(int)255));
            				}
            				break;
            			}
            		}
HXLINE(1006)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel32,(void))

void ImageDataUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::haxe::io::Bytes bytes,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1011_setPixels)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(format,"format")
HXLINE(1013)		if (hx::IsNull( image->buffer->data )) {
HXLINE(1013)			return;
            		}
HXLINE(1016)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE(1020)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE(1021)			HX_VARI( int,sourceFormat) = image->buffer->format;
HXLINE(1022)			HX_VARI( bool,premultiplied) = image->buffer->premultiplied;
HXLINE(1023)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,dataView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(1024)			HX_VAR( int,row);
HXDLIN(1024)			HX_VAR( int,color);
HXDLIN(1024)			HX_VAR( int,pixel);
HXLINE(1025)			HX_VARI( bool,transparent) = image->get_transparent();
HXLINE(1026)			HX_VARI( int,dataPosition) = (int)0;
HXLINE(1028)			{
HXLINE(1028)				HX_VARI( int,_g1) = (int)0;
HXDLIN(1028)				HX_VARI( int,_g) = dataView->height;
HXDLIN(1028)				while((_g1 < _g)){
HXLINE(1028)					_g1 = (_g1 + (int)1);
HXLINE(1030)					row = (dataView->offset + (dataView->stride * (_g1 - (int)1)));
HXLINE(1032)					{
HXLINE(1032)						HX_VARI( int,_g3) = (int)0;
HXDLIN(1032)						HX_VARI( int,_g2) = dataView->width;
HXDLIN(1032)						while((_g3 < _g2)){
HXLINE(1032)							_g3 = (_g3 + (int)1);
HXDLIN(1032)							HX_VARI( int,x) = (_g3 - (int)1);
HXLINE(1035)							color = ((int)((int)((int)bytes->b->__get((dataPosition + (int)3)) | (int)((int)bytes->b->__get((dataPosition + (int)2)) << (int)(int)8)) | (int)((int)bytes->b->__get((dataPosition + (int)1)) << (int)(int)16)) | (int)((int)bytes->b->__get(dataPosition) << (int)(int)24));
HXLINE(1036)							dataPosition = (dataPosition + (int)4);
HXLINE(1038)							switch((int)(format)){
            								case (int)1: {
HXLINE(1040)									HX_VARI( int,argb) = color;
HXDLIN(1040)									HX_VARI( int,rgba) = (int)0;
HXDLIN(1040)									rgba = ((int)((int)((int)((int)((int)((int)((int)argb >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)argb >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)argb >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1040)									pixel = rgba;
            								}
            								break;
            								case (int)2: {
HXLINE(1041)									HX_VARI( int,bgra) = color;
HXDLIN(1041)									HX_VARI_NAME( int,rgba1,"rgba") = (int)0;
HXDLIN(1041)									rgba1 = ((int)((int)((int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1041)									pixel = rgba1;
            								}
            								break;
            								default:{
HXLINE(1042)									pixel = color;
            								}
            							}
HXLINE(1046)							if (!(transparent)) {
HXLINE(1046)								pixel = ((int)((int)((int)((int)((int)((int)((int)pixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)pixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)pixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            							}
HXLINE(1047)							{
HXLINE(1047)								HX_VARI( int,offset) = (row + (x * (int)4));
HXDLIN(1047)								if (premultiplied) {
HXLINE(1047)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1047)										if ((pixel != (int)0)) {
HXLINE(1047)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE(1047)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1047)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1047)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1047)											pixel = ((int)((int)((int)((int)((int)((int)(((int)((int)pixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)pixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)pixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN(1047)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)pixel & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)pixel & (int)(int)255));
HXDLIN(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)2)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1047)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + (int)3)),((int)pixel & (int)(int)255));
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1055)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,setPixels,(void))

int ImageDataUtil_obj::threshold( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,int threshold,int color,int mask,bool copySource,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1060_threshold)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(operation,"operation")
            	HX_STACK_ARG(threshold,"threshold")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(copySource,"copySource")
            	HX_STACK_ARG(format,"format")
HXLINE(1062)		HX_VAR( int,_color);
HXDLIN(1062)		HX_VAR( int,_mask);
HXDLIN(1062)		HX_VAR( int,_threshold);
HXLINE(1064)		switch((int)(format)){
            			case (int)1: {
HXLINE(1068)				HX_VARI( int,argb) = color;
HXDLIN(1068)				HX_VARI( int,rgba) = (int)0;
HXDLIN(1068)				rgba = ((int)((int)((int)((int)((int)((int)((int)argb >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)argb >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)argb >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1068)				_color = rgba;
HXLINE(1069)				HX_VARI_NAME( int,argb1,"argb") = mask;
HXDLIN(1069)				HX_VARI_NAME( int,rgba1,"rgba") = (int)0;
HXDLIN(1069)				rgba1 = ((int)((int)((int)((int)((int)((int)((int)argb1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)argb1 >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)argb1 >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1069)				_mask = rgba1;
HXLINE(1070)				HX_VARI_NAME( int,argb2,"argb") = threshold;
HXDLIN(1070)				HX_VARI_NAME( int,rgba2,"rgba") = (int)0;
HXDLIN(1070)				rgba2 = ((int)((int)((int)((int)((int)((int)((int)argb2 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)argb2 >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)argb2 >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1070)				_threshold = rgba2;
            			}
            			break;
            			case (int)2: {
HXLINE(1074)				HX_VARI( int,bgra) = color;
HXDLIN(1074)				HX_VARI_NAME( int,rgba3,"rgba") = (int)0;
HXDLIN(1074)				rgba3 = ((int)((int)((int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1074)				_color = rgba3;
HXLINE(1075)				HX_VARI_NAME( int,bgra1,"bgra") = mask;
HXDLIN(1075)				HX_VARI_NAME( int,rgba4,"rgba") = (int)0;
HXDLIN(1075)				rgba4 = ((int)((int)((int)((int)((int)((int)((int)bgra1 >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra1 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN(1075)				_mask = rgba4;
HXLINE(1076)				HX_VARI_NAME( int,bgra2,"bgra") = threshold;
HXDLIN(1076)				HX_VARI_NAME( int,rgba5,"rgba") = (int)0;
HXDLIN(1076)				rgba5 = ((int)((int)((int)((int)((int)((int)((int)bgra2 >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra2 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra2 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra2 & (int)(int)255) & (int)(int)255));
HXDLIN(1076)				_threshold = rgba5;
            			}
            			break;
            			default:{
HXLINE(1080)				_color = color;
HXLINE(1081)				_mask = mask;
HXLINE(1082)				_threshold = threshold;
            			}
            		}
HXLINE(1086)		HX_VAR( int,_operation);
HXDLIN(1086)		::String _hx_switch_0 = operation;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE(1086)			_operation = (int)0;
HXDLIN(1086)			goto _hx_goto_53;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE(1086)			_operation = (int)2;
HXDLIN(1086)			goto _hx_goto_53;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE(1086)			_operation = (int)3;
HXDLIN(1086)			goto _hx_goto_53;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE(1086)			_operation = (int)1;
HXDLIN(1086)			goto _hx_goto_53;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE(1086)			_operation = (int)4;
HXDLIN(1086)			goto _hx_goto_53;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE(1086)			_operation = (int)5;
HXDLIN(1086)			goto _hx_goto_53;
            		}
            		/* default */{
HXLINE(1086)			_operation = (int)-1;
            		}
            		_hx_goto_53:;
HXLINE(1098)		if ((_operation == (int)-1)) {
HXLINE(1098)			return (int)0;
            		}
HXLINE(1100)		HX_VARI(  ::lime::utils::ArrayBufferView,srcData) = sourceImage->buffer->data;
HXLINE(1101)		HX_VARI(  ::lime::utils::ArrayBufferView,destData) = image->buffer->data;
HXLINE(1103)		bool _hx_tmp;
HXDLIN(1103)		if (hx::IsNotNull( srcData )) {
HXLINE(1103)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE(1103)			_hx_tmp = true;
            		}
HXDLIN(1103)		if (_hx_tmp) {
HXLINE(1103)			return (int)0;
            		}
HXLINE(1105)		HX_VARI( int,hits) = (int)0;
HXLINE(1108)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1108)			hits = (int)0;
            		}
            		else {
HXLINE(1112)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,srcView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE(1113)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,destView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE(1115)			HX_VARI( int,srcFormat) = sourceImage->buffer->format;
HXLINE(1116)			HX_VARI( int,destFormat) = image->buffer->format;
HXLINE(1117)			HX_VARI( bool,srcPremultiplied) = sourceImage->buffer->premultiplied;
HXLINE(1118)			HX_VARI( bool,destPremultiplied) = image->buffer->premultiplied;
HXLINE(1120)			HX_VAR( int,srcPosition);
HXDLIN(1120)			HX_VAR( int,destPosition);
HXDLIN(1120)			HX_VAR( int,srcPixel);
HXDLIN(1120)			HX_VAR( int,pixelMask);
HXDLIN(1120)			HX_VAR( bool,test);
HXDLIN(1120)			HX_VAR( int,value);
HXLINE(1122)			{
HXLINE(1122)				HX_VARI( int,_g1) = (int)0;
HXDLIN(1122)				HX_VARI( int,_g) = destView->height;
HXDLIN(1122)				while((_g1 < _g)){
HXLINE(1122)					_g1 = (_g1 + (int)1);
HXDLIN(1122)					HX_VARI( int,y) = (_g1 - (int)1);
HXLINE(1124)					srcPosition = (srcView->offset + (srcView->stride * y));
HXLINE(1125)					destPosition = (destView->offset + (destView->stride * y));
HXLINE(1127)					{
HXLINE(1127)						HX_VARI( int,_g3) = (int)0;
HXDLIN(1127)						HX_VARI( int,_g2) = destView->width;
HXDLIN(1127)						while((_g3 < _g2)){
HXLINE(1127)							_g3 = (_g3 + (int)1);
HXLINE(1129)							{
HXLINE(1129)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE(1129)										int r = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN(1129)										int g = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1129)										int b = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1129)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(1129)										int r1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1129)										int g1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1129)										int b1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)3))) & (int)(int)255);
HXDLIN(1129)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(1129)										int r2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1129)										int g2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1129)										int b2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN(1129)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(1129)								if (srcPremultiplied) {
HXLINE(1129)									bool _hx_tmp1;
HXDLIN(1129)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE(1129)										_hx_tmp1 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(1129)										_hx_tmp1 = false;
            									}
HXDLIN(1129)									if (_hx_tmp1) {
HXLINE(1129)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN(1129)										{
HXLINE(1129)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1129)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)srcPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1129)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1129)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)srcPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1129)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1129)											srcPixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)srcPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(1131)							pixelMask = ((int)srcPixel & (int)_mask);
HXLINE(1133)							HX_VAR( int,tmp1);
HXDLIN(1133)							HX_VAR( int,tmp2);
HXDLIN(1133)							tmp1 = ((int)((int)pixelMask >> (int)(int)24) & (int)(int)255);
HXDLIN(1133)							tmp2 = ((int)((int)_threshold >> (int)(int)24) & (int)(int)255);
HXDLIN(1133)							if ((tmp1 != tmp2)) {
HXLINE(1133)								if ((tmp1 > tmp2)) {
HXLINE(1133)									value = (int)1;
            								}
            								else {
HXLINE(1133)									value = (int)-1;
            								}
            							}
            							else {
HXLINE(1133)								tmp1 = ((int)((int)pixelMask >> (int)(int)16) & (int)(int)255);
HXDLIN(1133)								tmp2 = ((int)((int)_threshold >> (int)(int)16) & (int)(int)255);
HXDLIN(1133)								if ((tmp1 != tmp2)) {
HXLINE(1133)									if ((tmp1 > tmp2)) {
HXLINE(1133)										value = (int)1;
            									}
            									else {
HXLINE(1133)										value = (int)-1;
            									}
            								}
            								else {
HXLINE(1133)									tmp1 = ((int)((int)pixelMask >> (int)(int)8) & (int)(int)255);
HXDLIN(1133)									tmp2 = ((int)((int)_threshold >> (int)(int)8) & (int)(int)255);
HXDLIN(1133)									if ((tmp1 != tmp2)) {
HXLINE(1133)										if ((tmp1 > tmp2)) {
HXLINE(1133)											value = (int)1;
            										}
            										else {
HXLINE(1133)											value = (int)-1;
            										}
            									}
            									else {
HXLINE(1133)										tmp1 = ((int)pixelMask & (int)(int)255);
HXDLIN(1133)										tmp2 = ((int)_threshold & (int)(int)255);
HXDLIN(1133)										if ((tmp1 != tmp2)) {
HXLINE(1133)											if ((tmp1 > tmp2)) {
HXLINE(1133)												value = (int)1;
            											}
            											else {
HXLINE(1133)												value = (int)-1;
            											}
            										}
            										else {
HXLINE(1133)											value = (int)0;
            										}
            									}
            								}
            							}
HXLINE(1135)							switch((int)(_operation)){
            								case (int)0: {
HXLINE(1137)									test = (value != (int)0);
            								}
            								break;
            								case (int)1: {
HXLINE(1138)									test = (value == (int)0);
            								}
            								break;
            								case (int)2: {
HXLINE(1139)									test = (value == (int)-1);
            								}
            								break;
            								case (int)3: {
HXLINE(1140)									if ((value != (int)0)) {
HXLINE(1140)										test = (value == (int)-1);
            									}
            									else {
HXLINE(1140)										test = true;
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1141)									test = (value == (int)1);
            								}
            								break;
            								case (int)5: {
HXLINE(1142)									if ((value != (int)0)) {
HXLINE(1142)										test = (value == (int)1);
            									}
            									else {
HXLINE(1142)										test = true;
            									}
            								}
            								break;
            								default:{
HXLINE(1143)									test = false;
            								}
            							}
HXLINE(1147)							if (test) {
HXLINE(1149)								{
HXLINE(1149)									if (destPremultiplied) {
HXLINE(1149)										if ((((int)_color & (int)(int)255) == (int)0)) {
HXLINE(1149)											if ((_color != (int)0)) {
HXLINE(1149)												_color = (int)0;
            											}
            										}
            										else {
HXLINE(1149)											if ((((int)_color & (int)(int)255) != (int)255)) {
HXLINE(1149)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1149)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this4->byteOffset + (((int)_color & (int)(int)255) * (int)4)));
HXDLIN(1149)												_color = ((int)((int)((int)((int)((int)((int)(((int)((int)_color >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)_color >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)_color >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_color & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN(1149)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)_color >> (int)(int)24) & (int)(int)255));
HXDLIN(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)_color >> (int)(int)16) & (int)(int)255));
HXDLIN(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)_color >> (int)(int)8) & (int)(int)255));
HXDLIN(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)_color & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)_color & (int)(int)255));
HXDLIN(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)_color >> (int)(int)24) & (int)(int)255));
HXDLIN(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)_color >> (int)(int)16) & (int)(int)255));
HXDLIN(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)((int)_color >> (int)(int)8) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)_color >> (int)(int)8) & (int)(int)255));
HXDLIN(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)_color >> (int)(int)16) & (int)(int)255));
HXDLIN(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)_color >> (int)(int)24) & (int)(int)255));
HXDLIN(1149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)_color & (int)(int)255));
            										}
            										break;
            									}
            								}
HXLINE(1150)								hits = (hits + (int)1);
            							}
            							else {
HXLINE(1152)								if (copySource) {
HXLINE(1154)									if (destPremultiplied) {
HXLINE(1154)										if ((((int)srcPixel & (int)(int)255) == (int)0)) {
HXLINE(1154)											if ((srcPixel != (int)0)) {
HXLINE(1154)												srcPixel = (int)0;
            											}
            										}
            										else {
HXLINE(1154)											if ((((int)srcPixel & (int)(int)255) != (int)255)) {
HXLINE(1154)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1154)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this5->buffer->b,(this5->byteOffset + (((int)srcPixel & (int)(int)255) * (int)4)));
HXDLIN(1154)												srcPixel = ((int)((int)((int)((int)((int)((int)(((int)((int)srcPixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)((int)srcPixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)((int)srcPixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN(1154)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)srcPixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)srcPixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)srcPixel >> (int)(int)8) & (int)(int)255));
HXDLIN(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)srcPixel & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)srcPixel & (int)(int)255));
HXDLIN(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)srcPixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)srcPixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)((int)srcPixel >> (int)(int)8) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),((int)((int)srcPixel >> (int)(int)8) & (int)(int)255));
HXDLIN(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)1)),((int)((int)srcPixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)2)),((int)((int)srcPixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1154)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + (int)3)),((int)srcPixel & (int)(int)255));
            										}
            										break;
            									}
            								}
            							}
HXLINE(1158)							srcPosition = (srcPosition + (int)4);
HXLINE(1159)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE(1167)		if ((hits > (int)0)) {
HXLINE(1169)			image->dirty = true;
            		}
HXLINE(1173)		return hits;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(ImageDataUtil_obj,threshold,return )

void ImageDataUtil_obj::unmultiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1178_unmultiplyAlpha)
            	HX_STACK_ARG(image,"image")
HXLINE(1180)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE(1181)		if (hx::IsNull( data )) {
HXLINE(1181)			return;
            		}
HXLINE(1184)		if (!(::lime::_hx_system::CFFI_obj::enabled)) {
HXLINE(1188)			HX_VARI( int,format) = image->buffer->format;
HXLINE(1189)			HX_VARI( int,length) = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE(1190)			HX_VAR( int,pixel);
HXLINE(1192)			{
HXLINE(1192)				HX_VARI( int,_g1) = (int)0;
HXDLIN(1192)				while((_g1 < length)){
HXLINE(1192)					_g1 = (_g1 + (int)1);
HXDLIN(1192)					HX_VARI( int,i) = (_g1 - (int)1);
HXLINE(1194)					{
HXLINE(1194)						HX_VARI( int,offset) = (i * (int)4);
HXDLIN(1194)						switch((int)(format)){
            							case (int)0: {
HXLINE(1194)								int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1194)								int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN(1194)								int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN(1194)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE(1194)								int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN(1194)								int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN(1194)								int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255);
HXDLIN(1194)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE(1194)								int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)2))) & (int)(int)255);
HXDLIN(1194)								int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)1))) & (int)(int)255);
HXDLIN(1194)								int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1194)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
HXDLIN(1194)						bool _hx_tmp;
HXDLIN(1194)						if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE(1194)							_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            						}
            						else {
HXLINE(1194)							_hx_tmp = false;
            						}
HXDLIN(1194)						if (_hx_tmp) {
HXLINE(1194)							::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN(1194)							{
HXLINE(1194)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1194)								int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1194)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1194)								int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1194)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1194)								pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)((int)pixel >> (int)(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            							}
            						}
            					}
HXLINE(1195)					{
HXLINE(1195)						HX_VARI_NAME( int,offset1,"offset") = (i * (int)4);
HXDLIN(1195)						switch((int)(format)){
            							case (int)0: {
HXLINE(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)2)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)3)),((int)pixel & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),((int)pixel & (int)(int)255));
HXDLIN(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)1)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)2)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)3)),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),((int)((int)pixel >> (int)(int)8) & (int)(int)255));
HXDLIN(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)1)),((int)((int)pixel >> (int)(int)16) & (int)(int)255));
HXDLIN(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)2)),((int)((int)pixel >> (int)(int)24) & (int)(int)255));
HXDLIN(1195)								::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + (int)3)),((int)pixel & (int)(int)255));
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1201)		image->buffer->premultiplied = false;
HXLINE(1202)		image->dirty = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,unmultiplyAlpha,(void))

int ImageDataUtil_obj::_hx___pixelCompare(int n1,int n2){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1207___pixelCompare)
            	HX_STACK_ARG(n1,"n1")
            	HX_STACK_ARG(n2,"n2")
HXLINE(1209)		HX_VAR( int,tmp1);
HXLINE(1210)		HX_VAR( int,tmp2);
HXLINE(1212)		tmp1 = ((int)((int)n1 >> (int)(int)24) & (int)(int)255);
HXLINE(1213)		tmp2 = ((int)((int)n2 >> (int)(int)24) & (int)(int)255);
HXLINE(1215)		if ((tmp1 != tmp2)) {
HXLINE(1217)			if ((tmp1 > tmp2)) {
HXLINE(1217)				return (int)1;
            			}
            			else {
HXLINE(1217)				return (int)-1;
            			}
            		}
            		else {
HXLINE(1221)			tmp1 = ((int)((int)n1 >> (int)(int)16) & (int)(int)255);
HXLINE(1222)			tmp2 = ((int)((int)n2 >> (int)(int)16) & (int)(int)255);
HXLINE(1224)			if ((tmp1 != tmp2)) {
HXLINE(1226)				if ((tmp1 > tmp2)) {
HXLINE(1226)					return (int)1;
            				}
            				else {
HXLINE(1226)					return (int)-1;
            				}
            			}
            			else {
HXLINE(1230)				tmp1 = ((int)((int)n1 >> (int)(int)8) & (int)(int)255);
HXLINE(1231)				tmp2 = ((int)((int)n2 >> (int)(int)8) & (int)(int)255);
HXLINE(1233)				if ((tmp1 != tmp2)) {
HXLINE(1235)					if ((tmp1 > tmp2)) {
HXLINE(1235)						return (int)1;
            					}
            					else {
HXLINE(1235)						return (int)-1;
            					}
            				}
            				else {
HXLINE(1239)					tmp1 = ((int)n1 & (int)(int)255);
HXLINE(1240)					tmp2 = ((int)n2 & (int)(int)255);
HXLINE(1242)					if ((tmp1 != tmp2)) {
HXLINE(1244)						if ((tmp1 > tmp2)) {
HXLINE(1244)							return (int)1;
            						}
            						else {
HXLINE(1244)							return (int)-1;
            						}
            					}
            					else {
HXLINE(1248)						return (int)0;
            					}
            				}
            			}
            		}
HXLINE(1215)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___pixelCompare,return )

void ImageDataUtil_obj::lime_image_data_util_color_transform( ::Dynamic image, ::Dynamic rect, ::Dynamic colorMatrix){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1269_lime_image_data_util_color_transform)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(colorMatrix,"colorMatrix")
HXLINE(1269)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lime_image_data_util_color_transform,(void))

void ImageDataUtil_obj::lime_image_data_util_copy_channel( ::Dynamic image, ::Dynamic sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint,int srcChannel,int destChannel){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1270_lime_image_data_util_copy_channel)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(srcChannel,"srcChannel")
            	HX_STACK_ARG(destChannel,"destChannel")
HXLINE(1270)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,lime_image_data_util_copy_channel,(void))

void ImageDataUtil_obj::lime_image_data_util_copy_pixels( ::Dynamic image, ::Dynamic sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint, ::Dynamic alphaImage, ::Dynamic alphaPoint,bool mergeAlpha){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1271_lime_image_data_util_copy_pixels)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(alphaImage,"alphaImage")
            	HX_STACK_ARG(alphaPoint,"alphaPoint")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
HXLINE(1271)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,lime_image_data_util_copy_pixels,(void))

void ImageDataUtil_obj::lime_image_data_util_fill_rect( ::Dynamic image, ::Dynamic rect,int rg,int ba){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1272_lime_image_data_util_fill_rect)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(rg,"rg")
            	HX_STACK_ARG(ba,"ba")
HXLINE(1272)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,lime_image_data_util_fill_rect,(void))

void ImageDataUtil_obj::lime_image_data_util_flood_fill( ::Dynamic image,int x,int y,int rg,int ba){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1273_lime_image_data_util_flood_fill)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(rg,"rg")
            	HX_STACK_ARG(ba,"ba")
HXLINE(1273)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,lime_image_data_util_flood_fill,(void))

void ImageDataUtil_obj::lime_image_data_util_get_pixels( ::Dynamic image, ::Dynamic rect,int format, ::Dynamic bytes){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1274_lime_image_data_util_get_pixels)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(1274)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,lime_image_data_util_get_pixels,(void))

void ImageDataUtil_obj::lime_image_data_util_merge( ::Dynamic image, ::Dynamic sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1275_lime_image_data_util_merge)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
HXLINE(1275)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,lime_image_data_util_merge,(void))

void ImageDataUtil_obj::lime_image_data_util_multiply_alpha( ::Dynamic image){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1276_lime_image_data_util_multiply_alpha)
            	HX_STACK_ARG(image,"image")
HXLINE(1276)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,lime_image_data_util_multiply_alpha,(void))

void ImageDataUtil_obj::lime_image_data_util_resize( ::Dynamic image, ::Dynamic buffer,int width,int height){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1277_lime_image_data_util_resize)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1277)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,lime_image_data_util_resize,(void))

void ImageDataUtil_obj::lime_image_data_util_set_format( ::Dynamic image,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1278_lime_image_data_util_set_format)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(format,"format")
HXLINE(1278)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,lime_image_data_util_set_format,(void))

void ImageDataUtil_obj::lime_image_data_util_set_pixels( ::Dynamic image, ::Dynamic rect, ::Dynamic bytes,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1279_lime_image_data_util_set_pixels)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(format,"format")
HXLINE(1279)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,lime_image_data_util_set_pixels,(void))

int ImageDataUtil_obj::lime_image_data_util_threshold( ::Dynamic image, ::lime::graphics::Image sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint,int operation,int thresholdRG,int thresholdBA,int colorRG,int colorBA,int maskRG,int maskBA,bool copySource){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1280_lime_image_data_util_threshold)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(operation,"operation")
            	HX_STACK_ARG(thresholdRG,"thresholdRG")
            	HX_STACK_ARG(thresholdBA,"thresholdBA")
            	HX_STACK_ARG(colorRG,"colorRG")
            	HX_STACK_ARG(colorBA,"colorBA")
            	HX_STACK_ARG(maskRG,"maskRG")
            	HX_STACK_ARG(maskBA,"maskBA")
            	HX_STACK_ARG(copySource,"copySource")
HXLINE(1280)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(ImageDataUtil_obj,lime_image_data_util_threshold,return )

void ImageDataUtil_obj::lime_image_data_util_unmultiply_alpha( ::Dynamic image){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1281_lime_image_data_util_unmultiply_alpha)
            	HX_STACK_ARG(image,"image")
HXLINE(1281)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,lime_image_data_util_unmultiply_alpha,(void))


ImageDataUtil_obj::ImageDataUtil_obj()
{
}

bool ImageDataUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { outValue = floodFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixels") ) { outValue = getPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setFormat") ) { outValue = setFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"threshold") ) { outValue = threshold_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resizeBuffer") ) { outValue = resizeBuffer_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__pixelCompare") ) { outValue = _hx___pixelCompare_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { outValue = getColorBoundsRect_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_merge") ) { outValue = lime_image_data_util_merge_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_resize") ) { outValue = lime_image_data_util_resize_dyn(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_fill_rect") ) { outValue = lime_image_data_util_fill_rect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_image_data_util_threshold") ) { outValue = lime_image_data_util_threshold_dyn(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_flood_fill") ) { outValue = lime_image_data_util_flood_fill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_image_data_util_get_pixels") ) { outValue = lime_image_data_util_get_pixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_image_data_util_set_format") ) { outValue = lime_image_data_util_set_format_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_image_data_util_set_pixels") ) { outValue = lime_image_data_util_set_pixels_dyn(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_copy_pixels") ) { outValue = lime_image_data_util_copy_pixels_dyn(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_copy_channel") ) { outValue = lime_image_data_util_copy_channel_dyn(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_multiply_alpha") ) { outValue = lime_image_data_util_multiply_alpha_dyn(); return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_color_transform") ) { outValue = lime_image_data_util_color_transform_dyn(); return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_unmultiply_alpha") ) { outValue = lime_image_data_util_unmultiply_alpha_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageDataUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ImageDataUtil_obj_sStaticStorageInfo = 0;
#endif

static void ImageDataUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageDataUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class ImageDataUtil_obj::__mClass;

static ::String ImageDataUtil_obj_sStaticFields[] = {
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("multiplyAlpha","\x9a","\xf2","\x1c","\x6b"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("resizeBuffer","\x14","\x7a","\xa2","\xb4"),
	HX_HCSTRING("setFormat","\x79","\x04","\x36","\x5d"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unmultiplyAlpha","\xa1","\xc8","\x96","\x28"),
	HX_HCSTRING("__pixelCompare","\xdf","\x79","\xe3","\x8d"),
	HX_HCSTRING("lime_image_data_util_color_transform","\xba","\xcc","\x96","\x40"),
	HX_HCSTRING("lime_image_data_util_copy_channel","\x4f","\x54","\x36","\xa5"),
	HX_HCSTRING("lime_image_data_util_copy_pixels","\x21","\x51","\x7b","\xab"),
	HX_HCSTRING("lime_image_data_util_fill_rect","\x8a","\x8c","\xa4","\x8e"),
	HX_HCSTRING("lime_image_data_util_flood_fill","\xba","\xe7","\x5b","\xf2"),
	HX_HCSTRING("lime_image_data_util_get_pixels","\xcc","\x3e","\xde","\x0c"),
	HX_HCSTRING("lime_image_data_util_merge","\xa2","\xd2","\xb1","\xf7"),
	HX_HCSTRING("lime_image_data_util_multiply_alpha","\x99","\x86","\xad","\x5d"),
	HX_HCSTRING("lime_image_data_util_resize","\xca","\x16","\x5a","\xc4"),
	HX_HCSTRING("lime_image_data_util_set_format","\x4a","\x7d","\x40","\x81"),
	HX_HCSTRING("lime_image_data_util_set_pixels","\x40","\xdd","\x5b","\x10"),
	HX_HCSTRING("lime_image_data_util_threshold","\x95","\x30","\x16","\x89"),
	HX_HCSTRING("lime_image_data_util_unmultiply_alpha","\x32","\xd8","\x15","\x90"),
	::String(null())
};

void ImageDataUtil_obj::__register()
{
	hx::Object *dummy = new ImageDataUtil_obj;
	ImageDataUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.utils.ImageDataUtil","\x80","\x72","\x23","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageDataUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageDataUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageDataUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageDataUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageDataUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace graphics
} // end namespace utils
