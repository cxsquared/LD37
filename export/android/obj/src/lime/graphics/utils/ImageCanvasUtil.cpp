// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageCanvasUtil
#include <lime/graphics/utils/ImageCanvasUtil.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_24_colorTransform,"lime.graphics.utils.ImageCanvasUtil","colorTransform",0x478efac9,"lime.graphics.utils.ImageCanvasUtil.colorTransform","lime/graphics/utils/ImageCanvasUtil.hx",24,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_34_convertToCanvas,"lime.graphics.utils.ImageCanvasUtil","convertToCanvas",0x7fd81686,"lime.graphics.utils.ImageCanvasUtil.convertToCanvas","lime/graphics/utils/ImageCanvasUtil.hx",34,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_63_convertToData,"lime.graphics.utils.ImageCanvasUtil","convertToData",0x2b8bb058,"lime.graphics.utils.ImageCanvasUtil.convertToData","lime/graphics/utils/ImageCanvasUtil.hx",63,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_81_copyChannel,"lime.graphics.utils.ImageCanvasUtil","copyChannel",0xbd2cd24e,"lime.graphics.utils.ImageCanvasUtil.copyChannel","lime/graphics/utils/ImageCanvasUtil.hx",81,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_93_copyPixels,"lime.graphics.utils.ImageCanvasUtil","copyPixels",0xbf1ad802,"lime.graphics.utils.ImageCanvasUtil.copyPixels","lime/graphics/utils/ImageCanvasUtil.hx",93,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_136_createCanvas,"lime.graphics.utils.ImageCanvasUtil","createCanvas",0x3ddb6834,"lime.graphics.utils.ImageCanvasUtil.createCanvas","lime/graphics/utils/ImageCanvasUtil.hx",136,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_169_createImageData,"lime.graphics.utils.ImageCanvasUtil","createImageData",0x307c5949,"lime.graphics.utils.ImageCanvasUtil.createImageData","lime/graphics/utils/ImageCanvasUtil.hx",169,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_197_fillRect,"lime.graphics.utils.ImageCanvasUtil","fillRect",0x8e427887,"lime.graphics.utils.ImageCanvasUtil.fillRect","lime/graphics/utils/ImageCanvasUtil.hx",197,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_237_floodFill,"lime.graphics.utils.ImageCanvasUtil","floodFill",0x900e2821,"lime.graphics.utils.ImageCanvasUtil.floodFill","lime/graphics/utils/ImageCanvasUtil.hx",237,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_247_getPixel,"lime.graphics.utils.ImageCanvasUtil","getPixel",0x44040950,"lime.graphics.utils.ImageCanvasUtil.getPixel","lime/graphics/utils/ImageCanvasUtil.hx",247,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_257_getPixel32,"lime.graphics.utils.ImageCanvasUtil","getPixel32",0x541529ef,"lime.graphics.utils.ImageCanvasUtil.getPixel32","lime/graphics/utils/ImageCanvasUtil.hx",257,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_267_getPixels,"lime.graphics.utils.ImageCanvasUtil","getPixels",0x3f841d23,"lime.graphics.utils.ImageCanvasUtil.getPixels","lime/graphics/utils/ImageCanvasUtil.hx",267,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_277_merge,"lime.graphics.utils.ImageCanvasUtil","merge",0x36e8e778,"lime.graphics.utils.ImageCanvasUtil.merge","lime/graphics/utils/ImageCanvasUtil.hx",277,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_289_resize,"lime.graphics.utils.ImageCanvasUtil","resize",0xd5553d34,"lime.graphics.utils.ImageCanvasUtil.resize","lime/graphics/utils/ImageCanvasUtil.hx",289,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_311_scroll,"lime.graphics.utils.ImageCanvasUtil","scroll",0x143ebb4d,"lime.graphics.utils.ImageCanvasUtil.scroll","lime/graphics/utils/ImageCanvasUtil.hx",311,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_324_setPixel,"lime.graphics.utils.ImageCanvasUtil","setPixel",0xf26162c4,"lime.graphics.utils.ImageCanvasUtil.setPixel","lime/graphics/utils/ImageCanvasUtil.hx",324,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_334_setPixel32,"lime.graphics.utils.ImageCanvasUtil","setPixel32",0x5792c863,"lime.graphics.utils.ImageCanvasUtil.setPixel32","lime/graphics/utils/ImageCanvasUtil.hx",334,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_344_setPixels,"lime.graphics.utils.ImageCanvasUtil","setPixels",0x22d5092f,"lime.graphics.utils.ImageCanvasUtil.setPixels","lime/graphics/utils/ImageCanvasUtil.hx",344,0x78efca71)
HX_DEFINE_STACK_FRAME(_hx_pos_b4a5736184612a6f_354_sync,"lime.graphics.utils.ImageCanvasUtil","sync",0x85fe4d9b,"lime.graphics.utils.ImageCanvasUtil.sync","lime/graphics/utils/ImageCanvasUtil.hx",354,0x78efca71)
namespace lime{
namespace graphics{
namespace utils{

void ImageCanvasUtil_obj::__construct() { }

Dynamic ImageCanvasUtil_obj::__CreateEmpty() { return new ImageCanvasUtil_obj; }

void *ImageCanvasUtil_obj::_hx_vtable = 0;

Dynamic ImageCanvasUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageCanvasUtil_obj > _hx_result = new ImageCanvasUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageCanvasUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54aa3c6c;
}

void ImageCanvasUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_24_colorTransform)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(colorMatrix,"colorMatrix")
HXLINE(  26)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE(  29)		::lime::graphics::utils::ImageDataUtil_obj::colorTransform(image,rect,colorMatrix);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageCanvasUtil_obj,colorTransform,(void))

void ImageCanvasUtil_obj::convertToCanvas( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_34_convertToCanvas)
            	HX_STACK_ARG(image,"image")
HXLINE(  36)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) = image->buffer;
HXLINE(  38)		if (hx::IsNotNull( buffer->_hx___srcImage )) {
HXLINE(  40)			if (hx::IsNull( buffer->_hx___srcCanvas )) {
HXLINE(  43)				buffer->_hx___srcContext->__Field(HX_("drawImage",b7,54,74,85),hx::paccDynamic)(buffer->_hx___srcImage,(int)0,(int)0);
            			}
HXLINE(  47)			buffer->_hx___srcImage = null();
            		}
            		else {
HXLINE(  49)			bool _hx_tmp;
HXDLIN(  49)			if (hx::IsNotNull( buffer->data )) {
HXLINE(  49)				_hx_tmp = hx::IsNull( buffer->_hx___srcCanvas );
            			}
            			else {
HXLINE(  49)				_hx_tmp = false;
            			}
HXDLIN(  49)			if (!(_hx_tmp)) {
HXLINE(  54)				bool _hx_tmp1;
HXDLIN(  54)				if (hx::IsNull( buffer->data )) {
HXLINE(  54)					_hx_tmp1 = hx::IsNotNull( buffer->_hx___srcImageData );
            				}
            				else {
HXLINE(  54)					_hx_tmp1 = false;
            				}
HXDLIN(  54)				if (_hx_tmp1) {
HXLINE(  56)					buffer->data = ( ( ::lime::utils::ArrayBufferView)(buffer->_hx___srcImageData->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) );
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageCanvasUtil_obj,convertToCanvas,(void))

void ImageCanvasUtil_obj::convertToData( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_63_convertToData)
            	HX_STACK_ARG(image,"image")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageCanvasUtil_obj,convertToData,(void))

void ImageCanvasUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_81_copyChannel)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(sourceChannel,"sourceChannel")
            	HX_STACK_ARG(destChannel,"destChannel")
HXLINE(  83)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(sourceImage);
HXLINE(  85)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE(  88)		::lime::graphics::utils::ImageDataUtil_obj::copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageCanvasUtil_obj,copyChannel,(void))

void ImageCanvasUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_b4a5736184612a6f_93_copyPixels)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(alphaImage,"alphaImage")
            	HX_STACK_ARG(alphaPoint,"alphaPoint")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
HXLINE(  95)		bool _hx_tmp;
HXDLIN(  95)		bool _hx_tmp1;
HXDLIN(  95)		bool _hx_tmp2;
HXDLIN(  95)		bool _hx_tmp3;
HXDLIN(  95)		bool _hx_tmp4;
HXDLIN(  95)		if (hx::IsNotNull( destPoint )) {
HXLINE(  95)			_hx_tmp4 = (destPoint->x >= image->width);
            		}
            		else {
HXLINE(  95)			_hx_tmp4 = true;
            		}
HXDLIN(  95)		if (!(_hx_tmp4)) {
HXLINE(  95)			_hx_tmp3 = (destPoint->y >= image->height);
            		}
            		else {
HXLINE(  95)			_hx_tmp3 = true;
            		}
HXDLIN(  95)		if (!(_hx_tmp3)) {
HXLINE(  95)			_hx_tmp2 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(  95)			_hx_tmp2 = true;
            		}
HXDLIN(  95)		if (!(_hx_tmp2)) {
HXLINE(  95)			_hx_tmp1 = (sourceRect->width < (int)1);
            		}
            		else {
HXLINE(  95)			_hx_tmp1 = true;
            		}
HXDLIN(  95)		if (!(_hx_tmp1)) {
HXLINE(  95)			_hx_tmp = (sourceRect->height < (int)1);
            		}
            		else {
HXLINE(  95)			_hx_tmp = true;
            		}
HXDLIN(  95)		if (_hx_tmp) {
HXLINE(  97)			return;
            		}
HXLINE( 101)		bool _hx_tmp5;
HXDLIN( 101)		if (hx::IsNotNull( alphaImage )) {
HXLINE( 101)			_hx_tmp5 = alphaImage->get_transparent();
            		}
            		else {
HXLINE( 101)			_hx_tmp5 = false;
            		}
HXDLIN( 101)		if (_hx_tmp5) {
HXLINE( 103)			if (hx::IsNull( alphaPoint )) {
HXLINE( 103)				alphaPoint =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            			}
HXLINE( 107)			HX_VARI(  ::lime::graphics::Image,tempData) = image->clone();
HXLINE( 108)			tempData->copyChannel(alphaImage, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,alphaPoint->x,alphaPoint->y,sourceRect->width,sourceRect->height), ::lime::math::Vector2_obj::__alloc( HX_CTX ,sourceRect->x,sourceRect->y),::lime::graphics::ImageChannel_obj::ALPHA_dyn(),::lime::graphics::ImageChannel_obj::ALPHA_dyn());
HXLINE( 109)			sourceImage = tempData;
            		}
HXLINE( 115)		if (!(mergeAlpha)) {
HXLINE( 117)			bool _hx_tmp6;
HXDLIN( 117)			if (image->get_transparent()) {
HXLINE( 117)				_hx_tmp6 = sourceImage->get_transparent();
            			}
            			else {
HXLINE( 117)				_hx_tmp6 = false;
            			}
HXDLIN( 117)			if (_hx_tmp6) {
HXLINE( 119)				image->buffer->_hx___srcContext->__Field(HX_("clearRect",51,35,68,bf),hx::paccDynamic)((destPoint->x + image->offsetX),(destPoint->y + image->offsetY),(sourceRect->width + image->offsetX),(sourceRect->height + image->offsetY));
            			}
            		}
HXLINE( 127)		if (hx::IsNotNull( sourceImage->buffer->get_src() )) {
HXLINE( 129)			HX_VARI_NAME(  ::Dynamic,image1,"image") =  ::Dynamic(image->buffer->_hx___srcContext->__Field(HX_("drawImage",b7,54,74,85),hx::paccDynamic));
HXDLIN( 129)			 ::Dynamic _hx_tmp7 = sourceImage->buffer->get_src();
HXDLIN( 129)			int _hx_tmp8 = ::Std_obj::_hx_int((sourceRect->x + sourceImage->offsetX));
HXDLIN( 129)			int _hx_tmp9 = ::Std_obj::_hx_int((sourceRect->y + sourceImage->offsetY));
HXDLIN( 129)			int _hx_tmp10 = ::Std_obj::_hx_int(sourceRect->width);
HXDLIN( 129)			int _hx_tmp11 = ::Std_obj::_hx_int(sourceRect->height);
HXDLIN( 129)			int _hx_tmp12 = ::Std_obj::_hx_int((destPoint->x + image->offsetX));
HXDLIN( 129)			int _hx_tmp13 = ::Std_obj::_hx_int((destPoint->y + image->offsetY));
HXDLIN( 129)			int _hx_tmp14 = ::Std_obj::_hx_int(sourceRect->width);
HXDLIN( 129)			image1(_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13,_hx_tmp14,::Std_obj::_hx_int(sourceRect->height));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageCanvasUtil_obj,copyPixels,(void))

void ImageCanvasUtil_obj::createCanvas( ::lime::graphics::Image image,int width,int height){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_136_createCanvas)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageCanvasUtil_obj,createCanvas,(void))

void ImageCanvasUtil_obj::createImageData( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_169_createImageData)
            	HX_STACK_ARG(image,"image")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageCanvasUtil_obj,createImageData,(void))

void ImageCanvasUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int color,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_197_fillRect)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 199)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE( 202)		bool _hx_tmp;
HXDLIN( 202)		bool _hx_tmp1;
HXDLIN( 202)		bool _hx_tmp2;
HXDLIN( 202)		if ((rect->x == (int)0)) {
HXLINE( 202)			_hx_tmp2 = (rect->y == (int)0);
            		}
            		else {
HXLINE( 202)			_hx_tmp2 = false;
            		}
HXDLIN( 202)		if (_hx_tmp2) {
HXLINE( 202)			_hx_tmp1 = (rect->width == image->width);
            		}
            		else {
HXLINE( 202)			_hx_tmp1 = false;
            		}
HXDLIN( 202)		if (_hx_tmp1) {
HXLINE( 202)			_hx_tmp = (rect->height == image->height);
            		}
            		else {
HXLINE( 202)			_hx_tmp = false;
            		}
HXDLIN( 202)		if (_hx_tmp) {
HXLINE( 204)			bool _hx_tmp3;
HXDLIN( 204)			if (image->get_transparent()) {
HXLINE( 204)				_hx_tmp3 = (((int)color & (int)(int)255) == (int)0);
            			}
            			else {
HXLINE( 204)				_hx_tmp3 = false;
            			}
HXDLIN( 204)			if (_hx_tmp3) {
HXLINE( 206)				image->buffer->_hx___srcCanvas->__SetField(HX_("width",06,b6,62,ca),image->buffer->width,hx::paccDynamic);
HXLINE( 207)				return;
            			}
            		}
HXLINE( 213)		HX_VAR( int,r);
HXDLIN( 213)		HX_VAR( int,g);
HXDLIN( 213)		HX_VAR( int,b);
HXDLIN( 213)		HX_VAR( int,a);
HXLINE( 215)		if ((format == (int)1)) {
HXLINE( 217)			r = ((int)((int)color >> (int)(int)16) & (int)(int)255);
HXLINE( 218)			g = ((int)((int)color >> (int)(int)8) & (int)(int)255);
HXLINE( 219)			b = ((int)color & (int)(int)255);
HXLINE( 220)			if (image->get_transparent()) {
HXLINE( 220)				a = ((int)((int)color >> (int)(int)24) & (int)(int)255);
            			}
            			else {
HXLINE( 220)				a = (int)255;
            			}
            		}
            		else {
HXLINE( 224)			r = ((int)((int)color >> (int)(int)24) & (int)(int)255);
HXLINE( 225)			g = ((int)((int)color >> (int)(int)16) & (int)(int)255);
HXLINE( 226)			b = ((int)((int)color >> (int)(int)8) & (int)(int)255);
HXLINE( 227)			if (image->get_transparent()) {
HXLINE( 227)				a = ((int)color & (int)(int)255);
            			}
            			else {
HXLINE( 227)				a = (int)255;
            			}
            		}
HXLINE( 231)		image->buffer->_hx___srcContext->__SetField(HX_("fillStyle",ae,cb,c4,52),((((((((HX_("rgba(",f4,cc,0d,e8) + r) + HX_(", ",74,26,00,00)) + g) + HX_(", ",74,26,00,00)) + b) + HX_(", ",74,26,00,00)) + ((Float)a / (Float)(int)255)) + HX_(")",29,00,00,00)),hx::paccDynamic);
HXLINE( 232)		image->buffer->_hx___srcContext->__Field(HX_("fillRect",47,45,b9,6c),hx::paccDynamic)((rect->x + image->offsetX),(rect->y + image->offsetY),(rect->width + image->offsetX),(rect->height + image->offsetY));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageCanvasUtil_obj,fillRect,(void))

void ImageCanvasUtil_obj::floodFill( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_237_floodFill)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 239)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE( 242)		::lime::graphics::utils::ImageDataUtil_obj::floodFill(image,x,y,color,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageCanvasUtil_obj,floodFill,(void))

int ImageCanvasUtil_obj::getPixel( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_247_getPixel)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(format,"format")
HXLINE( 249)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE( 252)		return ::lime::graphics::utils::ImageDataUtil_obj::getPixel(image,x,y,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageCanvasUtil_obj,getPixel,return )

int ImageCanvasUtil_obj::getPixel32( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_257_getPixel32)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(format,"format")
HXLINE( 259)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE( 262)		return ::lime::graphics::utils::ImageDataUtil_obj::getPixel32(image,x,y,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageCanvasUtil_obj,getPixel32,return )

 ::haxe::io::Bytes ImageCanvasUtil_obj::getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_267_getPixels)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(format,"format")
HXLINE( 269)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE( 272)		return ::lime::graphics::utils::ImageDataUtil_obj::getPixels(image,rect,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageCanvasUtil_obj,getPixels,return )

void ImageCanvasUtil_obj::merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_277_merge)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
HXLINE( 279)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(sourceImage);
HXLINE( 281)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE( 284)		::lime::graphics::utils::ImageDataUtil_obj::merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageCanvasUtil_obj,merge,(void))

void ImageCanvasUtil_obj::resize( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_289_resize)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(newWidth,"newWidth")
            	HX_STACK_ARG(newHeight,"newHeight")
HXLINE( 291)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) = image->buffer;
HXLINE( 293)		if (hx::IsNull( buffer->_hx___srcCanvas )) {
HXLINE( 296)			buffer->_hx___srcContext->__Field(HX_("drawImage",b7,54,74,85),hx::paccDynamic)(buffer->get_src(),(int)0,(int)0,newWidth,newHeight);
            		}
            		else {
HXLINE( 301)			HX_VARI(  ::Dynamic,sourceCanvas) = buffer->_hx___srcCanvas;
HXLINE( 302)			buffer->_hx___srcCanvas = null();
HXLINE( 304)			buffer->_hx___srcContext->__Field(HX_("drawImage",b7,54,74,85),hx::paccDynamic)(sourceCanvas,(int)0,(int)0,newWidth,newHeight);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageCanvasUtil_obj,resize,(void))

void ImageCanvasUtil_obj::scroll( ::lime::graphics::Image image,int x,int y){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_311_scroll)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 313)		bool _hx_tmp;
HXDLIN( 313)		if ((hx::Mod(x,image->width) == (int)0)) {
HXLINE( 313)			_hx_tmp = (hx::Mod(y,image->height) == (int)0);
            		}
            		else {
HXLINE( 313)			_hx_tmp = false;
            		}
HXDLIN( 313)		if (_hx_tmp) {
HXLINE( 313)			return;
            		}
HXLINE( 315)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE( 318)		image->buffer->_hx___srcContext->__Field(HX_("clearRect",51,35,68,bf),hx::paccDynamic)(x,y,image->width,image->height);
HXLINE( 319)		image->buffer->_hx___srcContext->__Field(HX_("drawImage",b7,54,74,85),hx::paccDynamic)(image->buffer->_hx___srcCanvas,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageCanvasUtil_obj,scroll,(void))

void ImageCanvasUtil_obj::setPixel( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_324_setPixel)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 326)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE( 329)		::lime::graphics::utils::ImageDataUtil_obj::setPixel(image,x,y,color,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageCanvasUtil_obj,setPixel,(void))

void ImageCanvasUtil_obj::setPixel32( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_334_setPixel32)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 336)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE( 339)		::lime::graphics::utils::ImageDataUtil_obj::setPixel32(image,x,y,color,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageCanvasUtil_obj,setPixel32,(void))

void ImageCanvasUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::haxe::io::Bytes bytes,int format){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_344_setPixels)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(format,"format")
HXLINE( 346)		::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(image);
HXLINE( 349)		::lime::graphics::utils::ImageDataUtil_obj::setPixels(image,rect,bytes,format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageCanvasUtil_obj,setPixels,(void))

void ImageCanvasUtil_obj::sync( ::lime::graphics::Image image,bool clear){
            	HX_STACKFRAME(&_hx_pos_b4a5736184612a6f_354_sync)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(clear,"clear")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageCanvasUtil_obj,sync,(void))


ImageCanvasUtil_obj::ImageCanvasUtil_obj()
{
}

bool ImageCanvasUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sync") ) { outValue = sync_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scroll") ) { outValue = scroll_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { outValue = floodFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixels") ) { outValue = getPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createCanvas") ) { outValue = createCanvas_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convertToData") ) { outValue = convertToData_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"convertToCanvas") ) { outValue = convertToCanvas_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createImageData") ) { outValue = createImageData_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageCanvasUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ImageCanvasUtil_obj_sStaticStorageInfo = 0;
#endif

static void ImageCanvasUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageCanvasUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageCanvasUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageCanvasUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class ImageCanvasUtil_obj::__mClass;

static ::String ImageCanvasUtil_obj_sStaticFields[] = {
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("convertToCanvas","\xc6","\x61","\xe8","\x14"),
	HX_HCSTRING("convertToData","\x98","\xab","\x76","\xb3"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("createCanvas","\xf4","\x94","\x97","\xda"),
	HX_HCSTRING("createImageData","\x89","\xa4","\x8c","\xc5"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("sync","\x5b","\xba","\x5f","\x4c"),
	::String(null())
};

void ImageCanvasUtil_obj::__register()
{
	hx::Object *dummy = new ImageCanvasUtil_obj;
	ImageCanvasUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.utils.ImageCanvasUtil","\x2e","\x95","\x3e","\x53");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageCanvasUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageCanvasUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageCanvasUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageCanvasUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageCanvasUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageCanvasUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageCanvasUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace graphics
} // end namespace utils
