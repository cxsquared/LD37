// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_opengl_GLFramebuffer
#include <lime/graphics/opengl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_433c85aba536dbfd_4_new,"lime.graphics.opengl.GLFramebuffer","new",0x1e731865,"lime.graphics.opengl.GLFramebuffer.new","lime/graphics/opengl/GLFramebuffer.hx",4,0x2d1110cc)
HX_DEFINE_STACK_FRAME(_hx_pos_433c85aba536dbfd_9_getType,"lime.graphics.opengl.GLFramebuffer","getType",0xf3efd0f5,"lime.graphics.opengl.GLFramebuffer.getType","lime/graphics/opengl/GLFramebuffer.hx",9,0x2d1110cc)
namespace lime{
namespace graphics{
namespace opengl{

void GLFramebuffer_obj::__construct(int version, ::Dynamic id){
            	HX_STACKFRAME(&_hx_pos_433c85aba536dbfd_4_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(version,"version")
            	HX_STACK_ARG(id,"id")
HXLINE(   4)		super::__construct(version,id);
            	}

Dynamic GLFramebuffer_obj::__CreateEmpty() { return new GLFramebuffer_obj; }

void *GLFramebuffer_obj::_hx_vtable = 0;

Dynamic GLFramebuffer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLFramebuffer_obj > _hx_result = new GLFramebuffer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GLFramebuffer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2ee7b3f5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2ee7b3f5;
	} else {
		return inClassId==(int)0x6ce04d1b;
	}
}

::String GLFramebuffer_obj::getType(){
            	HX_STACKFRAME(&_hx_pos_433c85aba536dbfd_9_getType)
            	HX_STACK_THIS(this)
HXLINE(   9)		return HX_("Framebuffer",cd,ac,7a,5e);
            	}



hx::ObjectPtr< GLFramebuffer_obj > GLFramebuffer_obj::__new(int version, ::Dynamic id) {
	hx::ObjectPtr< GLFramebuffer_obj > __this = new GLFramebuffer_obj();
	__this->__construct(version,id);
	return __this;
}

hx::ObjectPtr< GLFramebuffer_obj > GLFramebuffer_obj::__alloc(hx::Ctx *_hx_ctx,int version, ::Dynamic id) {
	GLFramebuffer_obj *__this = (GLFramebuffer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GLFramebuffer_obj), true, "lime.graphics.opengl.GLFramebuffer"));
	*(void **)__this = GLFramebuffer_obj::_hx_vtable;
	__this->__construct(version,id);
	return __this;
}

GLFramebuffer_obj::GLFramebuffer_obj()
{
}

hx::Val GLFramebuffer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getType") ) { return hx::Val( getType_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLFramebuffer_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLFramebuffer_obj_sStaticStorageInfo = 0;
#endif

static ::String GLFramebuffer_obj_sMemberFields[] = {
	HX_HCSTRING("getType","\x70","\xa2","\x8b","\x1f"),
	::String(null()) };

static void GLFramebuffer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLFramebuffer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLFramebuffer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLFramebuffer_obj::__mClass,"__mClass");
};

#endif

hx::Class GLFramebuffer_obj::__mClass;

void GLFramebuffer_obj::__register()
{
	hx::Object *dummy = new GLFramebuffer_obj;
	GLFramebuffer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.opengl.GLFramebuffer","\xf3","\x01","\xc4","\xfc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLFramebuffer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLFramebuffer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLFramebuffer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLFramebuffer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLFramebuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLFramebuffer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace graphics
} // end namespace opengl
