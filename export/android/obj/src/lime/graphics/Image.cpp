// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_crypto_BaseCode
#include <haxe/crypto/BaseCode.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Renderer
#include <lime/graphics/Renderer.h>
#endif
#ifndef INCLUDED_lime_graphics_format_BMP
#include <lime/graphics/format/BMP.h>
#endif
#ifndef INCLUDED_lime_graphics_format_BMPType
#include <lime/graphics/format/BMPType.h>
#endif
#ifndef INCLUDED_lime_graphics_format_JPEG
#include <lime/graphics/format/JPEG.h>
#endif
#ifndef INCLUDED_lime_graphics_format_PNG
#include <lime/graphics/format/PNG.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageCanvasUtil
#include <lime/graphics/utils/ImageCanvasUtil.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_88_new,"lime.graphics.Image","new",0x344ae603,"lime.graphics.Image.new","lime/graphics/Image.hx",88,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_170_clone,"lime.graphics.Image","clone",0xb88517c0,"lime.graphics.Image.clone","lime/graphics/Image.hx",170,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_192_colorTransform,"lime.graphics.Image","colorTransform",0xaf89aec6,"lime.graphics.Image.colorTransform","lime/graphics/Image.hx",192,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_223_copyChannel,"lime.graphics.Image","copyChannel",0xc3306e31,"lime.graphics.Image.copyChannel","lime/graphics/Image.hx",223,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_275_copyPixels,"lime.graphics.Image","copyPixels",0x19d2897f,"lime.graphics.Image.copyPixels","lime/graphics/Image.hx",275,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_348_encode,"lime.graphics.Image","encode",0xa785c453,"lime.graphics.Image.encode","lime/graphics/Image.hx",348,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_373_fillRect,"lime.graphics.Image","fillRect",0x2421e0c4,"lime.graphics.Image.fillRect","lime/graphics/Image.hx",373,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_415_floodFill,"lime.graphics.Image","floodFill",0x1da9f544,"lime.graphics.Image.floodFill","lime/graphics/Image.hx",415,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_526_getColorBoundsRect,"lime.graphics.Image","getColorBoundsRect",0x21db6743,"lime.graphics.Image.getColorBoundsRect","lime/graphics/Image.hx",526,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_556_getPixel,"lime.graphics.Image","getPixel",0xd9e3718d,"lime.graphics.Image.getPixel","lime/graphics/Image.hx",556,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_595_getPixel32,"lime.graphics.Image","getPixel32",0xaeccdb6c,"lime.graphics.Image.getPixel32","lime/graphics/Image.hx",595,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_634_getPixels,"lime.graphics.Image","getPixels",0xcd1fea46,"lime.graphics.Image.getPixels","lime/graphics/Image.hx",634,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_707_merge,"lime.graphics.Image","merge",0x75e8a71b,"lime.graphics.Image.merge","lime/graphics/Image.hx",707,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_741_resize,"lime.graphics.Image","resize",0xb61d2c31,"lime.graphics.Image.resize","lime/graphics/Image.hx",741,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_778_scroll,"lime.graphics.Image","scroll",0xf506aa4a,"lime.graphics.Image.scroll","lime/graphics/Image.hx",778,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_809_setPixel,"lime.graphics.Image","setPixel",0x8840cb01,"lime.graphics.Image.setPixel","lime/graphics/Image.hx",809,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_846_setPixel32,"lime.graphics.Image","setPixel32",0xb24a79e0,"lime.graphics.Image.setPixel32","lime/graphics/Image.hx",846,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_883_setPixels,"lime.graphics.Image","setPixels",0xb070d652,"lime.graphics.Image.setPixels","lime/graphics/Image.hx",883,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_965_threshold,"lime.graphics.Image","threshold",0xf8c3358e,"lime.graphics.Image.threshold","lime/graphics/Image.hx",965,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1040___clipRect,"lime.graphics.Image","__clipRect",0xd30737f1,"lime.graphics.Image.__clipRect","lime/graphics/Image.hx",1040,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1083___fromBase64,"lime.graphics.Image","__fromBase64",0x71681bb6,"lime.graphics.Image.__fromBase64","lime/graphics/Image.hx",1083,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1114___fromBytes,"lime.graphics.Image","__fromBytes",0x40972c24,"lime.graphics.Image.__fromBytes","lime/graphics/Image.hx",1114,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1169___fromFile,"lime.graphics.Image","__fromFile",0x1c2444e3,"lime.graphics.Image.__fromFile","lime/graphics/Image.hx",1169,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1339___fromImageBuffer,"lime.graphics.Image","__fromImageBuffer",0xe152fb34,"lime.graphics.Image.__fromImageBuffer","lime/graphics/Image.hx",1339,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1396_get_data,"lime.graphics.Image","get_data",0x7986ad30,"lime.graphics.Image.get_data","lime/graphics/Image.hx",1396,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1422_set_data,"lime.graphics.Image","set_data",0x27e406a4,"lime.graphics.Image.set_data","lime/graphics/Image.hx",1422,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1429_get_format,"lime.graphics.Image","get_format",0xc57a33bd,"lime.graphics.Image.get_format","lime/graphics/Image.hx",1429,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1434_set_format,"lime.graphics.Image","set_format",0xc8f7d231,"lime.graphics.Image.set_format","lime/graphics/Image.hx",1434,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1457_get_powerOfTwo,"lime.graphics.Image","get_powerOfTwo",0x62ee1df6,"lime.graphics.Image.get_powerOfTwo","lime/graphics/Image.hx",1457,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1462_set_powerOfTwo,"lime.graphics.Image","set_powerOfTwo",0x830e066a,"lime.graphics.Image.set_powerOfTwo","lime/graphics/Image.hx",1462,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1514_get_premultiplied,"lime.graphics.Image","get_premultiplied",0xc1478990,"lime.graphics.Image.get_premultiplied","lime/graphics/Image.hx",1514,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1519_set_premultiplied,"lime.graphics.Image","set_premultiplied",0xe4b5619c,"lime.graphics.Image.set_premultiplied","lime/graphics/Image.hx",1519,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1566_get_rect,"lime.graphics.Image","get_rect",0x82caa42a,"lime.graphics.Image.get_rect","lime/graphics/Image.hx",1566,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1581_get_src,"lime.graphics.Image","get_src",0x66c2929e,"lime.graphics.Image.get_src","lime/graphics/Image.hx",1581,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1588_set_src,"lime.graphics.Image","set_src",0x59c423aa,"lime.graphics.Image.set_src","lime/graphics/Image.hx",1588,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1593_get_transparent,"lime.graphics.Image","get_transparent",0xe1ee610c,"lime.graphics.Image.get_transparent","lime/graphics/Image.hx",1593,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1601_set_transparent,"lime.graphics.Image","set_transparent",0xddb9de18,"lime.graphics.Image.set_transparent","lime/graphics/Image.hx",1601,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_452_fromBase64,"lime.graphics.Image","fromBase64",0x6fd03756,"lime.graphics.Image.fromBase64","lime/graphics/Image.hx",452,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_465_fromBitmapData,"lime.graphics.Image","fromBitmapData",0x2e36df00,"lime.graphics.Image.fromBitmapData","lime/graphics/Image.hx",465,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_480_fromBytes,"lime.graphics.Image","fromBytes",0x36406484,"lime.graphics.Image.fromBytes","lime/graphics/Image.hx",480,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_493_fromCanvas,"lime.graphics.Image","fromCanvas",0xd2ea8e9f,"lime.graphics.Image.fromCanvas","lime/graphics/Image.hx",493,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_504_fromFile,"lime.graphics.Image","fromFile",0x58f03883,"lime.graphics.Image.fromFile","lime/graphics/Image.hx",504,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_516_fromImageElement,"lime.graphics.Image","fromImageElement",0x196571a8,"lime.graphics.Image.fromImageElement","lime/graphics/Image.hx",516,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1033___base64Encode,"lime.graphics.Image","__base64Encode",0x6ec3d362,"lime.graphics.Image.__base64Encode","lime/graphics/Image.hx",1033,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1364___isJPG,"lime.graphics.Image","__isJPG",0x6ba35b1a,"lime.graphics.Image.__isJPG","lime/graphics/Image.hx",1364,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1371___isPNG,"lime.graphics.Image","__isPNG",0x6ba7e6e2,"lime.graphics.Image.__isPNG","lime/graphics/Image.hx",1371,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1375___isGIF,"lime.graphics.Image","__isGIF",0x6ba10e3d,"lime.graphics.Image.__isGIF","lime/graphics/Image.hx",1375,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1618_lime_image_load,"lime.graphics.Image","lime_image_load",0x9aff9f17,"lime.graphics.Image.lime_image_load","lime/graphics/Image.hx",1618,0xc7b862ad)
HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_67_boot,"lime.graphics.Image","boot",0x85575d2f,"lime.graphics.Image.boot","lime/graphics/Image.hx",67,0xc7b862ad)
namespace lime{
namespace graphics{

void Image_obj::__construct( ::lime::graphics::ImageBuffer buffer,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic color, ::lime::graphics::ImageType type){
int offsetX = __o_offsetX.Default(0);
int offsetY = __o_offsetY.Default(0);
int width = __o_width.Default(-1);
int height = __o_height.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_88_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(offsetX,"offsetX")
            	HX_STACK_ARG(offsetY,"offsetY")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(type,"type")
HXLINE(  90)		this->offsetX = offsetX;
HXLINE(  91)		this->offsetY = offsetY;
HXLINE(  92)		this->width = width;
HXLINE(  93)		this->height = height;
HXLINE(  95)		if (hx::IsNull( type )) {
HXLINE(  97)			bool _hx_tmp;
HXDLIN(  97)			if (hx::IsNotNull( ::lime::app::Application_obj::current )) {
HXLINE(  97)				_hx_tmp = hx::IsNotNull( ::lime::app::Application_obj::current->renderers->__get((int)0).StaticCast<  ::lime::graphics::Renderer >() );
            			}
            			else {
HXLINE(  97)				_hx_tmp = false;
            			}
HXDLIN(  97)			if (_hx_tmp) {
HXLINE(  99)				 ::lime::graphics::ImageType _hx_tmp1;
HXDLIN(  99)				switch((int)(_hx_getEnumValueIndex(::lime::app::Application_obj::current->renderers->__get((int)0).StaticCast<  ::lime::graphics::Renderer >()->context))){
            					case (int)1: case (int)2: {
HXLINE(  99)						_hx_tmp1 = ::lime::graphics::ImageType_obj::CANVAS_dyn();
            					}
            					break;
            					case (int)3: {
HXLINE(  99)						_hx_tmp1 = ::lime::graphics::ImageType_obj::FLASH_dyn();
            					}
            					break;
            					default:{
HXLINE(  99)						_hx_tmp1 = ::lime::graphics::ImageType_obj::DATA_dyn();
            					}
            				}
HXDLIN(  99)				this->type = _hx_tmp1;
            			}
            			else {
HXLINE( 109)				this->type = ::lime::graphics::ImageType_obj::DATA_dyn();
            			}
            		}
            		else {
HXLINE( 115)			this->type = type;
            		}
HXLINE( 119)		if (hx::IsNull( buffer )) {
HXLINE( 121)			bool _hx_tmp2;
HXDLIN( 121)			if ((width > (int)0)) {
HXLINE( 121)				_hx_tmp2 = (height > (int)0);
            			}
            			else {
HXLINE( 121)				_hx_tmp2 = false;
            			}
HXDLIN( 121)			if (_hx_tmp2) {
HXLINE( 123)				switch((int)(_hx_getEnumValueIndex(this->type))){
            					case (int)0: {
HXLINE( 127)						this->buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,null(),width,height,null(),null());
HXLINE( 130)						if (hx::IsNotNull( color )) {
HXLINE( 132)							this->fillRect( ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height),color,null());
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 138)						HX_VARI(  ::Dynamic,elements) = ((width * height) * (int)4);
HXDLIN( 138)						HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 138)						if (hx::IsNotNull( elements )) {
HXLINE( 138)							this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            						}
            						else {
HXLINE( 138)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            						}
HXDLIN( 138)						this->buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width,height,null(),null());
HXLINE( 140)						if (hx::IsNotNull( color )) {
HXLINE( 142)							this->fillRect( ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height),color,null());
            						}
            					}
            					break;
            					case (int)2: {
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
            		else {
HXLINE( 161)			this->_hx___fromImageBuffer(buffer);
            		}
            	}

Dynamic Image_obj::__CreateEmpty() { return new Image_obj; }

void *Image_obj::_hx_vtable = 0;

Dynamic Image_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Image_obj > _hx_result = new Image_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool Image_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x66ea719b;
}

 ::lime::graphics::Image Image_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_170_clone)
            	HX_STACK_THIS(this)
HXLINE( 170)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 172)			bool _hx_tmp;
HXDLIN( 172)			if (hx::IsEq( this->type,::lime::graphics::ImageType_obj::CANVAS_dyn() )) {
HXLINE( 172)				_hx_tmp = hx::IsNull( this->buffer->_hx___srcImage );
            			}
            			else {
HXLINE( 172)				_hx_tmp = false;
            			}
HXDLIN( 172)			if (_hx_tmp) {
HXLINE( 174)				::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 179)			 ::lime::graphics::ImageBuffer image = this->buffer->clone();
HXDLIN( 179)			HX_VARI_NAME(  ::lime::graphics::Image,image1,"image") =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,image,this->offsetX,this->offsetY,this->width,this->height,null(),this->type);
HXLINE( 180)			image1->dirty = this->dirty;
HXLINE( 181)			return image1;
            		}
            		else {
HXLINE( 185)			return  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),this->offsetX,this->offsetY,this->width,this->height,null(),this->type);
            		}
HXLINE( 170)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,clone,return )

void Image_obj::colorTransform( ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_192_colorTransform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(colorMatrix,"colorMatrix")
HXLINE( 194)		rect = this->_hx___clipRect(rect);
HXLINE( 195)		bool _hx_tmp;
HXDLIN( 195)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 195)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 195)			_hx_tmp = true;
            		}
HXDLIN( 195)		if (_hx_tmp) {
HXLINE( 195)			return;
            		}
HXLINE( 197)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 201)				::lime::graphics::utils::ImageCanvasUtil_obj::colorTransform(hx::ObjectPtr<OBJ_>(this),rect,colorMatrix);
            			}
            			break;
            			case (int)1: {
HXLINE( 209)				::lime::graphics::utils::ImageDataUtil_obj::colorTransform(hx::ObjectPtr<OBJ_>(this),rect,colorMatrix);
            			}
            			break;
            			case (int)2: {
HXLINE( 213)				rect->offset(this->offsetX,this->offsetY);
HXLINE( 214)				this->buffer->_hx___srcBitmapData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic)(rect->_hx___toFlashRectangle(),::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::_hx___toFlashColorTransform(colorMatrix));
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,colorTransform,(void))

void Image_obj::copyChannel( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_223_copyChannel)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(sourceChannel,"sourceChannel")
            	HX_STACK_ARG(destChannel,"destChannel")
HXLINE( 225)		sourceRect = this->_hx___clipRect(sourceRect);
HXLINE( 226)		bool _hx_tmp;
HXDLIN( 226)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 226)			_hx_tmp = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE( 226)			_hx_tmp = true;
            		}
HXDLIN( 226)		if (_hx_tmp) {
HXLINE( 226)			return;
            		}
HXLINE( 228)		bool _hx_tmp1;
HXDLIN( 228)		if (hx::IsEq( destChannel,::lime::graphics::ImageChannel_obj::ALPHA_dyn() )) {
HXLINE( 228)			_hx_tmp1 = !(this->get_transparent());
            		}
            		else {
HXLINE( 228)			_hx_tmp1 = false;
            		}
HXDLIN( 228)		if (_hx_tmp1) {
HXLINE( 228)			return;
            		}
HXLINE( 229)		bool _hx_tmp2;
HXDLIN( 229)		if (!((sourceRect->width <= (int)0))) {
HXLINE( 229)			_hx_tmp2 = (sourceRect->height <= (int)0);
            		}
            		else {
HXLINE( 229)			_hx_tmp2 = true;
            		}
HXDLIN( 229)		if (_hx_tmp2) {
HXLINE( 229)			return;
            		}
HXLINE( 230)		if (((sourceRect->x + sourceRect->width) > sourceImage->width)) {
HXLINE( 230)			sourceRect->width = (sourceImage->width - sourceRect->x);
            		}
HXLINE( 231)		if (((sourceRect->y + sourceRect->height) > sourceImage->height)) {
HXLINE( 231)			sourceRect->height = (sourceImage->height - sourceRect->y);
            		}
HXLINE( 233)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 237)				::lime::graphics::utils::ImageCanvasUtil_obj::copyChannel(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
            			}
            			break;
            			case (int)1: {
HXLINE( 245)				::lime::graphics::utils::ImageDataUtil_obj::copyChannel(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
            			}
            			break;
            			case (int)2: {
HXLINE( 249)				HX_VAR( int,srcChannel);
HXDLIN( 249)				switch((int)(_hx_getEnumValueIndex(sourceChannel))){
            					case (int)0: {
HXLINE( 249)						srcChannel = (int)1;
            					}
            					break;
            					case (int)1: {
HXLINE( 249)						srcChannel = (int)2;
            					}
            					break;
            					case (int)2: {
HXLINE( 249)						srcChannel = (int)4;
            					}
            					break;
            					case (int)3: {
HXLINE( 249)						srcChannel = (int)8;
            					}
            					break;
            				}
HXLINE( 256)				HX_VAR( int,dstChannel);
HXDLIN( 256)				switch((int)(_hx_getEnumValueIndex(destChannel))){
            					case (int)0: {
HXLINE( 256)						dstChannel = (int)1;
            					}
            					break;
            					case (int)1: {
HXLINE( 256)						dstChannel = (int)2;
            					}
            					break;
            					case (int)2: {
HXLINE( 256)						dstChannel = (int)4;
            					}
            					break;
            					case (int)3: {
HXLINE( 256)						dstChannel = (int)8;
            					}
            					break;
            				}
HXLINE( 263)				sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE( 264)				destPoint->offset(this->offsetX,this->offsetY);
HXLINE( 266)				this->buffer->_hx___srcBitmapData->__Field(HX_("copyChannel",8e,7d,e6,22),hx::paccDynamic)(sourceImage->buffer->get_src(),sourceRect->_hx___toFlashRectangle(),destPoint->_hx___toFlashPoint(),srcChannel,dstChannel);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Image_obj,copyChannel,(void))

void Image_obj::copyPixels( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_275_copyPixels)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(alphaImage,"alphaImage")
            	HX_STACK_ARG(alphaPoint,"alphaPoint")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
HXLINE( 278)		bool _hx_tmp;
HXDLIN( 278)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 278)			_hx_tmp = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE( 278)			_hx_tmp = true;
            		}
HXDLIN( 278)		if (_hx_tmp) {
HXLINE( 278)			return;
            		}
HXLINE( 279)		bool _hx_tmp1;
HXDLIN( 279)		if (!((sourceRect->width <= (int)0))) {
HXLINE( 279)			_hx_tmp1 = (sourceRect->height <= (int)0);
            		}
            		else {
HXLINE( 279)			_hx_tmp1 = true;
            		}
HXDLIN( 279)		if (_hx_tmp1) {
HXLINE( 279)			return;
            		}
HXLINE( 280)		bool _hx_tmp2;
HXDLIN( 280)		if ((this->width > (int)0)) {
HXLINE( 280)			_hx_tmp2 = (this->height <= (int)0);
            		}
            		else {
HXLINE( 280)			_hx_tmp2 = true;
            		}
HXDLIN( 280)		if (_hx_tmp2) {
HXLINE( 280)			return;
            		}
HXLINE( 283)		if (((sourceRect->x + sourceRect->width) > sourceImage->width)) {
HXLINE( 283)			sourceRect->width = (sourceImage->width - sourceRect->x);
            		}
HXLINE( 284)		if (((sourceRect->y + sourceRect->height) > sourceImage->height)) {
HXLINE( 284)			sourceRect->height = (sourceImage->height - sourceRect->y);
            		}
HXLINE( 287)		if ((sourceRect->x < (int)0)) {
HXLINE( 288)			sourceRect->width = (sourceRect->width + sourceRect->x);
HXLINE( 289)			sourceRect->x = (int)0;
            		}
HXLINE( 291)		if ((sourceRect->y < (int)0)) {
HXLINE( 292)			sourceRect->height = (sourceRect->height + sourceRect->y);
HXLINE( 293)			sourceRect->y = (int)0;
            		}
HXLINE( 297)		if (((destPoint->x + sourceRect->width) > this->width)) {
HXLINE( 297)			sourceRect->width = (this->width - destPoint->x);
            		}
HXLINE( 298)		if (((destPoint->y + sourceRect->height) > this->height)) {
HXLINE( 298)			sourceRect->height = (this->height - destPoint->y);
            		}
HXLINE( 301)		if ((destPoint->x < (int)0)) {
HXLINE( 302)			sourceRect->width = (sourceRect->width + destPoint->x);
HXLINE( 303)			sourceRect->x = -(destPoint->x);
HXLINE( 304)			destPoint->x = (int)0;
            		}
HXLINE( 306)		if ((destPoint->y < (int)0)) {
HXLINE( 307)			sourceRect->height = (sourceRect->height + destPoint->y);
HXLINE( 308)			sourceRect->y = -(destPoint->y);
HXLINE( 309)			destPoint->y = (int)0;
            		}
HXLINE( 312)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 316)				::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(hx::ObjectPtr<OBJ_>(this));
HXLINE( 317)				::lime::graphics::utils::ImageCanvasUtil_obj::copyPixels(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
            			}
            			break;
            			case (int)1: {
HXLINE( 326)				::lime::graphics::utils::ImageDataUtil_obj::copyPixels(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
            			}
            			break;
            			case (int)2: {
HXLINE( 330)				sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE( 331)				destPoint->offset(this->offsetX,this->offsetY);
HXLINE( 333)				bool _hx_tmp3;
HXDLIN( 333)				if (hx::IsNotNull( alphaImage )) {
HXLINE( 333)					_hx_tmp3 = hx::IsNotNull( alphaPoint );
            				}
            				else {
HXLINE( 333)					_hx_tmp3 = false;
            				}
HXDLIN( 333)				if (_hx_tmp3) {
HXLINE( 335)					alphaPoint->offset(alphaImage->offsetX,alphaImage->offsetY);
            				}
HXLINE( 339)				 ::Dynamic _hx_tmp4;
HXDLIN( 339)				if (hx::IsNotNull( alphaImage )) {
HXLINE( 339)					_hx_tmp4 = alphaImage->buffer->get_src();
            				}
            				else {
HXLINE( 339)					_hx_tmp4 = null();
            				}
HXDLIN( 339)				 ::Dynamic _hx_tmp5;
HXDLIN( 339)				if (hx::IsNotNull( alphaPoint )) {
HXLINE( 339)					_hx_tmp5 = alphaPoint->_hx___toFlashPoint();
            				}
            				else {
HXLINE( 339)					_hx_tmp5 = null();
            				}
HXDLIN( 339)				this->buffer->_hx___srcBitmapData->__Field(HX_("copyPixels",c2,54,6e,42),hx::paccDynamic)(sourceImage->buffer->_hx___srcBitmapData,sourceRect->_hx___toFlashRectangle(),destPoint->_hx___toFlashPoint(),_hx_tmp4,_hx_tmp5,mergeAlpha);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Image_obj,copyPixels,(void))

 ::haxe::io::Bytes Image_obj::encode(::String __o_format,hx::Null< int >  __o_quality){
::String format = __o_format.Default(HX_HCSTRING("png","\xa9","\x5c","\x55","\x00"));
int quality = __o_quality.Default(90);
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_348_encode)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(quality,"quality")
HXLINE( 350)		::String _hx_switch_0 = format;
            		if (  (_hx_switch_0==HX_("bmp",45,bc,4a,00)) ){
HXLINE( 362)			return ::lime::graphics::format::BMP_obj::encode(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 362)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("jpeg",a8,f2,65,46)) ||  (_hx_switch_0==HX_("jpg",e1,d0,50,00)) ){
HXLINE( 358)			return ::lime::graphics::format::JPEG_obj::encode(hx::ObjectPtr<OBJ_>(this),quality);
HXDLIN( 358)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("png",a9,5c,55,00)) ){
HXLINE( 354)			return ::lime::graphics::format::PNG_obj::encode(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 354)			goto _hx_goto_5;
            		}
            		/* default */{
            		}
            		_hx_goto_5:;
HXLINE( 368)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,encode,return )

void Image_obj::fillRect( ::lime::math::Rectangle rect,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_373_fillRect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 375)		rect = this->_hx___clipRect(rect);
HXLINE( 376)		bool _hx_tmp;
HXDLIN( 376)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 376)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 376)			_hx_tmp = true;
            		}
HXDLIN( 376)		if (_hx_tmp) {
HXLINE( 376)			return;
            		}
HXLINE( 378)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 382)				::lime::graphics::utils::ImageCanvasUtil_obj::fillRect(hx::ObjectPtr<OBJ_>(this),rect,color,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 390)				if ((this->buffer->data->length == (int)0)) {
HXLINE( 390)					return;
            				}
HXLINE( 392)				::lime::graphics::utils::ImageDataUtil_obj::fillRect(hx::ObjectPtr<OBJ_>(this),rect,color,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 396)				rect->offset(this->offsetX,this->offsetY);
HXLINE( 398)				HX_VAR( int,argb);
HXDLIN( 398)				if (hx::IsNull( format )) {
HXLINE( 402)					HX_VARI( int,rgba) = color;
HXDLIN( 402)					HX_VARI_NAME( int,argb1,"argb") = (int)0;
HXDLIN( 402)					argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 398)					argb = argb1;
            				}
            				else {
HXLINE( 398)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 398)						argb = color;
HXDLIN( 398)						goto _hx_goto_7;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 401)						HX_VARI( int,bgra) = color;
HXDLIN( 401)						HX_VARI_NAME( int,argb2,"argb") = (int)0;
HXDLIN( 401)						argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 398)						argb = argb2;
HXLINE( 401)						goto _hx_goto_7;
            					}
            					/* default */{
HXLINE( 402)						HX_VARI_NAME( int,rgba1,"rgba") = color;
HXDLIN( 402)						HX_VARI_NAME( int,argb3,"argb") = (int)0;
HXDLIN( 402)						argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba1 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba1 >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 398)						argb = argb3;
            					}
            					_hx_goto_7:;
            				}
HXLINE( 406)				this->buffer->_hx___srcBitmapData->__Field(HX_("fillRect",47,45,b9,6c),hx::paccDynamic)(rect->_hx___toFlashRectangle(),argb);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,fillRect,(void))

void Image_obj::floodFill(int x,int y,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_415_floodFill)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 417)		if (hx::IsNull( this->buffer )) {
HXLINE( 417)			return;
            		}
HXLINE( 419)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 423)				::lime::graphics::utils::ImageCanvasUtil_obj::floodFill(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 431)				::lime::graphics::utils::ImageDataUtil_obj::floodFill(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 435)				HX_VAR( int,argb);
HXDLIN( 435)				if (hx::IsNull( format )) {
HXLINE( 439)					HX_VARI( int,rgba) = color;
HXDLIN( 439)					HX_VARI_NAME( int,argb1,"argb") = (int)0;
HXDLIN( 439)					argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 435)					argb = argb1;
            				}
            				else {
HXLINE( 435)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 435)						argb = color;
HXDLIN( 435)						goto _hx_goto_9;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 438)						HX_VARI( int,bgra) = color;
HXDLIN( 438)						HX_VARI_NAME( int,argb2,"argb") = (int)0;
HXDLIN( 438)						argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 435)						argb = argb2;
HXLINE( 438)						goto _hx_goto_9;
            					}
            					/* default */{
HXLINE( 439)						HX_VARI_NAME( int,rgba1,"rgba") = color;
HXDLIN( 439)						HX_VARI_NAME( int,argb3,"argb") = (int)0;
HXDLIN( 439)						argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba1 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba1 >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 435)						argb = argb3;
            					}
            					_hx_goto_9:;
            				}
HXLINE( 443)				this->buffer->_hx___srcBitmapData->__Field(HX_("floodFill",61,83,8a,59),hx::paccDynamic)((x + this->offsetX),(y + this->offsetY),argb);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,floodFill,(void))

 ::lime::math::Rectangle Image_obj::getColorBoundsRect(int mask,int color,hx::Null< bool >  __o_findColor, ::Dynamic format){
bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_526_getColorBoundsRect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(findColor,"findColor")
            	HX_STACK_ARG(format,"format")
HXLINE( 528)		if (hx::IsNull( this->buffer )) {
HXLINE( 528)			return null();
            		}
HXLINE( 530)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 538)				return ::lime::graphics::utils::ImageDataUtil_obj::getColorBoundsRect(hx::ObjectPtr<OBJ_>(this),mask,color,findColor,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 542)				return ::lime::graphics::utils::ImageDataUtil_obj::getColorBoundsRect(hx::ObjectPtr<OBJ_>(this),mask,color,findColor,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 546)				HX_VARI(  ::Dynamic,rect) = this->buffer->_hx___srcBitmapData->__Field(HX_("getColorBoundsRect",86,ad,e8,80),hx::paccDynamic)(mask,color,findColor);
HXLINE( 547)				return  ::lime::math::Rectangle_obj::__alloc( HX_CTX , ::Dynamic(rect->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("y",79,00,00,00),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)));
            			}
            			break;
            			default:{
HXLINE( 551)				return null();
            			}
            		}
HXLINE( 530)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,getColorBoundsRect,return )

int Image_obj::getPixel(int x,int y, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_556_getPixel)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(format,"format")
HXLINE( 558)		bool _hx_tmp;
HXDLIN( 558)		bool _hx_tmp1;
HXDLIN( 558)		bool _hx_tmp2;
HXDLIN( 558)		bool _hx_tmp3;
HXDLIN( 558)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 558)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 558)			_hx_tmp3 = true;
            		}
HXDLIN( 558)		if (!(_hx_tmp3)) {
HXLINE( 558)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 558)			_hx_tmp2 = true;
            		}
HXDLIN( 558)		if (!(_hx_tmp2)) {
HXLINE( 558)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 558)			_hx_tmp1 = true;
            		}
HXDLIN( 558)		if (!(_hx_tmp1)) {
HXLINE( 558)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 558)			_hx_tmp = true;
            		}
HXDLIN( 558)		if (_hx_tmp) {
HXLINE( 558)			return (int)0;
            		}
HXLINE( 560)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 564)				return ::lime::graphics::utils::ImageCanvasUtil_obj::getPixel(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 572)				return ::lime::graphics::utils::ImageDataUtil_obj::getPixel(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 576)				HX_VARI( int,color) = ( (int)(this->buffer->_hx___srcBitmapData->__Field(HX_("getPixel",10,d6,7a,22),hx::paccDynamic)((x + this->offsetX),(y + this->offsetY))) );
HXLINE( 578)				if (hx::IsNull( format )) {
HXLINE( 582)					HX_VARI( int,rgba) = (int)0;
HXDLIN( 582)					rgba = ((int)((int)((int)((int)((int)((int)((int)color >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)color >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)color >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 582)					return rgba;
            				}
            				else {
HXLINE( 578)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 580)						return color;
HXDLIN( 580)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 581)						HX_VARI( int,bgra) = (int)0;
HXDLIN( 581)						bgra = ((int)((int)((int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)color >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)color >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)color >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 581)						return bgra;
HXDLIN( 581)						goto _hx_goto_12;
            					}
            					/* default */{
HXLINE( 582)						HX_VARI_NAME( int,rgba1,"rgba") = (int)0;
HXDLIN( 582)						rgba1 = ((int)((int)((int)((int)((int)((int)((int)color >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)color >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)color >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 582)						return rgba1;
            					}
            					_hx_goto_12:;
            				}
            			}
            			break;
            			default:{
HXLINE( 588)				return (int)0;
            			}
            		}
HXLINE( 560)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,getPixel,return )

int Image_obj::getPixel32(int x,int y, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_595_getPixel32)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(format,"format")
HXLINE( 597)		bool _hx_tmp;
HXDLIN( 597)		bool _hx_tmp1;
HXDLIN( 597)		bool _hx_tmp2;
HXDLIN( 597)		bool _hx_tmp3;
HXDLIN( 597)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 597)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 597)			_hx_tmp3 = true;
            		}
HXDLIN( 597)		if (!(_hx_tmp3)) {
HXLINE( 597)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 597)			_hx_tmp2 = true;
            		}
HXDLIN( 597)		if (!(_hx_tmp2)) {
HXLINE( 597)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 597)			_hx_tmp1 = true;
            		}
HXDLIN( 597)		if (!(_hx_tmp1)) {
HXLINE( 597)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 597)			_hx_tmp = true;
            		}
HXDLIN( 597)		if (_hx_tmp) {
HXLINE( 597)			return (int)0;
            		}
HXLINE( 599)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 603)				return ::lime::graphics::utils::ImageCanvasUtil_obj::getPixel32(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 611)				return ::lime::graphics::utils::ImageDataUtil_obj::getPixel32(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 615)				HX_VARI( int,color) = ( (int)(this->buffer->_hx___srcBitmapData->__Field(HX_("getPixel32",af,a6,68,d7),hx::paccDynamic)((x + this->offsetX),(y + this->offsetY))) );
HXLINE( 617)				if (hx::IsNull( format )) {
HXLINE( 621)					HX_VARI( int,rgba) = (int)0;
HXDLIN( 621)					rgba = ((int)((int)((int)((int)((int)((int)((int)color >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)color >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)color >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 621)					return rgba;
            				}
            				else {
HXLINE( 617)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 619)						return color;
HXDLIN( 619)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 620)						HX_VARI( int,bgra) = (int)0;
HXDLIN( 620)						bgra = ((int)((int)((int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)color >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)color >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)color >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 620)						return bgra;
HXDLIN( 620)						goto _hx_goto_14;
            					}
            					/* default */{
HXLINE( 621)						HX_VARI_NAME( int,rgba1,"rgba") = (int)0;
HXDLIN( 621)						rgba1 = ((int)((int)((int)((int)((int)((int)((int)color >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)color >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)color >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 621)						return rgba1;
            					}
            					_hx_goto_14:;
            				}
            			}
            			break;
            			default:{
HXLINE( 627)				return (int)0;
            			}
            		}
HXLINE( 599)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,getPixel32,return )

 ::haxe::io::Bytes Image_obj::getPixels( ::lime::math::Rectangle rect, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_634_getPixels)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(format,"format")
HXLINE( 636)		if (hx::IsNull( this->buffer )) {
HXLINE( 636)			return null();
            		}
HXLINE( 638)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 642)				return ::lime::graphics::utils::ImageCanvasUtil_obj::getPixels(hx::ObjectPtr<OBJ_>(this),rect,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 650)				return ::lime::graphics::utils::ImageDataUtil_obj::getPixels(hx::ObjectPtr<OBJ_>(this),rect,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 695)				return null();
            			}
            			break;
            			default:{
HXLINE( 700)				return null();
            			}
            		}
HXLINE( 638)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,getPixels,return )

void Image_obj::merge( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_707_merge)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
HXLINE( 709)		bool _hx_tmp;
HXDLIN( 709)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 709)			_hx_tmp = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE( 709)			_hx_tmp = true;
            		}
HXDLIN( 709)		if (_hx_tmp) {
HXLINE( 709)			return;
            		}
HXLINE( 711)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 715)				::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(hx::ObjectPtr<OBJ_>(this));
HXLINE( 716)				::lime::graphics::utils::ImageCanvasUtil_obj::merge(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            			}
            			break;
            			case (int)1: {
HXLINE( 725)				::lime::graphics::utils::ImageDataUtil_obj::merge(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            			}
            			break;
            			case (int)2: {
HXLINE( 729)				sourceRect->offset(this->offsetX,this->offsetY);
HXLINE( 730)				this->buffer->_hx___srcBitmapData->__Field(HX_("merge",b8,a2,c6,05),hx::paccDynamic)(sourceImage->buffer->_hx___srcBitmapData,sourceRect->_hx___toFlashRectangle(),destPoint->_hx___toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            			}
            			break;
            			default:{
HXLINE( 734)				return;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(Image_obj,merge,(void))

void Image_obj::resize(int newWidth,int newHeight){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_741_resize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newWidth,"newWidth")
            	HX_STACK_ARG(newHeight,"newHeight")
HXLINE( 743)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 747)				::lime::graphics::utils::ImageCanvasUtil_obj::resize(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            			}
            			break;
            			case (int)1: {
HXLINE( 751)				::lime::graphics::utils::ImageDataUtil_obj::resize(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            			}
            			break;
            			case (int)2: {
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 767)		this->buffer->width = newWidth;
HXLINE( 768)		this->buffer->height = newHeight;
HXLINE( 770)		this->offsetX = (int)0;
HXLINE( 771)		this->offsetY = (int)0;
HXLINE( 772)		this->width = newWidth;
HXLINE( 773)		this->height = newHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,resize,(void))

void Image_obj::scroll(int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_778_scroll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 780)		if (hx::IsNull( this->buffer )) {
HXLINE( 780)			return;
            		}
HXLINE( 782)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 786)				::lime::graphics::utils::ImageCanvasUtil_obj::scroll(hx::ObjectPtr<OBJ_>(this),x,y);
            			}
            			break;
            			case (int)1: {
HXLINE( 796)				this->copyPixels(hx::ObjectPtr<OBJ_>(this),this->get_rect(), ::lime::math::Vector2_obj::__alloc( HX_CTX ,x,y),null(),null(),null());
            			}
            			break;
            			case (int)2: {
HXLINE( 800)				this->buffer->_hx___srcBitmapData->__Field(HX_("scroll",0d,d8,64,47),hx::paccDynamic)((x + this->offsetX),(y + this->offsetX));
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,scroll,(void))

void Image_obj::setPixel(int x,int y,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_809_setPixel)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 811)		bool _hx_tmp;
HXDLIN( 811)		bool _hx_tmp1;
HXDLIN( 811)		bool _hx_tmp2;
HXDLIN( 811)		bool _hx_tmp3;
HXDLIN( 811)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 811)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 811)			_hx_tmp3 = true;
            		}
HXDLIN( 811)		if (!(_hx_tmp3)) {
HXLINE( 811)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 811)			_hx_tmp2 = true;
            		}
HXDLIN( 811)		if (!(_hx_tmp2)) {
HXLINE( 811)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 811)			_hx_tmp1 = true;
            		}
HXDLIN( 811)		if (!(_hx_tmp1)) {
HXLINE( 811)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 811)			_hx_tmp = true;
            		}
HXDLIN( 811)		if (_hx_tmp) {
HXLINE( 811)			return;
            		}
HXLINE( 813)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 817)				::lime::graphics::utils::ImageCanvasUtil_obj::setPixel(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 825)				::lime::graphics::utils::ImageDataUtil_obj::setPixel(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 829)				HX_VAR( int,argb);
HXDLIN( 829)				if (hx::IsNull( format )) {
HXLINE( 833)					HX_VARI( int,rgba) = color;
HXDLIN( 833)					HX_VARI_NAME( int,argb1,"argb") = (int)0;
HXDLIN( 833)					argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 829)					argb = argb1;
            				}
            				else {
HXLINE( 829)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 829)						argb = color;
HXDLIN( 829)						goto _hx_goto_20;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 832)						HX_VARI( int,bgra) = color;
HXDLIN( 832)						HX_VARI_NAME( int,argb2,"argb") = (int)0;
HXDLIN( 832)						argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 829)						argb = argb2;
HXLINE( 832)						goto _hx_goto_20;
            					}
            					/* default */{
HXLINE( 833)						HX_VARI_NAME( int,rgba1,"rgba") = color;
HXDLIN( 833)						HX_VARI_NAME( int,argb3,"argb") = (int)0;
HXDLIN( 833)						argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba1 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba1 >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 829)						argb = argb3;
            					}
            					_hx_goto_20:;
            				}
HXLINE( 837)				this->buffer->_hx___srcBitmapData->__Field(HX_("setPixel",84,2f,d8,d0),hx::paccDynamic)((x + this->offsetX),(y + this->offsetX),argb);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,setPixel,(void))

void Image_obj::setPixel32(int x,int y,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_846_setPixel32)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 848)		bool _hx_tmp;
HXDLIN( 848)		bool _hx_tmp1;
HXDLIN( 848)		bool _hx_tmp2;
HXDLIN( 848)		bool _hx_tmp3;
HXDLIN( 848)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 848)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 848)			_hx_tmp3 = true;
            		}
HXDLIN( 848)		if (!(_hx_tmp3)) {
HXLINE( 848)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 848)			_hx_tmp2 = true;
            		}
HXDLIN( 848)		if (!(_hx_tmp2)) {
HXLINE( 848)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 848)			_hx_tmp1 = true;
            		}
HXDLIN( 848)		if (!(_hx_tmp1)) {
HXLINE( 848)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 848)			_hx_tmp = true;
            		}
HXDLIN( 848)		if (_hx_tmp) {
HXLINE( 848)			return;
            		}
HXLINE( 850)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 854)				::lime::graphics::utils::ImageCanvasUtil_obj::setPixel32(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 862)				::lime::graphics::utils::ImageDataUtil_obj::setPixel32(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 866)				HX_VAR( int,argb);
HXDLIN( 866)				if (hx::IsNull( format )) {
HXLINE( 870)					HX_VARI( int,rgba) = color;
HXDLIN( 870)					HX_VARI_NAME( int,argb1,"argb") = (int)0;
HXDLIN( 870)					argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 866)					argb = argb1;
            				}
            				else {
HXLINE( 866)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 866)						argb = color;
HXDLIN( 866)						goto _hx_goto_22;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 869)						HX_VARI( int,bgra) = color;
HXDLIN( 869)						HX_VARI_NAME( int,argb2,"argb") = (int)0;
HXDLIN( 869)						argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 866)						argb = argb2;
HXLINE( 869)						goto _hx_goto_22;
            					}
            					/* default */{
HXLINE( 870)						HX_VARI_NAME( int,rgba1,"rgba") = color;
HXDLIN( 870)						HX_VARI_NAME( int,argb3,"argb") = (int)0;
HXDLIN( 870)						argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba1 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba1 >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 866)						argb = argb3;
            					}
            					_hx_goto_22:;
            				}
HXLINE( 874)				this->buffer->_hx___srcBitmapData->__Field(HX_("setPixel32",23,45,e6,da),hx::paccDynamic)((x + this->offsetX),(y + this->offsetY),argb);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,setPixel32,(void))

void Image_obj::setPixels( ::lime::math::Rectangle rect, ::haxe::io::Bytes bytes, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_883_setPixels)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(format,"format")
HXLINE( 885)		rect = this->_hx___clipRect(rect);
HXLINE( 886)		bool _hx_tmp;
HXDLIN( 886)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 886)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 886)			_hx_tmp = true;
            		}
HXDLIN( 886)		if (_hx_tmp) {
HXLINE( 886)			return;
            		}
HXLINE( 888)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: {
HXLINE( 892)				::lime::graphics::utils::ImageCanvasUtil_obj::setPixels(hx::ObjectPtr<OBJ_>(this),rect,bytes,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 900)				::lime::graphics::utils::ImageDataUtil_obj::setPixels(hx::ObjectPtr<OBJ_>(this),rect,bytes,format);
            			}
            			break;
            			case (int)2: {
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,setPixels,(void))

int Image_obj::threshold( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,int threshold,hx::Null< int >  __o_color,hx::Null< int >  __o_mask,hx::Null< bool >  __o_copySource, ::Dynamic format){
int color = __o_color.Default(0);
int mask = __o_mask.Default(-1);
bool copySource = __o_copySource.Default(false);
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_965_threshold)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(operation,"operation")
            	HX_STACK_ARG(threshold,"threshold")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(copySource,"copySource")
            	HX_STACK_ARG(format,"format")
HXLINE( 967)		bool _hx_tmp;
HXDLIN( 967)		bool _hx_tmp1;
HXDLIN( 967)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 967)			_hx_tmp1 = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE( 967)			_hx_tmp1 = true;
            		}
HXDLIN( 967)		if (!(_hx_tmp1)) {
HXLINE( 967)			_hx_tmp = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE( 967)			_hx_tmp = true;
            		}
HXDLIN( 967)		if (_hx_tmp) {
HXLINE( 967)			return (int)0;
            		}
HXLINE( 969)		switch((int)(_hx_getEnumValueIndex(this->type))){
            			case (int)0: case (int)1: {
HXLINE( 977)				return ::lime::graphics::utils::ImageDataUtil_obj::threshold(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 981)				HX_VAR( int,_color);
HXDLIN( 981)				if (hx::IsNull( format )) {
HXLINE( 985)					HX_VARI( int,rgba) = color;
HXDLIN( 985)					HX_VARI( int,argb) = (int)0;
HXDLIN( 985)					argb = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 981)					_color = argb;
            				}
            				else {
HXLINE( 981)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 981)						_color = color;
HXDLIN( 981)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 984)						HX_VARI( int,bgra) = color;
HXDLIN( 984)						HX_VARI_NAME( int,argb1,"argb") = (int)0;
HXDLIN( 984)						argb1 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)bgra >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 981)						_color = argb1;
HXLINE( 984)						goto _hx_goto_25;
            					}
            					/* default */{
HXLINE( 985)						HX_VARI_NAME( int,rgba1,"rgba") = color;
HXDLIN( 985)						HX_VARI_NAME( int,argb2,"argb") = (int)0;
HXDLIN( 985)						argb2 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba1 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba1 >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 981)						_color = argb2;
            					}
            					_hx_goto_25:;
            				}
HXLINE( 989)				HX_VAR( int,_mask);
HXDLIN( 989)				if (hx::IsNull( format )) {
HXLINE( 993)					HX_VARI_NAME( int,rgba2,"rgba") = mask;
HXDLIN( 993)					HX_VARI_NAME( int,argb3,"argb") = (int)0;
HXDLIN( 993)					argb3 = ((int)((int)((int)((int)((int)((int)rgba2 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba2 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba2 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba2 >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 989)					_mask = argb3;
            				}
            				else {
HXLINE( 989)					 ::Dynamic _hx_switch_1 = format;
            					if (  (_hx_switch_1==(int)1) ){
HXLINE( 989)						_mask = mask;
HXDLIN( 989)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_1==(int)2) ){
HXLINE( 992)						HX_VARI_NAME( int,bgra1,"bgra") = mask;
HXDLIN( 992)						HX_VARI_NAME( int,argb4,"argb") = (int)0;
HXDLIN( 992)						argb4 = ((int)((int)((int)((int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)bgra1 >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)bgra1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)bgra1 >> (int)(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 989)						_mask = argb4;
HXLINE( 992)						goto _hx_goto_26;
            					}
            					/* default */{
HXLINE( 993)						HX_VARI_NAME( int,rgba3,"rgba") = mask;
HXDLIN( 993)						HX_VARI_NAME( int,argb5,"argb") = (int)0;
HXDLIN( 993)						argb5 = ((int)((int)((int)((int)((int)((int)rgba3 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)rgba3 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)rgba3 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)rgba3 >> (int)(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 989)						_mask = argb5;
            					}
            					_hx_goto_26:;
            				}
HXLINE( 997)				sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE( 998)				destPoint->offset(this->offsetX,this->offsetY);
HXLINE(1000)				return this->buffer->_hx___srcBitmapData->__Field(HX_("threshold",ab,c3,a3,34),hx::paccDynamic)(sourceImage->buffer->get_src(),sourceRect->_hx___toFlashRectangle(),destPoint->_hx___toFlashPoint(),operation,threshold,_color,_mask,copySource);
            			}
            			break;
            			default:{
            			}
            		}
HXLINE(1006)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC9(Image_obj,threshold,return )

 ::lime::math::Rectangle Image_obj::_hx___clipRect( ::lime::math::Rectangle r){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1040___clipRect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE(1042)		if (hx::IsNull( r )) {
HXLINE(1042)			return null();
            		}
HXLINE(1044)		if ((r->x < (int)0)) {
HXLINE(1046)			r->width = (r->width - -(r->x));
HXLINE(1047)			r->x = (int)0;
HXLINE(1049)			if (((r->x + r->width) <= (int)0)) {
HXLINE(1049)				return null();
            			}
            		}
HXLINE(1053)		if ((r->y < (int)0)) {
HXLINE(1055)			r->height = (r->height - -(r->y));
HXLINE(1056)			r->y = (int)0;
HXLINE(1058)			if (((r->y + r->height) <= (int)0)) {
HXLINE(1058)				return null();
            			}
            		}
HXLINE(1062)		if (((r->x + r->width) >= this->width)) {
HXLINE(1064)			r->width = (r->width - ((r->x + r->width) - this->width));
HXLINE(1066)			if ((r->width <= (int)0)) {
HXLINE(1066)				return null();
            			}
            		}
HXLINE(1070)		if (((r->y + r->height) >= this->height)) {
HXLINE(1072)			r->height = (r->height - ((r->y + r->height) - this->height));
HXLINE(1074)			if ((r->height <= (int)0)) {
HXLINE(1074)				return null();
            			}
            		}
HXLINE(1078)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___clipRect,return )

void Image_obj::_hx___fromBase64(::String base64,::String type, ::Dynamic onload){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1083___fromBase64)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(onload,"onload")
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,_hx___fromBase64,(void))

void Image_obj::_hx___fromBytes( ::haxe::io::Bytes bytes, ::Dynamic onload){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1114___fromBytes)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(onload,"onload")
HXLINE(1146)		HX_VARI(  ::Dynamic,data) = null();
HXLINE(1148)		if (hx::IsNotNull( data )) {
HXLINE(1150)			HX_VARI(  ::haxe::io::Bytes,buffer) =  ::haxe::io::Bytes_obj::__alloc( HX_CTX , ::Dynamic( ::Dynamic(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)), ::Dynamic( ::Dynamic(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic))->__Field(HX_("b",62,00,00,00),hx::paccDynamic)));
HXDLIN(1150)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(1150)			if (hx::IsNotNull( buffer )) {
HXLINE(1150)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN(1150)				if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE(1150)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(1150)				HX_VARI( int,bufferByteLength) = buffer->length;
HXDLIN(1150)				{
HXLINE(1150)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(1150)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN(1150)					if ((bufferByteLength < (int)0)) {
HXLINE(1150)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN(1150)				_this->buffer = buffer;
HXDLIN(1150)				_this->byteOffset = (int)0;
HXDLIN(1150)				_this->byteLength = bufferByteLength;
HXDLIN(1150)				_this->length = ::Std_obj::_hx_int(((Float)bufferByteLength / (Float)_this->bytesPerElement));
HXDLIN(1150)				this1 = _this;
            			}
            			else {
HXLINE(1150)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            			}
HXDLIN(1150)			this->_hx___fromImageBuffer( ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1, ::Dynamic(data->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(data->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)), ::Dynamic(data->__Field(HX_("bitsPerPixel",8f,4d,ee,1c),hx::paccDynamic)),null()));
HXLINE(1152)			if (hx::IsNotNull( onload )) {
HXLINE(1154)				onload(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,_hx___fromBytes,(void))

void Image_obj::_hx___fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1169___fromFile)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(onload,"onload")
            	HX_STACK_ARG(onerror,"onerror")
HXLINE(1210)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) = null();
HXLINE(1264)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1266)			HX_VARI(  ::Dynamic,data) = null();
HXLINE(1268)			if (hx::IsNotNull( data )) {
HXLINE(1270)				HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") =  ::haxe::io::Bytes_obj::__alloc( HX_CTX , ::Dynamic( ::Dynamic(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)), ::Dynamic( ::Dynamic(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic))->__Field(HX_("b",62,00,00,00),hx::paccDynamic)));
HXDLIN(1270)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(1270)				if (hx::IsNotNull( buffer1 )) {
HXLINE(1270)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN(1270)					if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE(1270)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN(1270)					HX_VARI( int,bufferByteLength) = buffer1->length;
HXDLIN(1270)					{
HXLINE(1270)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(1270)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN(1270)						if ((bufferByteLength < (int)0)) {
HXLINE(1270)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN(1270)					_this->buffer = buffer1;
HXDLIN(1270)					_this->byteOffset = (int)0;
HXDLIN(1270)					_this->byteLength = bufferByteLength;
HXDLIN(1270)					_this->length = ::Std_obj::_hx_int(((Float)bufferByteLength / (Float)_this->bytesPerElement));
HXDLIN(1270)					this1 = _this;
            				}
            				else {
HXLINE(1270)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            				}
HXLINE(1271)				buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1, ::Dynamic(data->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(data->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)), ::Dynamic(data->__Field(HX_("bitsPerPixel",8f,4d,ee,1c),hx::paccDynamic)),null());
            			}
            		}
HXLINE(1318)		if (hx::IsNotNull( buffer )) {
HXLINE(1320)			this->_hx___fromImageBuffer(buffer);
HXLINE(1322)			if (hx::IsNotNull( onload )) {
HXLINE(1324)				onload(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,_hx___fromFile,(void))

void Image_obj::_hx___fromImageBuffer( ::lime::graphics::ImageBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1339___fromImageBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE(1341)		this->buffer = buffer;
HXLINE(1343)		if (hx::IsNotNull( buffer )) {
HXLINE(1345)			if ((this->width == (int)-1)) {
HXLINE(1347)				this->width = buffer->width;
            			}
HXLINE(1351)			if ((this->height == (int)-1)) {
HXLINE(1353)				this->height = buffer->height;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___fromImageBuffer,(void))

 ::lime::utils::ArrayBufferView Image_obj::get_data(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1396_get_data)
            	HX_STACK_THIS(this)
HXLINE(1398)		bool _hx_tmp;
HXDLIN(1398)		bool _hx_tmp1;
HXDLIN(1398)		if (hx::IsNull( this->buffer->data )) {
HXLINE(1398)			_hx_tmp1 = (this->buffer->width > (int)0);
            		}
            		else {
HXLINE(1398)			_hx_tmp1 = false;
            		}
HXDLIN(1398)		if (_hx_tmp1) {
HXLINE(1398)			_hx_tmp = (this->buffer->height > (int)0);
            		}
            		else {
HXLINE(1398)			_hx_tmp = false;
            		}
HXLINE(1415)		return this->buffer->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_data,return )

 ::lime::utils::ArrayBufferView Image_obj::set_data( ::lime::utils::ArrayBufferView value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1422_set_data)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1422)		return (this->buffer->data = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_data,return )

int Image_obj::get_format(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1429_get_format)
            	HX_STACK_THIS(this)
HXLINE(1429)		return this->buffer->format;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_format,return )

int Image_obj::set_format(int value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1434_set_format)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1436)		if ((this->buffer->format != value)) {
HXLINE(1438)			if ((_hx_getEnumValueIndex(this->type) == (int)1)) {
HXLINE(1442)				::lime::graphics::utils::ImageDataUtil_obj::setFormat(hx::ObjectPtr<OBJ_>(this),value);
            			}
            		}
HXLINE(1450)		return (this->buffer->format = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_format,return )

bool Image_obj::get_powerOfTwo(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1457_get_powerOfTwo)
            	HX_STACK_THIS(this)
HXLINE(1457)		bool _hx_tmp;
HXDLIN(1457)		if ((this->buffer->width != (int)0)) {
HXLINE(1457)			_hx_tmp = (((int)this->buffer->width & (int)(~(this->buffer->width) + (int)1)) == this->buffer->width);
            		}
            		else {
HXLINE(1457)			_hx_tmp = false;
            		}
HXDLIN(1457)		if (_hx_tmp) {
HXLINE(1457)			if ((this->buffer->height != (int)0)) {
HXLINE(1457)				return (((int)this->buffer->height & (int)(~(this->buffer->height) + (int)1)) == this->buffer->height);
            			}
            			else {
HXLINE(1457)				return false;
            			}
            		}
            		else {
HXLINE(1457)			return false;
            		}
HXDLIN(1457)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_powerOfTwo,return )

bool Image_obj::set_powerOfTwo(bool value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1462_set_powerOfTwo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1464)		if ((value != this->get_powerOfTwo())) {
HXLINE(1466)			HX_VARI( int,newWidth) = (int)1;
HXLINE(1467)			HX_VARI( int,newHeight) = (int)1;
HXLINE(1469)			while((newWidth < this->buffer->width)){
HXLINE(1471)				newWidth = ((int)newWidth << (int)(int)1);
            			}
HXLINE(1475)			while((newHeight < this->buffer->height)){
HXLINE(1477)				newHeight = ((int)newHeight << (int)(int)1);
            			}
HXLINE(1481)			switch((int)(_hx_getEnumValueIndex(this->type))){
            				case (int)0: {
            				}
            				break;
            				case (int)1: {
HXLINE(1489)					::lime::graphics::utils::ImageDataUtil_obj::resizeBuffer(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE(1507)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_powerOfTwo,return )

bool Image_obj::get_premultiplied(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1514_get_premultiplied)
            	HX_STACK_THIS(this)
HXLINE(1514)		return this->buffer->premultiplied;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_premultiplied,return )

bool Image_obj::set_premultiplied(bool value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1519_set_premultiplied)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1521)		bool _hx_tmp;
HXDLIN(1521)		if (value) {
HXLINE(1521)			_hx_tmp = !(this->buffer->premultiplied);
            		}
            		else {
HXLINE(1521)			_hx_tmp = false;
            		}
HXDLIN(1521)		if (_hx_tmp) {
HXLINE(1523)			if ((_hx_getEnumValueIndex(this->type) == (int)1)) {
HXLINE(1531)				::lime::graphics::utils::ImageDataUtil_obj::multiplyAlpha(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            		else {
HXLINE(1539)			bool _hx_tmp1;
HXDLIN(1539)			if (!(value)) {
HXLINE(1539)				_hx_tmp1 = this->buffer->premultiplied;
            			}
            			else {
HXLINE(1539)				_hx_tmp1 = false;
            			}
HXDLIN(1539)			if (_hx_tmp1) {
HXLINE(1541)				if ((_hx_getEnumValueIndex(this->type) == (int)1)) {
HXLINE(1549)					::lime::graphics::utils::ImageDataUtil_obj::unmultiplyAlpha(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE(1559)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_premultiplied,return )

 ::lime::math::Rectangle Image_obj::get_rect(){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1566_get_rect)
            	HX_STACK_THIS(this)
HXLINE(1566)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_rect,return )

 ::Dynamic Image_obj::get_src(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1581_get_src)
            	HX_STACK_THIS(this)
HXLINE(1581)		return this->buffer->get_src();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_src,return )

 ::Dynamic Image_obj::set_src( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1588_set_src)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1588)		return this->buffer->set_src(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_src,return )

bool Image_obj::get_transparent(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1593_get_transparent)
            	HX_STACK_THIS(this)
HXLINE(1595)		if (hx::IsNull( this->buffer )) {
HXLINE(1595)			return false;
            		}
HXLINE(1596)		return this->buffer->transparent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_transparent,return )

bool Image_obj::set_transparent(bool value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1601_set_transparent)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1604)		if (hx::IsNull( this->buffer )) {
HXLINE(1604)			return false;
            		}
HXLINE(1605)		return (this->buffer->transparent = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_transparent,return )

::String Image_obj::_hx___base64Chars;

 ::haxe::crypto::BaseCode Image_obj::_hx___base64Encoder;

 ::lime::graphics::Image Image_obj::fromBase64(::String base64,::String type, ::Dynamic onload){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_452_fromBase64)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(onload,"onload")
HXLINE( 454)		if (hx::IsNull( base64 )) {
HXLINE( 454)			return null();
            		}
HXLINE( 457)		return  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_obj,fromBase64,return )

 ::lime::graphics::Image Image_obj::fromBitmapData( ::Dynamic bitmapData){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_465_fromBitmapData)
            	HX_STACK_ARG(bitmapData,"bitmapData")
HXLINE( 468)		if (hx::IsNull( bitmapData )) {
HXLINE( 468)			return null();
            		}
HXLINE( 474)		return  ::Dynamic(bitmapData->__Field(HX_("image",5b,1f,69,bd),hx::paccDynamic));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromBitmapData,return )

 ::lime::graphics::Image Image_obj::fromBytes( ::haxe::io::Bytes bytes, ::Dynamic onload){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_480_fromBytes)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(onload,"onload")
HXLINE( 482)		if (hx::IsNull( bytes )) {
HXLINE( 482)			return null();
            		}
HXLINE( 483)		HX_VARI(  ::lime::graphics::Image,image) =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE( 484)		image->_hx___fromBytes(bytes,onload);
HXLINE( 485)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,fromBytes,return )

 ::lime::graphics::Image Image_obj::fromCanvas( ::Dynamic canvas){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_493_fromCanvas)
            	HX_STACK_ARG(canvas,"canvas")
HXLINE( 496)		if (hx::IsNull( canvas )) {
HXLINE( 496)			return null();
            		}
HXLINE( 497)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,null(), ::Dynamic(canvas->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(canvas->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)),null(),null());
HXLINE( 498)		buffer->set_src(canvas);
HXLINE( 499)		return  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,null(),null(),null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromCanvas,return )

 ::lime::graphics::Image Image_obj::fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_504_fromFile)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(onload,"onload")
            	HX_STACK_ARG(onerror,"onerror")
HXLINE( 506)		HX_VARI(  ::lime::graphics::Image,image) =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE( 507)		image->_hx___fromFile(path,onload,onerror);
HXLINE( 508)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_obj,fromFile,return )

 ::lime::graphics::Image Image_obj::fromImageElement( ::Dynamic image){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_516_fromImageElement)
            	HX_STACK_ARG(image,"image")
HXLINE( 519)		if (hx::IsNull( image )) {
HXLINE( 519)			return null();
            		}
HXLINE( 520)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,null(), ::Dynamic(image->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(image->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)),null(),null());
HXLINE( 521)		buffer->set_src(image);
HXLINE( 522)		return  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,null(),null(),null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromImageElement,return )

::String Image_obj::_hx___base64Encode( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1033___base64Encode)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(1033)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___base64Encode,return )

bool Image_obj::_hx___isJPG( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1364___isJPG)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(1364)		if ((bytes->b->__get((int)0) == (int)255)) {
HXLINE(1364)			return (bytes->b->__get((int)1) == (int)216);
            		}
            		else {
HXLINE(1364)			return false;
            		}
HXDLIN(1364)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isJPG,return )

bool Image_obj::_hx___isPNG( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1371___isPNG)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(1371)		bool _hx_tmp;
HXDLIN(1371)		bool _hx_tmp1;
HXDLIN(1371)		bool _hx_tmp2;
HXDLIN(1371)		bool _hx_tmp3;
HXDLIN(1371)		bool _hx_tmp4;
HXDLIN(1371)		bool _hx_tmp5;
HXDLIN(1371)		if ((bytes->b->__get((int)0) == (int)137)) {
HXLINE(1371)			_hx_tmp5 = (bytes->b->__get((int)1) == (int)80);
            		}
            		else {
HXLINE(1371)			_hx_tmp5 = false;
            		}
HXDLIN(1371)		if (_hx_tmp5) {
HXLINE(1371)			_hx_tmp4 = (bytes->b->__get((int)2) == (int)78);
            		}
            		else {
HXLINE(1371)			_hx_tmp4 = false;
            		}
HXDLIN(1371)		if (_hx_tmp4) {
HXLINE(1371)			_hx_tmp3 = (bytes->b->__get((int)3) == (int)71);
            		}
            		else {
HXLINE(1371)			_hx_tmp3 = false;
            		}
HXDLIN(1371)		if (_hx_tmp3) {
HXLINE(1371)			_hx_tmp2 = (bytes->b->__get((int)4) == (int)13);
            		}
            		else {
HXLINE(1371)			_hx_tmp2 = false;
            		}
HXDLIN(1371)		if (_hx_tmp2) {
HXLINE(1371)			_hx_tmp1 = (bytes->b->__get((int)5) == (int)10);
            		}
            		else {
HXLINE(1371)			_hx_tmp1 = false;
            		}
HXDLIN(1371)		if (_hx_tmp1) {
HXLINE(1371)			_hx_tmp = (bytes->b->__get((int)6) == (int)26);
            		}
            		else {
HXLINE(1371)			_hx_tmp = false;
            		}
HXDLIN(1371)		if (_hx_tmp) {
HXLINE(1371)			return (bytes->b->__get((int)7) == (int)10);
            		}
            		else {
HXLINE(1371)			return false;
            		}
HXDLIN(1371)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isPNG,return )

bool Image_obj::_hx___isGIF( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1375___isGIF)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(1377)		bool _hx_tmp;
HXDLIN(1377)		bool _hx_tmp1;
HXDLIN(1377)		bool _hx_tmp2;
HXDLIN(1377)		if ((bytes->b->__get((int)0) == (int)71)) {
HXLINE(1377)			_hx_tmp2 = (bytes->b->__get((int)1) == (int)73);
            		}
            		else {
HXLINE(1377)			_hx_tmp2 = false;
            		}
HXDLIN(1377)		if (_hx_tmp2) {
HXLINE(1377)			_hx_tmp1 = (bytes->b->__get((int)2) == (int)70);
            		}
            		else {
HXLINE(1377)			_hx_tmp1 = false;
            		}
HXDLIN(1377)		if (_hx_tmp1) {
HXLINE(1377)			_hx_tmp = (bytes->b->__get((int)3) == (int)56);
            		}
            		else {
HXLINE(1377)			_hx_tmp = false;
            		}
HXDLIN(1377)		if (_hx_tmp) {
HXLINE(1379)			HX_VARI( int,b) = bytes->b->__get((int)4);
HXLINE(1380)			bool _hx_tmp3;
HXDLIN(1380)			if ((b != (int)55)) {
HXLINE(1380)				_hx_tmp3 = (b == (int)57);
            			}
            			else {
HXLINE(1380)				_hx_tmp3 = true;
            			}
HXDLIN(1380)			if (_hx_tmp3) {
HXLINE(1380)				return (bytes->b->__get((int)5) == (int)97);
            			}
            			else {
HXLINE(1380)				return false;
            			}
            		}
HXLINE(1384)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isGIF,return )

 ::Dynamic Image_obj::lime_image_load( ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1618_lime_image_load)
            	HX_STACK_ARG(data,"data")
HXLINE(1618)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,lime_image_load,return )


hx::ObjectPtr< Image_obj > Image_obj::__new( ::lime::graphics::ImageBuffer buffer,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic color, ::lime::graphics::ImageType type) {
	hx::ObjectPtr< Image_obj > __this = new Image_obj();
	__this->__construct(buffer,__o_offsetX,__o_offsetY,__o_width,__o_height,color,type);
	return __this;
}

hx::ObjectPtr< Image_obj > Image_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::graphics::ImageBuffer buffer,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic color, ::lime::graphics::ImageType type) {
	Image_obj *__this = (Image_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Image_obj), true, "lime.graphics.Image"));
	*(void **)__this = Image_obj::_hx_vtable;
	__this->__construct(buffer,__o_offsetX,__o_offsetY,__o_width,__o_height,color,type);
	return __this;
}

Image_obj::Image_obj()
{
}

void Image_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Image);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(offsetX,"offsetX");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_END_CLASS();
}

void Image_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(offsetX,"offsetX");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
}

hx::Val Image_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_src()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_data()); }
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( inCallProp == hx::paccAlways ? get_rect() : rect); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_format()); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn()); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { return hx::Val( offsetX); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { return hx::Val( offsetY); }
		if (HX_FIELD_EQ(inName,"get_src") ) { return hx::Val( get_src_dyn()); }
		if (HX_FIELD_EQ(inName,"set_src") ) { return hx::Val( set_src_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"get_data") ) { return hx::Val( get_data_dyn()); }
		if (HX_FIELD_EQ(inName,"set_data") ) { return hx::Val( set_data_dyn()); }
		if (HX_FIELD_EQ(inName,"get_rect") ) { return hx::Val( get_rect_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"powerOfTwo") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_powerOfTwo()); }
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"__clipRect") ) { return hx::Val( _hx___clipRect_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn()); }
		if (HX_FIELD_EQ(inName,"get_format") ) { return hx::Val( get_format_dyn()); }
		if (HX_FIELD_EQ(inName,"set_format") ) { return hx::Val( set_format_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_transparent()); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"premultiplied") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_premultiplied()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"get_powerOfTwo") ) { return hx::Val( get_powerOfTwo_dyn()); }
		if (HX_FIELD_EQ(inName,"set_powerOfTwo") ) { return hx::Val( set_powerOfTwo_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_transparent") ) { return hx::Val( get_transparent_dyn()); }
		if (HX_FIELD_EQ(inName,"set_transparent") ) { return hx::Val( set_transparent_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__fromImageBuffer") ) { return hx::Val( _hx___fromImageBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"get_premultiplied") ) { return hx::Val( get_premultiplied_dyn()); }
		if (HX_FIELD_EQ(inName,"set_premultiplied") ) { return hx::Val( set_premultiplied_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Image_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__isJPG") ) { outValue = _hx___isJPG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__isPNG") ) { outValue = _hx___isPNG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__isGIF") ) { outValue = _hx___isGIF_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromCanvas") ) { outValue = fromCanvas_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__base64Chars") ) { outValue = _hx___base64Chars; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fromBitmapData") ) { outValue = fromBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__base64Encode") ) { outValue = _hx___base64Encode_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__base64Encoder") ) { outValue = _hx___base64Encoder; return true; }
		if (HX_FIELD_EQ(inName,"lime_image_load") ) { outValue = lime_image_load_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fromImageElement") ) { outValue = fromImageElement_dyn(); return true; }
	}
	return false;
}

hx::Val Image_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_src(inValue) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_data(inValue) ); }
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::lime::math::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::lime::graphics::ImageType >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::lime::graphics::ImageBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_format(inValue) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { offsetX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetY") ) { offsetY=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"powerOfTwo") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_powerOfTwo(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transparent(inValue) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"premultiplied") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_premultiplied(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Image_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"__base64Chars") ) { _hx___base64Chars=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__base64Encoder") ) { _hx___base64Encoder=ioValue.Cast<  ::haxe::crypto::BaseCode >(); return true; }
	}
	return false;
}

void Image_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("powerOfTwo","\x70","\xbe","\xae","\xea"));
	outFields->push(HX_HCSTRING("premultiplied","\x56","\xf1","\x4e","\xa4"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Image_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::ImageBuffer*/ ,(int)offsetof(Image_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsBool,(int)offsetof(Image_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsInt,(int)offsetof(Image_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsInt,(int)offsetof(Image_obj,offsetX),HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7")},
	{hx::fsInt,(int)offsetof(Image_obj,offsetY),HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7")},
	{hx::fsObject /*::lime::math::Rectangle*/ ,(int)offsetof(Image_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::lime::graphics::ImageType*/ ,(int)offsetof(Image_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(Image_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Image_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Image_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Image_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Image_obj::_hx___base64Chars,HX_HCSTRING("__base64Chars","\xae","\xc9","\x24","\x36")},
	{hx::fsObject /*::haxe::crypto::BaseCode*/ ,(void *) &Image_obj::_hx___base64Encoder,HX_HCSTRING("__base64Encoder","\xad","\xa4","\x42","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Image_obj_sMemberFields[] = {
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"),
	HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("__clipRect","\x34","\x03","\xa3","\xfb"),
	HX_HCSTRING("__fromBase64","\xb9","\x7d","\xff","\xd0"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__fromImageBuffer","\x51","\x6e","\xca","\xca"),
	HX_HCSTRING("get_data","\xb3","\x11","\x1e","\xc2"),
	HX_HCSTRING("set_data","\x27","\x6b","\x7b","\x70"),
	HX_HCSTRING("get_format","\x00","\xff","\x15","\xee"),
	HX_HCSTRING("set_format","\x74","\x9d","\x93","\xf1"),
	HX_HCSTRING("get_powerOfTwo","\xb9","\x46","\xa4","\x60"),
	HX_HCSTRING("set_powerOfTwo","\x2d","\x2f","\xc4","\x80"),
	HX_HCSTRING("get_premultiplied","\xad","\xfc","\xbe","\xaa"),
	HX_HCSTRING("set_premultiplied","\xb9","\xd4","\x2c","\xce"),
	HX_HCSTRING("get_rect","\xad","\x08","\x62","\xcb"),
	HX_HCSTRING("get_src","\x7b","\x6f","\xcc","\x26"),
	HX_HCSTRING("set_src","\x87","\x00","\xce","\x19"),
	HX_HCSTRING("get_transparent","\xe9","\xe2","\x9b","\xe3"),
	HX_HCSTRING("set_transparent","\xf5","\x5f","\x67","\xdf"),
	::String(null()) };

static void Image_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Image_obj::_hx___base64Chars,"__base64Chars");
	HX_MARK_MEMBER_NAME(Image_obj::_hx___base64Encoder,"__base64Encoder");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Image_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Image_obj::_hx___base64Chars,"__base64Chars");
	HX_VISIT_MEMBER_NAME(Image_obj::_hx___base64Encoder,"__base64Encoder");
};

#endif

hx::Class Image_obj::__mClass;

static ::String Image_obj_sStaticFields[] = {
	HX_HCSTRING("__base64Chars","\xae","\xc9","\x24","\x36"),
	HX_HCSTRING("__base64Encoder","\xad","\xa4","\x42","\x7e"),
	HX_HCSTRING("fromBase64","\x99","\x02","\x6c","\x98"),
	HX_HCSTRING("fromBitmapData","\xc3","\x07","\xed","\x2b"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromCanvas","\xe2","\x59","\x86","\xfb"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromImageElement","\x2b","\x91","\x89","\x8f"),
	HX_HCSTRING("__base64Encode","\x25","\xfc","\x79","\x6c"),
	HX_HCSTRING("__isJPG","\xf7","\x37","\xad","\x2b"),
	HX_HCSTRING("__isPNG","\xbf","\xc3","\xb1","\x2b"),
	HX_HCSTRING("__isGIF","\x1a","\xeb","\xaa","\x2b"),
	HX_HCSTRING("lime_image_load","\xf4","\x20","\xad","\x9c"),
	::String(null())
};

void Image_obj::__register()
{
	hx::Object *dummy = new Image_obj;
	Image_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.Image","\x91","\x28","\xc1","\x9c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Image_obj::__GetStatic;
	__mClass->mSetStaticField = &Image_obj::__SetStatic;
	__mClass->mMarkFunc = Image_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Image_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Image_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Image_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Image_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Image_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Image_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Image_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_67_boot)
HXLINE(  67)		_hx___base64Chars = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",03,41,03,7f);
            	}
}

} // end namespace lime
} // end namespace graphics
