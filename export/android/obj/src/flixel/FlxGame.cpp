// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_effects_postprocess_PostProcess
#include <flixel/effects/postprocess/PostProcess.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxTilesheet
#include <flixel/graphics/tile/FlxTilesheet.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxSwipe
#include <flixel/input/FlxSwipe.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSplash
#include <flixel/system/FlxSplash.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_PluginFrontEnd
#include <flixel/system/frontEnds/PluginFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_VCRFrontEnd
#include <flixel/system/frontEnds/VCRFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxFocusLostScreen
#include <flixel/system/ui/FlxFocusLostScreen.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSoundTray
#include <flixel/system/ui/FlxSoundTray.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal2
#include <flixel/util/_FlxSignal/FlxSignal2.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Tilesheet
#include <openfl/display/Tilesheet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_47_new,"flixel.FlxGame","new",0xde7d5f44,"flixel.FlxGame.new","flixel/FlxGame.hx",47,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_286_setFilters,"flixel.FlxGame","setFilters",0x71579bd5,"flixel.FlxGame.setFilters","flixel/FlxGame.hx",286,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_293_create,"flixel.FlxGame","create",0x90873e98,"flixel.FlxGame.create","flixel/FlxGame.hx",293,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_371_onFocus,"flixel.FlxGame","onFocus",0x6f2bcf1d,"flixel.FlxGame.onFocus","flixel/FlxGame.hx",371,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_421_onFocusLost,"flixel.FlxGame","onFocusLost",0xb7eef7a1,"flixel.FlxGame.onFocusLost","flixel/FlxGame.hx",421,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_458_onResize,"flixel.FlxGame","onResize",0xebfa470f,"flixel.FlxGame.onResize","flixel/FlxGame.hx",458,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_473_resizeGame,"flixel.FlxGame","resizeGame",0xcdcb59a2,"flixel.FlxGame.resizeGame","flixel/FlxGame.hx",473,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_511_onEnterFrame,"flixel.FlxGame","onEnterFrame",0x001b1a90,"flixel.FlxGame.onEnterFrame","flixel/FlxGame.hx",511,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_581_resetGame,"flixel.FlxGame","resetGame",0xde30cf45,"flixel.FlxGame.resetGame","flixel/FlxGame.hx",581,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_621_switchState,"flixel.FlxGame","switchState",0xedf41a61,"flixel.FlxGame.switchState","flixel/FlxGame.hx",621,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_662_gameStart,"flixel.FlxGame","gameStart",0x0d0c34f4,"flixel.FlxGame.gameStart","flixel/FlxGame.hx",662,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_674_step,"flixel.FlxGame","step",0xd28f5fe8,"flixel.FlxGame.step","flixel/FlxGame.hx",674,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_697_handleReplayRequests,"flixel.FlxGame","handleReplayRequests",0xefa2c6ef,"flixel.FlxGame.handleReplayRequests","flixel/FlxGame.hx",697,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_731_update,"flixel.FlxGame","update",0x9b7d5da5,"flixel.FlxGame.update","flixel/FlxGame.hx",731,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_783_updateElapsed,"flixel.FlxGame","updateElapsed",0x372d9117,"flixel.FlxGame.updateElapsed","flixel/FlxGame.hx",783,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_842_updateInput,"flixel.FlxGame","updateInput",0x1a1f4025,"flixel.FlxGame.updateInput","flixel/FlxGame.hx",842,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_861_draw,"flixel.FlxGame","draw",0xc8a3a4a0,"flixel.FlxGame.draw","flixel/FlxGame.hx",861,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_912_getTicks,"flixel.FlxGame","getTicks",0x73d7349c,"flixel.FlxGame.getTicks","flixel/FlxGame.hx",912,0x34f39fed)
HX_DEFINE_STACK_FRAME(_hx_pos_ad2b8ce2bfb1aa86_918___default_getTimer,"flixel.FlxGame","__default_getTimer",0xda03b289,"flixel.FlxGame.__default_getTimer","flixel/FlxGame.hx",918,0x34f39fed)
namespace flixel{

void FlxGame_obj::__construct(hx::Null< int >  __o_GameWidth,hx::Null< int >  __o_GameHeight,hx::Class InitialState,hx::Null< Float >  __o_Zoom,hx::Null< int >  __o_UpdateFramerate,hx::Null< int >  __o_DrawFramerate,hx::Null< bool >  __o_SkipSplash,hx::Null< bool >  __o_StartFullscreen){
int GameWidth = __o_GameWidth.Default(0);
int GameHeight = __o_GameHeight.Default(0);
Float Zoom = __o_Zoom.Default(1);
int UpdateFramerate = __o_UpdateFramerate.Default(60);
int DrawFramerate = __o_DrawFramerate.Default(60);
bool SkipSplash = __o_SkipSplash.Default(false);
bool StartFullscreen = __o_StartFullscreen.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_47_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(GameWidth,"GameWidth")
            	HX_STACK_ARG(GameHeight,"GameHeight")
            	HX_STACK_ARG(InitialState,"InitialState")
            	HX_STACK_ARG(Zoom,"Zoom")
            	HX_STACK_ARG(UpdateFramerate,"UpdateFramerate")
            	HX_STACK_ARG(DrawFramerate,"DrawFramerate")
            	HX_STACK_ARG(SkipSplash,"SkipSplash")
            	HX_STACK_ARG(StartFullscreen,"StartFullscreen")
HXLINE( 229)		this->postProcesses = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 225)		this->postProcessLayer =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 201)		this->_resetGame = false;
HXLINE( 185)		this->_skipSplash = false;
HXLINE( 179)		this->_customFocusLostScreen = hx::ClassOf< ::flixel::_hx_system::ui::FlxFocusLostScreen >();
HXLINE( 172)		this->_customSoundTray = hx::ClassOf< ::flixel::_hx_system::ui::FlxSoundTray >();
HXLINE( 139)		this->_lostFocus = false;
HXLINE( 112)		this->_startTime = (int)0;
HXLINE( 107)		this->_total = (int)0;
HXLINE(  94)		this->_gameJustStarted = false;
HXLINE(  88)		this->filtersEnabled = true;
HXLINE(  84)		this->ticks = (int)0;
HXLINE(  52)		this->focusLostFramerate = (int)10;
HXLINE( 249)		super::__construct();
HXLINE( 256)		this->_inputContainer =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 258)		if ((GameWidth == (int)0)) {
HXLINE( 259)			GameWidth = ::openfl::Lib_obj::current->stage->stageWidth;
            		}
HXLINE( 260)		if ((GameHeight == (int)0)) {
HXLINE( 261)			GameHeight = ::openfl::Lib_obj::current->stage->stageHeight;
            		}
HXLINE( 264)		::flixel::FlxG_obj::init(hx::ObjectPtr<OBJ_>(this),GameWidth,GameHeight,Zoom);
HXLINE( 266)		::flixel::FlxG_obj::set_updateFramerate(UpdateFramerate);
HXLINE( 267)		::flixel::FlxG_obj::set_drawFramerate(DrawFramerate);
HXLINE( 268)		this->_accumulator = this->_stepMS;
HXLINE( 269)		this->_skipSplash = SkipSplash;
HXLINE( 276)		hx::Class _hx_tmp;
HXDLIN( 276)		if (hx::IsNull( InitialState )) {
HXLINE( 276)			_hx_tmp = hx::ClassOf< ::flixel::FlxState >();
            		}
            		else {
HXLINE( 276)			_hx_tmp = InitialState;
            		}
HXDLIN( 276)		this->_initialState = _hx_tmp;
HXLINE( 278)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->create_dyn(),null(),null(),null());
            	}

Dynamic FlxGame_obj::__CreateEmpty() { return new FlxGame_obj; }

void *FlxGame_obj::_hx_vtable = 0;

Dynamic FlxGame_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxGame_obj > _hx_result = new FlxGame_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool FlxGame_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x771164c8;
}

void FlxGame_obj::setFilters(::Array< ::Dynamic> filters){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_286_setFilters)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filters,"filters")
HXLINE( 286)		this->_filters = filters;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,setFilters,(void))

void FlxGame_obj::create( ::Dynamic _){
            	HX_GC_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_293_create)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 294)		if (hx::IsNull( this->stage )) {
HXLINE( 296)			return;
            		}
HXLINE( 298)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->create_dyn(),null());
HXLINE( 300)		this->_startTime = ( (int)(this->getTimer()) );
HXLINE( 301)		int _hx_tmp = ( (int)(this->getTimer()) );
HXDLIN( 301)		this->_total = (_hx_tmp - this->_startTime);
HXLINE( 308)		this->stage->scaleMode = HX_("noScale",89,52,d2,4b);
HXLINE( 309)		this->stage->align = HX_("topLeft",3c,09,c1,e8);
HXLINE( 310)		this->stage->__Field(HX_("set_frameRate",90,c7,8e,3f),hx::paccDynamic)(::flixel::FlxG_obj::drawFramerate);
HXLINE( 312)		this->addChild(this->_inputContainer);
HXLINE( 315)		if (::openfl::display::OpenGLView_obj::get_isSupported()) {
HXLINE( 316)			this->addChild(this->postProcessLayer);
            		}
HXLINE( 344)		this->stage->addEventListener(HX_("deactivate",34,5c,01,3c),this->onFocusLost_dyn(),null(),null(),null());
HXLINE( 345)		this->stage->addEventListener(HX_("activate",b3,1b,ac,e5),this->onFocus_dyn(),null(),null(),null());
HXLINE( 349)		{
HXLINE( 349)			::flixel::FlxG_obj::signals->preGameReset->dispatch();
HXDLIN( 349)			bool _hx_tmp1;
HXDLIN( 349)			if (!(this->_skipSplash)) {
HXLINE( 349)				_hx_tmp1 = hx::IsNotNull( ::flixel::_hx_system::FlxSplash_obj::nextState );
            			}
            			else {
HXLINE( 349)				_hx_tmp1 = true;
            			}
HXDLIN( 349)			if (_hx_tmp1) {
HXLINE( 349)				this->_requestedState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(this->_initialState,::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 349)				if (hx::IsNull( ::flixel::_hx_system::FlxSplash_obj::nextState )) {
HXLINE( 349)					this->_gameJustStarted = true;
            				}
            			}
            			else {
HXLINE( 349)				::flixel::_hx_system::FlxSplash_obj::nextState = this->_initialState;
HXDLIN( 349)				this->_requestedState =  ::flixel::_hx_system::FlxSplash_obj::__alloc( HX_CTX ,null());
HXDLIN( 349)				this->_skipSplash = true;
            			}
HXDLIN( 349)			::flixel::FlxG_obj::reset();
HXDLIN( 349)			::flixel::FlxG_obj::signals->postGameReset->dispatch();
            		}
HXLINE( 350)		this->switchState();
HXLINE( 358)		this->stage->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null(),null(),null());
HXLINE( 362)		this->stage->addEventListener(HX_("resize",f4,59,7b,08),this->onResize_dyn(),null(),null(),null());
HXLINE( 365)		this->resizeGame(::openfl::Lib_obj::current->stage->stageWidth,::openfl::Lib_obj::current->stage->stageHeight);
HXLINE( 367)		::openfl::Assets_obj::addEventListener(HX_("change",70,91,72,b7),::flixel::FlxG_obj::bitmap->onAssetsReload_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,create,(void))

void FlxGame_obj::onFocus( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_371_onFocus)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 390)		this->onResize(_);
HXLINE( 393)		this->_lostFocus = false;
HXLINE( 394)		::flixel::FlxG_obj::signals->focusGained->dispatch();
HXLINE( 397)		if (!(::flixel::FlxG_obj::autoPause)) {
HXLINE( 399)			return;
            		}
HXLINE( 403)		if (hx::IsNotNull( this->_focusLostScreen )) {
HXLINE( 405)			this->_focusLostScreen->__Field(HX_("set_visible",95,df,8b,33),hx::paccDynamic)(false);
            		}
HXLINE( 413)		this->stage->__Field(HX_("set_frameRate",90,c7,8e,3f),hx::paccDynamic)(::flixel::FlxG_obj::drawFramerate);
HXLINE( 415)		::flixel::FlxG_obj::sound->onFocus();
HXLINE( 417)		{
HXLINE( 417)			HX_VARI( int,_g) = (int)0;
HXDLIN( 417)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::flixel::FlxG_obj::inputs->list;
HXDLIN( 417)			while((_g < _g1->length)){
HXLINE( 417)				HX_VARI( ::Dynamic,input) = _g1->__get(_g);
HXDLIN( 417)				_g = (_g + (int)1);
HXDLIN( 417)				::flixel::input::IFlxInputManager_obj::onFocus(input);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,onFocus,(void))

void FlxGame_obj::onFocusLost( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_421_onFocusLost)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 429)		this->_lostFocus = true;
HXLINE( 430)		::flixel::FlxG_obj::signals->focusLost->dispatch();
HXLINE( 433)		if (!(::flixel::FlxG_obj::autoPause)) {
HXLINE( 435)			return;
            		}
HXLINE( 439)		if (hx::IsNotNull( this->_focusLostScreen )) {
HXLINE( 441)			this->_focusLostScreen->__Field(HX_("set_visible",95,df,8b,33),hx::paccDynamic)(true);
            		}
HXLINE( 449)		this->stage->__Field(HX_("set_frameRate",90,c7,8e,3f),hx::paccDynamic)(this->focusLostFramerate);
HXLINE( 451)		::flixel::FlxG_obj::sound->onFocusLost();
HXLINE( 453)		{
HXLINE( 453)			HX_VARI( int,_g) = (int)0;
HXDLIN( 453)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::flixel::FlxG_obj::inputs->list;
HXDLIN( 453)			while((_g < _g1->length)){
HXLINE( 453)				HX_VARI( ::Dynamic,input) = _g1->__get(_g);
HXDLIN( 453)				_g = (_g + (int)1);
HXDLIN( 453)				::flixel::input::IFlxInputManager_obj::onFocusLost(input);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,onFocusLost,(void))

void FlxGame_obj::onResize( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_458_onResize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 459)		HX_VARI( int,width) = ::openfl::Lib_obj::current->stage->stageWidth;
HXLINE( 460)		HX_VARI( int,height) = ::openfl::Lib_obj::current->stage->stageHeight;
HXLINE( 463)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 465)			::flixel::FlxG_obj::bitmap->onContext();
            		}
HXLINE( 469)		this->resizeGame(width,height);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,onResize,(void))

void FlxGame_obj::resizeGame(int width,int height){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_473_resizeGame)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 474)		::flixel::FlxG_obj::scaleMode->onMeasure(width,height);
HXLINE( 476)		this->_state->onResize(width,height);
HXLINE( 477)		::flixel::FlxG_obj::signals->gameResized->dispatch(width,height);
HXLINE( 479)		::flixel::FlxG_obj::cameras->resize();
HXLINE( 486)		if (hx::IsNotNull( this->_focusLostScreen )) {
HXLINE( 488)			this->_focusLostScreen->draw();
            		}
HXLINE( 493)		if (hx::IsNotNull( this->soundTray )) {
HXLINE( 495)			this->soundTray->screenCenter();
            		}
HXLINE( 500)		{
HXLINE( 500)			HX_VARI( int,_g) = (int)0;
HXDLIN( 500)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->postProcesses;
HXDLIN( 500)			while((_g < _g1->length)){
HXLINE( 500)				HX_VARI(  ::flixel::effects::postprocess::PostProcess,postProcess) = _g1->__get(_g).StaticCast<  ::flixel::effects::postprocess::PostProcess >();
HXDLIN( 500)				_g = (_g + (int)1);
HXLINE( 502)				postProcess->rebuild();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGame_obj,resizeGame,(void))

void FlxGame_obj::onEnterFrame( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_511_onEnterFrame)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 512)		int _hx_tmp = ( (int)(this->getTimer()) );
HXDLIN( 512)		this->ticks = (_hx_tmp - this->_startTime);
HXLINE( 513)		this->_elapsedMS = (this->ticks - this->_total);
HXLINE( 514)		this->_total = this->ticks;
HXLINE( 517)		bool _hx_tmp1;
HXDLIN( 517)		if (hx::IsNotNull( this->soundTray )) {
HXLINE( 517)			_hx_tmp1 = this->soundTray->active;
            		}
            		else {
HXLINE( 517)			_hx_tmp1 = false;
            		}
HXDLIN( 517)		if (_hx_tmp1) {
HXLINE( 519)			this->soundTray->update(this->_elapsedMS);
            		}
HXLINE( 523)		bool _hx_tmp2;
HXDLIN( 523)		if (!(!(this->_lostFocus))) {
HXLINE( 523)			_hx_tmp2 = !(::flixel::FlxG_obj::autoPause);
            		}
            		else {
HXLINE( 523)			_hx_tmp2 = true;
            		}
HXDLIN( 523)		if (_hx_tmp2) {
HXLINE( 525)			if (::flixel::FlxG_obj::vcr->paused) {
HXLINE( 527)				if (::flixel::FlxG_obj::vcr->stepRequested) {
HXLINE( 529)					::flixel::FlxG_obj::vcr->stepRequested = false;
            				}
            				else {
HXLINE( 531)					if (hx::IsEq( this->_state,this->_requestedState )) {
HXLINE( 543)						return;
            					}
            				}
            			}
HXLINE( 547)			if (::flixel::FlxG_obj::fixedTimestep) {
HXLINE( 549)				 ::flixel::FlxGame _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 549)				_hx_tmp3->_accumulator = (_hx_tmp3->_accumulator + this->_elapsedMS);
HXLINE( 550)				Float _hx_tmp4;
HXDLIN( 550)				if ((this->_accumulator > this->_maxAccumulation)) {
HXLINE( 550)					_hx_tmp4 = this->_maxAccumulation;
            				}
            				else {
HXLINE( 550)					_hx_tmp4 = this->_accumulator;
            				}
HXDLIN( 550)				this->_accumulator = _hx_tmp4;
HXLINE( 552)				while((this->_accumulator >= this->_stepMS)){
HXLINE( 554)					this->step();
HXLINE( 555)					 ::flixel::FlxGame _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 555)					_hx_tmp5->_accumulator = (_hx_tmp5->_accumulator - this->_stepMS);
            				}
            			}
            			else {
HXLINE( 560)				this->step();
            			}
HXLINE( 567)			this->draw();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGame_obj,onEnterFrame,(void))

void FlxGame_obj::resetGame(){
            	HX_GC_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_581_resetGame)
            	HX_STACK_THIS(this)
HXLINE( 582)		::flixel::FlxG_obj::signals->preGameReset->dispatch();
HXLINE( 588)		bool _hx_tmp;
HXDLIN( 588)		if (!(this->_skipSplash)) {
HXLINE( 588)			_hx_tmp = hx::IsNotNull( ::flixel::_hx_system::FlxSplash_obj::nextState );
            		}
            		else {
HXLINE( 588)			_hx_tmp = true;
            		}
HXDLIN( 588)		if (_hx_tmp) {
HXLINE( 590)			this->_requestedState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(this->_initialState,::cpp::VirtualArray_obj::__new(0))) );
HXLINE( 591)			if (hx::IsNull( ::flixel::_hx_system::FlxSplash_obj::nextState )) {
HXLINE( 593)				this->_gameJustStarted = true;
            			}
            		}
            		else {
HXLINE( 598)			::flixel::_hx_system::FlxSplash_obj::nextState = this->_initialState;
HXLINE( 599)			this->_requestedState =  ::flixel::_hx_system::FlxSplash_obj::__alloc( HX_CTX ,null());
HXLINE( 600)			this->_skipSplash = true;
            		}
HXLINE( 610)		::flixel::FlxG_obj::reset();
HXLINE( 612)		::flixel::FlxG_obj::signals->postGameReset->dispatch();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,resetGame,(void))

void FlxGame_obj::switchState(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_621_switchState)
            	HX_STACK_THIS(this)
HXLINE( 623)		::flixel::FlxG_obj::cameras->reset(null());
HXLINE( 624)		::flixel::FlxG_obj::inputs->onStateSwitch();
HXLINE( 626)		::flixel::FlxG_obj::sound->destroy(null());
HXLINE( 629)		::flixel::FlxG_obj::signals->stateSwitched->dispatch();
HXLINE( 636)		if (hx::IsNotNull( this->_state )) {
HXLINE( 638)			this->_state->destroy();
            		}
HXLINE( 642)		::flixel::FlxG_obj::bitmap->clearCache();
HXLINE( 645)		this->_state = this->_requestedState;
HXLINE( 647)		::flixel::FlxG_obj::signals->preStateCreate->dispatch(this->_state);
HXLINE( 649)		this->_state->create();
HXLINE( 651)		if (this->_gameJustStarted) {
HXLINE( 653)			this->gameStart();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,switchState,(void))

void FlxGame_obj::gameStart(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_662_gameStart)
            	HX_STACK_THIS(this)
HXLINE( 663)		::flixel::FlxG_obj::signals->gameStarted->dispatch();
HXLINE( 664)		this->_gameJustStarted = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,gameStart,(void))

void FlxGame_obj::step(){
            	HX_GC_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_674_step)
            	HX_STACK_THIS(this)
HXLINE( 676)		if (this->_resetGame) {
HXLINE( 678)			{
HXLINE( 678)				::flixel::FlxG_obj::signals->preGameReset->dispatch();
HXDLIN( 678)				bool _hx_tmp;
HXDLIN( 678)				if (!(this->_skipSplash)) {
HXLINE( 678)					_hx_tmp = hx::IsNotNull( ::flixel::_hx_system::FlxSplash_obj::nextState );
            				}
            				else {
HXLINE( 678)					_hx_tmp = true;
            				}
HXDLIN( 678)				if (_hx_tmp) {
HXLINE( 678)					this->_requestedState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(this->_initialState,::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 678)					if (hx::IsNull( ::flixel::_hx_system::FlxSplash_obj::nextState )) {
HXLINE( 678)						this->_gameJustStarted = true;
            					}
            				}
            				else {
HXLINE( 678)					::flixel::_hx_system::FlxSplash_obj::nextState = this->_initialState;
HXDLIN( 678)					this->_requestedState =  ::flixel::_hx_system::FlxSplash_obj::__alloc( HX_CTX ,null());
HXDLIN( 678)					this->_skipSplash = true;
            				}
HXDLIN( 678)				::flixel::FlxG_obj::reset();
HXDLIN( 678)				::flixel::FlxG_obj::signals->postGameReset->dispatch();
            			}
HXLINE( 679)			this->_resetGame = false;
            		}
HXLINE( 689)		this->update();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,step,(void))

void FlxGame_obj::handleReplayRequests(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_697_handleReplayRequests)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,handleReplayRequests,(void))

void FlxGame_obj::update(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_731_update)
            	HX_STACK_THIS(this)
HXLINE( 732)		bool _hx_tmp;
HXDLIN( 732)		if (!(!(this->_state->active))) {
HXLINE( 732)			_hx_tmp = !(this->_state->exists);
            		}
            		else {
HXLINE( 732)			_hx_tmp = true;
            		}
HXDLIN( 732)		if (_hx_tmp) {
HXLINE( 734)			return;
            		}
HXLINE( 737)		if (hx::IsNotEq( this->_state,this->_requestedState )) {
HXLINE( 739)			this->switchState();
            		}
HXLINE( 747)		this->updateElapsed();
HXLINE( 749)		::flixel::FlxG_obj::signals->preUpdate->dispatch();
HXLINE( 751)		this->updateInput();
HXLINE( 754)		if (hx::IsNotNull( this->postProcesses->__get((int)0).StaticCast<  ::flixel::effects::postprocess::PostProcess >() )) {
HXLINE( 756)			this->postProcesses->__get((int)0).StaticCast<  ::flixel::effects::postprocess::PostProcess >()->update(::flixel::FlxG_obj::elapsed);
            		}
HXLINE( 761)		::flixel::FlxG_obj::sound->update(::flixel::FlxG_obj::elapsed);
HXLINE( 763)		{
HXLINE( 763)			HX_VARI( Float,elapsed) = ::flixel::FlxG_obj::elapsed;
HXDLIN( 763)			{
HXLINE( 763)				HX_VARI( int,_g) = (int)0;
HXDLIN( 763)				HX_VARI( ::Array< ::Dynamic>,_g1) = ::flixel::FlxG_obj::plugins->list;
HXDLIN( 763)				while((_g < _g1->length)){
HXLINE( 763)					HX_VARI(  ::flixel::FlxBasic,plugin) = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 763)					_g = (_g + (int)1);
HXDLIN( 763)					bool _hx_tmp1;
HXDLIN( 763)					if (plugin->exists) {
HXLINE( 763)						_hx_tmp1 = plugin->active;
            					}
            					else {
HXLINE( 763)						_hx_tmp1 = false;
            					}
HXDLIN( 763)					if (_hx_tmp1) {
HXLINE( 763)						plugin->update(elapsed);
            					}
            				}
            			}
            		}
HXLINE( 765)		this->_state->tryUpdate(::flixel::FlxG_obj::elapsed);
HXLINE( 767)		{
HXLINE( 767)			HX_VARI_NAME( Float,elapsed1,"elapsed") = ::flixel::FlxG_obj::elapsed;
HXDLIN( 767)			{
HXLINE( 767)				HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 767)				HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ::flixel::FlxG_obj::cameras->list;
HXDLIN( 767)				while((_g2 < _g11->length)){
HXLINE( 767)					HX_VARI(  ::flixel::FlxCamera,camera) = _g11->__get(_g2).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 767)					_g2 = (_g2 + (int)1);
HXDLIN( 767)					bool _hx_tmp2;
HXDLIN( 767)					bool _hx_tmp3;
HXDLIN( 767)					if (hx::IsNotNull( camera )) {
HXLINE( 767)						_hx_tmp3 = camera->exists;
            					}
            					else {
HXLINE( 767)						_hx_tmp3 = false;
            					}
HXDLIN( 767)					if (_hx_tmp3) {
HXLINE( 767)						_hx_tmp2 = camera->active;
            					}
            					else {
HXLINE( 767)						_hx_tmp2 = false;
            					}
HXDLIN( 767)					if (_hx_tmp2) {
HXLINE( 767)						camera->update(elapsed1);
            					}
            				}
            			}
            		}
HXLINE( 768)		::flixel::FlxG_obj::signals->postUpdate->dispatch();
HXLINE( 775)		::flixel::util::FlxArrayUtil_obj::clearArray(::flixel::FlxG_obj::swipes,null());
HXLINE( 778)		::Array< ::Dynamic> _hx_tmp4;
HXDLIN( 778)		if (this->filtersEnabled) {
HXLINE( 778)			_hx_tmp4 = this->_filters;
            		}
            		else {
HXLINE( 778)			_hx_tmp4 = null();
            		}
HXDLIN( 778)		hx::ObjectPtr<OBJ_>(this)->__Field(HX_("set_filters",de,08,ae,99),hx::paccDynamic)(_hx_tmp4);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,update,(void))

void FlxGame_obj::updateElapsed(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_783_updateElapsed)
            	HX_STACK_THIS(this)
HXLINE( 783)		if (::flixel::FlxG_obj::fixedTimestep) {
HXLINE( 785)			::flixel::FlxG_obj::elapsed = (::flixel::FlxG_obj::timeScale * this->_stepSeconds);
            		}
            		else {
HXLINE( 789)			::flixel::FlxG_obj::elapsed = (::flixel::FlxG_obj::timeScale * ((Float)this->_elapsedMS / (Float)(int)1000));
HXLINE( 791)			HX_VARI( Float,max) = (::flixel::FlxG_obj::maxElapsed * ::flixel::FlxG_obj::timeScale);
HXLINE( 792)			if ((::flixel::FlxG_obj::elapsed > max)) {
HXLINE( 793)				::flixel::FlxG_obj::elapsed = max;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,updateElapsed,(void))

void FlxGame_obj::updateInput(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_842_updateInput)
            	HX_STACK_THIS(this)
HXLINE( 842)		HX_VARI( int,_g) = (int)0;
HXDLIN( 842)		HX_VARI( ::Array< ::Dynamic>,_g1) = ::flixel::FlxG_obj::inputs->list;
HXDLIN( 842)		while((_g < _g1->length)){
HXLINE( 842)			HX_VARI( ::Dynamic,input) = _g1->__get(_g);
HXDLIN( 842)			_g = (_g + (int)1);
HXDLIN( 842)			::flixel::input::IFlxInputManager_obj::update(input);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,updateInput,(void))

void FlxGame_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_861_draw)
            	HX_STACK_THIS(this)
HXLINE( 862)		bool _hx_tmp;
HXDLIN( 862)		if (!(!(this->_state->visible))) {
HXLINE( 862)			_hx_tmp = !(this->_state->exists);
            		}
            		else {
HXLINE( 862)			_hx_tmp = true;
            		}
HXDLIN( 862)		if (_hx_tmp) {
HXLINE( 864)			return;
            		}
HXLINE( 872)		::flixel::FlxG_obj::signals->preDraw->dispatch();
HXLINE( 874)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 876)			::flixel::graphics::tile::FlxTilesheet_obj::_DRAWCALLS = (int)0;
            		}
HXLINE( 886)		{
HXLINE( 886)			HX_VARI(  ::flixel::_hx_system::frontEnds::CameraFrontEnd,_this) = ::flixel::FlxG_obj::cameras;
HXDLIN( 886)			{
HXLINE( 886)				HX_VARI( int,_g) = (int)0;
HXDLIN( 886)				HX_VARI( ::Array< ::Dynamic>,_g1) = _this->list;
HXDLIN( 886)				while((_g < _g1->length)){
HXLINE( 886)					HX_VARI(  ::flixel::FlxCamera,camera) = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 886)					_g = (_g + (int)1);
HXDLIN( 886)					bool _hx_tmp1;
HXDLIN( 886)					bool _hx_tmp2;
HXDLIN( 886)					if (hx::IsNotNull( camera )) {
HXLINE( 886)						_hx_tmp2 = !(camera->exists);
            					}
            					else {
HXLINE( 886)						_hx_tmp2 = true;
            					}
HXDLIN( 886)					if (!(_hx_tmp2)) {
HXLINE( 886)						_hx_tmp1 = !(camera->visible);
            					}
            					else {
HXLINE( 886)						_hx_tmp1 = true;
            					}
HXDLIN( 886)					if (_hx_tmp1) {
HXLINE( 886)						continue;
            					}
HXDLIN( 886)					if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 886)						camera->checkResize();
HXDLIN( 886)						if (_this->useBufferLocking) {
HXLINE( 886)							camera->buffer->lock();
            						}
            					}
HXDLIN( 886)					if (::flixel::FlxG_obj::renderTile) {
HXLINE( 886)						camera->clearDrawStack();
HXDLIN( 886)						( ( ::openfl::display::Graphics)(camera->canvas->__Field(HX_("get_graphics",d4,ac,81,c7),hx::paccDynamic)()) )->clear();
            					}
HXDLIN( 886)					if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 886)						camera->fill(camera->bgColor,camera->useBgAlphaBlending,null(),null());
HXDLIN( 886)						camera->screen->dirty = true;
            					}
            					else {
HXLINE( 886)						camera->fill(((int)camera->bgColor & (int)(int)16777215),camera->useBgAlphaBlending,((Float)((int)((int)camera->bgColor >> (int)(int)24) & (int)(int)255) / (Float)(int)255),null());
            					}
            				}
            			}
            		}
HXLINE( 888)		{
HXLINE( 888)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 888)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ::flixel::FlxG_obj::plugins->list;
HXDLIN( 888)			while((_g2 < _g11->length)){
HXLINE( 888)				HX_VARI(  ::flixel::FlxBasic,plugin) = _g11->__get(_g2).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 888)				_g2 = (_g2 + (int)1);
HXDLIN( 888)				bool _hx_tmp3;
HXDLIN( 888)				if (plugin->exists) {
HXLINE( 888)					_hx_tmp3 = plugin->visible;
            				}
            				else {
HXLINE( 888)					_hx_tmp3 = false;
            				}
HXDLIN( 888)				if (_hx_tmp3) {
HXLINE( 888)					plugin->draw();
            				}
            			}
            		}
HXLINE( 890)		this->_state->draw();
HXLINE( 892)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 894)			if (::flixel::FlxG_obj::renderTile) {
HXLINE( 894)				HX_VARI_NAME( int,_g3,"_g") = (int)0;
HXDLIN( 894)				HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = ::flixel::FlxG_obj::cameras->list;
HXDLIN( 894)				while((_g3 < _g12->length)){
HXLINE( 894)					HX_VARI_NAME(  ::flixel::FlxCamera,camera1,"camera") = _g12->__get(_g3).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 894)					_g3 = (_g3 + (int)1);
HXDLIN( 894)					bool _hx_tmp4;
HXDLIN( 894)					bool _hx_tmp5;
HXDLIN( 894)					if (hx::IsNotNull( camera1 )) {
HXLINE( 894)						_hx_tmp5 = camera1->exists;
            					}
            					else {
HXLINE( 894)						_hx_tmp5 = false;
            					}
HXDLIN( 894)					if (_hx_tmp5) {
HXLINE( 894)						_hx_tmp4 = camera1->visible;
            					}
            					else {
HXLINE( 894)						_hx_tmp4 = false;
            					}
HXDLIN( 894)					if (_hx_tmp4) {
HXLINE( 894)						camera1->render();
            					}
            				}
            			}
            		}
HXLINE( 901)		{
HXLINE( 901)			HX_VARI_NAME(  ::flixel::_hx_system::frontEnds::CameraFrontEnd,_this1,"_this") = ::flixel::FlxG_obj::cameras;
HXDLIN( 901)			{
HXLINE( 901)				HX_VARI_NAME( int,_g4,"_g") = (int)0;
HXDLIN( 901)				HX_VARI_NAME( ::Array< ::Dynamic>,_g13,"_g1") = _this1->list;
HXDLIN( 901)				while((_g4 < _g13->length)){
HXLINE( 901)					HX_VARI_NAME(  ::flixel::FlxCamera,camera2,"camera") = _g13->__get(_g4).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 901)					_g4 = (_g4 + (int)1);
HXDLIN( 901)					bool _hx_tmp6;
HXDLIN( 901)					bool _hx_tmp7;
HXDLIN( 901)					if (hx::IsNotNull( camera2 )) {
HXLINE( 901)						_hx_tmp7 = !(camera2->exists);
            					}
            					else {
HXLINE( 901)						_hx_tmp7 = true;
            					}
HXDLIN( 901)					if (!(_hx_tmp7)) {
HXLINE( 901)						_hx_tmp6 = !(camera2->visible);
            					}
            					else {
HXLINE( 901)						_hx_tmp6 = true;
            					}
HXDLIN( 901)					if (_hx_tmp6) {
HXLINE( 901)						continue;
            					}
HXDLIN( 901)					camera2->drawFX();
HXDLIN( 901)					if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 901)						if (_this1->useBufferLocking) {
HXLINE( 901)							camera2->buffer->unlock(null());
            						}
HXDLIN( 901)						camera2->screen->dirty = true;
            					}
            				}
            			}
            		}
HXLINE( 903)		::flixel::FlxG_obj::signals->postDraw->dispatch();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,draw,(void))

int FlxGame_obj::getTicks(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_912_getTicks)
            	HX_STACK_THIS(this)
HXLINE( 912)		int _hx_tmp = ( (int)(this->getTimer()) );
HXDLIN( 912)		return (_hx_tmp - this->_startTime);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGame_obj,getTicks,return )

HX_BEGIN_DEFAULT_FUNC(__default_getTimer,FlxGame_obj)
int _hx_run(){
            	HX_STACKFRAME(&_hx_pos_ad2b8ce2bfb1aa86_918___default_getTimer)
            	HX_STACK_THIS(__this)
HXLINE( 918)		return ::openfl::Lib_obj::getTimer();
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC


void FlxGame_obj::__alloc_dynamic_functions(hx::Ctx *_hx_ctx,FlxGame_obj *_hx_obj) {
	if (!_hx_obj->getTimer.mPtr) _hx_obj->getTimer = new __default_getTimer(_hx_obj);
}
hx::ObjectPtr< FlxGame_obj > FlxGame_obj::__new(hx::Null< int >  __o_GameWidth,hx::Null< int >  __o_GameHeight,hx::Class InitialState,hx::Null< Float >  __o_Zoom,hx::Null< int >  __o_UpdateFramerate,hx::Null< int >  __o_DrawFramerate,hx::Null< bool >  __o_SkipSplash,hx::Null< bool >  __o_StartFullscreen) {
	hx::ObjectPtr< FlxGame_obj > __this = new FlxGame_obj();
	__this->__construct(__o_GameWidth,__o_GameHeight,InitialState,__o_Zoom,__o_UpdateFramerate,__o_DrawFramerate,__o_SkipSplash,__o_StartFullscreen);
	return __this;
}

hx::ObjectPtr< FlxGame_obj > FlxGame_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_GameWidth,hx::Null< int >  __o_GameHeight,hx::Class InitialState,hx::Null< Float >  __o_Zoom,hx::Null< int >  __o_UpdateFramerate,hx::Null< int >  __o_DrawFramerate,hx::Null< bool >  __o_SkipSplash,hx::Null< bool >  __o_StartFullscreen) {
	FlxGame_obj *__this = (FlxGame_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxGame_obj), true, "flixel.FlxGame"));
	*(void **)__this = FlxGame_obj::_hx_vtable;
	flixel::FlxGame_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(__o_GameWidth,__o_GameHeight,InitialState,__o_Zoom,__o_UpdateFramerate,__o_DrawFramerate,__o_SkipSplash,__o_StartFullscreen);
	return __this;
}

FlxGame_obj::FlxGame_obj()
{
	getTimer = new __default_getTimer(this);
}

void FlxGame_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxGame);
	HX_MARK_MEMBER_NAME(focusLostFramerate,"focusLostFramerate");
	HX_MARK_MEMBER_NAME(soundTray,"soundTray");
	HX_MARK_MEMBER_NAME(ticks,"ticks");
	HX_MARK_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_MARK_MEMBER_NAME(_gameJustStarted,"_gameJustStarted");
	HX_MARK_MEMBER_NAME(_initialState,"_initialState");
	HX_MARK_MEMBER_NAME(_state,"_state");
	HX_MARK_MEMBER_NAME(_total,"_total");
	HX_MARK_MEMBER_NAME(_startTime,"_startTime");
	HX_MARK_MEMBER_NAME(_accumulator,"_accumulator");
	HX_MARK_MEMBER_NAME(_elapsedMS,"_elapsedMS");
	HX_MARK_MEMBER_NAME(_stepMS,"_stepMS");
	HX_MARK_MEMBER_NAME(_stepSeconds,"_stepSeconds");
	HX_MARK_MEMBER_NAME(_maxAccumulation,"_maxAccumulation");
	HX_MARK_MEMBER_NAME(_lostFocus,"_lostFocus");
	HX_MARK_MEMBER_NAME(_filters,"_filters");
	HX_MARK_MEMBER_NAME(_focusLostScreen,"_focusLostScreen");
	HX_MARK_MEMBER_NAME(_inputContainer,"_inputContainer");
	HX_MARK_MEMBER_NAME(_customSoundTray,"_customSoundTray");
	HX_MARK_MEMBER_NAME(_customFocusLostScreen,"_customFocusLostScreen");
	HX_MARK_MEMBER_NAME(_skipSplash,"_skipSplash");
	HX_MARK_MEMBER_NAME(_requestedState,"_requestedState");
	HX_MARK_MEMBER_NAME(_resetGame,"_resetGame");
	HX_MARK_MEMBER_NAME(postProcessLayer,"postProcessLayer");
	HX_MARK_MEMBER_NAME(postProcesses,"postProcesses");
	HX_MARK_MEMBER_NAME(getTimer,"getTimer");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxGame_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(focusLostFramerate,"focusLostFramerate");
	HX_VISIT_MEMBER_NAME(soundTray,"soundTray");
	HX_VISIT_MEMBER_NAME(ticks,"ticks");
	HX_VISIT_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_VISIT_MEMBER_NAME(_gameJustStarted,"_gameJustStarted");
	HX_VISIT_MEMBER_NAME(_initialState,"_initialState");
	HX_VISIT_MEMBER_NAME(_state,"_state");
	HX_VISIT_MEMBER_NAME(_total,"_total");
	HX_VISIT_MEMBER_NAME(_startTime,"_startTime");
	HX_VISIT_MEMBER_NAME(_accumulator,"_accumulator");
	HX_VISIT_MEMBER_NAME(_elapsedMS,"_elapsedMS");
	HX_VISIT_MEMBER_NAME(_stepMS,"_stepMS");
	HX_VISIT_MEMBER_NAME(_stepSeconds,"_stepSeconds");
	HX_VISIT_MEMBER_NAME(_maxAccumulation,"_maxAccumulation");
	HX_VISIT_MEMBER_NAME(_lostFocus,"_lostFocus");
	HX_VISIT_MEMBER_NAME(_filters,"_filters");
	HX_VISIT_MEMBER_NAME(_focusLostScreen,"_focusLostScreen");
	HX_VISIT_MEMBER_NAME(_inputContainer,"_inputContainer");
	HX_VISIT_MEMBER_NAME(_customSoundTray,"_customSoundTray");
	HX_VISIT_MEMBER_NAME(_customFocusLostScreen,"_customFocusLostScreen");
	HX_VISIT_MEMBER_NAME(_skipSplash,"_skipSplash");
	HX_VISIT_MEMBER_NAME(_requestedState,"_requestedState");
	HX_VISIT_MEMBER_NAME(_resetGame,"_resetGame");
	HX_VISIT_MEMBER_NAME(postProcessLayer,"postProcessLayer");
	HX_VISIT_MEMBER_NAME(postProcesses,"postProcesses");
	HX_VISIT_MEMBER_NAME(getTimer,"getTimer");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxGame_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step_dyn()); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ticks") ) { return hx::Val( ticks); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_state") ) { return hx::Val( _state); }
		if (HX_FIELD_EQ(inName,"_total") ) { return hx::Val( _total); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_stepMS") ) { return hx::Val( _stepMS); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_filters") ) { return hx::Val( _filters); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return hx::Val( onResize_dyn()); }
		if (HX_FIELD_EQ(inName,"getTicks") ) { return hx::Val( getTicks_dyn()); }
		if (HX_FIELD_EQ(inName,"getTimer") ) { return hx::Val( getTimer); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"soundTray") ) { return hx::Val( soundTray); }
		if (HX_FIELD_EQ(inName,"resetGame") ) { return hx::Val( resetGame_dyn()); }
		if (HX_FIELD_EQ(inName,"gameStart") ) { return hx::Val( gameStart_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_startTime") ) { return hx::Val( _startTime); }
		if (HX_FIELD_EQ(inName,"_elapsedMS") ) { return hx::Val( _elapsedMS); }
		if (HX_FIELD_EQ(inName,"_lostFocus") ) { return hx::Val( _lostFocus); }
		if (HX_FIELD_EQ(inName,"_resetGame") ) { return hx::Val( _resetGame); }
		if (HX_FIELD_EQ(inName,"setFilters") ) { return hx::Val( setFilters_dyn()); }
		if (HX_FIELD_EQ(inName,"resizeGame") ) { return hx::Val( resizeGame_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_skipSplash") ) { return hx::Val( _skipSplash); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn()); }
		if (HX_FIELD_EQ(inName,"switchState") ) { return hx::Val( switchState_dyn()); }
		if (HX_FIELD_EQ(inName,"updateInput") ) { return hx::Val( updateInput_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_accumulator") ) { return hx::Val( _accumulator); }
		if (HX_FIELD_EQ(inName,"_stepSeconds") ) { return hx::Val( _stepSeconds); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return hx::Val( onEnterFrame_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_initialState") ) { return hx::Val( _initialState); }
		if (HX_FIELD_EQ(inName,"postProcesses") ) { return hx::Val( postProcesses); }
		if (HX_FIELD_EQ(inName,"updateElapsed") ) { return hx::Val( updateElapsed_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { return hx::Val( filtersEnabled); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_inputContainer") ) { return hx::Val( _inputContainer); }
		if (HX_FIELD_EQ(inName,"_requestedState") ) { return hx::Val( _requestedState); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_gameJustStarted") ) { return hx::Val( _gameJustStarted); }
		if (HX_FIELD_EQ(inName,"_maxAccumulation") ) { return hx::Val( _maxAccumulation); }
		if (HX_FIELD_EQ(inName,"_focusLostScreen") ) { return hx::Val( _focusLostScreen); }
		if (HX_FIELD_EQ(inName,"_customSoundTray") ) { return hx::Val( _customSoundTray); }
		if (HX_FIELD_EQ(inName,"postProcessLayer") ) { return hx::Val( postProcessLayer); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"focusLostFramerate") ) { return hx::Val( focusLostFramerate); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"handleReplayRequests") ) { return hx::Val( handleReplayRequests_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_customFocusLostScreen") ) { return hx::Val( _customFocusLostScreen); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxGame_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ticks") ) { ticks=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_state") ) { _state=inValue.Cast<  ::flixel::FlxState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_total") ) { _total=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_stepMS") ) { _stepMS=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_filters") ) { _filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"getTimer") ) { getTimer=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"soundTray") ) { soundTray=inValue.Cast<  ::flixel::_hx_system::ui::FlxSoundTray >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_startTime") ) { _startTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_elapsedMS") ) { _elapsedMS=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lostFocus") ) { _lostFocus=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_resetGame") ) { _resetGame=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_skipSplash") ) { _skipSplash=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_accumulator") ) { _accumulator=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stepSeconds") ) { _stepSeconds=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_initialState") ) { _initialState=inValue.Cast< hx::Class >(); return inValue; }
		if (HX_FIELD_EQ(inName,"postProcesses") ) { postProcesses=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { filtersEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_inputContainer") ) { _inputContainer=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_requestedState") ) { _requestedState=inValue.Cast<  ::flixel::FlxState >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_gameJustStarted") ) { _gameJustStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_maxAccumulation") ) { _maxAccumulation=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_focusLostScreen") ) { _focusLostScreen=inValue.Cast<  ::flixel::_hx_system::ui::FlxFocusLostScreen >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_customSoundTray") ) { _customSoundTray=inValue.Cast< hx::Class >(); return inValue; }
		if (HX_FIELD_EQ(inName,"postProcessLayer") ) { postProcessLayer=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"focusLostFramerate") ) { focusLostFramerate=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_customFocusLostScreen") ) { _customFocusLostScreen=inValue.Cast< hx::Class >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxGame_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("focusLostFramerate","\x11","\xa8","\xf2","\xda"));
	outFields->push(HX_HCSTRING("soundTray","\x65","\x62","\xd1","\x57"));
	outFields->push(HX_HCSTRING("ticks","\x76","\x2e","\x2e","\x10"));
	outFields->push(HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18"));
	outFields->push(HX_HCSTRING("_gameJustStarted","\x24","\xcc","\x52","\x15"));
	outFields->push(HX_HCSTRING("_initialState","\xcc","\x09","\x8a","\x2a"));
	outFields->push(HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f"));
	outFields->push(HX_HCSTRING("_total","\x05","\x9b","\x19","\x10"));
	outFields->push(HX_HCSTRING("_startTime","\x50","\xc1","\x92","\x61"));
	outFields->push(HX_HCSTRING("_accumulator","\x47","\xf7","\xa7","\x3a"));
	outFields->push(HX_HCSTRING("_elapsedMS","\x63","\xde","\xe6","\xb9"));
	outFields->push(HX_HCSTRING("_stepMS","\x51","\xa7","\x14","\x77"));
	outFields->push(HX_HCSTRING("_stepSeconds","\x94","\x66","\xe1","\xd2"));
	outFields->push(HX_HCSTRING("_maxAccumulation","\x8a","\x43","\xd9","\xcd"));
	outFields->push(HX_HCSTRING("_lostFocus","\x15","\x47","\x9b","\xcd"));
	outFields->push(HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42"));
	outFields->push(HX_HCSTRING("_focusLostScreen","\xe9","\xc0","\x3c","\x2c"));
	outFields->push(HX_HCSTRING("_inputContainer","\x76","\x08","\x99","\x47"));
	outFields->push(HX_HCSTRING("_customSoundTray","\xf5","\xfe","\x64","\x5b"));
	outFields->push(HX_HCSTRING("_customFocusLostScreen","\xf8","\xe6","\xa0","\x2d"));
	outFields->push(HX_HCSTRING("_skipSplash","\x65","\x42","\x26","\xfa"));
	outFields->push(HX_HCSTRING("_requestedState","\x62","\x56","\x37","\x70"));
	outFields->push(HX_HCSTRING("_resetGame","\x22","\x79","\xed","\xe5"));
	outFields->push(HX_HCSTRING("postProcessLayer","\x62","\xfd","\xc8","\xec"));
	outFields->push(HX_HCSTRING("postProcesses","\x1d","\x84","\xbe","\x80"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxGame_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxGame_obj,focusLostFramerate),HX_HCSTRING("focusLostFramerate","\x11","\xa8","\xf2","\xda")},
	{hx::fsObject /*::flixel::_hx_system::ui::FlxSoundTray*/ ,(int)offsetof(FlxGame_obj,soundTray),HX_HCSTRING("soundTray","\x65","\x62","\xd1","\x57")},
	{hx::fsInt,(int)offsetof(FlxGame_obj,ticks),HX_HCSTRING("ticks","\x76","\x2e","\x2e","\x10")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,filtersEnabled),HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,_gameJustStarted),HX_HCSTRING("_gameJustStarted","\x24","\xcc","\x52","\x15")},
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(FlxGame_obj,_initialState),HX_HCSTRING("_initialState","\xcc","\x09","\x8a","\x2a")},
	{hx::fsObject /*::flixel::FlxState*/ ,(int)offsetof(FlxGame_obj,_state),HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f")},
	{hx::fsInt,(int)offsetof(FlxGame_obj,_total),HX_HCSTRING("_total","\x05","\x9b","\x19","\x10")},
	{hx::fsInt,(int)offsetof(FlxGame_obj,_startTime),HX_HCSTRING("_startTime","\x50","\xc1","\x92","\x61")},
	{hx::fsFloat,(int)offsetof(FlxGame_obj,_accumulator),HX_HCSTRING("_accumulator","\x47","\xf7","\xa7","\x3a")},
	{hx::fsFloat,(int)offsetof(FlxGame_obj,_elapsedMS),HX_HCSTRING("_elapsedMS","\x63","\xde","\xe6","\xb9")},
	{hx::fsFloat,(int)offsetof(FlxGame_obj,_stepMS),HX_HCSTRING("_stepMS","\x51","\xa7","\x14","\x77")},
	{hx::fsFloat,(int)offsetof(FlxGame_obj,_stepSeconds),HX_HCSTRING("_stepSeconds","\x94","\x66","\xe1","\xd2")},
	{hx::fsFloat,(int)offsetof(FlxGame_obj,_maxAccumulation),HX_HCSTRING("_maxAccumulation","\x8a","\x43","\xd9","\xcd")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,_lostFocus),HX_HCSTRING("_lostFocus","\x15","\x47","\x9b","\xcd")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGame_obj,_filters),HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42")},
	{hx::fsObject /*::flixel::_hx_system::ui::FlxFocusLostScreen*/ ,(int)offsetof(FlxGame_obj,_focusLostScreen),HX_HCSTRING("_focusLostScreen","\xe9","\xc0","\x3c","\x2c")},
	{hx::fsObject /*openfl::display::Sprite*/ ,(int)offsetof(FlxGame_obj,_inputContainer),HX_HCSTRING("_inputContainer","\x76","\x08","\x99","\x47")},
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(FlxGame_obj,_customSoundTray),HX_HCSTRING("_customSoundTray","\xf5","\xfe","\x64","\x5b")},
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(FlxGame_obj,_customFocusLostScreen),HX_HCSTRING("_customFocusLostScreen","\xf8","\xe6","\xa0","\x2d")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,_skipSplash),HX_HCSTRING("_skipSplash","\x65","\x42","\x26","\xfa")},
	{hx::fsObject /*::flixel::FlxState*/ ,(int)offsetof(FlxGame_obj,_requestedState),HX_HCSTRING("_requestedState","\x62","\x56","\x37","\x70")},
	{hx::fsBool,(int)offsetof(FlxGame_obj,_resetGame),HX_HCSTRING("_resetGame","\x22","\x79","\xed","\xe5")},
	{hx::fsObject /*openfl::display::Sprite*/ ,(int)offsetof(FlxGame_obj,postProcessLayer),HX_HCSTRING("postProcessLayer","\x62","\xfd","\xc8","\xec")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGame_obj,postProcesses),HX_HCSTRING("postProcesses","\x1d","\x84","\xbe","\x80")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxGame_obj,getTimer),HX_HCSTRING("getTimer","\x4f","\xcf","\x0c","\x70")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxGame_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxGame_obj_sMemberFields[] = {
	HX_HCSTRING("focusLostFramerate","\x11","\xa8","\xf2","\xda"),
	HX_HCSTRING("soundTray","\x65","\x62","\xd1","\x57"),
	HX_HCSTRING("ticks","\x76","\x2e","\x2e","\x10"),
	HX_HCSTRING("filtersEnabled","\x06","\x08","\x9b","\x18"),
	HX_HCSTRING("_gameJustStarted","\x24","\xcc","\x52","\x15"),
	HX_HCSTRING("_initialState","\xcc","\x09","\x8a","\x2a"),
	HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f"),
	HX_HCSTRING("_total","\x05","\x9b","\x19","\x10"),
	HX_HCSTRING("_startTime","\x50","\xc1","\x92","\x61"),
	HX_HCSTRING("_accumulator","\x47","\xf7","\xa7","\x3a"),
	HX_HCSTRING("_elapsedMS","\x63","\xde","\xe6","\xb9"),
	HX_HCSTRING("_stepMS","\x51","\xa7","\x14","\x77"),
	HX_HCSTRING("_stepSeconds","\x94","\x66","\xe1","\xd2"),
	HX_HCSTRING("_maxAccumulation","\x8a","\x43","\xd9","\xcd"),
	HX_HCSTRING("_lostFocus","\x15","\x47","\x9b","\xcd"),
	HX_HCSTRING("_filters","\x3c","\xfb","\xfe","\x42"),
	HX_HCSTRING("_focusLostScreen","\xe9","\xc0","\x3c","\x2c"),
	HX_HCSTRING("_inputContainer","\x76","\x08","\x99","\x47"),
	HX_HCSTRING("_customSoundTray","\xf5","\xfe","\x64","\x5b"),
	HX_HCSTRING("_customFocusLostScreen","\xf8","\xe6","\xa0","\x2d"),
	HX_HCSTRING("_skipSplash","\x65","\x42","\x26","\xfa"),
	HX_HCSTRING("_requestedState","\x62","\x56","\x37","\x70"),
	HX_HCSTRING("_resetGame","\x22","\x79","\xed","\xe5"),
	HX_HCSTRING("postProcessLayer","\x62","\xfd","\xc8","\xec"),
	HX_HCSTRING("postProcesses","\x1d","\x84","\xbe","\x80"),
	HX_HCSTRING("setFilters","\x39","\xc6","\x25","\x5c"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("onResize","\x73","\x50","\x28","\xe8"),
	HX_HCSTRING("resizeGame","\x06","\x84","\x99","\xb8"),
	HX_HCSTRING("onEnterFrame","\xf4","\xa5","\x93","\xda"),
	HX_HCSTRING("resetGame","\x61","\xfd","\x4a","\x8a"),
	HX_HCSTRING("switchState","\x7d","\x07","\x8b","\x77"),
	HX_HCSTRING("gameStart","\x10","\x63","\x26","\xb9"),
	HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"),
	HX_HCSTRING("handleReplayRequests","\x53","\x56","\x6b","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateElapsed","\x33","\xfd","\x2e","\x86"),
	HX_HCSTRING("updateInput","\x41","\x2d","\xb6","\xa3"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("getTicks","\x00","\x3e","\x05","\x70"),
	HX_HCSTRING("getTimer","\x4f","\xcf","\x0c","\x70"),
	::String(null()) };

static void FlxGame_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxGame_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxGame_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxGame_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxGame_obj::__mClass;

void FlxGame_obj::__register()
{
	hx::Object *dummy = new FlxGame_obj;
	FlxGame_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxGame","\x52","\xad","\x0b","\x55");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxGame_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxGame_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxGame_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxGame_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGame_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
