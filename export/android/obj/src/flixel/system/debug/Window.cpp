// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_system_debug_DebuggerUtil
#include <flixel/system/debug/DebuggerUtil.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicCloseButton
#include <flixel/system/debug/GraphicCloseButton.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug__Window_GraphicWindowHandle
#include <flixel/system/debug/_Window/GraphicWindowHandle.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_97_new,"flixel.system.debug.Window","new",0x5aefd38a,"flixel.system.debug.Window.new","flixel/system/debug/Window.hx",97,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_166_destroy,"flixel.system.debug.Window","destroy",0x5fb40d24,"flixel.system.debug.Window.destroy","flixel/system/debug/Window.hx",166,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_220_resize,"flixel.system.debug.Window","resize",0x4ec62d0a,"flixel.system.debug.Window.resize","flixel/system/debug/Window.hx",220,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_233_reposition,"flixel.system.debug.Window","reposition",0x0fe38572,"flixel.system.debug.Window.reposition","flixel/system/debug/Window.hx",233,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_240_updateBounds,"flixel.system.debug.Window","updateBounds",0x436474f4,"flixel.system.debug.Window.updateBounds","flixel/system/debug/Window.hx",240,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_253_setVisible,"flixel.system.debug.Window","setVisible",0x6084b306,"flixel.system.debug.Window.setVisible","flixel/system/debug/Window.hx",253,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_271_toggleVisible,"flixel.system.debug.Window","toggleVisible",0x493d16e8,"flixel.system.debug.Window.toggleVisible","flixel/system/debug/Window.hx",271,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_276_putOnTop,"flixel.system.debug.Window","putOnTop",0xbb5abdfd,"flixel.system.debug.Window.putOnTop","flixel/system/debug/Window.hx",276,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_281_loadSaveData,"flixel.system.debug.Window","loadSaveData",0x8d0923e3,"flixel.system.debug.Window.loadSaveData","flixel/system/debug/Window.hx",281,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_293_initSaveData,"flixel.system.debug.Window","initSaveData",0x7856becd,"flixel.system.debug.Window.initSaveData","flixel/system/debug/Window.hx",293,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_303_update,"flixel.system.debug.Window","update",0xcd50591f,"flixel.system.debug.Window.update","flixel/system/debug/Window.hx",303,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_311_init,"flixel.system.debug.Window","init",0x33a1fca6,"flixel.system.debug.Window.init","flixel/system/debug/Window.hx",311,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_333_onMouseMove,"flixel.system.debug.Window","onMouseMove",0xdd6abbe1,"flixel.system.debug.Window.onMouseMove","flixel/system/debug/Window.hx",333,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_373_onMouseDown,"flixel.system.debug.Window","onMouseDown",0xd777d132,"flixel.system.debug.Window.onMouseDown","flixel/system/debug/Window.hx",373,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_393_onMouseUp,"flixel.system.debug.Window","onMouseUp",0x62a36b2b,"flixel.system.debug.Window.onMouseUp","flixel/system/debug/Window.hx",393,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_405_bound,"flixel.system.debug.Window","bound",0xf2ff51e8,"flixel.system.debug.Window.bound","flixel/system/debug/Window.hx",405,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_416_updateSize,"flixel.system.debug.Window","updateSize",0x6f89a180,"flixel.system.debug.Window.updateSize","flixel/system/debug/Window.hx",416,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_440_close,"flixel.system.debug.Window","close",0x8465b962,"flixel.system.debug.Window.close","flixel/system/debug/Window.hx",440,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_29_boot,"flixel.system.debug.Window","boot",0x2f0245c8,"flixel.system.debug.Window.boot","flixel/system/debug/Window.hx",29,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_31_boot,"flixel.system.debug.Window","boot",0x2f0245c8,"flixel.system.debug.Window.boot","flixel/system/debug/Window.hx",31,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_32_boot,"flixel.system.debug.Window","boot",0x2f0245c8,"flixel.system.debug.Window.boot","flixel/system/debug/Window.hx",32,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_33_boot,"flixel.system.debug.Window","boot",0x2f0245c8,"flixel.system.debug.Window.boot","flixel/system/debug/Window.hx",33,0xb8dfd4e5)
HX_DEFINE_STACK_FRAME(_hx_pos_4e51d5a8805713a4_38_boot,"flixel.system.debug.Window","boot",0x2f0245c8,"flixel.system.debug.Window.boot","flixel/system/debug/Window.hx",38,0xb8dfd4e5)
namespace flixel{
namespace _hx_system{
namespace debug{

void Window_obj::__construct(::String Title, ::openfl::display::BitmapData Icon,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height,hx::Null< bool >  __o_Resizable, ::openfl::geom::Rectangle Bounds,hx::Null< bool >  __o_Closable){
Float Width = __o_Width.Default(0);
Float Height = __o_Height.Default(0);
bool Resizable = __o_Resizable.Default(true);
bool Closable = __o_Closable.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4e51d5a8805713a4_97_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Title,"Title")
            	HX_STACK_ARG(Icon,"Icon")
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(Resizable,"Resizable")
            	HX_STACK_ARG(Bounds,"Bounds")
            	HX_STACK_ARG(Closable,"Closable")
HXLINE(  98)		super::__construct();
HXLINE( 100)		this->minSize =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)50,(int)30);
HXLINE( 102)		this->_width = ::Std_obj::_hx_int(::Math_obj::abs(Width));
HXLINE( 103)		this->_height = ::Std_obj::_hx_int(::Math_obj::abs(Height));
HXLINE( 104)		this->updateBounds(Bounds);
HXLINE( 105)		this->_drag =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 106)		this->_resizable = Resizable;
HXLINE( 107)		this->_closable = Closable;
HXLINE( 109)		this->_shadow =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)1,(int)2,true,(int)-16777216),null(),null());
HXLINE( 110)		this->_background =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)1,(int)1,true,(int)-580952225),null(),null());
HXLINE( 111)		this->_header =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)1,(int)15,true,(int)-1157627904),null(),null());
HXLINE( 112)		 ::Dynamic _hx_tmp = this->_background->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic);
HXDLIN( 112)		_hx_tmp(this->_header->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)());
HXLINE( 114)		this->_title = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField((int)2,(int)-1,null(),null());
HXLINE( 115)		this->_title->__Field(HX_("set_alpha",c1,ef,90,48),hx::paccDynamic)(((Float)0.8));
HXLINE( 116)		this->_title->__Field(HX_("set_text",aa,e1,11,7b),hx::paccDynamic)(Title);
HXLINE( 118)		this->addChild(this->_shadow);
HXLINE( 119)		this->addChild(this->_background);
HXLINE( 120)		this->addChild(this->_header);
HXLINE( 121)		this->addChild(this->_title);
HXLINE( 123)		if (hx::IsNotNull( Icon )) {
HXLINE( 126)			HX_VARI(  ::openfl::display::Bitmap,icon) =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,Icon,null(),null());
HXLINE( 127)			icon->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic)((int)5);
HXLINE( 128)			icon->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic)((int)2);
HXLINE( 129)			icon->__Field(HX_("set_alpha",c1,ef,90,48),hx::paccDynamic)(((Float)0.8));
HXLINE( 130)			 ::Dynamic _hx_tmp1 = this->_title->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic);
HXDLIN( 130)			Float _hx_tmp2 = ( (Float)(icon->__Field(HX_("get_x",4f,a5,60,91),hx::paccDynamic)()) );
HXDLIN( 130)			_hx_tmp1(((_hx_tmp2 + ( (Float)(icon->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) )) + (int)2));
HXLINE( 131)			this->addChild(icon);
            		}
HXLINE( 134)		if (this->_resizable) {
HXLINE( 136)			this->_handle =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::flixel::_hx_system::debug::DebuggerUtil_obj::fixSize( ::flixel::_hx_system::debug::_Window::GraphicWindowHandle_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null())),null(),null());
HXLINE( 137)			this->addChild(this->_handle);
            		}
HXLINE( 140)		if (Closable) {
HXLINE( 142)			this->_closeButton =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX , ::flixel::_hx_system::debug::GraphicCloseButton_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),this->close_dyn(),null());
HXLINE( 143)			this->_closeButton->__Field(HX_("set_alpha",c1,ef,90,48),hx::paccDynamic)(((Float)0.8));
HXLINE( 144)			this->addChild(this->_closeButton);
            		}
            		else {
HXLINE( 148)			this->_id = ::flixel::_hx_system::debug::Window_obj::WINDOW_AMOUNT;
HXLINE( 149)			this->loadSaveData();
HXLINE( 150)			::flixel::_hx_system::debug::Window_obj::WINDOW_AMOUNT++;
            		}
HXLINE( 153)		bool _hx_tmp3;
HXDLIN( 153)		if ((this->_width == (int)0)) {
HXLINE( 153)			_hx_tmp3 = (this->_height != (int)0);
            		}
            		else {
HXLINE( 153)			_hx_tmp3 = true;
            		}
HXDLIN( 153)		if (_hx_tmp3) {
HXLINE( 155)			this->updateSize();
            		}
HXLINE( 157)		this->bound();
HXLINE( 159)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->init_dyn(),null(),null(),null());
            	}

Dynamic Window_obj::__CreateEmpty() { return new Window_obj; }

void *Window_obj::_hx_vtable = 0;

Dynamic Window_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Window_obj > _hx_result = new Window_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool Window_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x619ca9b8;
}

void Window_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_166_destroy)
            	HX_STACK_THIS(this)
HXLINE( 167)		this->minSize = null();
HXLINE( 168)		this->maxSize = null();
HXLINE( 169)		this->_bounds = null();
HXLINE( 170)		if (hx::IsNotNull( this->_shadow )) {
HXLINE( 172)			this->removeChild(this->_shadow);
            		}
HXLINE( 174)		this->_shadow = null();
HXLINE( 175)		if (hx::IsNotNull( this->_background )) {
HXLINE( 177)			this->removeChild(this->_background);
            		}
HXLINE( 179)		this->_background = null();
HXLINE( 180)		if (hx::IsNotNull( this->_header )) {
HXLINE( 182)			this->removeChild(this->_header);
            		}
HXLINE( 184)		this->_header = null();
HXLINE( 185)		if (hx::IsNotNull( this->_title )) {
HXLINE( 187)			this->removeChild(this->_title);
            		}
HXLINE( 189)		this->_title = null();
HXLINE( 190)		if (hx::IsNotNull( this->_handle )) {
HXLINE( 192)			this->removeChild(this->_handle);
            		}
HXLINE( 194)		this->_handle = null();
HXLINE( 195)		this->_drag = null();
HXLINE( 196)		this->_closeButton = ( ( ::flixel::_hx_system::ui::FlxSystemButton)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_closeButton)) );
HXLINE( 198)		HX_VARI(  ::openfl::display::Stage,stage) = ::openfl::Lib_obj::current->stage;
HXLINE( 199)		if (stage->hasEventListener(HX_("mouseMove",d6,9b,b5,f4))) {
HXLINE( 201)			stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onMouseMove_dyn(),null());
            		}
HXLINE( 203)		if (this->hasEventListener(HX_("mouseDown",27,b1,c2,ee))) {
HXLINE( 205)			this->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null());
            		}
HXLINE( 207)		if (stage->hasEventListener(HX_("mouseUp",e0,f3,72,c0))) {
HXLINE( 209)			stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,destroy,(void))

void Window_obj::resize(Float Width,Float Height){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_220_resize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE( 221)		this->_width = ::Std_obj::_hx_int(::Math_obj::abs(Width));
HXLINE( 222)		this->_height = ::Std_obj::_hx_int(::Math_obj::abs(Height));
HXLINE( 223)		this->updateSize();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Window_obj,resize,(void))

void Window_obj::reposition(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_233_reposition)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 234)		hx::ObjectPtr<OBJ_>(this)->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic)(X);
HXLINE( 235)		hx::ObjectPtr<OBJ_>(this)->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic)(Y);
HXLINE( 236)		this->bound();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Window_obj,reposition,(void))

void Window_obj::updateBounds( ::openfl::geom::Rectangle Bounds){
            	HX_GC_STACKFRAME(&_hx_pos_4e51d5a8805713a4_240_updateBounds)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Bounds,"Bounds")
HXLINE( 241)		this->_bounds = Bounds;
HXLINE( 242)		if (hx::IsNotNull( this->_bounds )) {
HXLINE( 244)			this->maxSize =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->_bounds->width,this->_bounds->height);
            		}
            		else {
HXLINE( 248)			this->maxSize =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,((Float)1.79e+308),((Float)1.79e+308));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,updateBounds,(void))

void Window_obj::setVisible(bool Value){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_253_setVisible)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 254)		hx::ObjectPtr<OBJ_>(this)->__Field(HX_("set_visible",95,df,8b,33),hx::paccDynamic)(Value);
HXLINE( 256)		if (!(this->_closable)) {
HXLINE( 258)			 ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("windowSettings",f3,3c,19,85),hx::paccDynamic))->__SetItem(this->_id,( (bool)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_visible",89,d8,1e,29),hx::paccDynamic)()) ));
HXLINE( 259)			::flixel::FlxG_obj::save->flush(null(),null());
            		}
HXLINE( 262)		if (hx::IsNotNull( this->toggleButton )) {
HXLINE( 263)			 ::flixel::_hx_system::ui::FlxSystemButton _hx_tmp = this->toggleButton;
HXDLIN( 263)			_hx_tmp->set_toggled(!(( (bool)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_visible",89,d8,1e,29),hx::paccDynamic)()) )));
            		}
HXLINE( 265)		if (( (bool)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_visible",89,d8,1e,29),hx::paccDynamic)()) )) {
HXLINE( 266)			this->parent->addChild(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,setVisible,(void))

void Window_obj::toggleVisible(){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_271_toggleVisible)
            	HX_STACK_THIS(this)
HXLINE( 271)		this->setVisible(!(( (bool)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_visible",89,d8,1e,29),hx::paccDynamic)()) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,toggleVisible,(void))

void Window_obj::putOnTop(){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_276_putOnTop)
            	HX_STACK_THIS(this)
HXLINE( 276)		this->parent->addChild(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,putOnTop,(void))

void Window_obj::loadSaveData(){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_281_loadSaveData)
            	HX_STACK_THIS(this)
HXLINE( 281)		if (hx::IsNotNull(  ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("windowSettings",f3,3c,19,85),hx::paccDynamic)) )) {
HXLINE( 283)			hx::ObjectPtr<OBJ_>(this)->__Field(HX_("set_visible",95,df,8b,33),hx::paccDynamic)( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("windowSettings",f3,3c,19,85),hx::paccDynamic))->__GetItem(this->_id));
            		}
            		else {
HXLINE( 287)			this->initSaveData();
HXLINE( 288)			this->loadSaveData();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,loadSaveData,(void))

void Window_obj::initSaveData(){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_293_initSaveData)
            	HX_STACK_THIS(this)
HXLINE( 294)		HX_VARI( ::Array< bool >,settings) = ::Array_obj< bool >::__new(0);
HXLINE( 295)		{
HXLINE( 295)			HX_VARI( int,_g) = (int)0;
HXDLIN( 295)			while((_g < (int)10)){
HXLINE( 295)				_g = (_g + (int)1);
HXLINE( 297)				settings[(_g - (int)1)] = true;
            			}
            		}
HXLINE( 299)		::flixel::FlxG_obj::save->data->__SetField(HX_("windowSettings",f3,3c,19,85),settings,hx::paccDynamic);
HXLINE( 300)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,initSaveData,(void))

void Window_obj::update(){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_303_update)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,update,(void))

void Window_obj::init( ::openfl::events::Event E){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_311_init)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(E,"E")
HXLINE( 315)		if (hx::IsNull( this->stage )) {
HXLINE( 318)			return;
            		}
HXLINE( 320)		this->removeEventListener(HX_("enterFrame",f5,03,50,02),this->init_dyn(),null());
HXLINE( 322)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onMouseMove_dyn(),null(),null(),null());
HXLINE( 323)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null(),null(),null());
HXLINE( 326)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,init,(void))

void Window_obj::onMouseMove( ::openfl::events::MouseEvent E){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_333_onMouseMove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(E,"E")
HXLINE( 335)		HX_VAR( Float,mouseX);
HXDLIN( 335)		if ((( (Float)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_mouseX",5c,ba,95,bc),hx::paccDynamic)()) ) < (int)0)) {
HXLINE( 335)			mouseX = (int)0;
            		}
            		else {
HXLINE( 335)			mouseX = ( (Float)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_mouseX",5c,ba,95,bc),hx::paccDynamic)()) );
            		}
HXLINE( 336)		HX_VAR( Float,mouseY);
HXDLIN( 336)		if ((( (Float)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_mouseY",5d,ba,95,bc),hx::paccDynamic)()) ) < (int)0)) {
HXLINE( 336)			mouseY = (int)0;
            		}
            		else {
HXLINE( 336)			mouseY = ( (Float)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_mouseY",5d,ba,95,bc),hx::paccDynamic)()) );
            		}
HXLINE( 338)		if (!(( (bool)(this->parent->__Field(HX_("get_visible",89,d8,1e,29),hx::paccDynamic)()) ))) {
HXLINE( 340)			this->_overHandle = (this->_overHeader = false);
HXLINE( 341)			return;
            		}
HXLINE( 344)		if (this->_dragging) {
HXLINE( 346)			this->_overHeader = true;
HXLINE( 347)			Float _hx_tmp = ( (Float)(this->parent->__Field(HX_("get_mouseX",5c,ba,95,bc),hx::paccDynamic)()) );
HXDLIN( 347)			Float _hx_tmp1 = (_hx_tmp - this->_drag->x);
HXDLIN( 347)			Float _hx_tmp2 = ( (Float)(this->parent->__Field(HX_("get_mouseY",5d,ba,95,bc),hx::paccDynamic)()) );
HXDLIN( 347)			this->reposition(_hx_tmp1,(_hx_tmp2 - this->_drag->y));
            		}
            		else {
HXLINE( 349)			if (this->_resizing) {
HXLINE( 351)				this->_overHandle = true;
HXLINE( 352)				this->resize((mouseX - this->_drag->x),(mouseY - this->_drag->y));
            			}
            			else {
HXLINE( 354)				bool _hx_tmp3;
HXDLIN( 354)				bool _hx_tmp4;
HXDLIN( 354)				bool _hx_tmp5;
HXDLIN( 354)				if ((mouseX >= (int)0)) {
HXLINE( 354)					_hx_tmp5 = (mouseX <= this->_width);
            				}
            				else {
HXLINE( 354)					_hx_tmp5 = false;
            				}
HXDLIN( 354)				if (_hx_tmp5) {
HXLINE( 354)					_hx_tmp4 = (mouseY >= (int)0);
            				}
            				else {
HXLINE( 354)					_hx_tmp4 = false;
            				}
HXDLIN( 354)				if (_hx_tmp4) {
HXLINE( 354)					_hx_tmp3 = (mouseY <= this->_height);
            				}
            				else {
HXLINE( 354)					_hx_tmp3 = false;
            				}
HXDLIN( 354)				if (_hx_tmp3) {
HXLINE( 356)					bool _hx_tmp6;
HXDLIN( 356)					if ((mouseX <= ( (Float)(this->_header->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ))) {
HXLINE( 356)						_hx_tmp6 = (mouseY <= ( (Float)(this->_header->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ));
            					}
            					else {
HXLINE( 356)						_hx_tmp6 = false;
            					}
HXDLIN( 356)					this->_overHeader = _hx_tmp6;
HXLINE( 357)					if (this->_resizable) {
HXLINE( 359)						bool _hx_tmp7;
HXDLIN( 359)						int _hx_tmp8 = this->_width;
HXDLIN( 359)						if ((mouseX >= (_hx_tmp8 - ( (Float)(this->_handle->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) )))) {
HXLINE( 359)							int _hx_tmp9 = this->_height;
HXDLIN( 359)							_hx_tmp7 = (mouseY >= (_hx_tmp9 - ( (Float)(this->_handle->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )));
            						}
            						else {
HXLINE( 359)							_hx_tmp7 = false;
            						}
HXDLIN( 359)						this->_overHandle = _hx_tmp7;
            					}
            				}
            				else {
HXLINE( 364)					this->_overHandle = (this->_overHeader = false);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,onMouseMove,(void))

void Window_obj::onMouseDown( ::openfl::events::MouseEvent E){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_373_onMouseDown)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(E,"E")
HXLINE( 373)		if (this->_overHeader) {
HXLINE( 375)			this->parent->addChild(hx::ObjectPtr<OBJ_>(this));
HXLINE( 376)			this->_dragging = true;
HXLINE( 377)			this->_drag->x = ( (Float)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_mouseX",5c,ba,95,bc),hx::paccDynamic)()) );
HXLINE( 378)			this->_drag->y = ( (Float)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_mouseY",5d,ba,95,bc),hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 380)			if (this->_overHandle) {
HXLINE( 382)				this->parent->addChild(hx::ObjectPtr<OBJ_>(this));
HXLINE( 383)				this->_resizing = true;
HXLINE( 384)				int _hx_tmp = this->_width;
HXDLIN( 384)				Float _hx_tmp1 = ( (Float)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_mouseX",5c,ba,95,bc),hx::paccDynamic)()) );
HXDLIN( 384)				this->_drag->x = (_hx_tmp - _hx_tmp1);
HXLINE( 385)				int _hx_tmp2 = this->_height;
HXDLIN( 385)				Float _hx_tmp3 = ( (Float)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_mouseY",5d,ba,95,bc),hx::paccDynamic)()) );
HXDLIN( 385)				this->_drag->y = (_hx_tmp2 - _hx_tmp3);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,onMouseDown,(void))

void Window_obj::onMouseUp( ::openfl::events::MouseEvent E){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_393_onMouseUp)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(E,"E")
HXLINE( 394)		this->_dragging = false;
HXLINE( 395)		this->_resizing = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,onMouseUp,(void))

void Window_obj::bound(){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_405_bound)
            	HX_STACK_THIS(this)
HXLINE( 405)		if (hx::IsNotNull( this->_bounds )) {
HXLINE( 407)			 ::Dynamic _hx_tmp = hx::ObjectPtr<OBJ_>(this)->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic);
HXDLIN( 407)			HX_VARI( Float,Value) = ( (Float)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_x",4f,a5,60,91),hx::paccDynamic)()) );
HXDLIN( 407)			HX_VARI(  ::Dynamic,Min) = this->_bounds->__Field(HX_("get_left",90,c3,6a,c7),hx::paccDynamic)();
HXDLIN( 407)			Float Max = ( (Float)(this->_bounds->__Field(HX_("get_right",33,68,0d,2d),hx::paccDynamic)()) );
HXDLIN( 407)			HX_VARI_NAME(  ::Dynamic,Max1,"Max") = (Max - this->_width);
HXDLIN( 407)			HX_VAR( Float,lowerBound);
HXDLIN( 407)			bool lowerBound1;
HXDLIN( 407)			if (hx::IsNotNull( Min )) {
HXLINE( 407)				lowerBound1 = hx::IsLess( Value,Min );
            			}
            			else {
HXLINE( 407)				lowerBound1 = false;
            			}
HXDLIN( 407)			if (lowerBound1) {
HXLINE( 407)				lowerBound = Min;
            			}
            			else {
HXLINE( 407)				lowerBound = Value;
            			}
HXDLIN( 407)			Float _hx_tmp1;
HXDLIN( 407)			bool _hx_tmp2;
HXDLIN( 407)			if (hx::IsNotNull( Max1 )) {
HXLINE( 407)				_hx_tmp2 = hx::IsGreater( lowerBound,Max1 );
            			}
            			else {
HXLINE( 407)				_hx_tmp2 = false;
            			}
HXDLIN( 407)			if (_hx_tmp2) {
HXLINE( 407)				_hx_tmp1 = Max1;
            			}
            			else {
HXLINE( 407)				_hx_tmp1 = lowerBound;
            			}
HXDLIN( 407)			_hx_tmp(_hx_tmp1);
HXLINE( 408)			 ::Dynamic _hx_tmp3 = hx::ObjectPtr<OBJ_>(this)->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic);
HXDLIN( 408)			HX_VARI_NAME( Float,Value1,"Value") = ( (Float)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_y",50,a5,60,91),hx::paccDynamic)()) );
HXDLIN( 408)			HX_VARI_NAME(  ::Dynamic,Min1,"Min") = this->_bounds->__Field(HX_("get_top",2c,2f,cd,26),hx::paccDynamic)();
HXDLIN( 408)			Float Max2 = ( (Float)(this->_bounds->__Field(HX_("get_bottom",b4,56,00,56),hx::paccDynamic)()) );
HXDLIN( 408)			HX_VARI_NAME(  ::Dynamic,Max3,"Max") = (Max2 - this->_height);
HXDLIN( 408)			HX_VAR_NAME( Float,lowerBound2,"lowerBound");
HXDLIN( 408)			bool lowerBound3;
HXDLIN( 408)			if (hx::IsNotNull( Min1 )) {
HXLINE( 408)				lowerBound3 = hx::IsLess( Value1,Min1 );
            			}
            			else {
HXLINE( 408)				lowerBound3 = false;
            			}
HXDLIN( 408)			if (lowerBound3) {
HXLINE( 408)				lowerBound2 = Min1;
            			}
            			else {
HXLINE( 408)				lowerBound2 = Value1;
            			}
HXDLIN( 408)			Float _hx_tmp4;
HXDLIN( 408)			bool _hx_tmp5;
HXDLIN( 408)			if (hx::IsNotNull( Max3 )) {
HXLINE( 408)				_hx_tmp5 = hx::IsGreater( lowerBound2,Max3 );
            			}
            			else {
HXLINE( 408)				_hx_tmp5 = false;
            			}
HXDLIN( 408)			if (_hx_tmp5) {
HXLINE( 408)				_hx_tmp4 = Max3;
            			}
            			else {
HXLINE( 408)				_hx_tmp4 = lowerBound2;
            			}
HXDLIN( 408)			_hx_tmp3(_hx_tmp4);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,bound,(void))

void Window_obj::updateSize(){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_416_updateSize)
            	HX_STACK_THIS(this)
HXLINE( 417)		HX_VARI( Float,Value) = this->_width;
HXDLIN( 417)		HX_VARI(  ::Dynamic,Min) = this->minSize->x;
HXDLIN( 417)		HX_VARI(  ::Dynamic,Max) = this->maxSize->x;
HXDLIN( 417)		HX_VAR( Float,lowerBound);
HXDLIN( 417)		bool lowerBound1;
HXDLIN( 417)		if (hx::IsNotNull( Min )) {
HXLINE( 417)			lowerBound1 = hx::IsLess( Value,Min );
            		}
            		else {
HXLINE( 417)			lowerBound1 = false;
            		}
HXDLIN( 417)		if (lowerBound1) {
HXLINE( 417)			lowerBound = Min;
            		}
            		else {
HXLINE( 417)			lowerBound = Value;
            		}
HXDLIN( 417)		Float _hx_tmp;
HXDLIN( 417)		bool _hx_tmp1;
HXDLIN( 417)		if (hx::IsNotNull( Max )) {
HXLINE( 417)			_hx_tmp1 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 417)			_hx_tmp1 = false;
            		}
HXDLIN( 417)		if (_hx_tmp1) {
HXLINE( 417)			_hx_tmp = Max;
            		}
            		else {
HXLINE( 417)			_hx_tmp = lowerBound;
            		}
HXDLIN( 417)		this->_width = ::Std_obj::_hx_int(_hx_tmp);
HXLINE( 418)		HX_VARI_NAME( Float,Value1,"Value") = this->_height;
HXDLIN( 418)		HX_VARI_NAME(  ::Dynamic,Min1,"Min") = this->minSize->y;
HXDLIN( 418)		HX_VARI_NAME(  ::Dynamic,Max1,"Max") = this->maxSize->y;
HXDLIN( 418)		HX_VAR_NAME( Float,lowerBound2,"lowerBound");
HXDLIN( 418)		bool lowerBound3;
HXDLIN( 418)		if (hx::IsNotNull( Min1 )) {
HXLINE( 418)			lowerBound3 = hx::IsLess( Value1,Min1 );
            		}
            		else {
HXLINE( 418)			lowerBound3 = false;
            		}
HXDLIN( 418)		if (lowerBound3) {
HXLINE( 418)			lowerBound2 = Min1;
            		}
            		else {
HXLINE( 418)			lowerBound2 = Value1;
            		}
HXDLIN( 418)		Float _hx_tmp2;
HXDLIN( 418)		bool _hx_tmp3;
HXDLIN( 418)		if (hx::IsNotNull( Max1 )) {
HXLINE( 418)			_hx_tmp3 = hx::IsGreater( lowerBound2,Max1 );
            		}
            		else {
HXLINE( 418)			_hx_tmp3 = false;
            		}
HXDLIN( 418)		if (_hx_tmp3) {
HXLINE( 418)			_hx_tmp2 = Max1;
            		}
            		else {
HXLINE( 418)			_hx_tmp2 = lowerBound2;
            		}
HXDLIN( 418)		this->_height = ::Std_obj::_hx_int(_hx_tmp2);
HXLINE( 420)		this->_header->__Field(HX_("set_scaleX",cb,f8,2a,30),hx::paccDynamic)(this->_width);
HXLINE( 421)		this->_background->__Field(HX_("set_scaleX",cb,f8,2a,30),hx::paccDynamic)(this->_width);
HXLINE( 422)		 ::Dynamic _hx_tmp4 = this->_background->__Field(HX_("set_scaleY",cc,f8,2a,30),hx::paccDynamic);
HXDLIN( 422)		int _hx_tmp5 = this->_height;
HXDLIN( 422)		_hx_tmp4((_hx_tmp5 - ( (Float)(this->_header->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )));
HXLINE( 423)		this->_shadow->__Field(HX_("set_scaleX",cb,f8,2a,30),hx::paccDynamic)(this->_width);
HXLINE( 424)		this->_shadow->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic)(this->_height);
HXLINE( 425)		this->_title->__Field(HX_("set_width",69,fe,5c,f1),hx::paccDynamic)((this->_width - (int)4));
HXLINE( 426)		if (this->_resizable) {
HXLINE( 428)			 ::Dynamic _hx_tmp6 = this->_handle->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic);
HXDLIN( 428)			int _hx_tmp7 = this->_width;
HXDLIN( 428)			_hx_tmp6((_hx_tmp7 - ( (Float)(this->_handle->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) )));
HXLINE( 429)			 ::Dynamic _hx_tmp8 = this->_handle->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic);
HXDLIN( 429)			int _hx_tmp9 = this->_height;
HXDLIN( 429)			_hx_tmp8((_hx_tmp9 - ( (Float)(this->_handle->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )));
            		}
HXLINE( 431)		if (hx::IsNotNull( this->_closeButton )) {
HXLINE( 433)			 ::Dynamic _hx_tmp10 = this->_closeButton->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic);
HXDLIN( 433)			int _hx_tmp11 = this->_width;
HXDLIN( 433)			_hx_tmp10(((_hx_tmp11 - ( (Float)(this->_closeButton->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) )) - (int)3));
HXLINE( 434)			this->_closeButton->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic)((int)3);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,updateSize,(void))

void Window_obj::close(){
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_440_close)
            	HX_STACK_THIS(this)
HXLINE( 440)		this->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,close,(void))

int Window_obj::BG_COLOR;

int Window_obj::HEADER_COLOR;

Float Window_obj::HEADER_ALPHA;

int Window_obj::HEADER_HEIGHT;

int Window_obj::WINDOW_AMOUNT;


hx::ObjectPtr< Window_obj > Window_obj::__new(::String Title, ::openfl::display::BitmapData Icon,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height,hx::Null< bool >  __o_Resizable, ::openfl::geom::Rectangle Bounds,hx::Null< bool >  __o_Closable) {
	hx::ObjectPtr< Window_obj > __this = new Window_obj();
	__this->__construct(Title,Icon,__o_Width,__o_Height,__o_Resizable,Bounds,__o_Closable);
	return __this;
}

hx::ObjectPtr< Window_obj > Window_obj::__alloc(hx::Ctx *_hx_ctx,::String Title, ::openfl::display::BitmapData Icon,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height,hx::Null< bool >  __o_Resizable, ::openfl::geom::Rectangle Bounds,hx::Null< bool >  __o_Closable) {
	Window_obj *__this = (Window_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Window_obj), true, "flixel.system.debug.Window"));
	*(void **)__this = Window_obj::_hx_vtable;
	__this->__construct(Title,Icon,__o_Width,__o_Height,__o_Resizable,Bounds,__o_Closable);
	return __this;
}

Window_obj::Window_obj()
{
}

void Window_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Window);
	HX_MARK_MEMBER_NAME(minSize,"minSize");
	HX_MARK_MEMBER_NAME(maxSize,"maxSize");
	HX_MARK_MEMBER_NAME(toggleButton,"toggleButton");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_bounds,"_bounds");
	HX_MARK_MEMBER_NAME(_background,"_background");
	HX_MARK_MEMBER_NAME(_header,"_header");
	HX_MARK_MEMBER_NAME(_shadow,"_shadow");
	HX_MARK_MEMBER_NAME(_title,"_title");
	HX_MARK_MEMBER_NAME(_handle,"_handle");
	HX_MARK_MEMBER_NAME(_closeButton,"_closeButton");
	HX_MARK_MEMBER_NAME(_overHeader,"_overHeader");
	HX_MARK_MEMBER_NAME(_overHandle,"_overHandle");
	HX_MARK_MEMBER_NAME(_drag,"_drag");
	HX_MARK_MEMBER_NAME(_dragging,"_dragging");
	HX_MARK_MEMBER_NAME(_resizing,"_resizing");
	HX_MARK_MEMBER_NAME(_resizable,"_resizable");
	HX_MARK_MEMBER_NAME(_closable,"_closable");
	HX_MARK_MEMBER_NAME(_id,"_id");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Window_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(minSize,"minSize");
	HX_VISIT_MEMBER_NAME(maxSize,"maxSize");
	HX_VISIT_MEMBER_NAME(toggleButton,"toggleButton");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_bounds,"_bounds");
	HX_VISIT_MEMBER_NAME(_background,"_background");
	HX_VISIT_MEMBER_NAME(_header,"_header");
	HX_VISIT_MEMBER_NAME(_shadow,"_shadow");
	HX_VISIT_MEMBER_NAME(_title,"_title");
	HX_VISIT_MEMBER_NAME(_handle,"_handle");
	HX_VISIT_MEMBER_NAME(_closeButton,"_closeButton");
	HX_VISIT_MEMBER_NAME(_overHeader,"_overHeader");
	HX_VISIT_MEMBER_NAME(_overHandle,"_overHandle");
	HX_VISIT_MEMBER_NAME(_drag,"_drag");
	HX_VISIT_MEMBER_NAME(_dragging,"_dragging");
	HX_VISIT_MEMBER_NAME(_resizing,"_resizing");
	HX_VISIT_MEMBER_NAME(_resizable,"_resizable");
	HX_VISIT_MEMBER_NAME(_closable,"_closable");
	HX_VISIT_MEMBER_NAME(_id,"_id");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Window_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_id") ) { return hx::Val( _id); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_drag") ) { return hx::Val( _drag); }
		if (HX_FIELD_EQ(inName,"bound") ) { return hx::Val( bound_dyn()); }
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width); }
		if (HX_FIELD_EQ(inName,"_title") ) { return hx::Val( _title); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minSize") ) { return hx::Val( minSize); }
		if (HX_FIELD_EQ(inName,"maxSize") ) { return hx::Val( maxSize); }
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height); }
		if (HX_FIELD_EQ(inName,"_bounds") ) { return hx::Val( _bounds); }
		if (HX_FIELD_EQ(inName,"_header") ) { return hx::Val( _header); }
		if (HX_FIELD_EQ(inName,"_shadow") ) { return hx::Val( _shadow); }
		if (HX_FIELD_EQ(inName,"_handle") ) { return hx::Val( _handle); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"putOnTop") ) { return hx::Val( putOnTop_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_dragging") ) { return hx::Val( _dragging); }
		if (HX_FIELD_EQ(inName,"_resizing") ) { return hx::Val( _resizing); }
		if (HX_FIELD_EQ(inName,"_closable") ) { return hx::Val( _closable); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return hx::Val( onMouseUp_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_resizable") ) { return hx::Val( _resizable); }
		if (HX_FIELD_EQ(inName,"reposition") ) { return hx::Val( reposition_dyn()); }
		if (HX_FIELD_EQ(inName,"setVisible") ) { return hx::Val( setVisible_dyn()); }
		if (HX_FIELD_EQ(inName,"updateSize") ) { return hx::Val( updateSize_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { return hx::Val( _background); }
		if (HX_FIELD_EQ(inName,"_overHeader") ) { return hx::Val( _overHeader); }
		if (HX_FIELD_EQ(inName,"_overHandle") ) { return hx::Val( _overHandle); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return hx::Val( onMouseMove_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return hx::Val( onMouseDown_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toggleButton") ) { return hx::Val( toggleButton); }
		if (HX_FIELD_EQ(inName,"_closeButton") ) { return hx::Val( _closeButton); }
		if (HX_FIELD_EQ(inName,"updateBounds") ) { return hx::Val( updateBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"loadSaveData") ) { return hx::Val( loadSaveData_dyn()); }
		if (HX_FIELD_EQ(inName,"initSaveData") ) { return hx::Val( initSaveData_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toggleVisible") ) { return hx::Val( toggleVisible_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Window_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"WINDOW_AMOUNT") ) { outValue = WINDOW_AMOUNT; return true; }
	}
	return false;
}

hx::Val Window_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_id") ) { _id=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_drag") ) { _drag=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_title") ) { _title=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minSize") ) { minSize=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxSize") ) { maxSize=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bounds") ) { _bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_header") ) { _header=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_shadow") ) { _shadow=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_handle") ) { _handle=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_dragging") ) { _dragging=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_resizing") ) { _resizing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_closable") ) { _closable=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_resizable") ) { _resizable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { _background=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_overHeader") ) { _overHeader=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_overHandle") ) { _overHandle=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toggleButton") ) { toggleButton=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_closeButton") ) { _closeButton=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Window_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"WINDOW_AMOUNT") ) { WINDOW_AMOUNT=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Window_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("minSize","\x73","\x0f","\x5d","\x3d"));
	outFields->push(HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc"));
	outFields->push(HX_HCSTRING("toggleButton","\xa6","\x7c","\xfa","\x7f"));
	outFields->push(HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"));
	outFields->push(HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"));
	outFields->push(HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4"));
	outFields->push(HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"));
	outFields->push(HX_HCSTRING("_header","\x2c","\x1b","\x77","\x6b"));
	outFields->push(HX_HCSTRING("_shadow","\x7f","\xd9","\x97","\x8b"));
	outFields->push(HX_HCSTRING("_title","\xd9","\x5c","\x22","\x0c"));
	outFields->push(HX_HCSTRING("_handle","\x47","\x95","\x74","\x26"));
	outFields->push(HX_HCSTRING("_closeButton","\xcb","\x35","\x3a","\xfa"));
	outFields->push(HX_HCSTRING("_overHeader","\x20","\x93","\x24","\xb5"));
	outFields->push(HX_HCSTRING("_overHandle","\x3b","\x0d","\x22","\x70"));
	outFields->push(HX_HCSTRING("_drag","\xd3","\x47","\x81","\xf5"));
	outFields->push(HX_HCSTRING("_dragging","\x2e","\x34","\x22","\x7f"));
	outFields->push(HX_HCSTRING("_resizing","\x90","\x1f","\x16","\xe9"));
	outFields->push(HX_HCSTRING("_resizable","\x2c","\xb3","\xf2","\x04"));
	outFields->push(HX_HCSTRING("_closable","\x86","\x63","\x40","\xca"));
	outFields->push(HX_HCSTRING("_id","\xfa","\x71","\x48","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Window_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*openfl::geom::Point*/ ,(int)offsetof(Window_obj,minSize),HX_HCSTRING("minSize","\x73","\x0f","\x5d","\x3d")},
	{hx::fsObject /*openfl::geom::Point*/ ,(int)offsetof(Window_obj,maxSize),HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc")},
	{hx::fsObject /*::flixel::_hx_system::ui::FlxSystemButton*/ ,(int)offsetof(Window_obj,toggleButton),HX_HCSTRING("toggleButton","\xa6","\x7c","\xfa","\x7f")},
	{hx::fsInt,(int)offsetof(Window_obj,_width),HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6")},
	{hx::fsInt,(int)offsetof(Window_obj,_height),HX_HCSTRING("_height","\x86","\x19","\xc3","\x70")},
	{hx::fsObject /*openfl::geom::Rectangle*/ ,(int)offsetof(Window_obj,_bounds),HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4")},
	{hx::fsObject /*openfl::display::Bitmap*/ ,(int)offsetof(Window_obj,_background),HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8")},
	{hx::fsObject /*openfl::display::Bitmap*/ ,(int)offsetof(Window_obj,_header),HX_HCSTRING("_header","\x2c","\x1b","\x77","\x6b")},
	{hx::fsObject /*openfl::display::Bitmap*/ ,(int)offsetof(Window_obj,_shadow),HX_HCSTRING("_shadow","\x7f","\xd9","\x97","\x8b")},
	{hx::fsObject /*openfl::text::TextField*/ ,(int)offsetof(Window_obj,_title),HX_HCSTRING("_title","\xd9","\x5c","\x22","\x0c")},
	{hx::fsObject /*openfl::display::Bitmap*/ ,(int)offsetof(Window_obj,_handle),HX_HCSTRING("_handle","\x47","\x95","\x74","\x26")},
	{hx::fsObject /*::flixel::_hx_system::ui::FlxSystemButton*/ ,(int)offsetof(Window_obj,_closeButton),HX_HCSTRING("_closeButton","\xcb","\x35","\x3a","\xfa")},
	{hx::fsBool,(int)offsetof(Window_obj,_overHeader),HX_HCSTRING("_overHeader","\x20","\x93","\x24","\xb5")},
	{hx::fsBool,(int)offsetof(Window_obj,_overHandle),HX_HCSTRING("_overHandle","\x3b","\x0d","\x22","\x70")},
	{hx::fsObject /*openfl::geom::Point*/ ,(int)offsetof(Window_obj,_drag),HX_HCSTRING("_drag","\xd3","\x47","\x81","\xf5")},
	{hx::fsBool,(int)offsetof(Window_obj,_dragging),HX_HCSTRING("_dragging","\x2e","\x34","\x22","\x7f")},
	{hx::fsBool,(int)offsetof(Window_obj,_resizing),HX_HCSTRING("_resizing","\x90","\x1f","\x16","\xe9")},
	{hx::fsBool,(int)offsetof(Window_obj,_resizable),HX_HCSTRING("_resizable","\x2c","\xb3","\xf2","\x04")},
	{hx::fsBool,(int)offsetof(Window_obj,_closable),HX_HCSTRING("_closable","\x86","\x63","\x40","\xca")},
	{hx::fsInt,(int)offsetof(Window_obj,_id),HX_HCSTRING("_id","\xfa","\x71","\x48","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Window_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Window_obj::BG_COLOR,HX_HCSTRING("BG_COLOR","\x09","\x4c","\xa7","\x0b")},
	{hx::fsInt,(void *) &Window_obj::HEADER_COLOR,HX_HCSTRING("HEADER_COLOR","\xd1","\xcd","\x7c","\x95")},
	{hx::fsFloat,(void *) &Window_obj::HEADER_ALPHA,HX_HCSTRING("HEADER_ALPHA","\xcc","\x03","\xb7","\x6c")},
	{hx::fsInt,(void *) &Window_obj::HEADER_HEIGHT,HX_HCSTRING("HEADER_HEIGHT","\x99","\x8b","\x7c","\x73")},
	{hx::fsInt,(void *) &Window_obj::WINDOW_AMOUNT,HX_HCSTRING("WINDOW_AMOUNT","\x87","\x6d","\x2e","\x4a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Window_obj_sMemberFields[] = {
	HX_HCSTRING("minSize","\x73","\x0f","\x5d","\x3d"),
	HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc"),
	HX_HCSTRING("toggleButton","\xa6","\x7c","\xfa","\x7f"),
	HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"),
	HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"),
	HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4"),
	HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"),
	HX_HCSTRING("_header","\x2c","\x1b","\x77","\x6b"),
	HX_HCSTRING("_shadow","\x7f","\xd9","\x97","\x8b"),
	HX_HCSTRING("_title","\xd9","\x5c","\x22","\x0c"),
	HX_HCSTRING("_handle","\x47","\x95","\x74","\x26"),
	HX_HCSTRING("_closeButton","\xcb","\x35","\x3a","\xfa"),
	HX_HCSTRING("_overHeader","\x20","\x93","\x24","\xb5"),
	HX_HCSTRING("_overHandle","\x3b","\x0d","\x22","\x70"),
	HX_HCSTRING("_drag","\xd3","\x47","\x81","\xf5"),
	HX_HCSTRING("_dragging","\x2e","\x34","\x22","\x7f"),
	HX_HCSTRING("_resizing","\x90","\x1f","\x16","\xe9"),
	HX_HCSTRING("_resizable","\x2c","\xb3","\xf2","\x04"),
	HX_HCSTRING("_closable","\x86","\x63","\x40","\xca"),
	HX_HCSTRING("_id","\xfa","\x71","\x48","\x00"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("reposition","\x5c","\x6f","\x62","\xa5"),
	HX_HCSTRING("updateBounds","\x5e","\x2d","\xe1","\x65"),
	HX_HCSTRING("setVisible","\xf0","\x9c","\x03","\xf6"),
	HX_HCSTRING("toggleVisible","\x3e","\xbb","\xe1","\x53"),
	HX_HCSTRING("putOnTop","\x67","\x79","\x64","\x2e"),
	HX_HCSTRING("loadSaveData","\x4d","\xdc","\x85","\xaf"),
	HX_HCSTRING("initSaveData","\x37","\x77","\xd3","\x9a"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("onMouseMove","\xb7","\x7e","\xf8","\x16"),
	HX_HCSTRING("onMouseDown","\x08","\x94","\x05","\x11"),
	HX_HCSTRING("onMouseUp","\x81","\xac","\x1d","\x98"),
	HX_HCSTRING("bound","\x3e","\xb0","\xfc","\xb6"),
	HX_HCSTRING("updateSize","\x6a","\x8b","\x08","\x05"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	::String(null()) };

static void Window_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Window_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Window_obj::BG_COLOR,"BG_COLOR");
	HX_MARK_MEMBER_NAME(Window_obj::HEADER_COLOR,"HEADER_COLOR");
	HX_MARK_MEMBER_NAME(Window_obj::HEADER_ALPHA,"HEADER_ALPHA");
	HX_MARK_MEMBER_NAME(Window_obj::HEADER_HEIGHT,"HEADER_HEIGHT");
	HX_MARK_MEMBER_NAME(Window_obj::WINDOW_AMOUNT,"WINDOW_AMOUNT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Window_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Window_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Window_obj::BG_COLOR,"BG_COLOR");
	HX_VISIT_MEMBER_NAME(Window_obj::HEADER_COLOR,"HEADER_COLOR");
	HX_VISIT_MEMBER_NAME(Window_obj::HEADER_ALPHA,"HEADER_ALPHA");
	HX_VISIT_MEMBER_NAME(Window_obj::HEADER_HEIGHT,"HEADER_HEIGHT");
	HX_VISIT_MEMBER_NAME(Window_obj::WINDOW_AMOUNT,"WINDOW_AMOUNT");
};

#endif

hx::Class Window_obj::__mClass;

static ::String Window_obj_sStaticFields[] = {
	HX_HCSTRING("BG_COLOR","\x09","\x4c","\xa7","\x0b"),
	HX_HCSTRING("HEADER_COLOR","\xd1","\xcd","\x7c","\x95"),
	HX_HCSTRING("HEADER_ALPHA","\xcc","\x03","\xb7","\x6c"),
	HX_HCSTRING("HEADER_HEIGHT","\x99","\x8b","\x7c","\x73"),
	HX_HCSTRING("WINDOW_AMOUNT","\x87","\x6d","\x2e","\x4a"),
	::String(null())
};

void Window_obj::__register()
{
	hx::Object *dummy = new Window_obj;
	Window_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.debug.Window","\x98","\x06","\x51","\xd3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Window_obj::__GetStatic;
	__mClass->mSetStaticField = &Window_obj::__SetStatic;
	__mClass->mMarkFunc = Window_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Window_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Window_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Window_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Window_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Window_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Window_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Window_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_29_boot)
HXLINE(  29)		BG_COLOR = (int)-580952225;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_31_boot)
HXLINE(  31)		HEADER_COLOR = (int)-1157627904;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_32_boot)
HXLINE(  32)		HEADER_ALPHA = ((Float)0.8);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_33_boot)
HXLINE(  33)		HEADER_HEIGHT = (int)15;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4e51d5a8805713a4_38_boot)
HXLINE(  38)		WINDOW_AMOUNT = (int)0;
            	}
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
