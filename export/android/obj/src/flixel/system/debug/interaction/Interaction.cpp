// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicInteractive
#include <flixel/system/debug/GraphicInteractive.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Eraser
#include <flixel/system/debug/interaction/tools/Eraser.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Mover
#include <flixel/system/debug/interaction/tools/Mover.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Pointer
#include <flixel/system/debug/interaction/tools/Pointer.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool
#include <flixel/system/debug/interaction/tools/Tool.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_33_new,"flixel.system.debug.interaction.Interaction","new",0xfa21d580,"flixel.system.debug.interaction.Interaction.new","flixel/system/debug/interaction/Interaction.hx",33,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_84_handleDebuggerVisibilityChanged,"flixel.system.debug.interaction.Interaction","handleDebuggerVisibilityChanged",0x3dea5c39,"flixel.system.debug.interaction.Interaction.handleDebuggerVisibilityChanged","flixel/system/debug/interaction/Interaction.hx",84,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_91_updateMouse,"flixel.system.debug.interaction.Interaction","updateMouse",0x7f05a47c,"flixel.system.debug.interaction.Interaction.updateMouse","flixel/system/debug/interaction/Interaction.hx",91,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_127_handleMouseClick,"flixel.system.debug.interaction.Interaction","handleMouseClick",0x6baf608b,"flixel.system.debug.interaction.Interaction.handleMouseClick","flixel/system/debug/interaction/Interaction.hx",127,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_143_handleMouseInDebugger,"flixel.system.debug.interaction.Interaction","handleMouseInDebugger",0xefc0f203,"flixel.system.debug.interaction.Interaction.handleMouseInDebugger","flixel/system/debug/interaction/Interaction.hx",143,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_159_handleKeyEvent,"flixel.system.debug.interaction.Interaction","handleKeyEvent",0xda0964a3,"flixel.system.debug.interaction.Interaction.handleKeyEvent","flixel/system/debug/interaction/Interaction.hx",159,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_166_addTool,"flixel.system.debug.interaction.Interaction","addTool",0xefc5b339,"flixel.system.debug.interaction.Interaction.addTool","flixel/system/debug/interaction/Interaction.hx",166,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_186_destroy,"flixel.system.debug.interaction.Interaction","destroy",0x8b0d421a,"flixel.system.debug.interaction.Interaction.destroy","flixel/system/debug/interaction/Interaction.hx",186,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_218_isActive,"flixel.system.debug.interaction.Interaction","isActive",0xbe5b4430,"flixel.system.debug.interaction.Interaction.isActive","flixel/system/debug/interaction/Interaction.hx",218,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_222_update,"flixel.system.debug.interaction.Interaction","update",0x852f74e9,"flixel.system.debug.interaction.Interaction.update","flixel/system/debug/interaction/Interaction.hx",222,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_240_postDraw,"flixel.system.debug.interaction.Interaction","postDraw",0x505af364,"flixel.system.debug.interaction.Interaction.postDraw","flixel/system/debug/interaction/Interaction.hx",240,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_251_getDebugGraphics,"flixel.system.debug.interaction.Interaction","getDebugGraphics",0xd1fe02a8,"flixel.system.debug.interaction.Interaction.getDebugGraphics","flixel/system/debug/interaction/Interaction.hx",251,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_266_drawItemsSelection,"flixel.system.debug.interaction.Interaction","drawItemsSelection",0xcdd9aa30,"flixel.system.debug.interaction.Interaction.drawItemsSelection","flixel/system/debug/interaction/Interaction.hx",266,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_289_getTool,"flixel.system.debug.interaction.Interaction","getTool",0x860b202e,"flixel.system.debug.interaction.Interaction.getTool","flixel/system/debug/interaction/Interaction.hx",289,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_297_toggleVisible,"flixel.system.debug.interaction.Interaction","toggleVisible",0x4f15685e,"flixel.system.debug.interaction.Interaction.toggleVisible","flixel/system/debug/interaction/Interaction.hx",297,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_309_registerCustomCursor,"flixel.system.debug.interaction.Interaction","registerCustomCursor",0xf323974a,"flixel.system.debug.interaction.Interaction.registerCustomCursor","flixel/system/debug/interaction/Interaction.hx",309,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_325_updateCustomCursors,"flixel.system.debug.interaction.Interaction","updateCustomCursors",0x218c1283,"flixel.system.debug.interaction.Interaction.updateCustomCursors","flixel/system/debug/interaction/Interaction.hx",325,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_367_saveSystemCursorInfo,"flixel.system.debug.interaction.Interaction","saveSystemCursorInfo",0x622efa70,"flixel.system.debug.interaction.Interaction.saveSystemCursorInfo","flixel/system/debug/interaction/Interaction.hx",367,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_375_restoreSystemCursor,"flixel.system.debug.interaction.Interaction","restoreSystemCursor",0x6747acb3,"flixel.system.debug.interaction.Interaction.restoreSystemCursor","flixel/system/debug/interaction/Interaction.hx",375,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_384_setActiveTool,"flixel.system.debug.interaction.Interaction","setActiveTool",0x92d80fa0,"flixel.system.debug.interaction.Interaction.setActiveTool","flixel/system/debug/interaction/Interaction.hx",384,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_418_setSystemCursorVisibility,"flixel.system.debug.interaction.Interaction","setSystemCursorVisibility",0x3bad5fb9,"flixel.system.debug.interaction.Interaction.setSystemCursorVisibility","flixel/system/debug/interaction/Interaction.hx",418,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_422_setToolsCursorVisibility,"flixel.system.debug.interaction.Interaction","setToolsCursorVisibility",0x9dd4e861,"flixel.system.debug.interaction.Interaction.setToolsCursorVisibility","flixel/system/debug/interaction/Interaction.hx",422,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_440_clearSelection,"flixel.system.debug.interaction.Interaction","clearSelection",0x1e241bdf,"flixel.system.debug.interaction.Interaction.clearSelection","flixel/system/debug/interaction/Interaction.hx",440,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_444_keyPressed,"flixel.system.debug.interaction.Interaction","keyPressed",0xc6e951a3,"flixel.system.debug.interaction.Interaction.keyPressed","flixel/system/debug/interaction/Interaction.hx",444,0x4548a912)
HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_450_keyJustPressed,"flixel.system.debug.interaction.Interaction","keyJustPressed",0x9fbba157,"flixel.system.debug.interaction.Interaction.keyJustPressed","flixel/system/debug/interaction/Interaction.hx",450,0x4548a912)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace interaction{

void Interaction_obj::__construct( ::openfl::display::Sprite container){
            	HX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_33_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(container,"container")
HXLINE(  52)		this->_flixelPointer =  ::flixel::input::FlxPointer_obj::__alloc( HX_CTX );
HXLINE(  51)		this->_debuggerInteraction = false;
HXLINE(  48)		this->_keysUp =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  47)		this->_keysDown =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  46)		this->_turn = (int)2;
HXLINE(  45)		this->_tools = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  41)		this->pointerPressed = false;
HXLINE(  40)		this->pointerJustReleased = false;
HXLINE(  39)		this->pointerJustPressed = false;
HXLINE(  38)		this->flixelPointer =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  36)		this->selectedItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  56)		super::__construct(HX_("Tools",fb,01,5c,a7), ::flixel::_hx_system::debug::GraphicInteractive_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),(int)40,(int)25,false,null(),null());
HXLINE(  57)		this->reposition((int)2,(int)100);
HXLINE(  58)		this->_container = container;
HXLINE(  60)		this->_customCursor =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  61)		this->_customCursor->mouseEnabled = false;
HXLINE(  62)		this->_container->addChild(this->_customCursor);
HXLINE(  65)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Pointer_obj::__alloc( HX_CTX ));
HXLINE(  66)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Mover_obj::__alloc( HX_CTX ));
HXLINE(  67)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Eraser_obj::__alloc( HX_CTX ));
HXLINE(  69)		::flixel::FlxG_obj::signals->postDraw->add(this->postDraw_dyn());
HXLINE(  70)		::flixel::FlxG_obj::debugger->visibilityChanged->add(this->handleDebuggerVisibilityChanged_dyn());
HXLINE(  72)		::openfl::Lib_obj::current->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->updateMouse_dyn(),null(),null(),null());
HXLINE(  73)		::openfl::Lib_obj::current->stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->handleMouseClick_dyn(),null(),null(),null());
HXLINE(  74)		::openfl::Lib_obj::current->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->handleMouseClick_dyn(),null(),null(),null());
HXLINE(  75)		::openfl::Lib_obj::current->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->handleKeyEvent_dyn(),null(),null(),null());
HXLINE(  76)		::openfl::Lib_obj::current->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->handleKeyEvent_dyn(),null(),null(),null());
HXLINE(  78)		this->_container->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->handleMouseInDebugger_dyn(),null(),null(),null());
HXLINE(  79)		this->_container->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->handleMouseInDebugger_dyn(),null(),null(),null());
            	}

Dynamic Interaction_obj::__CreateEmpty() { return new Interaction_obj; }

void *Interaction_obj::_hx_vtable = 0;

Dynamic Interaction_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Interaction_obj > _hx_result = new Interaction_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Interaction_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0f610e14) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0f610e14;
	} else {
		return inClassId==(int)0x619ca9b8;
	}
}

void Interaction_obj::handleDebuggerVisibilityChanged(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_84_handleDebuggerVisibilityChanged)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,handleDebuggerVisibilityChanged,(void))

void Interaction_obj::updateMouse( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_91_updateMouse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(  97)		HX_VARI( Float,offsetX) = ((Float)0.0);
HXLINE(  98)		HX_VARI( Float,offsetY) = ((Float)0.0);
HXLINE( 102)		if (hx::IsNotNull( this->activeTool )) {
HXLINE( 104)			HX_VARI(  ::openfl::display::BitmapData,cursorIcon) = this->activeTool->cursor;
HXLINE( 105)			if (hx::IsNotNull( cursorIcon )) {
HXLINE( 107)				offsetX = ((Float)((Float)cursorIcon->width / (Float)::flixel::FlxG_obj::scaleMode->scale->x) / (Float)(int)2);
HXLINE( 108)				offsetY = ((Float)((Float)cursorIcon->height / (Float)::flixel::FlxG_obj::scaleMode->scale->y) / (Float)(int)2);
            			}
            		}
HXLINE( 112)		this->_customCursor->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic)((event->stageX + offsetX));
HXLINE( 113)		this->_customCursor->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic)((event->stageY + offsetY));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,updateMouse,(void))

void Interaction_obj::handleMouseClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_127_handleMouseClick)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 130)		if (::Std_obj::is(event->target,hx::ClassOf< ::flixel::_hx_system::ui::FlxSystemButton >())) {
HXLINE( 131)			return;
            		}
HXLINE( 133)		this->pointerJustPressed = (event->type == HX_("mouseDown",27,b1,c2,ee));
HXLINE( 134)		this->pointerJustReleased = (event->type == HX_("mouseUp",e0,f3,72,c0));
HXLINE( 136)		if (this->pointerJustPressed) {
HXLINE( 137)			this->pointerPressed = true;
            		}
            		else {
HXLINE( 138)			if (this->pointerJustReleased) {
HXLINE( 139)				this->pointerPressed = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleMouseClick,(void))

void Interaction_obj::handleMouseInDebugger( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_143_handleMouseInDebugger)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 146)		if (!(this->isActive())) {
HXLINE( 147)			return;
            		}
HXLINE( 149)		if ((event->type == HX_("mouseOver",19,4a,0d,f6))) {
HXLINE( 150)			this->_debuggerInteraction = true;
            		}
            		else {
HXLINE( 151)			if ((event->type == HX_("mouseOut",69,e7,1d,a4))) {
HXLINE( 152)				this->_debuggerInteraction = false;
            			}
            		}
HXLINE( 154)		event->stopPropagation();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleMouseInDebugger,(void))

void Interaction_obj::handleKeyEvent( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_159_handleKeyEvent)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 159)		if ((event->type == HX_("keyDown",a1,69,47,9c))) {
HXLINE( 160)			this->_keysDown->set(event->keyCode,this->_turn);
            		}
            		else {
HXLINE( 161)			if ((event->type == HX_("keyUp",da,b9,fe,de))) {
HXLINE( 162)				this->_keysUp->set(event->keyCode,this->_turn);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleKeyEvent,(void))

void Interaction_obj::addTool( ::flixel::_hx_system::debug::interaction::tools::Tool tool){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_166_addTool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tool,"tool")
HXLINE( 167)		tool->init(hx::ObjectPtr<OBJ_>(this));
HXLINE( 168)		this->_tools->push(tool);
HXLINE( 171)		HX_VARI(  ::flixel::_hx_system::ui::FlxSystemButton,button) = tool->button;
HXLINE( 172)		if (hx::IsNull( button )) {
HXLINE( 173)			return;
            		}
HXLINE( 175)		button->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic)(((int)-10 + (this->_tools->length * (int)20)));
HXLINE( 176)		button->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic)((int)20);
HXLINE( 177)		this->addChild(button);
HXLINE( 179)		this->resize(::Math_obj::max((this->_tools->length * (int)20),(int)55),(int)35);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,addTool,(void))

void Interaction_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_186_destroy)
            	HX_STACK_THIS(this)
HXLINE( 187)		::flixel::FlxG_obj::signals->postDraw->remove(this->postDraw_dyn());
HXLINE( 188)		::flixel::FlxG_obj::debugger->visibilityChanged->remove(this->handleDebuggerVisibilityChanged_dyn());
HXLINE( 190)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->updateMouse_dyn(),null());
HXLINE( 191)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->handleMouseClick_dyn(),null());
HXLINE( 192)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->handleMouseClick_dyn(),null());
HXLINE( 193)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleKeyEvent_dyn(),null());
HXLINE( 194)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->handleKeyEvent_dyn(),null());
HXLINE( 196)		if (hx::IsNotNull( this->_container )) {
HXLINE( 198)			this->_container->removeEventListener(HX_("mouseOver",19,4a,0d,f6),this->handleMouseInDebugger_dyn(),null());
HXLINE( 199)			this->_container->removeEventListener(HX_("mouseOut",69,e7,1d,a4),this->handleMouseInDebugger_dyn(),null());
            		}
HXLINE( 202)		if (hx::IsNotNull( this->_customCursor )) {
HXLINE( 204)			this->_customCursor->parent->removeChild(this->_customCursor);
HXLINE( 205)			this->_customCursor = null();
            		}
HXLINE( 208)		this->_tools = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tools);
HXLINE( 209)		this->selectedItems = ( ( ::flixel::group::FlxTypedGroup)(::flixel::util::FlxDestroyUtil_obj::destroy(this->selectedItems)) );
HXLINE( 210)		this->flixelPointer = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->flixelPointer)) );
HXLINE( 212)		this->_keysDown = null();
HXLINE( 213)		this->_keysUp = null();
            	}


bool Interaction_obj::isActive(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_218_isActive)
            	HX_STACK_THIS(this)
HXLINE( 218)		if (::flixel::FlxG_obj::debugger->visible) {
HXLINE( 218)			return hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_visible",89,d8,1e,29),hx::paccDynamic)();
            		}
            		else {
HXLINE( 218)			return false;
            		}
HXDLIN( 218)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,isActive,return )

void Interaction_obj::update(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_222_update)
            	HX_STACK_THIS(this)
HXLINE( 223)		if (!(this->isActive())) {
HXLINE( 224)			return;
            		}
HXLINE( 228)		{
HXLINE( 228)			HX_VARI( int,_g) = (int)0;
HXDLIN( 228)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tools;
HXDLIN( 228)			while((_g < _g1->length)){
HXLINE( 228)				HX_VARI(  ::flixel::_hx_system::debug::interaction::tools::Tool,tool) = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 228)				_g = (_g + (int)1);
HXLINE( 229)				tool->update();
            			}
            		}
HXLINE( 231)		this->pointerJustPressed = false;
HXLINE( 232)		this->pointerJustReleased = false;
HXLINE( 233)		this->_turn++;
            	}


void Interaction_obj::postDraw(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_240_postDraw)
            	HX_STACK_THIS(this)
HXLINE( 241)		if (!(this->isActive())) {
HXLINE( 242)			return;
            		}
HXLINE( 244)		{
HXLINE( 244)			HX_VARI( int,_g) = (int)0;
HXDLIN( 244)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tools;
HXDLIN( 244)			while((_g < _g1->length)){
HXLINE( 244)				_g = (_g + (int)1);
            			}
            		}
HXLINE( 247)		this->drawItemsSelection();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,postDraw,(void))

 ::openfl::display::Graphics Interaction_obj::getDebugGraphics(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_251_getDebugGraphics)
            	HX_STACK_THIS(this)
HXLINE( 252)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 254)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXLINE( 255)			return ::flixel::util::FlxSpriteUtil_obj::flashGfx;
            		}
HXLINE( 262)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,getDebugGraphics,return )

void Interaction_obj::drawItemsSelection(){
            	HX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_266_drawItemsSelection)
            	HX_STACK_THIS(this)
HXLINE( 267)		HX_VARI(  ::openfl::display::Graphics,gfx) = this->getDebugGraphics();
HXLINE( 268)		if (hx::IsNull( gfx )) {
HXLINE( 269)			return;
            		}
HXLINE( 271)		{
HXLINE( 271)			HX_VARI(  ::flixel::group::FlxTypedGroupIterator,member) =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->selectedItems->members,null());
HXDLIN( 271)			while(member->hasNext()){
HXLINE( 271)				HX_VARI_NAME(  ::flixel::FlxObject,member1,"member") = member->next().StaticCast<  ::flixel::FlxObject >();
HXLINE( 273)				bool _hx_tmp;
HXDLIN( 273)				bool _hx_tmp1;
HXDLIN( 273)				if (hx::IsNotNull( member1 )) {
HXLINE( 273)					_hx_tmp1 = hx::IsNotNull( member1->scrollFactor );
            				}
            				else {
HXLINE( 273)					_hx_tmp1 = false;
            				}
HXDLIN( 273)				if (_hx_tmp1) {
HXLINE( 273)					_hx_tmp = member1->isOnScreen(null());
            				}
            				else {
HXLINE( 273)					_hx_tmp = false;
            				}
HXDLIN( 273)				if (_hx_tmp) {
HXLINE( 276)					gfx->lineStyle(((Float)1.5),(int)16711680,null(),null(),null(),null(),null(),null());
HXLINE( 277)					Float _hx_tmp2 = (member1->x - ::flixel::FlxG_obj::camera->scroll->x);
HXLINE( 278)					Float _hx_tmp3 = (member1->y - ::flixel::FlxG_obj::camera->scroll->y);
HXLINE( 279)					Float _hx_tmp4 = member1->get_width();
HXLINE( 277)					gfx->drawRect(_hx_tmp2,_hx_tmp3,_hx_tmp4,member1->get_height());
            				}
            			}
            		}
HXLINE( 284)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 285)			::flixel::FlxG_obj::camera->buffer->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,drawItemsSelection,(void))

 ::flixel::_hx_system::debug::interaction::tools::Tool Interaction_obj::getTool(hx::Class className){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_289_getTool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(className,"className")
HXLINE( 290)		{
HXLINE( 290)			HX_VARI( int,_g) = (int)0;
HXDLIN( 290)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tools;
HXDLIN( 290)			while((_g < _g1->length)){
HXLINE( 290)				HX_VARI(  ::flixel::_hx_system::debug::interaction::tools::Tool,tool) = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 290)				_g = (_g + (int)1);
HXLINE( 291)				if (::Std_obj::is(tool,className)) {
HXLINE( 292)					return tool;
            				}
            			}
            		}
HXLINE( 293)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,getTool,return )

void Interaction_obj::toggleVisible(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_297_toggleVisible)
            	HX_STACK_THIS(this)
HXLINE( 298)		this->super::toggleVisible();
HXLINE( 300)		if (!(( (bool)(hx::ObjectPtr<OBJ_>(this)->__Field(HX_("get_visible",89,d8,1e,29),hx::paccDynamic)()) ))) {
HXLINE( 303)			this->setActiveTool(null());
            		}
            	}


void Interaction_obj::registerCustomCursor(::String name, ::openfl::display::BitmapData icon){
            	HX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_309_registerCustomCursor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(icon,"icon")
HXLINE( 310)		if (hx::IsNull( icon )) {
HXLINE( 311)			return;
            		}
HXLINE( 316)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 317)		sprite->__Field(HX_("set_visible",95,df,8b,33),hx::paccDynamic)(false);
HXLINE( 318)		sprite->__Field(HX_("set_name",48,87,17,77),hx::paccDynamic)(name);
HXLINE( 319)		sprite->addChild( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,icon,null(),null()));
HXLINE( 320)		this->_customCursor->addChild(sprite);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interaction_obj,registerCustomCursor,(void))

void Interaction_obj::updateCustomCursors(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_325_updateCustomCursors)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,updateCustomCursors,(void))

void Interaction_obj::saveSystemCursorInfo(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_367_saveSystemCursorInfo)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,saveSystemCursorInfo,(void))

void Interaction_obj::restoreSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_375_restoreSystemCursor)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,restoreSystemCursor,(void))

void Interaction_obj::setActiveTool( ::flixel::_hx_system::debug::interaction::tools::Tool value){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_384_setActiveTool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 385)		if (hx::IsNotNull( this->activeTool )) {
HXLINE( 388)			this->activeTool->button->set_toggled(true);
            		}
HXLINE( 391)		if (hx::IsEq( this->activeTool,value )) {
HXLINE( 392)			value = null();
            		}
HXLINE( 394)		this->activeTool = value;
HXLINE( 396)		if (hx::IsNotNull( this->activeTool )) {
HXLINE( 399)			this->setToolsCursorVisibility(true);
HXLINE( 401)			this->activeTool->button->set_toggled(false);
HXLINE( 402)			this->activeTool->activate();
            		}
            		else {
HXLINE( 409)			this->setSystemCursorVisibility(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setActiveTool,(void))

void Interaction_obj::setSystemCursorVisibility(bool status){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_418_setSystemCursorVisibility)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(status,"status")
HXLINE( 418)		this->_customCursor->__Field(HX_("set_visible",95,df,8b,33),hx::paccDynamic)(!(status));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setSystemCursorVisibility,(void))

void Interaction_obj::setToolsCursorVisibility(bool status){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_422_setToolsCursorVisibility)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(status,"status")
HXLINE( 426)		this->_customCursor->__Field(HX_("set_visible",95,df,8b,33),hx::paccDynamic)(status);
HXLINE( 428)		if (status) {
HXLINE( 429)			return;
            		}
HXLINE( 434)		{
HXLINE( 434)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 434)			HX_VARI( int,_g) = ( (int)(this->_customCursor->__Field(HX_("get_numChildren",3c,21,62,1d),hx::paccDynamic)()) );
HXDLIN( 434)			while((_g1 < _g)){
HXLINE( 434)				_g1 = (_g1 + (int)1);
HXLINE( 435)				this->_customCursor->getChildAt((_g1 - (int)1))->__Field(HX_("set_visible",95,df,8b,33),hx::paccDynamic)(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setToolsCursorVisibility,(void))

void Interaction_obj::clearSelection(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_440_clearSelection)
            	HX_STACK_THIS(this)
HXLINE( 440)		this->selectedItems->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,clearSelection,(void))

bool Interaction_obj::keyPressed(int key){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_444_keyPressed)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
HXLINE( 445)		HX_VAR( int,value);
HXDLIN( 445)		if (hx::IsNull( this->_keysDown->get(key) )) {
HXLINE( 445)			value = (int)0;
            		}
            		else {
HXLINE( 445)			value = ( (int)(this->_keysDown->get(key)) );
            		}
HXLINE( 446)		return (this->_turn <= value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,keyPressed,return )

bool Interaction_obj::keyJustPressed(int key){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_450_keyJustPressed)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
HXLINE( 451)		HX_VAR( int,value);
HXDLIN( 451)		if (hx::IsNull( this->_keysUp->get(key) )) {
HXLINE( 451)			value = (int)0;
            		}
            		else {
HXLINE( 451)			value = ( (int)(this->_keysUp->get(key)) );
            		}
HXLINE( 452)		return ((this->_turn - value) == (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,keyJustPressed,return )


hx::ObjectPtr< Interaction_obj > Interaction_obj::__new( ::openfl::display::Sprite container) {
	hx::ObjectPtr< Interaction_obj > __this = new Interaction_obj();
	__this->__construct(container);
	return __this;
}

hx::ObjectPtr< Interaction_obj > Interaction_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Sprite container) {
	Interaction_obj *__this = (Interaction_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Interaction_obj), true, "flixel.system.debug.interaction.Interaction"));
	*(void **)__this = Interaction_obj::_hx_vtable;
	__this->__construct(container);
	return __this;
}

Interaction_obj::Interaction_obj()
{
}

void Interaction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Interaction);
	HX_MARK_MEMBER_NAME(activeTool,"activeTool");
	HX_MARK_MEMBER_NAME(selectedItems,"selectedItems");
	HX_MARK_MEMBER_NAME(flixelPointer,"flixelPointer");
	HX_MARK_MEMBER_NAME(pointerJustPressed,"pointerJustPressed");
	HX_MARK_MEMBER_NAME(pointerJustReleased,"pointerJustReleased");
	HX_MARK_MEMBER_NAME(pointerPressed,"pointerPressed");
	HX_MARK_MEMBER_NAME(_container,"_container");
	HX_MARK_MEMBER_NAME(_customCursor,"_customCursor");
	HX_MARK_MEMBER_NAME(_tools,"_tools");
	HX_MARK_MEMBER_NAME(_turn,"_turn");
	HX_MARK_MEMBER_NAME(_keysDown,"_keysDown");
	HX_MARK_MEMBER_NAME(_keysUp,"_keysUp");
	HX_MARK_MEMBER_NAME(_wasMouseVisible,"_wasMouseVisible");
	HX_MARK_MEMBER_NAME(_wasUsingSystemCursor,"_wasUsingSystemCursor");
	HX_MARK_MEMBER_NAME(_debuggerInteraction,"_debuggerInteraction");
	HX_MARK_MEMBER_NAME(_flixelPointer,"_flixelPointer");
	 ::flixel::_hx_system::debug::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Interaction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(activeTool,"activeTool");
	HX_VISIT_MEMBER_NAME(selectedItems,"selectedItems");
	HX_VISIT_MEMBER_NAME(flixelPointer,"flixelPointer");
	HX_VISIT_MEMBER_NAME(pointerJustPressed,"pointerJustPressed");
	HX_VISIT_MEMBER_NAME(pointerJustReleased,"pointerJustReleased");
	HX_VISIT_MEMBER_NAME(pointerPressed,"pointerPressed");
	HX_VISIT_MEMBER_NAME(_container,"_container");
	HX_VISIT_MEMBER_NAME(_customCursor,"_customCursor");
	HX_VISIT_MEMBER_NAME(_tools,"_tools");
	HX_VISIT_MEMBER_NAME(_turn,"_turn");
	HX_VISIT_MEMBER_NAME(_keysDown,"_keysDown");
	HX_VISIT_MEMBER_NAME(_keysUp,"_keysUp");
	HX_VISIT_MEMBER_NAME(_wasMouseVisible,"_wasMouseVisible");
	HX_VISIT_MEMBER_NAME(_wasUsingSystemCursor,"_wasUsingSystemCursor");
	HX_VISIT_MEMBER_NAME(_debuggerInteraction,"_debuggerInteraction");
	HX_VISIT_MEMBER_NAME(_flixelPointer,"_flixelPointer");
	 ::flixel::_hx_system::debug::Window_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Interaction_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_turn") ) { return hx::Val( _turn); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_tools") ) { return hx::Val( _tools); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_keysUp") ) { return hx::Val( _keysUp); }
		if (HX_FIELD_EQ(inName,"addTool") ) { return hx::Val( addTool_dyn()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"getTool") ) { return hx::Val( getTool_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isActive") ) { return hx::Val( isActive_dyn()); }
		if (HX_FIELD_EQ(inName,"postDraw") ) { return hx::Val( postDraw_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_keysDown") ) { return hx::Val( _keysDown); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"activeTool") ) { return hx::Val( activeTool); }
		if (HX_FIELD_EQ(inName,"_container") ) { return hx::Val( _container); }
		if (HX_FIELD_EQ(inName,"keyPressed") ) { return hx::Val( keyPressed_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateMouse") ) { return hx::Val( updateMouse_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedItems") ) { return hx::Val( selectedItems); }
		if (HX_FIELD_EQ(inName,"flixelPointer") ) { return hx::Val( flixelPointer); }
		if (HX_FIELD_EQ(inName,"_customCursor") ) { return hx::Val( _customCursor); }
		if (HX_FIELD_EQ(inName,"toggleVisible") ) { return hx::Val( toggleVisible_dyn()); }
		if (HX_FIELD_EQ(inName,"setActiveTool") ) { return hx::Val( setActiveTool_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pointerPressed") ) { return hx::Val( pointerPressed); }
		if (HX_FIELD_EQ(inName,"_flixelPointer") ) { return hx::Val( _flixelPointer); }
		if (HX_FIELD_EQ(inName,"handleKeyEvent") ) { return hx::Val( handleKeyEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"clearSelection") ) { return hx::Val( clearSelection_dyn()); }
		if (HX_FIELD_EQ(inName,"keyJustPressed") ) { return hx::Val( keyJustPressed_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_wasMouseVisible") ) { return hx::Val( _wasMouseVisible); }
		if (HX_FIELD_EQ(inName,"handleMouseClick") ) { return hx::Val( handleMouseClick_dyn()); }
		if (HX_FIELD_EQ(inName,"getDebugGraphics") ) { return hx::Val( getDebugGraphics_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pointerJustPressed") ) { return hx::Val( pointerJustPressed); }
		if (HX_FIELD_EQ(inName,"drawItemsSelection") ) { return hx::Val( drawItemsSelection_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pointerJustReleased") ) { return hx::Val( pointerJustReleased); }
		if (HX_FIELD_EQ(inName,"updateCustomCursors") ) { return hx::Val( updateCustomCursors_dyn()); }
		if (HX_FIELD_EQ(inName,"restoreSystemCursor") ) { return hx::Val( restoreSystemCursor_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_debuggerInteraction") ) { return hx::Val( _debuggerInteraction); }
		if (HX_FIELD_EQ(inName,"registerCustomCursor") ) { return hx::Val( registerCustomCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"saveSystemCursorInfo") ) { return hx::Val( saveSystemCursorInfo_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_wasUsingSystemCursor") ) { return hx::Val( _wasUsingSystemCursor); }
		if (HX_FIELD_EQ(inName,"handleMouseInDebugger") ) { return hx::Val( handleMouseInDebugger_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setToolsCursorVisibility") ) { return hx::Val( setToolsCursorVisibility_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"setSystemCursorVisibility") ) { return hx::Val( setSystemCursorVisibility_dyn()); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"handleDebuggerVisibilityChanged") ) { return hx::Val( handleDebuggerVisibilityChanged_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Interaction_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_turn") ) { _turn=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_tools") ) { _tools=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_keysUp") ) { _keysUp=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_keysDown") ) { _keysDown=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"activeTool") ) { activeTool=inValue.Cast<  ::flixel::_hx_system::debug::interaction::tools::Tool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_container") ) { _container=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedItems") ) { selectedItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flixelPointer") ) { flixelPointer=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_customCursor") ) { _customCursor=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pointerPressed") ) { pointerPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flixelPointer") ) { _flixelPointer=inValue.Cast<  ::flixel::input::FlxPointer >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_wasMouseVisible") ) { _wasMouseVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pointerJustPressed") ) { pointerJustPressed=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pointerJustReleased") ) { pointerJustReleased=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_debuggerInteraction") ) { _debuggerInteraction=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_wasUsingSystemCursor") ) { _wasUsingSystemCursor=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Interaction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("activeTool","\x3e","\x24","\x2c","\xf6"));
	outFields->push(HX_HCSTRING("selectedItems","\xa5","\x87","\x4e","\xb8"));
	outFields->push(HX_HCSTRING("flixelPointer","\xc1","\xe9","\x8f","\xfe"));
	outFields->push(HX_HCSTRING("pointerJustPressed","\x19","\xd4","\xe3","\x63"));
	outFields->push(HX_HCSTRING("pointerJustReleased","\x66","\xcf","\x4b","\x0a"));
	outFields->push(HX_HCSTRING("pointerPressed","\x65","\x7b","\x0c","\x9c"));
	outFields->push(HX_HCSTRING("_container","\x02","\xf1","\x15","\x1b"));
	outFields->push(HX_HCSTRING("_customCursor","\x46","\x78","\xf4","\x20"));
	outFields->push(HX_HCSTRING("_tools","\x5c","\xd9","\x15","\x10"));
	outFields->push(HX_HCSTRING("_turn","\x5c","\x07","\x17","\x00"));
	outFields->push(HX_HCSTRING("_keysDown","\xd5","\x07","\x2e","\x5d"));
	outFields->push(HX_HCSTRING("_keysUp","\x0e","\xa3","\x71","\xae"));
	outFields->push(HX_HCSTRING("_wasMouseVisible","\x17","\x92","\xd7","\x91"));
	outFields->push(HX_HCSTRING("_wasUsingSystemCursor","\xff","\xd8","\x04","\xe6"));
	outFields->push(HX_HCSTRING("_debuggerInteraction","\x32","\x64","\xf1","\x95"));
	outFields->push(HX_HCSTRING("_flixelPointer","\x02","\xda","\xe1","\x3c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Interaction_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::_hx_system::debug::interaction::tools::Tool*/ ,(int)offsetof(Interaction_obj,activeTool),HX_HCSTRING("activeTool","\x3e","\x24","\x2c","\xf6")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(Interaction_obj,selectedItems),HX_HCSTRING("selectedItems","\xa5","\x87","\x4e","\xb8")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(Interaction_obj,flixelPointer),HX_HCSTRING("flixelPointer","\xc1","\xe9","\x8f","\xfe")},
	{hx::fsBool,(int)offsetof(Interaction_obj,pointerJustPressed),HX_HCSTRING("pointerJustPressed","\x19","\xd4","\xe3","\x63")},
	{hx::fsBool,(int)offsetof(Interaction_obj,pointerJustReleased),HX_HCSTRING("pointerJustReleased","\x66","\xcf","\x4b","\x0a")},
	{hx::fsBool,(int)offsetof(Interaction_obj,pointerPressed),HX_HCSTRING("pointerPressed","\x65","\x7b","\x0c","\x9c")},
	{hx::fsObject /*openfl::display::Sprite*/ ,(int)offsetof(Interaction_obj,_container),HX_HCSTRING("_container","\x02","\xf1","\x15","\x1b")},
	{hx::fsObject /*openfl::display::Sprite*/ ,(int)offsetof(Interaction_obj,_customCursor),HX_HCSTRING("_customCursor","\x46","\x78","\xf4","\x20")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Interaction_obj,_tools),HX_HCSTRING("_tools","\x5c","\xd9","\x15","\x10")},
	{hx::fsInt,(int)offsetof(Interaction_obj,_turn),HX_HCSTRING("_turn","\x5c","\x07","\x17","\x00")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Interaction_obj,_keysDown),HX_HCSTRING("_keysDown","\xd5","\x07","\x2e","\x5d")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Interaction_obj,_keysUp),HX_HCSTRING("_keysUp","\x0e","\xa3","\x71","\xae")},
	{hx::fsBool,(int)offsetof(Interaction_obj,_wasMouseVisible),HX_HCSTRING("_wasMouseVisible","\x17","\x92","\xd7","\x91")},
	{hx::fsBool,(int)offsetof(Interaction_obj,_wasUsingSystemCursor),HX_HCSTRING("_wasUsingSystemCursor","\xff","\xd8","\x04","\xe6")},
	{hx::fsBool,(int)offsetof(Interaction_obj,_debuggerInteraction),HX_HCSTRING("_debuggerInteraction","\x32","\x64","\xf1","\x95")},
	{hx::fsObject /*::flixel::input::FlxPointer*/ ,(int)offsetof(Interaction_obj,_flixelPointer),HX_HCSTRING("_flixelPointer","\x02","\xda","\xe1","\x3c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Interaction_obj_sStaticStorageInfo = 0;
#endif

static ::String Interaction_obj_sMemberFields[] = {
	HX_HCSTRING("activeTool","\x3e","\x24","\x2c","\xf6"),
	HX_HCSTRING("selectedItems","\xa5","\x87","\x4e","\xb8"),
	HX_HCSTRING("flixelPointer","\xc1","\xe9","\x8f","\xfe"),
	HX_HCSTRING("pointerJustPressed","\x19","\xd4","\xe3","\x63"),
	HX_HCSTRING("pointerJustReleased","\x66","\xcf","\x4b","\x0a"),
	HX_HCSTRING("pointerPressed","\x65","\x7b","\x0c","\x9c"),
	HX_HCSTRING("_container","\x02","\xf1","\x15","\x1b"),
	HX_HCSTRING("_customCursor","\x46","\x78","\xf4","\x20"),
	HX_HCSTRING("_tools","\x5c","\xd9","\x15","\x10"),
	HX_HCSTRING("_turn","\x5c","\x07","\x17","\x00"),
	HX_HCSTRING("_keysDown","\xd5","\x07","\x2e","\x5d"),
	HX_HCSTRING("_keysUp","\x0e","\xa3","\x71","\xae"),
	HX_HCSTRING("_wasMouseVisible","\x17","\x92","\xd7","\x91"),
	HX_HCSTRING("_wasUsingSystemCursor","\xff","\xd8","\x04","\xe6"),
	HX_HCSTRING("_debuggerInteraction","\x32","\x64","\xf1","\x95"),
	HX_HCSTRING("_flixelPointer","\x02","\xda","\xe1","\x3c"),
	HX_HCSTRING("handleDebuggerVisibilityChanged","\x19","\xe7","\xa4","\x01"),
	HX_HCSTRING("updateMouse","\x5c","\x7f","\xfd","\xf1"),
	HX_HCSTRING("handleMouseClick","\xab","\x19","\xf2","\x35"),
	HX_HCSTRING("handleMouseInDebugger","\xe3","\x24","\x6b","\x87"),
	HX_HCSTRING("handleKeyEvent","\xc3","\x95","\x05","\x08"),
	HX_HCSTRING("addTool","\x19","\x9e","\x3e","\x89"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("isActive","\x50","\xdd","\xaf","\x6e"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("postDraw","\x84","\x8c","\xaf","\x00"),
	HX_HCSTRING("getDebugGraphics","\xc8","\xbb","\x40","\x9c"),
	HX_HCSTRING("drawItemsSelection","\x50","\xeb","\x14","\xb9"),
	HX_HCSTRING("getTool","\x0e","\x0b","\x84","\x1f"),
	HX_HCSTRING("toggleVisible","\x3e","\xbb","\xe1","\x53"),
	HX_HCSTRING("registerCustomCursor","\x6a","\x60","\x89","\x94"),
	HX_HCSTRING("updateCustomCursors","\x63","\xcd","\x29","\x0a"),
	HX_HCSTRING("saveSystemCursorInfo","\x90","\xc3","\x94","\x03"),
	HX_HCSTRING("restoreSystemCursor","\x93","\x67","\xe5","\x4f"),
	HX_HCSTRING("setActiveTool","\x80","\x62","\xa4","\x97"),
	HX_HCSTRING("setSystemCursorVisibility","\x99","\x82","\x1a","\xf3"),
	HX_HCSTRING("setToolsCursorVisibility","\x81","\xc1","\x25","\x4d"),
	HX_HCSTRING("clearSelection","\xff","\x4c","\x20","\x4c"),
	HX_HCSTRING("keyPressed","\xc3","\x72","\x6e","\xa8"),
	HX_HCSTRING("keyJustPressed","\x77","\xd2","\xb7","\xcd"),
	::String(null()) };

static void Interaction_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Interaction_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Interaction_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Interaction_obj::__mClass,"__mClass");
};

#endif

hx::Class Interaction_obj::__mClass;

void Interaction_obj::__register()
{
	hx::Object *dummy = new Interaction_obj;
	Interaction_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.debug.interaction.Interaction","\x8e","\x55","\xb1","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Interaction_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Interaction_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Interaction_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Interaction_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interaction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interaction_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace interaction
