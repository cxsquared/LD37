// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_17_new,"flixel.tile.FlxBaseTilemap","new",0x601e788b,"flixel.tile.FlxBaseTilemap.new","flixel/tile/FlxBaseTilemap.hx",17,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_88_updateTile,"flixel.tile.FlxBaseTilemap","updateTile",0x4985390c,"flixel.tile.FlxBaseTilemap.updateTile","flixel/tile/FlxBaseTilemap.hx",88,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_93_cacheGraphics,"flixel.tile.FlxBaseTilemap","cacheGraphics",0x589e0d18,"flixel.tile.FlxBaseTilemap.cacheGraphics","flixel/tile/FlxBaseTilemap.hx",93,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_98_initTileObjects,"flixel.tile.FlxBaseTilemap","initTileObjects",0x1ec17ac1,"flixel.tile.FlxBaseTilemap.initTileObjects","flixel/tile/FlxBaseTilemap.hx",98,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_103_updateMap,"flixel.tile.FlxBaseTilemap","updateMap",0xe833827e,"flixel.tile.FlxBaseTilemap.updateMap","flixel/tile/FlxBaseTilemap.hx",103,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_108_computeDimensions,"flixel.tile.FlxBaseTilemap","computeDimensions",0xc850220f,"flixel.tile.FlxBaseTilemap.computeDimensions","flixel/tile/FlxBaseTilemap.hx",108,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_113_getTileIndexByCoords,"flixel.tile.FlxBaseTilemap","getTileIndexByCoords",0x5f0cf078,"flixel.tile.FlxBaseTilemap.getTileIndexByCoords","flixel/tile/FlxBaseTilemap.hx",113,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_119_getTileCoordsByIndex,"flixel.tile.FlxBaseTilemap","getTileCoordsByIndex",0x89a6db2e,"flixel.tile.FlxBaseTilemap.getTileCoordsByIndex","flixel/tile/FlxBaseTilemap.hx",119,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_125_ray,"flixel.tile.FlxBaseTilemap","ray",0x60217e15,"flixel.tile.FlxBaseTilemap.ray","flixel/tile/FlxBaseTilemap.hx",125,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_131_overlapsWithCallback,"flixel.tile.FlxBaseTilemap","overlapsWithCallback",0x90f43a8c,"flixel.tile.FlxBaseTilemap.overlapsWithCallback","flixel/tile/FlxBaseTilemap.hx",131,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_137_setDirty,"flixel.tile.FlxBaseTilemap","setDirty",0x31f19505,"flixel.tile.FlxBaseTilemap.setDirty","flixel/tile/FlxBaseTilemap.hx",137,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_150_destroy,"flixel.tile.FlxBaseTilemap","destroy",0x44ffc6a5,"flixel.tile.FlxBaseTilemap.destroy","flixel/tile/FlxBaseTilemap.hx",150,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_188_loadMapFromCSV,"flixel.tile.FlxBaseTilemap","loadMapFromCSV",0xbac5ecbb,"flixel.tile.FlxBaseTilemap.loadMapFromCSV","flixel/tile/FlxBaseTilemap.hx",188,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_175_loadMapFromCSV,"flixel.tile.FlxBaseTilemap","loadMapFromCSV",0xbac5ecbb,"flixel.tile.FlxBaseTilemap.loadMapFromCSV","flixel/tile/FlxBaseTilemap.hx",175,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_258_loadMapFromArray,"flixel.tile.FlxBaseTilemap","loadMapFromArray",0x576cd9ce,"flixel.tile.FlxBaseTilemap.loadMapFromArray","flixel/tile/FlxBaseTilemap.hx",258,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_287_loadMapFrom2DArray,"flixel.tile.FlxBaseTilemap","loadMapFrom2DArray",0xb01a13fc,"flixel.tile.FlxBaseTilemap.loadMapFrom2DArray","flixel/tile/FlxBaseTilemap.hx",287,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_324_loadMapFromGraphic,"flixel.tile.FlxBaseTilemap","loadMapFromGraphic",0xe93ffe1d,"flixel.tile.FlxBaseTilemap.loadMapFromGraphic","flixel/tile/FlxBaseTilemap.hx",324,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_329_loadMapHelper,"flixel.tile.FlxBaseTilemap","loadMapHelper",0xc59c560f,"flixel.tile.FlxBaseTilemap.loadMapHelper","flixel/tile/FlxBaseTilemap.hx",329,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_352_postGraphicLoad,"flixel.tile.FlxBaseTilemap","postGraphicLoad",0x0dc00119,"flixel.tile.FlxBaseTilemap.postGraphicLoad","flixel/tile/FlxBaseTilemap.hx",352,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_361_applyAutoTile,"flixel.tile.FlxBaseTilemap","applyAutoTile",0xcc60c5b6,"flixel.tile.FlxBaseTilemap.applyAutoTile","flixel/tile/FlxBaseTilemap.hx",361,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_372_applyCustomRemap,"flixel.tile.FlxBaseTilemap","applyCustomRemap",0x2fd5c57f,"flixel.tile.FlxBaseTilemap.applyCustomRemap","flixel/tile/FlxBaseTilemap.hx",372,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_392_randomizeIndices,"flixel.tile.FlxBaseTilemap","randomizeIndices",0x9015e6eb,"flixel.tile.FlxBaseTilemap.randomizeIndices","flixel/tile/FlxBaseTilemap.hx",392,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_399_randomizeIndices,"flixel.tile.FlxBaseTilemap","randomizeIndices",0x9015e6eb,"flixel.tile.FlxBaseTilemap.randomizeIndices","flixel/tile/FlxBaseTilemap.hx",399,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_428_autoTile,"flixel.tile.FlxBaseTilemap","autoTile",0x7a0f9632,"flixel.tile.FlxBaseTilemap.autoTile","flixel/tile/FlxBaseTilemap.hx",428,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_495_setCustomTileMappings,"flixel.tile.FlxBaseTilemap","setCustomTileMappings",0x91d80f71,"flixel.tile.FlxBaseTilemap.setCustomTileMappings","flixel/tile/FlxBaseTilemap.hx",495,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_517_getTile,"flixel.tile.FlxBaseTilemap","getTile",0x3ff9148f,"flixel.tile.FlxBaseTilemap.getTile","flixel/tile/FlxBaseTilemap.hx",517,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_528_getTileByIndex,"flixel.tile.FlxBaseTilemap","getTileByIndex",0xf0387cec,"flixel.tile.FlxBaseTilemap.getTileByIndex","flixel/tile/FlxBaseTilemap.hx",528,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_539_getTileCollisions,"flixel.tile.FlxBaseTilemap","getTileCollisions",0x9ca1bd30,"flixel.tile.FlxBaseTilemap.getTileCollisions","flixel/tile/FlxBaseTilemap.hx",539,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_549_getTileInstances,"flixel.tile.FlxBaseTilemap","getTileInstances",0xa0cac4af,"flixel.tile.FlxBaseTilemap.getTileInstances","flixel/tile/FlxBaseTilemap.hx",549,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_580_setTile,"flixel.tile.FlxBaseTilemap","setTile",0x32faa59b,"flixel.tile.FlxBaseTilemap.setTile","flixel/tile/FlxBaseTilemap.hx",580,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_598_setTileByIndex,"flixel.tile.FlxBaseTilemap","setTileByIndex",0x10586560,"flixel.tile.FlxBaseTilemap.setTileByIndex","flixel/tile/FlxBaseTilemap.hx",598,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_658_setTileProperties,"flixel.tile.FlxBaseTilemap","setTileProperties",0x2905d56e,"flixel.tile.FlxBaseTilemap.setTileProperties","flixel/tile/FlxBaseTilemap.hx",658,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_691_getData,"flixel.tile.FlxBaseTilemap","getData",0x355f9f8b,"flixel.tile.FlxBaseTilemap.getData","flixel/tile/FlxBaseTilemap.hx",691,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_723_findPath,"flixel.tile.FlxBaseTilemap","findPath",0xe6d2ce73,"flixel.tile.FlxBaseTilemap.findPath","flixel/tile/FlxBaseTilemap.hx",723,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_791_computePathDistance,"flixel.tile.FlxBaseTilemap","computePathDistance",0x34e53a3c,"flixel.tile.FlxBaseTilemap.computePathDistance","flixel/tile/FlxBaseTilemap.hx",791,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_986_walkPath,"flixel.tile.FlxBaseTilemap","walkPath",0xa1980343,"flixel.tile.FlxBaseTilemap.walkPath","flixel/tile/FlxBaseTilemap.hx",986,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_1085_simplifyPath,"flixel.tile.FlxBaseTilemap","simplifyPath",0xe8519bc3,"flixel.tile.FlxBaseTilemap.simplifyPath","flixel/tile/FlxBaseTilemap.hx",1085,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_1118_raySimplifyPath,"flixel.tile.FlxBaseTilemap","raySimplifyPath",0x32723703,"flixel.tile.FlxBaseTilemap.raySimplifyPath","flixel/tile/FlxBaseTilemap.hx",1118,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_1162_overlaps,"flixel.tile.FlxBaseTilemap","overlaps",0x8f17af01,"flixel.tile.FlxBaseTilemap.overlaps","flixel/tile/FlxBaseTilemap.hx",1162,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_1177_tilemapOverlapsCallback,"flixel.tile.FlxBaseTilemap","tilemapOverlapsCallback",0x40d17cea,"flixel.tile.FlxBaseTilemap.tilemapOverlapsCallback","flixel/tile/FlxBaseTilemap.hx",1177,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_1201_overlapsAt,"flixel.tile.FlxBaseTilemap","overlapsAt",0x47a26a54,"flixel.tile.FlxBaseTilemap.overlapsAt","flixel/tile/FlxBaseTilemap.hx",1201,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_1217_tilemapOverlapsAtCallback,"flixel.tile.FlxBaseTilemap","tilemapOverlapsAtCallback",0xbef90c3d,"flixel.tile.FlxBaseTilemap.tilemapOverlapsAtCallback","flixel/tile/FlxBaseTilemap.hx",1217,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_1236_overlapsPoint,"flixel.tile.FlxBaseTilemap","overlapsPoint",0x91c6718f,"flixel.tile.FlxBaseTilemap.overlapsPoint","flixel/tile/FlxBaseTilemap.hx",1236,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_1249_tileAtPointAllowsCollisions,"flixel.tile.FlxBaseTilemap","tileAtPointAllowsCollisions",0x26e8ec45,"flixel.tile.FlxBaseTilemap.tileAtPointAllowsCollisions","flixel/tile/FlxBaseTilemap.hx",1249,0x0139d8e5)
HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_1263_getBounds,"flixel.tile.FlxBaseTilemap","getBounds",0x47c7aa16,"flixel.tile.FlxBaseTilemap.getBounds","flixel/tile/FlxBaseTilemap.hx",1263,0x0139d8e5)
namespace flixel{
namespace tile{

void FlxBaseTilemap_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_17_new)
            	HX_STACK_THIS(this)
HXLINE(  81)		this->_collideIndex = (int)0;
HXLINE(  80)		this->_drawIndex = (int)0;
HXLINE(  74)		this->_startingIndex = (int)0;
HXLINE(  69)		this->_tileObjects = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  28)		this->totalTiles = (int)0;
HXLINE(  26)		this->heightInTiles = (int)0;
HXLINE(  24)		this->widthInTiles = (int)0;
HXLINE(  22)		this->_hx_auto = ::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn();
HXLINE( 142)		super::__construct(null(),null(),null(),null());
HXLINE( 144)		this->flixelType = (int)3;
HXLINE( 145)		this->set_immovable(true);
HXLINE( 146)		this->set_moves(false);
            	}

Dynamic FlxBaseTilemap_obj::__CreateEmpty() { return new FlxBaseTilemap_obj; }

void *FlxBaseTilemap_obj::_hx_vtable = 0;

Dynamic FlxBaseTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxBaseTilemap_obj > _hx_result = new FlxBaseTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxBaseTilemap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x725f80f5;
	}
}

void FlxBaseTilemap_obj::updateTile(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_88_updateTile)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE(  88)		HX_STACK_DO_THROW(HX_("updateTile must be implemented",53,76,b0,30));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,updateTile,(void))

void FlxBaseTilemap_obj::cacheGraphics(int TileWidth,int TileHeight, ::Dynamic TileGraphic){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_93_cacheGraphics)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
HXLINE(  93)		HX_STACK_DO_THROW(HX_("cacheGraphics must be implemented",a9,10,20,38));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBaseTilemap_obj,cacheGraphics,(void))

void FlxBaseTilemap_obj::initTileObjects(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_98_initTileObjects)
            	HX_STACK_THIS(this)
HXLINE(  98)		HX_STACK_DO_THROW(HX_("initTileObjects must be implemented",12,b8,a6,2f));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,initTileObjects,(void))

void FlxBaseTilemap_obj::updateMap(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_103_updateMap)
            	HX_STACK_THIS(this)
HXLINE( 103)		HX_STACK_DO_THROW(HX_("updateMap must be implemented",8f,ae,0f,b7));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,updateMap,(void))

void FlxBaseTilemap_obj::computeDimensions(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_108_computeDimensions)
            	HX_STACK_THIS(this)
HXLINE( 108)		HX_STACK_DO_THROW(HX_("computeDimensions must be implemented",a0,79,f6,10));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,computeDimensions,(void))

int FlxBaseTilemap_obj::getTileIndexByCoords( ::flixel::math::FlxPoint Coord){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_113_getTileIndexByCoords)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Coord,"Coord")
HXLINE( 113)		HX_STACK_DO_THROW(HX_("getTileIndexByCoords must be implemented",7f,57,93,9c));
HXDLIN( 113)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileIndexByCoords,return )

 ::flixel::math::FlxPoint FlxBaseTilemap_obj::getTileCoordsByIndex(int Index,hx::Null< bool >  __o_Midpoint){
bool Midpoint = __o_Midpoint.Default(true);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_119_getTileCoordsByIndex)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
            	HX_STACK_ARG(Midpoint,"Midpoint")
HXLINE( 119)		HX_STACK_DO_THROW(HX_("getTileCoordsByIndex must be implemented",35,21,39,05));
HXDLIN( 119)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBaseTilemap_obj,getTileCoordsByIndex,return )

bool FlxBaseTilemap_obj::ray( ::flixel::math::FlxPoint Start, ::flixel::math::FlxPoint End, ::flixel::math::FlxPoint Result,hx::Null< Float >  __o_Resolution){
Float Resolution = __o_Resolution.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_125_ray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Start,"Start")
            	HX_STACK_ARG(End,"End")
            	HX_STACK_ARG(Result,"Result")
            	HX_STACK_ARG(Resolution,"Resolution")
HXLINE( 125)		HX_STACK_DO_THROW(HX_("ray must be implemented",e6,31,5e,58));
HXDLIN( 125)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,ray,return )

bool FlxBaseTilemap_obj::overlapsWithCallback( ::flixel::FlxObject Object, ::Dynamic Callback,hx::Null< bool >  __o_FlipCallbackParams, ::flixel::math::FlxPoint Position){
bool FlipCallbackParams = __o_FlipCallbackParams.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_131_overlapsWithCallback)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(Callback,"Callback")
            	HX_STACK_ARG(FlipCallbackParams,"FlipCallbackParams")
            	HX_STACK_ARG(Position,"Position")
HXLINE( 131)		HX_STACK_DO_THROW(HX_("overlapsWithCallback must be implemented",93,a3,ff,38));
HXDLIN( 131)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,overlapsWithCallback,return )

void FlxBaseTilemap_obj::setDirty(hx::Null< bool >  __o_Dirty){
bool Dirty = __o_Dirty.Default(true);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_137_setDirty)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Dirty,"Dirty")
HXLINE( 137)		HX_STACK_DO_THROW(HX_("setDirty must be implemented",0c,cc,e0,5f));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,setDirty,(void))

void FlxBaseTilemap_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_150_destroy)
            	HX_STACK_THIS(this)
HXLINE( 151)		this->_data = null();
HXLINE( 152)		this->super::destroy();
            	}


 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFromCSV(::String MapData, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run(::String line){
            			HX_GC_STACKFRAME(&_hx_pos_36d94048d9e4941f_188_loadMapFromCSV)
            			HX_STACK_ARG(line,"line")
HXLINE( 188)			return (line != HX_("",00,00,00,00));
            		}
            		HX_END_LOCAL_FUNC1(return)

int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_36d94048d9e4941f_175_loadMapFromCSV)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapData,"MapData")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE( 177)		if (::openfl::Assets_obj::exists(MapData,null())) {
HXLINE( 179)			MapData = ::openfl::Assets_obj::getText(MapData);
            		}
HXLINE( 183)		this->_data = ::Array_obj< int >::__new();
HXLINE( 184)		HX_VAR( ::Array< ::String >,columns);
HXLINE( 188)		HX_VARI( ::Array< ::String >,rows) =  ::EReg_obj::__alloc( HX_CTX ,HX_("[ \t]*((\r\n)|\r|\n)[ \t]*",22,2c,8d,6d),HX_("g",67,00,00,00))->split(MapData)->filter( ::Dynamic(new _hx_Closure_0()));
HXLINE( 190)		this->heightInTiles = rows->length;
HXLINE( 191)		this->widthInTiles = (int)0;
HXLINE( 193)		HX_VARI( int,row) = (int)0;
HXLINE( 194)		while((row < this->heightInTiles)){
HXLINE( 196)			HX_VARI( ::String,rowString) = rows->__get(row);
HXLINE( 197)			if (::StringTools_obj::endsWith(rowString,HX_(",",2c,00,00,00))) {
HXLINE( 198)				rowString = rowString.substr((int)0,(rowString.length - (int)1));
            			}
HXLINE( 199)			columns = rowString.split(HX_(",",2c,00,00,00));
HXLINE( 201)			if ((columns->length == (int)0)) {
HXLINE( 203)				this->heightInTiles--;
HXLINE( 204)				continue;
            			}
HXLINE( 206)			if ((this->widthInTiles == (int)0)) {
HXLINE( 208)				this->widthInTiles = columns->length;
            			}
HXLINE( 211)			HX_VARI( int,column) = (int)0;
HXLINE( 212)			while((column < this->widthInTiles)){
HXLINE( 215)				HX_VARI( ::String,columnString) = columns->__get(column);
HXLINE( 216)				HX_VARI(  ::Dynamic,curTile) = ::Std_obj::parseInt(columnString);
HXLINE( 218)				if (hx::IsNull( curTile )) {
HXLINE( 219)					HX_STACK_DO_THROW(((((((HX_("String in row ",b2,a4,63,43) + row) + HX_(", column ",96,fc,25,5b)) + column) + HX_(" is not a valid integer: \"",44,67,cc,45)) + columnString) + HX_("\"",22,00,00,00)));
            				}
HXLINE( 222)				if (hx::IsLess( curTile,(int)0 )) {
HXLINE( 223)					curTile = (int)0;
            				}
HXLINE( 225)				this->_data->push(curTile);
HXLINE( 226)				column = (column + (int)1);
            			}
HXLINE( 229)			row = (row + (int)1);
            		}
HXLINE( 232)		this->loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE( 233)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxBaseTilemap_obj,loadMapFromCSV,return )

 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFromArray(::Array< int > MapData,int WidthInTiles,int HeightInTiles, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_258_loadMapFromArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapData,"MapData")
            	HX_STACK_ARG(WidthInTiles,"WidthInTiles")
            	HX_STACK_ARG(HeightInTiles,"HeightInTiles")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE( 259)		this->widthInTiles = WidthInTiles;
HXLINE( 260)		this->heightInTiles = HeightInTiles;
HXLINE( 261)		this->_data = MapData->copy();
HXLINE( 263)		this->loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE( 264)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC10(FlxBaseTilemap_obj,loadMapFromArray,return )

 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFrom2DArray(::Array< ::Dynamic> MapData, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_287_loadMapFrom2DArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapData,"MapData")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE( 288)		this->widthInTiles = MapData->__get((int)0).StaticCast< ::Array< int > >()->length;
HXLINE( 289)		this->heightInTiles = MapData->length;
HXLINE( 290)		this->_data = ::flixel::util::FlxArrayUtil_obj::flatten2DArray_Int(MapData);
HXLINE( 292)		this->loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE( 293)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxBaseTilemap_obj,loadMapFrom2DArray,return )

 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFromGraphic( ::Dynamic MapGraphic,hx::Null< bool >  __o_Invert,hx::Null< int >  __o_Scale,::Array< int > ColorMap, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
bool Invert = __o_Invert.Default(false);
int Scale = __o_Scale.Default(1);
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_324_loadMapFromGraphic)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapGraphic,"MapGraphic")
            	HX_STACK_ARG(Invert,"Invert")
            	HX_STACK_ARG(Scale,"Scale")
            	HX_STACK_ARG(ColorMap,"ColorMap")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE( 324)		return this->loadMapFromCSV(::flixel::util::FlxStringUtil_obj::bitmapToCSV(::flixel::_hx_system::FlxAssets_obj::resolveBitmapData(MapGraphic),Invert,Scale,ColorMap),TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC11(FlxBaseTilemap_obj,loadMapFromGraphic,return )

void FlxBaseTilemap_obj::loadMapHelper( ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_329_loadMapHelper)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE( 330)		this->totalTiles = this->_data->length;
HXLINE( 331)		 ::flixel::tile::FlxTilemapAutoTiling _hx_tmp;
HXDLIN( 331)		if (hx::IsNull( AutoTile )) {
HXLINE( 331)			_hx_tmp = ::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn();
            		}
            		else {
HXLINE( 331)			_hx_tmp = AutoTile;
            		}
HXDLIN( 331)		this->_hx_auto = _hx_tmp;
HXLINE( 332)		int _hx_tmp1;
HXDLIN( 332)		if ((StartingIndex <= (int)0)) {
HXLINE( 332)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE( 332)			_hx_tmp1 = StartingIndex;
            		}
HXDLIN( 332)		this->_startingIndex = _hx_tmp1;
HXLINE( 334)		if (hx::IsNotEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn() )) {
HXLINE( 336)			this->_startingIndex = (int)1;
HXLINE( 337)			DrawIndex = (int)1;
HXLINE( 338)			CollideIndex = (int)1;
            		}
HXLINE( 341)		this->_drawIndex = DrawIndex;
HXLINE( 342)		this->_collideIndex = CollideIndex;
HXLINE( 344)		this->applyAutoTile();
HXLINE( 345)		this->applyCustomRemap();
HXLINE( 346)		this->randomizeIndices();
HXLINE( 347)		this->cacheGraphics(TileWidth,TileHeight,TileGraphic);
HXLINE( 348)		this->postGraphicLoad();
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxBaseTilemap_obj,loadMapHelper,(void))

void FlxBaseTilemap_obj::postGraphicLoad(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_352_postGraphicLoad)
            	HX_STACK_THIS(this)
HXLINE( 353)		this->initTileObjects();
HXLINE( 354)		this->computeDimensions();
HXLINE( 355)		this->updateMap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,postGraphicLoad,(void))

void FlxBaseTilemap_obj::applyAutoTile(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_361_applyAutoTile)
            	HX_STACK_THIS(this)
HXLINE( 361)		if (hx::IsNotEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn() )) {
HXLINE( 363)			HX_VARI( int,i) = (int)0;
HXLINE( 364)			while((i < this->totalTiles)){
HXLINE( 366)				i = (i + (int)1);
HXDLIN( 366)				this->autoTile((i - (int)1));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,applyAutoTile,(void))

void FlxBaseTilemap_obj::applyCustomRemap(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_372_applyCustomRemap)
            	HX_STACK_THIS(this)
HXLINE( 373)		HX_VARI( int,i) = (int)0;
HXLINE( 375)		if (hx::IsNotNull( this->customTileRemap )) {
HXLINE( 377)			while((i < this->totalTiles)){
HXLINE( 379)				HX_VARI( int,oldIndex) = this->_data->__get(i);
HXLINE( 380)				HX_VARI( int,newIndex) = oldIndex;
HXLINE( 381)				if ((oldIndex < this->customTileRemap->length)) {
HXLINE( 383)					newIndex = this->customTileRemap->__get(oldIndex);
            				}
HXLINE( 385)				this->_data[i] = newIndex;
HXLINE( 386)				i = (i + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,applyCustomRemap,(void))

void FlxBaseTilemap_obj::randomizeIndices(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_392_randomizeIndices)
            	HX_STACK_THIS(this)
HXLINE( 393)		HX_VARI( int,i) = (int)0;
HXLINE( 395)		if (hx::IsNotNull( this->_randomIndices )) {
HXLINE( 397)			HX_VAR(  ::Dynamic,randLambda);
HXDLIN( 397)			if (hx::IsNotNull( this->_randomLambda )) {
HXLINE( 397)				randLambda = this->_randomLambda;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				Float _hx_run(){
            					HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_399_randomizeIndices)
HXLINE( 399)					return ::flixel::FlxG_obj::random->_hx_float(null(),null(),null());
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 397)				randLambda =  ::Dynamic(new _hx_Closure_0());
            			}
HXLINE( 402)			while((i < this->totalTiles)){
HXLINE( 404)				HX_VARI( int,oldIndex) = this->_data->__get(i);
HXLINE( 405)				HX_VARI( int,j) = (int)0;
HXLINE( 406)				HX_VARI( int,newIndex) = oldIndex;
HXLINE( 407)				{
HXLINE( 407)					HX_VARI( int,_g) = (int)0;
HXDLIN( 407)					HX_VARI( ::Array< int >,_g1) = this->_randomIndices;
HXDLIN( 407)					while((_g < _g1->length)){
HXLINE( 407)						HX_VARI( int,rand) = _g1->__get(_g);
HXDLIN( 407)						_g = (_g + (int)1);
HXLINE( 409)						if ((oldIndex == rand)) {
HXLINE( 411)							Float k = ( (Float)(randLambda()) );
HXDLIN( 411)							HX_VARI_NAME( int,k1,"k") = ::Std_obj::_hx_int((k * this->_randomChoices->__get(j).StaticCast< ::Array< int > >()->length));
HXLINE( 412)							newIndex = this->_randomChoices->__get(j).StaticCast< ::Array< int > >()->__get(k1);
            						}
HXLINE( 414)						j = (j + (int)1);
            					}
            				}
HXLINE( 416)				this->_data[i] = newIndex;
HXLINE( 417)				i = (i + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,randomizeIndices,(void))

void FlxBaseTilemap_obj::autoTile(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_428_autoTile)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE( 429)		if ((this->_data->__get(Index) == (int)0)) {
HXLINE( 431)			return;
            		}
HXLINE( 434)		this->_data[Index] = (int)0;
HXLINE( 437)		bool _hx_tmp;
HXDLIN( 437)		if (((Index - this->widthInTiles) >= (int)0)) {
HXLINE( 437)			_hx_tmp = (this->_data->__get((Index - this->widthInTiles)) > (int)0);
            		}
            		else {
HXLINE( 437)			_hx_tmp = true;
            		}
HXDLIN( 437)		if (_hx_tmp) {
HXLINE( 439)			::Array< int > _hx_tmp1 = this->_data;
HXDLIN( 439)			_hx_tmp1[Index] = (_hx_tmp1->__get(Index) + (int)1);
            		}
HXLINE( 442)		bool _hx_tmp2;
HXDLIN( 442)		if ((hx::Mod(Index,this->widthInTiles) < (this->widthInTiles - (int)1))) {
HXLINE( 442)			_hx_tmp2 = (this->_data->__get((Index + (int)1)) > (int)0);
            		}
            		else {
HXLINE( 442)			_hx_tmp2 = true;
            		}
HXDLIN( 442)		if (_hx_tmp2) {
HXLINE( 444)			::Array< int > _hx_tmp3 = this->_data;
HXDLIN( 444)			_hx_tmp3[Index] = (_hx_tmp3->__get(Index) + (int)2);
            		}
HXLINE( 447)		bool _hx_tmp4;
HXDLIN( 447)		int _hx_tmp5 = ::Std_obj::_hx_int((Index + this->widthInTiles));
HXDLIN( 447)		if ((_hx_tmp5 < this->totalTiles)) {
HXLINE( 447)			_hx_tmp4 = (this->_data->__get((Index + this->widthInTiles)) > (int)0);
            		}
            		else {
HXLINE( 447)			_hx_tmp4 = true;
            		}
HXDLIN( 447)		if (_hx_tmp4) {
HXLINE( 449)			::Array< int > _hx_tmp6 = this->_data;
HXDLIN( 449)			_hx_tmp6[Index] = (_hx_tmp6->__get(Index) + (int)4);
            		}
HXLINE( 452)		bool _hx_tmp7;
HXDLIN( 452)		if ((hx::Mod(Index,this->widthInTiles) > (int)0)) {
HXLINE( 452)			_hx_tmp7 = (this->_data->__get((Index - (int)1)) > (int)0);
            		}
            		else {
HXLINE( 452)			_hx_tmp7 = true;
            		}
HXDLIN( 452)		if (_hx_tmp7) {
HXLINE( 454)			::Array< int > _hx_tmp8 = this->_data;
HXDLIN( 454)			_hx_tmp8[Index] = (_hx_tmp8->__get(Index) + (int)8);
            		}
HXLINE( 458)		bool _hx_tmp9;
HXDLIN( 458)		if (hx::IsEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::ALT_dyn() )) {
HXLINE( 458)			_hx_tmp9 = (this->_data->__get(Index) == (int)15);
            		}
            		else {
HXLINE( 458)			_hx_tmp9 = false;
            		}
HXDLIN( 458)		if (_hx_tmp9) {
HXLINE( 461)			bool _hx_tmp10;
HXDLIN( 461)			bool _hx_tmp11;
HXDLIN( 461)			if ((hx::Mod(Index,this->widthInTiles) > (int)0)) {
HXLINE( 461)				int _hx_tmp12 = ::Std_obj::_hx_int((Index + this->widthInTiles));
HXDLIN( 461)				_hx_tmp11 = (_hx_tmp12 < this->totalTiles);
            			}
            			else {
HXLINE( 461)				_hx_tmp11 = false;
            			}
HXDLIN( 461)			if (_hx_tmp11) {
HXLINE( 461)				_hx_tmp10 = (this->_data->__get(((Index + this->widthInTiles) - (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 461)				_hx_tmp10 = false;
            			}
HXDLIN( 461)			if (_hx_tmp10) {
HXLINE( 463)				this->_data[Index] = (int)1;
            			}
HXLINE( 466)			bool _hx_tmp13;
HXDLIN( 466)			bool _hx_tmp14;
HXDLIN( 466)			if ((hx::Mod(Index,this->widthInTiles) > (int)0)) {
HXLINE( 466)				_hx_tmp14 = ((Index - this->widthInTiles) >= (int)0);
            			}
            			else {
HXLINE( 466)				_hx_tmp14 = false;
            			}
HXDLIN( 466)			if (_hx_tmp14) {
HXLINE( 466)				_hx_tmp13 = (this->_data->__get(((Index - this->widthInTiles) - (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 466)				_hx_tmp13 = false;
            			}
HXDLIN( 466)			if (_hx_tmp13) {
HXLINE( 468)				this->_data[Index] = (int)2;
            			}
HXLINE( 471)			bool _hx_tmp15;
HXDLIN( 471)			bool _hx_tmp16;
HXDLIN( 471)			if ((hx::Mod(Index,this->widthInTiles) < (this->widthInTiles - (int)1))) {
HXLINE( 471)				_hx_tmp16 = ((Index - this->widthInTiles) >= (int)0);
            			}
            			else {
HXLINE( 471)				_hx_tmp16 = false;
            			}
HXDLIN( 471)			if (_hx_tmp16) {
HXLINE( 471)				_hx_tmp15 = (this->_data->__get(((Index - this->widthInTiles) + (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 471)				_hx_tmp15 = false;
            			}
HXDLIN( 471)			if (_hx_tmp15) {
HXLINE( 473)				this->_data[Index] = (int)4;
            			}
HXLINE( 476)			bool _hx_tmp17;
HXDLIN( 476)			bool _hx_tmp18;
HXDLIN( 476)			if ((hx::Mod(Index,this->widthInTiles) < (this->widthInTiles - (int)1))) {
HXLINE( 476)				int _hx_tmp19 = ::Std_obj::_hx_int((Index + this->widthInTiles));
HXDLIN( 476)				_hx_tmp18 = (_hx_tmp19 < this->totalTiles);
            			}
            			else {
HXLINE( 476)				_hx_tmp18 = false;
            			}
HXDLIN( 476)			if (_hx_tmp18) {
HXLINE( 476)				_hx_tmp17 = (this->_data->__get(((Index + this->widthInTiles) + (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 476)				_hx_tmp17 = false;
            			}
HXDLIN( 476)			if (_hx_tmp17) {
HXLINE( 478)				this->_data[Index] = (int)8;
            			}
            		}
HXLINE( 482)		::Array< int > _hx_tmp20 = this->_data;
HXDLIN( 482)		_hx_tmp20[Index] = (_hx_tmp20->__get(Index) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,autoTile,(void))

void FlxBaseTilemap_obj::setCustomTileMappings(::Array< int > mappings,::Array< int > randomIndices,::Array< ::Dynamic> randomChoices, ::Dynamic randomLambda){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_495_setCustomTileMappings)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mappings,"mappings")
            	HX_STACK_ARG(randomIndices,"randomIndices")
            	HX_STACK_ARG(randomChoices,"randomChoices")
            	HX_STACK_ARG(randomLambda,"randomLambda")
HXLINE( 496)		this->customTileRemap = mappings;
HXLINE( 497)		this->_randomIndices = randomIndices;
HXLINE( 498)		this->_randomChoices = randomChoices;
HXLINE( 499)		this->_randomLambda = randomLambda;
HXLINE( 502)		bool _hx_tmp;
HXDLIN( 502)		if (hx::IsNotNull( this->_randomIndices )) {
HXLINE( 502)			if (hx::IsNotNull( this->_randomChoices )) {
HXLINE( 502)				_hx_tmp = (this->_randomChoices->length == (int)0);
            			}
            			else {
HXLINE( 502)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 502)			_hx_tmp = false;
            		}
HXDLIN( 502)		if (_hx_tmp) {
HXLINE( 504)			HX_STACK_DO_THROW(HX_("You must provide valid 'randomChoices' if you wish to randomize tilemap indicies, please read documentation of 'setCustomTileMappings' function.",58,d6,21,51));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,setCustomTileMappings,(void))

int FlxBaseTilemap_obj::getTile(int X,int Y){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_517_getTile)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 517)		return this->_data->__get(((Y * this->widthInTiles) + X));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBaseTilemap_obj,getTile,return )

int FlxBaseTilemap_obj::getTileByIndex(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_528_getTileByIndex)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE( 528)		return this->_data->__get(Index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileByIndex,return )

int FlxBaseTilemap_obj::getTileCollisions(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_539_getTileCollisions)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE( 539)		return ( ( ::flixel::FlxObject)(this->_tileObjects->__get(Index)) )->allowCollisions;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileCollisions,return )

::Array< int > FlxBaseTilemap_obj::getTileInstances(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_549_getTileInstances)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE( 550)		HX_VARI( ::Array< int >,array) = null();
HXLINE( 551)		HX_VARI( int,i) = (int)0;
HXLINE( 552)		HX_VARI( int,l) = (this->widthInTiles * this->heightInTiles);
HXLINE( 554)		while((i < l)){
HXLINE( 556)			if ((this->_data->__get(i) == Index)) {
HXLINE( 558)				if (hx::IsNull( array )) {
HXLINE( 560)					array = ::Array_obj< int >::__new(0);
            				}
HXLINE( 562)				array->push(i);
            			}
HXLINE( 564)			i = (i + (int)1);
            		}
HXLINE( 567)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileInstances,return )

bool FlxBaseTilemap_obj::setTile(int X,int Y,int Tile,hx::Null< bool >  __o_UpdateGraphics){
bool UpdateGraphics = __o_UpdateGraphics.Default(true);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_580_setTile)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(Tile,"Tile")
            	HX_STACK_ARG(UpdateGraphics,"UpdateGraphics")
HXLINE( 581)		bool _hx_tmp;
HXDLIN( 581)		if ((X < this->widthInTiles)) {
HXLINE( 581)			_hx_tmp = (Y >= this->heightInTiles);
            		}
            		else {
HXLINE( 581)			_hx_tmp = true;
            		}
HXDLIN( 581)		if (_hx_tmp) {
HXLINE( 583)			return false;
            		}
HXLINE( 586)		return this->setTileByIndex(((Y * this->widthInTiles) + X),Tile,UpdateGraphics);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,setTile,return )

bool FlxBaseTilemap_obj::setTileByIndex(int Index,int Tile,hx::Null< bool >  __o_UpdateGraphics){
bool UpdateGraphics = __o_UpdateGraphics.Default(true);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_598_setTileByIndex)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
            	HX_STACK_ARG(Tile,"Tile")
            	HX_STACK_ARG(UpdateGraphics,"UpdateGraphics")
HXLINE( 599)		if ((Index >= this->_data->length)) {
HXLINE( 601)			return false;
            		}
HXLINE( 605)		this->_data[Index] = Tile;
HXLINE( 607)		if (!(UpdateGraphics)) {
HXLINE( 609)			return true;
            		}
HXLINE( 612)		this->setDirty(null());
HXLINE( 614)		if (hx::IsEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn() )) {
HXLINE( 616)			this->updateTile(this->_data->__get(Index));
HXLINE( 617)			return true;
            		}
HXLINE( 621)		HX_VAR( int,i);
HXLINE( 622)		HX_VARI( int,row) = (::Std_obj::_hx_int(((Float)Index / (Float)this->widthInTiles)) - (int)1);
HXLINE( 623)		HX_VARI( int,rowLength) = (row + (int)3);
HXLINE( 624)		HX_VARI( int,column) = (hx::Mod(Index,this->widthInTiles) - (int)1);
HXLINE( 625)		HX_VARI( int,columnHeight) = (column + (int)3);
HXLINE( 627)		while((row < rowLength)){
HXLINE( 629)			column = (columnHeight - (int)3);
HXLINE( 631)			while((column < columnHeight)){
HXLINE( 633)				bool _hx_tmp;
HXDLIN( 633)				bool _hx_tmp1;
HXDLIN( 633)				bool _hx_tmp2;
HXDLIN( 633)				if ((row >= (int)0)) {
HXLINE( 633)					_hx_tmp2 = (row < this->heightInTiles);
            				}
            				else {
HXLINE( 633)					_hx_tmp2 = false;
            				}
HXDLIN( 633)				if (_hx_tmp2) {
HXLINE( 633)					_hx_tmp1 = (column >= (int)0);
            				}
            				else {
HXLINE( 633)					_hx_tmp1 = false;
            				}
HXDLIN( 633)				if (_hx_tmp1) {
HXLINE( 633)					_hx_tmp = (column < this->widthInTiles);
            				}
            				else {
HXLINE( 633)					_hx_tmp = false;
            				}
HXDLIN( 633)				if (_hx_tmp) {
HXLINE( 635)					i = ((row * this->widthInTiles) + column);
HXLINE( 636)					this->autoTile(i);
HXLINE( 637)					this->updateTile(this->_data->__get(i));
            				}
HXLINE( 639)				column = (column + (int)1);
            			}
HXLINE( 641)			row = (row + (int)1);
            		}
HXLINE( 644)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBaseTilemap_obj,setTileByIndex,return )

void FlxBaseTilemap_obj::setTileProperties(int Tile,hx::Null< int >  __o_AllowCollisions, ::Dynamic Callback,hx::Class CallbackFilter,hx::Null< int >  __o_Range){
int AllowCollisions = __o_AllowCollisions.Default(4369);
int Range = __o_Range.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_658_setTileProperties)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Tile,"Tile")
            	HX_STACK_ARG(AllowCollisions,"AllowCollisions")
            	HX_STACK_ARG(Callback,"Callback")
            	HX_STACK_ARG(CallbackFilter,"CallbackFilter")
            	HX_STACK_ARG(Range,"Range")
HXLINE( 659)		if ((Range <= (int)0)) {
HXLINE( 661)			Range = (int)1;
            		}
HXLINE( 664)		HX_VAR(  ::Dynamic,tile);
HXLINE( 665)		HX_VARI( int,i) = Tile;
HXLINE( 666)		HX_VARI( int,l) = (Tile + Range);
HXLINE( 668)		HX_VARI( int,maxIndex) = this->_tileObjects->get_length();
HXLINE( 669)		if ((l > maxIndex)) {
HXLINE( 671)			HX_STACK_DO_THROW(((((((((HX_("Index ",ee,88,87,c8) + l) + HX_(" exceeds the maximum tile index of ",d9,51,06,f4)) + maxIndex) + HX_(". Please verfiy the Tile (",ee,52,a5,6c)) + Tile) + HX_(") and Range (",25,ce,96,19)) + Range) + HX_(") parameters.",cd,e3,29,61)));
            		}
HXLINE( 674)		while((i < l)){
HXLINE( 676)			i = (i + (int)1);
HXDLIN( 676)			tile = this->_tileObjects->__get((i - (int)1));
HXLINE( 677)			( ( ::flixel::FlxObject)(tile) )->set_allowCollisions(AllowCollisions);
HXLINE( 678)			tile->__SetField(HX_("callbackFunction",fd,cd,91,7e),Callback,hx::paccDynamic);
HXLINE( 679)			tile->__SetField(HX_("filter",b8,1f,35,85),CallbackFilter,hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,setTileProperties,(void))

::Array< int > FlxBaseTilemap_obj::getData(hx::Null< bool >  __o_Simple){
bool Simple = __o_Simple.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_691_getData)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Simple,"Simple")
HXLINE( 692)		if (!(Simple)) {
HXLINE( 694)			return this->_data;
            		}
HXLINE( 697)		HX_VARI( int,i) = (int)0;
HXLINE( 698)		HX_VARI( int,l) = this->_data->length;
HXLINE( 699)		HX_VARI( ::Array< int >,data) = ::Array_obj< int >::__new();
HXLINE( 700)		::flixel::util::FlxArrayUtil_obj::setLength_Int(data,l);
HXLINE( 702)		while((i < l)){
HXLINE( 704)			int _hx_tmp;
HXDLIN( 704)			if ((( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(i))) )->allowCollisions > (int)0)) {
HXLINE( 704)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE( 704)				_hx_tmp = (int)0;
            			}
HXDLIN( 704)			data[i] = _hx_tmp;
HXLINE( 705)			i = (i + (int)1);
            		}
HXLINE( 708)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getData,return )

::Array< ::Dynamic> FlxBaseTilemap_obj::findPath( ::flixel::math::FlxPoint Start, ::flixel::math::FlxPoint End,hx::Null< bool >  __o_Simplify,hx::Null< bool >  __o_RaySimplify,hx::Null< int >  __o_DiagonalPolicy){
bool Simplify = __o_Simplify.Default(true);
bool RaySimplify = __o_RaySimplify.Default(false);
int DiagonalPolicy = __o_DiagonalPolicy.Default(2);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_723_findPath)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Start,"Start")
            	HX_STACK_ARG(End,"End")
            	HX_STACK_ARG(Simplify,"Simplify")
            	HX_STACK_ARG(RaySimplify,"RaySimplify")
            	HX_STACK_ARG(DiagonalPolicy,"DiagonalPolicy")
HXLINE( 725)		HX_VARI( int,startIndex) = this->getTileIndexByCoords(Start);
HXLINE( 726)		HX_VARI( int,endIndex) = this->getTileIndexByCoords(End);
HXLINE( 729)		bool _hx_tmp;
HXDLIN( 729)		if ((( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(startIndex))) )->allowCollisions <= (int)0)) {
HXLINE( 729)			_hx_tmp = (( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(endIndex))) )->allowCollisions > (int)0);
            		}
            		else {
HXLINE( 729)			_hx_tmp = true;
            		}
HXDLIN( 729)		if (_hx_tmp) {
HXLINE( 731)			return null();
            		}
HXLINE( 735)		HX_VARI( ::Array< int >,distances) = this->computePathDistance(startIndex,endIndex,DiagonalPolicy,null());
HXLINE( 737)		if (hx::IsNull( distances )) {
HXLINE( 739)			return null();
            		}
HXLINE( 743)		HX_VARI( ::Array< ::Dynamic>,points) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 744)		this->walkPath(distances,endIndex,points);
HXLINE( 747)		HX_VARI(  ::flixel::math::FlxPoint,node) = points->__get((points->length - (int)1)).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 749)		{
HXLINE( 749)			node->set_x(Start->x);
HXDLIN( 749)			node->set_y(Start->y);
HXDLIN( 749)			if (Start->_weak) {
HXLINE( 749)				Start->put();
            			}
            		}
HXLINE( 750)		node = points->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 751)		{
HXLINE( 751)			node->set_x(End->x);
HXDLIN( 751)			node->set_y(End->y);
HXDLIN( 751)			if (End->_weak) {
HXLINE( 751)				End->put();
            			}
            		}
HXLINE( 754)		if (Simplify) {
HXLINE( 756)			this->simplifyPath(points);
            		}
HXLINE( 758)		if (RaySimplify) {
HXLINE( 760)			this->raySimplifyPath(points);
            		}
HXLINE( 764)		HX_VARI( ::Array< ::Dynamic>,path) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 765)		HX_VARI( int,i) = (points->length - (int)1);
HXLINE( 767)		while((i >= (int)0)){
HXLINE( 769)			i = (i - (int)1);
HXDLIN( 769)			node = points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 771)			if (hx::IsNotNull( node )) {
HXLINE( 773)				path->push(node);
            			}
            		}
HXLINE( 777)		return path;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,findPath,return )

::Array< int > FlxBaseTilemap_obj::computePathDistance(int StartIndex,int EndIndex,int DiagonalPolicy,hx::Null< bool >  __o_StopOnEnd){
bool StopOnEnd = __o_StopOnEnd.Default(true);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_791_computePathDistance)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(StartIndex,"StartIndex")
            	HX_STACK_ARG(EndIndex,"EndIndex")
            	HX_STACK_ARG(DiagonalPolicy,"DiagonalPolicy")
            	HX_STACK_ARG(StopOnEnd,"StopOnEnd")
HXLINE( 794)		HX_VARI( int,mapSize) = (this->widthInTiles * this->heightInTiles);
HXLINE( 795)		HX_VARI( ::Array< int >,distances) = ::Array_obj< int >::__new();
HXLINE( 796)		::flixel::util::FlxArrayUtil_obj::setLength_Int(distances,mapSize);
HXLINE( 797)		HX_VARI( int,i) = (int)0;
HXLINE( 799)		while((i < mapSize)){
HXLINE( 801)			if ((( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(i))) )->allowCollisions != (int)0)) {
HXLINE( 803)				distances[i] = (int)-2;
            			}
            			else {
HXLINE( 807)				distances[i] = (int)-1;
            			}
HXLINE( 809)			i = (i + (int)1);
            		}
HXLINE( 812)		distances[StartIndex] = (int)0;
HXLINE( 813)		HX_VARI( int,distance) = (int)1;
HXLINE( 814)		HX_VARI( ::Array< int >,neighbors) = ::Array_obj< int >::__new(1)->init(0,StartIndex);
HXLINE( 815)		HX_VAR( ::Array< int >,current);
HXLINE( 816)		HX_VAR( int,currentIndex);
HXLINE( 817)		HX_VAR( bool,left);
HXLINE( 818)		HX_VAR( bool,right);
HXLINE( 819)		HX_VAR( bool,up);
HXLINE( 820)		HX_VAR( bool,down);
HXLINE( 821)		HX_VAR( int,currentLength);
HXLINE( 822)		HX_VARI( bool,foundEnd) = false;
HXLINE( 824)		while((neighbors->length > (int)0)){
HXLINE( 826)			current = neighbors;
HXLINE( 827)			neighbors = ::Array_obj< int >::__new();
HXLINE( 829)			i = (int)0;
HXLINE( 830)			currentLength = current->length;
HXLINE( 831)			while((i < currentLength)){
HXLINE( 833)				i = (i + (int)1);
HXDLIN( 833)				currentIndex = current->__get((i - (int)1));
HXLINE( 835)				if ((currentIndex == ::Std_obj::_hx_int(EndIndex))) {
HXLINE( 837)					foundEnd = true;
HXLINE( 838)					if (StopOnEnd) {
HXLINE( 840)						neighbors = ::Array_obj< int >::__new(0);
HXLINE( 841)						goto _hx_goto_48;
            					}
            				}
HXLINE( 846)				left = (hx::Mod(currentIndex,this->widthInTiles) > (int)0);
HXLINE( 847)				right = (hx::Mod(currentIndex,this->widthInTiles) < (this->widthInTiles - (int)1));
HXLINE( 848)				up = (((Float)currentIndex / (Float)this->widthInTiles) > (int)0);
HXLINE( 849)				down = (((Float)currentIndex / (Float)this->widthInTiles) < (this->heightInTiles - (int)1));
HXLINE( 851)				HX_VAR( int,index);
HXLINE( 853)				if (up) {
HXLINE( 855)					index = (currentIndex - this->widthInTiles);
HXLINE( 857)					if ((distances->__get(index) == (int)-1)) {
HXLINE( 859)						distances[index] = distance;
HXLINE( 860)						neighbors->push(index);
            					}
            				}
HXLINE( 863)				if (right) {
HXLINE( 865)					index = (currentIndex + (int)1);
HXLINE( 867)					if ((distances->__get(index) == (int)-1)) {
HXLINE( 869)						distances[index] = distance;
HXLINE( 870)						neighbors->push(index);
            					}
            				}
HXLINE( 873)				if (down) {
HXLINE( 875)					index = (currentIndex + this->widthInTiles);
HXLINE( 877)					if ((distances->__get(index) == (int)-1)) {
HXLINE( 879)						distances[index] = distance;
HXLINE( 880)						neighbors->push(index);
            					}
            				}
HXLINE( 883)				if (left) {
HXLINE( 885)					index = (currentIndex - (int)1);
HXLINE( 887)					if ((distances->__get(index) == (int)-1)) {
HXLINE( 889)						distances[index] = distance;
HXLINE( 890)						neighbors->push(index);
            					}
            				}
HXLINE( 894)				if ((DiagonalPolicy != (int)0)) {
HXLINE( 896)					HX_VARI( bool,wideDiagonal) = (DiagonalPolicy == (int)2);
HXLINE( 897)					bool _hx_tmp;
HXDLIN( 897)					if (up) {
HXLINE( 897)						_hx_tmp = right;
            					}
            					else {
HXLINE( 897)						_hx_tmp = false;
            					}
HXDLIN( 897)					if (_hx_tmp) {
HXLINE( 899)						index = ((currentIndex - this->widthInTiles) + (int)1);
HXLINE( 901)						bool _hx_tmp1;
HXDLIN( 901)						bool _hx_tmp2;
HXDLIN( 901)						bool _hx_tmp3;
HXDLIN( 901)						if (wideDiagonal) {
HXLINE( 901)							_hx_tmp3 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE( 901)							_hx_tmp3 = false;
            						}
HXDLIN( 901)						if (_hx_tmp3) {
HXLINE( 901)							_hx_tmp2 = (distances->__get((currentIndex - this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE( 901)							_hx_tmp2 = false;
            						}
HXDLIN( 901)						if (_hx_tmp2) {
HXLINE( 901)							_hx_tmp1 = (distances->__get((currentIndex + (int)1)) >= (int)-1);
            						}
            						else {
HXLINE( 901)							_hx_tmp1 = false;
            						}
HXDLIN( 901)						if (_hx_tmp1) {
HXLINE( 905)							distances[index] = distance;
HXLINE( 906)							neighbors->push(index);
            						}
            						else {
HXLINE( 908)							bool _hx_tmp4;
HXDLIN( 908)							if (!(wideDiagonal)) {
HXLINE( 908)								_hx_tmp4 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE( 908)								_hx_tmp4 = false;
            							}
HXDLIN( 908)							if (_hx_tmp4) {
HXLINE( 910)								distances[index] = distance;
HXLINE( 911)								neighbors->push(index);
            							}
            						}
            					}
HXLINE( 914)					bool _hx_tmp5;
HXDLIN( 914)					if (right) {
HXLINE( 914)						_hx_tmp5 = down;
            					}
            					else {
HXLINE( 914)						_hx_tmp5 = false;
            					}
HXDLIN( 914)					if (_hx_tmp5) {
HXLINE( 916)						index = ((currentIndex + this->widthInTiles) + (int)1);
HXLINE( 918)						bool _hx_tmp6;
HXDLIN( 918)						bool _hx_tmp7;
HXDLIN( 918)						bool _hx_tmp8;
HXDLIN( 918)						if (wideDiagonal) {
HXLINE( 918)							_hx_tmp8 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE( 918)							_hx_tmp8 = false;
            						}
HXDLIN( 918)						if (_hx_tmp8) {
HXLINE( 918)							_hx_tmp7 = (distances->__get((currentIndex + this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE( 918)							_hx_tmp7 = false;
            						}
HXDLIN( 918)						if (_hx_tmp7) {
HXLINE( 918)							_hx_tmp6 = (distances->__get((currentIndex + (int)1)) >= (int)-1);
            						}
            						else {
HXLINE( 918)							_hx_tmp6 = false;
            						}
HXDLIN( 918)						if (_hx_tmp6) {
HXLINE( 922)							distances[index] = distance;
HXLINE( 923)							neighbors->push(index);
            						}
            						else {
HXLINE( 925)							bool _hx_tmp9;
HXDLIN( 925)							if (!(wideDiagonal)) {
HXLINE( 925)								_hx_tmp9 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE( 925)								_hx_tmp9 = false;
            							}
HXDLIN( 925)							if (_hx_tmp9) {
HXLINE( 927)								distances[index] = distance;
HXLINE( 928)								neighbors->push(index);
            							}
            						}
            					}
HXLINE( 931)					bool _hx_tmp10;
HXDLIN( 931)					if (left) {
HXLINE( 931)						_hx_tmp10 = down;
            					}
            					else {
HXLINE( 931)						_hx_tmp10 = false;
            					}
HXDLIN( 931)					if (_hx_tmp10) {
HXLINE( 933)						index = ((currentIndex + this->widthInTiles) - (int)1);
HXLINE( 935)						bool _hx_tmp11;
HXDLIN( 935)						bool _hx_tmp12;
HXDLIN( 935)						bool _hx_tmp13;
HXDLIN( 935)						if (wideDiagonal) {
HXLINE( 935)							_hx_tmp13 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE( 935)							_hx_tmp13 = false;
            						}
HXDLIN( 935)						if (_hx_tmp13) {
HXLINE( 935)							_hx_tmp12 = (distances->__get((currentIndex + this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE( 935)							_hx_tmp12 = false;
            						}
HXDLIN( 935)						if (_hx_tmp12) {
HXLINE( 935)							_hx_tmp11 = (distances->__get((currentIndex - (int)1)) >= (int)-1);
            						}
            						else {
HXLINE( 935)							_hx_tmp11 = false;
            						}
HXDLIN( 935)						if (_hx_tmp11) {
HXLINE( 939)							distances[index] = distance;
HXLINE( 940)							neighbors->push(index);
            						}
            						else {
HXLINE( 942)							bool _hx_tmp14;
HXDLIN( 942)							if (!(wideDiagonal)) {
HXLINE( 942)								_hx_tmp14 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE( 942)								_hx_tmp14 = false;
            							}
HXDLIN( 942)							if (_hx_tmp14) {
HXLINE( 944)								distances[index] = distance;
HXLINE( 945)								neighbors->push(index);
            							}
            						}
            					}
HXLINE( 948)					bool _hx_tmp15;
HXDLIN( 948)					if (up) {
HXLINE( 948)						_hx_tmp15 = left;
            					}
            					else {
HXLINE( 948)						_hx_tmp15 = false;
            					}
HXDLIN( 948)					if (_hx_tmp15) {
HXLINE( 950)						index = ((currentIndex - this->widthInTiles) - (int)1);
HXLINE( 952)						bool _hx_tmp16;
HXDLIN( 952)						bool _hx_tmp17;
HXDLIN( 952)						bool _hx_tmp18;
HXDLIN( 952)						if (wideDiagonal) {
HXLINE( 952)							_hx_tmp18 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE( 952)							_hx_tmp18 = false;
            						}
HXDLIN( 952)						if (_hx_tmp18) {
HXLINE( 952)							_hx_tmp17 = (distances->__get((currentIndex - this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE( 952)							_hx_tmp17 = false;
            						}
HXDLIN( 952)						if (_hx_tmp17) {
HXLINE( 952)							_hx_tmp16 = (distances->__get((currentIndex - (int)1)) >= (int)-1);
            						}
            						else {
HXLINE( 952)							_hx_tmp16 = false;
            						}
HXDLIN( 952)						if (_hx_tmp16) {
HXLINE( 956)							distances[index] = distance;
HXLINE( 957)							neighbors->push(index);
            						}
            						else {
HXLINE( 959)							bool _hx_tmp19;
HXDLIN( 959)							if (!(wideDiagonal)) {
HXLINE( 959)								_hx_tmp19 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE( 959)								_hx_tmp19 = false;
            							}
HXDLIN( 959)							if (_hx_tmp19) {
HXLINE( 961)								distances[index] = distance;
HXLINE( 962)								neighbors->push(index);
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_48:;
HXLINE( 968)			distance = (distance + (int)1);
            		}
HXLINE( 970)		if (!(foundEnd)) {
HXLINE( 972)			distances = null();
            		}
HXLINE( 975)		return distances;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,computePathDistance,return )

void FlxBaseTilemap_obj::walkPath(::Array< int > Data,int Start,::Array< ::Dynamic> Points){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_986_walkPath)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Data,"Data")
            	HX_STACK_ARG(Start,"Start")
            	HX_STACK_ARG(Points,"Points")
HXLINE( 987)		Points->push(this->getTileCoordsByIndex(Start,null()));
HXLINE( 989)		if ((Data->__get(Start) == (int)0)) {
HXLINE( 991)			return;
            		}
HXLINE( 995)		HX_VARI( bool,left) = (hx::Mod(Start,this->widthInTiles) > (int)0);
HXLINE( 996)		HX_VARI( bool,right) = (hx::Mod(Start,this->widthInTiles) < (this->widthInTiles - (int)1));
HXLINE( 997)		HX_VARI( bool,up) = (((Float)Start / (Float)this->widthInTiles) > (int)0);
HXLINE( 998)		HX_VARI( bool,down) = (((Float)Start / (Float)this->widthInTiles) < (this->heightInTiles - (int)1));
HXLINE(1000)		HX_VARI( int,current) = Data->__get(Start);
HXLINE(1001)		HX_VAR( int,i);
HXLINE(1003)		if (up) {
HXLINE(1005)			i = (Start - this->widthInTiles);
HXLINE(1007)			bool _hx_tmp;
HXDLIN(1007)			bool _hx_tmp1;
HXDLIN(1007)			if ((i >= (int)0)) {
HXLINE(1007)				_hx_tmp1 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1007)				_hx_tmp1 = false;
            			}
HXDLIN(1007)			if (_hx_tmp1) {
HXLINE(1007)				_hx_tmp = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1007)				_hx_tmp = false;
            			}
HXDLIN(1007)			if (_hx_tmp) {
HXLINE(1009)				this->walkPath(Data,i,Points);
HXDLIN(1009)				return;
            			}
            		}
HXLINE(1012)		if (right) {
HXLINE(1014)			i = (Start + (int)1);
HXLINE(1016)			bool _hx_tmp2;
HXDLIN(1016)			bool _hx_tmp3;
HXDLIN(1016)			if ((i >= (int)0)) {
HXLINE(1016)				_hx_tmp3 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1016)				_hx_tmp3 = false;
            			}
HXDLIN(1016)			if (_hx_tmp3) {
HXLINE(1016)				_hx_tmp2 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1016)				_hx_tmp2 = false;
            			}
HXDLIN(1016)			if (_hx_tmp2) {
HXLINE(1018)				this->walkPath(Data,i,Points);
HXDLIN(1018)				return;
            			}
            		}
HXLINE(1021)		if (down) {
HXLINE(1023)			i = (Start + this->widthInTiles);
HXLINE(1025)			bool _hx_tmp4;
HXDLIN(1025)			bool _hx_tmp5;
HXDLIN(1025)			if ((i >= (int)0)) {
HXLINE(1025)				_hx_tmp5 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1025)				_hx_tmp5 = false;
            			}
HXDLIN(1025)			if (_hx_tmp5) {
HXLINE(1025)				_hx_tmp4 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1025)				_hx_tmp4 = false;
            			}
HXDLIN(1025)			if (_hx_tmp4) {
HXLINE(1027)				this->walkPath(Data,i,Points);
HXDLIN(1027)				return;
            			}
            		}
HXLINE(1030)		if (left) {
HXLINE(1032)			i = (Start - (int)1);
HXLINE(1034)			bool _hx_tmp6;
HXDLIN(1034)			bool _hx_tmp7;
HXDLIN(1034)			if ((i >= (int)0)) {
HXLINE(1034)				_hx_tmp7 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1034)				_hx_tmp7 = false;
            			}
HXDLIN(1034)			if (_hx_tmp7) {
HXLINE(1034)				_hx_tmp6 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1034)				_hx_tmp6 = false;
            			}
HXDLIN(1034)			if (_hx_tmp6) {
HXLINE(1036)				this->walkPath(Data,i,Points);
HXDLIN(1036)				return;
            			}
            		}
HXLINE(1039)		bool _hx_tmp8;
HXDLIN(1039)		if (up) {
HXLINE(1039)			_hx_tmp8 = right;
            		}
            		else {
HXLINE(1039)			_hx_tmp8 = false;
            		}
HXDLIN(1039)		if (_hx_tmp8) {
HXLINE(1041)			i = ((Start - this->widthInTiles) + (int)1);
HXLINE(1043)			bool _hx_tmp9;
HXDLIN(1043)			bool _hx_tmp10;
HXDLIN(1043)			if ((i >= (int)0)) {
HXLINE(1043)				_hx_tmp10 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1043)				_hx_tmp10 = false;
            			}
HXDLIN(1043)			if (_hx_tmp10) {
HXLINE(1043)				_hx_tmp9 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1043)				_hx_tmp9 = false;
            			}
HXDLIN(1043)			if (_hx_tmp9) {
HXLINE(1045)				this->walkPath(Data,i,Points);
HXDLIN(1045)				return;
            			}
            		}
HXLINE(1048)		bool _hx_tmp11;
HXDLIN(1048)		if (right) {
HXLINE(1048)			_hx_tmp11 = down;
            		}
            		else {
HXLINE(1048)			_hx_tmp11 = false;
            		}
HXDLIN(1048)		if (_hx_tmp11) {
HXLINE(1050)			i = ((Start + this->widthInTiles) + (int)1);
HXLINE(1052)			bool _hx_tmp12;
HXDLIN(1052)			bool _hx_tmp13;
HXDLIN(1052)			if ((i >= (int)0)) {
HXLINE(1052)				_hx_tmp13 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1052)				_hx_tmp13 = false;
            			}
HXDLIN(1052)			if (_hx_tmp13) {
HXLINE(1052)				_hx_tmp12 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1052)				_hx_tmp12 = false;
            			}
HXDLIN(1052)			if (_hx_tmp12) {
HXLINE(1054)				this->walkPath(Data,i,Points);
HXDLIN(1054)				return;
            			}
            		}
HXLINE(1057)		bool _hx_tmp14;
HXDLIN(1057)		if (left) {
HXLINE(1057)			_hx_tmp14 = down;
            		}
            		else {
HXLINE(1057)			_hx_tmp14 = false;
            		}
HXDLIN(1057)		if (_hx_tmp14) {
HXLINE(1059)			i = ((Start + this->widthInTiles) - (int)1);
HXLINE(1061)			bool _hx_tmp15;
HXDLIN(1061)			bool _hx_tmp16;
HXDLIN(1061)			if ((i >= (int)0)) {
HXLINE(1061)				_hx_tmp16 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1061)				_hx_tmp16 = false;
            			}
HXDLIN(1061)			if (_hx_tmp16) {
HXLINE(1061)				_hx_tmp15 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1061)				_hx_tmp15 = false;
            			}
HXDLIN(1061)			if (_hx_tmp15) {
HXLINE(1063)				this->walkPath(Data,i,Points);
HXDLIN(1063)				return;
            			}
            		}
HXLINE(1066)		bool _hx_tmp17;
HXDLIN(1066)		if (up) {
HXLINE(1066)			_hx_tmp17 = left;
            		}
            		else {
HXLINE(1066)			_hx_tmp17 = false;
            		}
HXDLIN(1066)		if (_hx_tmp17) {
HXLINE(1068)			i = ((Start - this->widthInTiles) - (int)1);
HXLINE(1070)			bool _hx_tmp18;
HXDLIN(1070)			bool _hx_tmp19;
HXDLIN(1070)			if ((i >= (int)0)) {
HXLINE(1070)				_hx_tmp19 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1070)				_hx_tmp19 = false;
            			}
HXDLIN(1070)			if (_hx_tmp19) {
HXLINE(1070)				_hx_tmp18 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1070)				_hx_tmp18 = false;
            			}
HXDLIN(1070)			if (_hx_tmp18) {
HXLINE(1072)				this->walkPath(Data,i,Points);
HXDLIN(1072)				return;
            			}
            		}
HXLINE(1076)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBaseTilemap_obj,walkPath,(void))

void FlxBaseTilemap_obj::simplifyPath(::Array< ::Dynamic> Points){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1085_simplifyPath)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Points,"Points")
HXLINE(1086)		HX_VAR( Float,deltaPrevious);
HXLINE(1087)		HX_VAR( Float,deltaNext);
HXLINE(1088)		HX_VARI(  ::flixel::math::FlxPoint,last) = Points->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1089)		HX_VAR(  ::flixel::math::FlxPoint,node);
HXLINE(1090)		HX_VARI( int,i) = (int)1;
HXLINE(1091)		HX_VARI( int,l) = (Points->length - (int)1);
HXLINE(1093)		while((i < l)){
HXLINE(1095)			node = Points->__get(i).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1096)			deltaPrevious = ((Float)(node->x - last->x) / (Float)(node->y - last->y));
HXLINE(1097)			deltaNext = ((Float)(node->x - Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->x) / (Float)(node->y - Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->y));
HXLINE(1099)			bool _hx_tmp;
HXDLIN(1099)			bool _hx_tmp1;
HXDLIN(1099)			if ((last->x != Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->x)) {
HXLINE(1099)				_hx_tmp1 = (last->y == Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->y);
            			}
            			else {
HXLINE(1099)				_hx_tmp1 = true;
            			}
HXDLIN(1099)			if (!(_hx_tmp1)) {
HXLINE(1099)				_hx_tmp = (deltaPrevious == deltaNext);
            			}
            			else {
HXLINE(1099)				_hx_tmp = true;
            			}
HXDLIN(1099)			if (_hx_tmp) {
HXLINE(1101)				Points[i] = null();
            			}
            			else {
HXLINE(1105)				last = node;
            			}
HXLINE(1108)			i = (i + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,simplifyPath,(void))

void FlxBaseTilemap_obj::raySimplifyPath(::Array< ::Dynamic> Points){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1118_raySimplifyPath)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Points,"Points")
HXLINE(1119)		HX_VARI(  ::flixel::math::FlxPoint,source) = Points->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1120)		HX_VARI( int,lastIndex) = (int)-1;
HXLINE(1121)		HX_VAR(  ::flixel::math::FlxPoint,node);
HXLINE(1122)		HX_VARI( int,i) = (int)1;
HXLINE(1123)		HX_VARI( int,l) = Points->length;
HXLINE(1125)		while((i < l)){
HXLINE(1127)			i = (i + (int)1);
HXDLIN(1127)			node = Points->__get((i - (int)1)).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1129)			if (hx::IsNull( node )) {
HXLINE(1131)				continue;
            			}
HXLINE(1134)			if (this->ray(source,node,this->_point,null())) {
HXLINE(1136)				if ((lastIndex >= (int)0)) {
HXLINE(1138)					Points[lastIndex] = null();
            				}
            			}
            			else {
HXLINE(1143)				source = Points->__get(lastIndex).StaticCast<  ::flixel::math::FlxPoint >();
            			}
HXLINE(1146)			lastIndex = (i - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,raySimplifyPath,(void))

bool FlxBaseTilemap_obj::overlaps( ::flixel::FlxBasic ObjectOrGroup,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1162_overlaps)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1163)		HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(ObjectOrGroup);
HXLINE(1164)		if (hx::IsNotNull( group )) {
HXLINE(1166)			return ::flixel::group::FlxTypedGroup_obj::overlaps(this->tilemapOverlapsCallback_dyn(),group,(int)0,(int)0,InScreenSpace,Camera);
            		}
            		else {
HXLINE(1168)			bool _hx_tmp;
HXDLIN(1168)			bool _hx_tmp1;
HXDLIN(1168)			if ((ObjectOrGroup->flixelType != (int)1)) {
HXLINE(1168)				_hx_tmp1 = (ObjectOrGroup->flixelType == (int)3);
            			}
            			else {
HXLINE(1168)				_hx_tmp1 = true;
            			}
HXDLIN(1168)			if (_hx_tmp1) {
HXLINE(1168)				_hx_tmp = this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),null(),null());
            			}
            			else {
HXLINE(1168)				_hx_tmp = this->overlaps(ObjectOrGroup,false,null());
            			}
HXDLIN(1168)			if (_hx_tmp) {
HXLINE(1170)				return true;
            			}
            		}
HXLINE(1172)		return false;
            	}


bool FlxBaseTilemap_obj::tilemapOverlapsCallback( ::flixel::FlxBasic ObjectOrGroup,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1177_tilemapOverlapsCallback)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1177)		bool _hx_tmp;
HXDLIN(1177)		if ((ObjectOrGroup->flixelType != (int)1)) {
HXLINE(1177)			_hx_tmp = (ObjectOrGroup->flixelType == (int)3);
            		}
            		else {
HXLINE(1177)			_hx_tmp = true;
            		}
HXDLIN(1177)		if (_hx_tmp) {
HXLINE(1179)			return this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),null(),null());
            		}
            		else {
HXLINE(1183)			return this->overlaps(ObjectOrGroup,InScreenSpace,Camera);
            		}
HXLINE(1177)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,tilemapOverlapsCallback,return )

bool FlxBaseTilemap_obj::overlapsAt(Float X,Float Y, ::flixel::FlxBasic ObjectOrGroup,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1201_overlapsAt)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1202)		HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(ObjectOrGroup);
HXLINE(1203)		if (hx::IsNotNull( group )) {
HXLINE(1205)			return ::flixel::group::FlxTypedGroup_obj::overlaps(this->tilemapOverlapsAtCallback_dyn(),group,X,Y,InScreenSpace,Camera);
            		}
            		else {
HXLINE(1207)			bool _hx_tmp;
HXDLIN(1207)			bool _hx_tmp1;
HXDLIN(1207)			if ((ObjectOrGroup->flixelType != (int)1)) {
HXLINE(1207)				_hx_tmp1 = (ObjectOrGroup->flixelType == (int)3);
            			}
            			else {
HXLINE(1207)				_hx_tmp1 = true;
            			}
HXDLIN(1207)			if (_hx_tmp1) {
HXLINE(1207)				_hx_tmp = this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),false,this->_point->set(X,Y));
            			}
            			else {
HXLINE(1207)				_hx_tmp = this->overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
            			}
HXDLIN(1207)			if (_hx_tmp) {
HXLINE(1209)				return true;
            			}
            		}
HXLINE(1212)		return false;
            	}


bool FlxBaseTilemap_obj::tilemapOverlapsAtCallback( ::flixel::FlxBasic ObjectOrGroup,Float X,Float Y,bool InScreenSpace, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1217_tilemapOverlapsAtCallback)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1217)		bool _hx_tmp;
HXDLIN(1217)		if ((ObjectOrGroup->flixelType != (int)1)) {
HXLINE(1217)			_hx_tmp = (ObjectOrGroup->flixelType == (int)3);
            		}
            		else {
HXLINE(1217)			_hx_tmp = true;
            		}
HXDLIN(1217)		if (_hx_tmp) {
HXLINE(1219)			return this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),false,this->_point->set(X,Y));
            		}
            		else {
HXLINE(1223)			return this->overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
            		}
HXLINE(1217)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,tilemapOverlapsAtCallback,return )

bool FlxBaseTilemap_obj::overlapsPoint( ::flixel::math::FlxPoint WorldPoint,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1236_overlapsPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(WorldPoint,"WorldPoint")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(1237)		if (!(InScreenSpace)) {
HXLINE(1238)			return this->tileAtPointAllowsCollisions(WorldPoint);
            		}
HXLINE(1240)		if (hx::IsNull( Camera )) {
HXLINE(1241)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE(1243)		WorldPoint->subtractPoint(Camera->scroll);
HXLINE(1244)		if (WorldPoint->_weak) {
HXLINE(1244)			WorldPoint->put();
            		}
HXLINE(1245)		return this->tileAtPointAllowsCollisions(WorldPoint);
            	}


bool FlxBaseTilemap_obj::tileAtPointAllowsCollisions( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1249_tileAtPointAllowsCollisions)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE(1250)		HX_VARI( int,tileIndex) = this->getTileIndexByCoords(point);
HXLINE(1251)		bool _hx_tmp;
HXDLIN(1251)		if ((tileIndex >= (int)0)) {
HXLINE(1251)			_hx_tmp = (tileIndex >= this->_data->length);
            		}
            		else {
HXLINE(1251)			_hx_tmp = true;
            		}
HXDLIN(1251)		if (_hx_tmp) {
HXLINE(1252)			return false;
            		}
HXLINE(1253)		return (( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(tileIndex))) )->allowCollisions > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,tileAtPointAllowsCollisions,return )

 ::flixel::math::FlxRect FlxBaseTilemap_obj::getBounds( ::flixel::math::FlxRect Bounds){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1263_getBounds)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Bounds,"Bounds")
HXLINE(1264)		if (hx::IsNull( Bounds )) {
HXLINE(1265)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1265)			_this->x = (int)0;
HXDLIN(1265)			_this->y = (int)0;
HXDLIN(1265)			_this->width = (int)0;
HXDLIN(1265)			_this->height = (int)0;
HXDLIN(1265)			_this->_inPool = false;
HXDLIN(1265)			Bounds = _this;
            		}
HXLINE(1267)		Float X = this->x;
HXDLIN(1267)		Float Y = this->y;
HXDLIN(1267)		Float Width = this->get_width();
HXDLIN(1267)		Float Height = this->get_height();
HXDLIN(1267)		Bounds->x = X;
HXDLIN(1267)		Bounds->y = Y;
HXDLIN(1267)		Bounds->width = Width;
HXDLIN(1267)		Bounds->height = Height;
HXDLIN(1267)		return Bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getBounds,return )


hx::ObjectPtr< FlxBaseTilemap_obj > FlxBaseTilemap_obj::__new() {
	hx::ObjectPtr< FlxBaseTilemap_obj > __this = new FlxBaseTilemap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxBaseTilemap_obj > FlxBaseTilemap_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxBaseTilemap_obj *__this = (FlxBaseTilemap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxBaseTilemap_obj), true, "flixel.tile.FlxBaseTilemap"));
	*(void **)__this = FlxBaseTilemap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxBaseTilemap_obj::FlxBaseTilemap_obj()
{
}

void FlxBaseTilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxBaseTilemap);
	HX_MARK_MEMBER_NAME(_hx_auto,"auto");
	HX_MARK_MEMBER_NAME(widthInTiles,"widthInTiles");
	HX_MARK_MEMBER_NAME(heightInTiles,"heightInTiles");
	HX_MARK_MEMBER_NAME(totalTiles,"totalTiles");
	HX_MARK_MEMBER_NAME(customTileRemap,"customTileRemap");
	HX_MARK_MEMBER_NAME(_randomIndices,"_randomIndices");
	HX_MARK_MEMBER_NAME(_randomChoices,"_randomChoices");
	HX_MARK_MEMBER_NAME(_randomLambda,"_randomLambda");
	HX_MARK_MEMBER_NAME(_tileObjects,"_tileObjects");
	HX_MARK_MEMBER_NAME(_startingIndex,"_startingIndex");
	HX_MARK_MEMBER_NAME(_data,"_data");
	HX_MARK_MEMBER_NAME(_drawIndex,"_drawIndex");
	HX_MARK_MEMBER_NAME(_collideIndex,"_collideIndex");
	 ::flixel::FlxObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxBaseTilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx_auto,"auto");
	HX_VISIT_MEMBER_NAME(widthInTiles,"widthInTiles");
	HX_VISIT_MEMBER_NAME(heightInTiles,"heightInTiles");
	HX_VISIT_MEMBER_NAME(totalTiles,"totalTiles");
	HX_VISIT_MEMBER_NAME(customTileRemap,"customTileRemap");
	HX_VISIT_MEMBER_NAME(_randomIndices,"_randomIndices");
	HX_VISIT_MEMBER_NAME(_randomChoices,"_randomChoices");
	HX_VISIT_MEMBER_NAME(_randomLambda,"_randomLambda");
	HX_VISIT_MEMBER_NAME(_tileObjects,"_tileObjects");
	HX_VISIT_MEMBER_NAME(_startingIndex,"_startingIndex");
	HX_VISIT_MEMBER_NAME(_data,"_data");
	HX_VISIT_MEMBER_NAME(_drawIndex,"_drawIndex");
	HX_VISIT_MEMBER_NAME(_collideIndex,"_collideIndex");
	 ::flixel::FlxObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxBaseTilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { return hx::Val( ray_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"auto") ) { return hx::Val( _hx_auto); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_data") ) { return hx::Val( _data); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"getTile") ) { return hx::Val( getTile_dyn()); }
		if (HX_FIELD_EQ(inName,"setTile") ) { return hx::Val( setTile_dyn()); }
		if (HX_FIELD_EQ(inName,"getData") ) { return hx::Val( getData_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setDirty") ) { return hx::Val( setDirty_dyn()); }
		if (HX_FIELD_EQ(inName,"autoTile") ) { return hx::Val( autoTile_dyn()); }
		if (HX_FIELD_EQ(inName,"findPath") ) { return hx::Val( findPath_dyn()); }
		if (HX_FIELD_EQ(inName,"walkPath") ) { return hx::Val( walkPath_dyn()); }
		if (HX_FIELD_EQ(inName,"overlaps") ) { return hx::Val( overlaps_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"updateMap") ) { return hx::Val( updateMap_dyn()); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalTiles") ) { return hx::Val( totalTiles); }
		if (HX_FIELD_EQ(inName,"_drawIndex") ) { return hx::Val( _drawIndex); }
		if (HX_FIELD_EQ(inName,"updateTile") ) { return hx::Val( updateTile_dyn()); }
		if (HX_FIELD_EQ(inName,"overlapsAt") ) { return hx::Val( overlapsAt_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"widthInTiles") ) { return hx::Val( widthInTiles); }
		if (HX_FIELD_EQ(inName,"_tileObjects") ) { return hx::Val( _tileObjects); }
		if (HX_FIELD_EQ(inName,"simplifyPath") ) { return hx::Val( simplifyPath_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"heightInTiles") ) { return hx::Val( heightInTiles); }
		if (HX_FIELD_EQ(inName,"_randomLambda") ) { return hx::Val( _randomLambda); }
		if (HX_FIELD_EQ(inName,"_collideIndex") ) { return hx::Val( _collideIndex); }
		if (HX_FIELD_EQ(inName,"cacheGraphics") ) { return hx::Val( cacheGraphics_dyn()); }
		if (HX_FIELD_EQ(inName,"loadMapHelper") ) { return hx::Val( loadMapHelper_dyn()); }
		if (HX_FIELD_EQ(inName,"applyAutoTile") ) { return hx::Val( applyAutoTile_dyn()); }
		if (HX_FIELD_EQ(inName,"overlapsPoint") ) { return hx::Val( overlapsPoint_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_randomIndices") ) { return hx::Val( _randomIndices); }
		if (HX_FIELD_EQ(inName,"_randomChoices") ) { return hx::Val( _randomChoices); }
		if (HX_FIELD_EQ(inName,"_startingIndex") ) { return hx::Val( _startingIndex); }
		if (HX_FIELD_EQ(inName,"loadMapFromCSV") ) { return hx::Val( loadMapFromCSV_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileByIndex") ) { return hx::Val( getTileByIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"setTileByIndex") ) { return hx::Val( setTileByIndex_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"customTileRemap") ) { return hx::Val( customTileRemap); }
		if (HX_FIELD_EQ(inName,"initTileObjects") ) { return hx::Val( initTileObjects_dyn()); }
		if (HX_FIELD_EQ(inName,"postGraphicLoad") ) { return hx::Val( postGraphicLoad_dyn()); }
		if (HX_FIELD_EQ(inName,"raySimplifyPath") ) { return hx::Val( raySimplifyPath_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadMapFromArray") ) { return hx::Val( loadMapFromArray_dyn()); }
		if (HX_FIELD_EQ(inName,"applyCustomRemap") ) { return hx::Val( applyCustomRemap_dyn()); }
		if (HX_FIELD_EQ(inName,"randomizeIndices") ) { return hx::Val( randomizeIndices_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileInstances") ) { return hx::Val( getTileInstances_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"computeDimensions") ) { return hx::Val( computeDimensions_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileCollisions") ) { return hx::Val( getTileCollisions_dyn()); }
		if (HX_FIELD_EQ(inName,"setTileProperties") ) { return hx::Val( setTileProperties_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"loadMapFrom2DArray") ) { return hx::Val( loadMapFrom2DArray_dyn()); }
		if (HX_FIELD_EQ(inName,"loadMapFromGraphic") ) { return hx::Val( loadMapFromGraphic_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"computePathDistance") ) { return hx::Val( computePathDistance_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getTileIndexByCoords") ) { return hx::Val( getTileIndexByCoords_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileCoordsByIndex") ) { return hx::Val( getTileCoordsByIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"overlapsWithCallback") ) { return hx::Val( overlapsWithCallback_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setCustomTileMappings") ) { return hx::Val( setCustomTileMappings_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"tilemapOverlapsCallback") ) { return hx::Val( tilemapOverlapsCallback_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"tilemapOverlapsAtCallback") ) { return hx::Val( tilemapOverlapsAtCallback_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"tileAtPointAllowsCollisions") ) { return hx::Val( tileAtPointAllowsCollisions_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxBaseTilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"auto") ) { _hx_auto=inValue.Cast<  ::flixel::tile::FlxTilemapAutoTiling >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_data") ) { _data=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalTiles") ) { totalTiles=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_drawIndex") ) { _drawIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"widthInTiles") ) { widthInTiles=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tileObjects") ) { _tileObjects=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"heightInTiles") ) { heightInTiles=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_randomLambda") ) { _randomLambda=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_collideIndex") ) { _collideIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_randomIndices") ) { _randomIndices=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_randomChoices") ) { _randomChoices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_startingIndex") ) { _startingIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"customTileRemap") ) { customTileRemap=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxBaseTilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40"));
	outFields->push(HX_HCSTRING("widthInTiles","\xfa","\xb1","\x71","\xd4"));
	outFields->push(HX_HCSTRING("heightInTiles","\x39","\xce","\x1a","\x97"));
	outFields->push(HX_HCSTRING("totalTiles","\x21","\xf3","\xd5","\x16"));
	outFields->push(HX_HCSTRING("customTileRemap","\xca","\x70","\xd3","\x8a"));
	outFields->push(HX_HCSTRING("_randomIndices","\xa5","\xd3","\x07","\x36"));
	outFields->push(HX_HCSTRING("_randomChoices","\x70","\x42","\xcb","\x2b"));
	outFields->push(HX_HCSTRING("_tileObjects","\x47","\x55","\xbd","\x87"));
	outFields->push(HX_HCSTRING("_startingIndex","\x73","\xa1","\x49","\x3d"));
	outFields->push(HX_HCSTRING("_data","\x09","\x72","\x74","\xf5"));
	outFields->push(HX_HCSTRING("_drawIndex","\x2f","\x4c","\xc2","\xe1"));
	outFields->push(HX_HCSTRING("_collideIndex","\x93","\x05","\x8a","\xb4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxBaseTilemap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::tile::FlxTilemapAutoTiling*/ ,(int)offsetof(FlxBaseTilemap_obj,_hx_auto),HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,widthInTiles),HX_HCSTRING("widthInTiles","\xfa","\xb1","\x71","\xd4")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,heightInTiles),HX_HCSTRING("heightInTiles","\x39","\xce","\x1a","\x97")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,totalTiles),HX_HCSTRING("totalTiles","\x21","\xf3","\xd5","\x16")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxBaseTilemap_obj,customTileRemap),HX_HCSTRING("customTileRemap","\xca","\x70","\xd3","\x8a")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxBaseTilemap_obj,_randomIndices),HX_HCSTRING("_randomIndices","\xa5","\xd3","\x07","\x36")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxBaseTilemap_obj,_randomChoices),HX_HCSTRING("_randomChoices","\x70","\x42","\xcb","\x2b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxBaseTilemap_obj,_randomLambda),HX_HCSTRING("_randomLambda","\x49","\x40","\x18","\x0b")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxBaseTilemap_obj,_tileObjects),HX_HCSTRING("_tileObjects","\x47","\x55","\xbd","\x87")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,_startingIndex),HX_HCSTRING("_startingIndex","\x73","\xa1","\x49","\x3d")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxBaseTilemap_obj,_data),HX_HCSTRING("_data","\x09","\x72","\x74","\xf5")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,_drawIndex),HX_HCSTRING("_drawIndex","\x2f","\x4c","\xc2","\xe1")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,_collideIndex),HX_HCSTRING("_collideIndex","\x93","\x05","\x8a","\xb4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxBaseTilemap_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxBaseTilemap_obj_sMemberFields[] = {
	HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40"),
	HX_HCSTRING("widthInTiles","\xfa","\xb1","\x71","\xd4"),
	HX_HCSTRING("heightInTiles","\x39","\xce","\x1a","\x97"),
	HX_HCSTRING("totalTiles","\x21","\xf3","\xd5","\x16"),
	HX_HCSTRING("customTileRemap","\xca","\x70","\xd3","\x8a"),
	HX_HCSTRING("_randomIndices","\xa5","\xd3","\x07","\x36"),
	HX_HCSTRING("_randomChoices","\x70","\x42","\xcb","\x2b"),
	HX_HCSTRING("_randomLambda","\x49","\x40","\x18","\x0b"),
	HX_HCSTRING("_tileObjects","\x47","\x55","\xbd","\x87"),
	HX_HCSTRING("_startingIndex","\x73","\xa1","\x49","\x3d"),
	HX_HCSTRING("_data","\x09","\x72","\x74","\xf5"),
	HX_HCSTRING("_drawIndex","\x2f","\x4c","\xc2","\xe1"),
	HX_HCSTRING("_collideIndex","\x93","\x05","\x8a","\xb4"),
	HX_HCSTRING("updateTile","\xd7","\xb5","\xb1","\x05"),
	HX_HCSTRING("cacheGraphics","\x2d","\x61","\x95","\xfc"),
	HX_HCSTRING("initTileObjects","\x16","\xbe","\x45","\x2e"),
	HX_HCSTRING("updateMap","\x13","\xe8","\xdf","\x82"),
	HX_HCSTRING("computeDimensions","\xa4","\xa4","\xeb","\xf3"),
	HX_HCSTRING("getTileIndexByCoords","\x03","\x79","\x8b","\x76"),
	HX_HCSTRING("getTileCoordsByIndex","\xb9","\x63","\x25","\xa1"),
	HX_HCSTRING("ray","\xea","\xd5","\x56","\x00"),
	HX_HCSTRING("overlapsWithCallback","\x17","\xc3","\x72","\xa8"),
	HX_HCSTRING("setDirty","\x10","\xb9","\x04","\xe8"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("loadMapFromCSV","\x06","\x2b","\x38","\x8f"),
	HX_HCSTRING("loadMapFromArray","\xd9","\x80","\xa3","\xdb"),
	HX_HCSTRING("loadMapFrom2DArray","\xc7","\xd3","\x90","\xac"),
	HX_HCSTRING("loadMapFromGraphic","\xe8","\xbd","\xb6","\xe5"),
	HX_HCSTRING("loadMapHelper","\x24","\xaa","\x93","\x69"),
	HX_HCSTRING("postGraphicLoad","\x6e","\x44","\x44","\x1d"),
	HX_HCSTRING("applyAutoTile","\xcb","\x19","\x58","\x70"),
	HX_HCSTRING("applyCustomRemap","\x8a","\x6c","\x0c","\xb4"),
	HX_HCSTRING("randomizeIndices","\xf6","\x8d","\x4c","\x14"),
	HX_HCSTRING("autoTile","\x3d","\xba","\x22","\x30"),
	HX_HCSTRING("setCustomTileMappings","\x86","\x00","\x11","\x09"),
	HX_HCSTRING("getTile","\xe4","\x7a","\x7f","\x1f"),
	HX_HCSTRING("getTileByIndex","\x37","\xbb","\xaa","\xc4"),
	HX_HCSTRING("getTileCollisions","\xc5","\x3f","\x3d","\xc8"),
	HX_HCSTRING("getTileInstances","\xba","\x6b","\x01","\x25"),
	HX_HCSTRING("setTile","\xf0","\x0b","\x81","\x12"),
	HX_HCSTRING("setTileByIndex","\xab","\xa3","\xca","\xe4"),
	HX_HCSTRING("setTileProperties","\x03","\x58","\xa1","\x54"),
	HX_HCSTRING("getData","\xe0","\x05","\xe6","\x14"),
	HX_HCSTRING("findPath","\x7e","\xf2","\xe5","\x9c"),
	HX_HCSTRING("computePathDistance","\x11","\x4c","\x56","\x20"),
	HX_HCSTRING("walkPath","\x4e","\x27","\xab","\x57"),
	HX_HCSTRING("simplifyPath","\x4e","\x21","\x2f","\x66"),
	HX_HCSTRING("raySimplifyPath","\x58","\x7a","\xf6","\x41"),
	HX_HCSTRING("overlaps","\x0c","\xd3","\x2a","\x45"),
	HX_HCSTRING("tilemapOverlapsCallback","\x3f","\x9d","\xf8","\xac"),
	HX_HCSTRING("overlapsAt","\x1f","\xe7","\xce","\x03"),
	HX_HCSTRING("tilemapOverlapsAtCallback","\xd2","\xab","\x68","\xdb"),
	HX_HCSTRING("overlapsPoint","\xa4","\xc5","\xbd","\x35"),
	HX_HCSTRING("tileAtPointAllowsCollisions","\x1a","\x5b","\x2f","\xf6"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	::String(null()) };

static void FlxBaseTilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxBaseTilemap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxBaseTilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxBaseTilemap_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxBaseTilemap_obj::__mClass;

void FlxBaseTilemap_obj::__register()
{
	hx::Object *dummy = new FlxBaseTilemap_obj;
	FlxBaseTilemap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tile.FlxBaseTilemap","\x19","\xd7","\xa6","\x6a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxBaseTilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxBaseTilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxBaseTilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxBaseTilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxBaseTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxBaseTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tile
