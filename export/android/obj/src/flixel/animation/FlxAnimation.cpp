// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_8_new,"flixel.animation.FlxAnimation","new",0x9bc5ffc0,"flixel.animation.FlxAnimation.new","flixel/animation/FlxAnimation.hx",8,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_95_destroy,"flixel.animation.FlxAnimation","destroy",0x7cb38c5a,"flixel.animation.FlxAnimation.destroy","flixel/animation/FlxAnimation.hx",95,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_112_play,"flixel.animation.FlxAnimation","play",0xb2d17294,"flixel.animation.FlxAnimation.play","flixel/animation/FlxAnimation.hx",112,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_143_restart,"flixel.animation.FlxAnimation","restart",0xc2d3272f,"flixel.animation.FlxAnimation.restart","flixel/animation/FlxAnimation.hx",143,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_147_stop,"flixel.animation.FlxAnimation","stop",0xb4d334a2,"flixel.animation.FlxAnimation.stop","flixel/animation/FlxAnimation.hx",147,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_153_reset,"flixel.animation.FlxAnimation","reset",0xe6ad112f,"flixel.animation.FlxAnimation.reset","flixel/animation/FlxAnimation.hx",153,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_159_finish,"flixel.animation.FlxAnimation","finish",0x6ec8ecf3,"flixel.animation.FlxAnimation.finish","flixel/animation/FlxAnimation.hx",159,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_166_pause,"flixel.animation.FlxAnimation","pause",0xbd3c9e56,"flixel.animation.FlxAnimation.pause","flixel/animation/FlxAnimation.hx",166,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_171_resume,"flixel.animation.FlxAnimation","resume",0xf0ce164d,"flixel.animation.FlxAnimation.resume","flixel/animation/FlxAnimation.hx",171,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_175_reverse,"flixel.animation.FlxAnimation","reverse",0x73299882,"flixel.animation.FlxAnimation.reverse","flixel/animation/FlxAnimation.hx",175,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_182_update,"flixel.animation.FlxAnimation","update",0x6f4f32a9,"flixel.animation.FlxAnimation.update","flixel/animation/FlxAnimation.hx",182,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_209_clone,"flixel.animation.FlxAnimation","clone",0x4847dabd,"flixel.animation.FlxAnimation.clone","flixel/animation/FlxAnimation.hx",209,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_213_set_frameRate,"flixel.animation.FlxAnimation","set_frameRate",0x8699eef0,"flixel.animation.FlxAnimation.set_frameRate","flixel/animation/FlxAnimation.hx",213,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_222_set_curFrame,"flixel.animation.FlxAnimation","set_curFrame",0x46812eaa,"flixel.animation.FlxAnimation.set_curFrame","flixel/animation/FlxAnimation.hx",222,0x660bc6ae)
HX_DEFINE_STACK_FRAME(_hx_pos_4744c2053d08e87b_252_get_numFrames,"flixel.animation.FlxAnimation","get_numFrames",0x65f5f5c3,"flixel.animation.FlxAnimation.get_numFrames","flixel/animation/FlxAnimation.hx",252,0x660bc6ae)
namespace flixel{
namespace animation{

void FlxAnimation_obj::__construct( ::flixel::animation::FlxAnimationController Parent,::String Name,::Array< int > Frames,hx::Null< int >  __o_FrameRate,hx::Null< bool >  __o_Looped,hx::Null< bool >  __o_FlipX,hx::Null< bool >  __o_FlipY){
int FrameRate = __o_FrameRate.Default(0);
bool Looped = __o_Looped.Default(true);
bool FlipX = __o_FlipX.Default(false);
bool FlipY = __o_FlipY.Default(false);
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_8_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Parent,"Parent")
            	HX_STACK_ARG(Name,"Name")
            	HX_STACK_ARG(Frames,"Frames")
            	HX_STACK_ARG(FrameRate,"FrameRate")
            	HX_STACK_ARG(Looped,"Looped")
            	HX_STACK_ARG(FlipX,"FlipX")
            	HX_STACK_ARG(FlipY,"FlipY")
HXLINE(  70)		this->_frameTimer = ((Float)0);
HXLINE(  59)		this->flipY = false;
HXLINE(  54)		this->flipX = false;
HXLINE(  49)		this->reversed = false;
HXLINE(  44)		this->looped = true;
HXLINE(  39)		this->paused = true;
HXLINE(  34)		this->finished = true;
HXLINE(  29)		this->delay = ((Float)0);
HXLINE(  19)		this->curFrame = (int)0;
HXLINE(  82)		super::__construct(Parent,Name);
HXLINE(  84)		this->set_frameRate(FrameRate);
HXLINE(  85)		this->frames = Frames;
HXLINE(  86)		this->looped = Looped;
HXLINE(  87)		this->flipX = FlipX;
HXLINE(  88)		this->flipY = FlipY;
            	}

Dynamic FlxAnimation_obj::__CreateEmpty() { return new FlxAnimation_obj; }

void *FlxAnimation_obj::_hx_vtable = 0;

Dynamic FlxAnimation_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxAnimation_obj > _hx_result = new FlxAnimation_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool FlxAnimation_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x53945929) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x53945929;
	} else {
		return inClassId==(int)0x7f0ac992;
	}
}

void FlxAnimation_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_95_destroy)
            	HX_STACK_THIS(this)
HXLINE(  96)		this->frames = null();
HXLINE(  97)		this->name = null();
HXLINE(  98)		this->super::destroy();
            	}


void FlxAnimation_obj::play(hx::Null< bool >  __o_Force,hx::Null< bool >  __o_Reversed,hx::Null< int >  __o_Frame){
bool Force = __o_Force.Default(false);
bool Reversed = __o_Reversed.Default(false);
int Frame = __o_Frame.Default(0);
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_112_play)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Force,"Force")
            	HX_STACK_ARG(Reversed,"Reversed")
            	HX_STACK_ARG(Frame,"Frame")
HXLINE( 113)		bool _hx_tmp;
HXDLIN( 113)		bool _hx_tmp1;
HXDLIN( 113)		if (!(Force)) {
HXLINE( 113)			_hx_tmp1 = !(this->finished);
            		}
            		else {
HXLINE( 113)			_hx_tmp1 = false;
            		}
HXDLIN( 113)		if (_hx_tmp1) {
HXLINE( 113)			_hx_tmp = (this->reversed == Reversed);
            		}
            		else {
HXLINE( 113)			_hx_tmp = false;
            		}
HXDLIN( 113)		if (_hx_tmp) {
HXLINE( 115)			this->paused = false;
HXLINE( 116)			this->finished = false;
HXLINE( 117)			return;
            		}
HXLINE( 120)		this->reversed = Reversed;
HXLINE( 121)		this->paused = false;
HXLINE( 122)		this->_frameTimer = (int)0;
HXLINE( 123)		this->finished = (this->delay == (int)0);
HXLINE( 125)		HX_VARI( int,maxFrameIndex) = (this->frames->length - (int)1);
HXLINE( 126)		if ((Frame < (int)0)) {
HXLINE( 127)			this->set_curFrame(::flixel::FlxG_obj::random->_hx_int((int)0,maxFrameIndex,null()));
            		}
            		else {
HXLINE( 130)			if ((Frame > maxFrameIndex)) {
HXLINE( 131)				Frame = maxFrameIndex;
            			}
HXLINE( 132)			if (this->reversed) {
HXLINE( 133)				Frame = (maxFrameIndex - Frame);
            			}
HXLINE( 134)			this->set_curFrame(Frame);
            		}
HXLINE( 137)		if (this->finished) {
HXLINE( 138)			HX_VARI(  ::flixel::animation::FlxAnimationController,_this) = this->parent;
HXDLIN( 138)			if (hx::IsNotNull( _this->finishCallback )) {
HXLINE( 138)				_this->finishCallback(this->name);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxAnimation_obj,play,(void))

void FlxAnimation_obj::restart(){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_143_restart)
            	HX_STACK_THIS(this)
HXLINE( 143)		this->play(true,this->reversed,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnimation_obj,restart,(void))

void FlxAnimation_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_147_stop)
            	HX_STACK_THIS(this)
HXLINE( 148)		this->finished = true;
HXLINE( 149)		this->paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnimation_obj,stop,(void))

void FlxAnimation_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_153_reset)
            	HX_STACK_THIS(this)
HXLINE( 154)		this->stop();
HXLINE( 155)		int _hx_tmp;
HXDLIN( 155)		if (this->reversed) {
HXLINE( 155)			_hx_tmp = (this->frames->length - (int)1);
            		}
            		else {
HXLINE( 155)			_hx_tmp = (int)0;
            		}
HXDLIN( 155)		this->set_curFrame(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnimation_obj,reset,(void))

void FlxAnimation_obj::finish(){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_159_finish)
            	HX_STACK_THIS(this)
HXLINE( 160)		this->stop();
HXLINE( 161)		int _hx_tmp;
HXDLIN( 161)		if (this->reversed) {
HXLINE( 161)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 161)			_hx_tmp = (this->frames->length - (int)1);
            		}
HXDLIN( 161)		this->set_curFrame(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnimation_obj,finish,(void))

void FlxAnimation_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_166_pause)
            	HX_STACK_THIS(this)
HXLINE( 166)		this->paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnimation_obj,pause,(void))

void FlxAnimation_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_171_resume)
            	HX_STACK_THIS(this)
HXLINE( 171)		this->paused = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnimation_obj,resume,(void))

void FlxAnimation_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_175_reverse)
            	HX_STACK_THIS(this)
HXLINE( 176)		this->reversed = !(this->reversed);
HXLINE( 177)		if (this->finished) {
HXLINE( 178)			this->play(false,this->reversed,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnimation_obj,reverse,(void))

void FlxAnimation_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_182_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 183)		bool _hx_tmp;
HXDLIN( 183)		bool _hx_tmp1;
HXDLIN( 183)		if ((this->delay != (int)0)) {
HXLINE( 183)			_hx_tmp1 = this->finished;
            		}
            		else {
HXLINE( 183)			_hx_tmp1 = true;
            		}
HXDLIN( 183)		if (!(_hx_tmp1)) {
HXLINE( 183)			_hx_tmp = this->paused;
            		}
            		else {
HXLINE( 183)			_hx_tmp = true;
            		}
HXDLIN( 183)		if (_hx_tmp) {
HXLINE( 184)			return;
            		}
HXLINE( 186)		 ::flixel::animation::FlxAnimation _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 186)		_hx_tmp2->_frameTimer = (_hx_tmp2->_frameTimer + elapsed);
HXLINE( 187)		while(true){
HXLINE( 187)			bool _hx_tmp3;
HXDLIN( 187)			if ((this->_frameTimer > this->delay)) {
HXLINE( 187)				_hx_tmp3 = !(this->finished);
            			}
            			else {
HXLINE( 187)				_hx_tmp3 = false;
            			}
HXDLIN( 187)			if (!(_hx_tmp3)) {
HXLINE( 187)				goto _hx_goto_10;
            			}
HXLINE( 189)			 ::flixel::animation::FlxAnimation _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 189)			_hx_tmp4->_frameTimer = (_hx_tmp4->_frameTimer - this->delay);
HXLINE( 190)			if (this->reversed) {
HXLINE( 192)				bool _hx_tmp5;
HXDLIN( 192)				if (this->looped) {
HXLINE( 192)					_hx_tmp5 = (this->curFrame == (int)0);
            				}
            				else {
HXLINE( 192)					_hx_tmp5 = false;
            				}
HXDLIN( 192)				if (_hx_tmp5) {
HXLINE( 193)					this->set_curFrame((this->frames->length - (int)1));
            				}
            				else {
HXLINE( 195)					HX_VARI(  ::flixel::animation::FlxAnimation,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 195)					_g->set_curFrame((_g->curFrame - (int)1));
            				}
            			}
            			else {
HXLINE( 199)				bool _hx_tmp6;
HXDLIN( 199)				if (this->looped) {
HXLINE( 199)					_hx_tmp6 = (this->curFrame == (this->frames->length - (int)1));
            				}
            				else {
HXLINE( 199)					_hx_tmp6 = false;
            				}
HXDLIN( 199)				if (_hx_tmp6) {
HXLINE( 200)					this->set_curFrame((int)0);
            				}
            				else {
HXLINE( 202)					HX_VARI_NAME(  ::flixel::animation::FlxAnimation,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 202)					_g1->set_curFrame((_g1->curFrame + (int)1));
            				}
            			}
            		}
            		_hx_goto_10:;
            	}


 ::flixel::animation::FlxBaseAnimation FlxAnimation_obj::clone( ::flixel::animation::FlxAnimationController Parent){
            	HX_GC_STACKFRAME(&_hx_pos_4744c2053d08e87b_209_clone)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Parent,"Parent")
HXLINE( 209)		return  ::flixel::animation::FlxAnimation_obj::__alloc( HX_CTX ,Parent,this->name,this->frames,this->frameRate,this->looped,this->flipX,this->flipY);
            	}


int FlxAnimation_obj::set_frameRate(int value){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_213_set_frameRate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 214)		this->delay = (int)0;
HXLINE( 215)		this->frameRate = value;
HXLINE( 216)		if ((value > (int)0)) {
HXLINE( 217)			this->delay = ((Float)((Float)1.0) / (Float)value);
            		}
HXLINE( 218)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnimation_obj,set_frameRate,return )

int FlxAnimation_obj::set_curFrame(int Frame){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_222_set_curFrame)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Frame,"Frame")
HXLINE( 223)		HX_VARI( int,maxFrameIndex) = (this->frames->length - (int)1);
HXLINE( 224)		if (this->reversed) {
HXLINE( 225)			Frame = (maxFrameIndex - Frame);
            		}
HXLINE( 227)		if ((Frame >= (int)0)) {
HXLINE( 229)			bool _hx_tmp;
HXDLIN( 229)			if (!(this->looped)) {
HXLINE( 229)				_hx_tmp = (Frame > maxFrameIndex);
            			}
            			else {
HXLINE( 229)				_hx_tmp = false;
            			}
HXDLIN( 229)			if (_hx_tmp) {
HXLINE( 231)				this->finished = true;
HXLINE( 232)				int _hx_tmp1;
HXDLIN( 232)				if (this->reversed) {
HXLINE( 232)					_hx_tmp1 = (int)0;
            				}
            				else {
HXLINE( 232)					_hx_tmp1 = maxFrameIndex;
            				}
HXDLIN( 232)				this->curFrame = _hx_tmp1;
            			}
            			else {
HXLINE( 236)				this->curFrame = Frame;
            			}
            		}
            		else {
HXLINE( 240)			this->curFrame = ::flixel::FlxG_obj::random->_hx_int((int)0,maxFrameIndex,null());
            		}
HXLINE( 242)		this->set_curIndex(this->frames->__get(this->curFrame));
HXLINE( 244)		bool _hx_tmp2;
HXDLIN( 244)		if (this->finished) {
HXLINE( 244)			_hx_tmp2 = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 244)			_hx_tmp2 = false;
            		}
HXDLIN( 244)		if (_hx_tmp2) {
HXLINE( 245)			HX_VARI(  ::flixel::animation::FlxAnimationController,_this) = this->parent;
HXDLIN( 245)			if (hx::IsNotNull( _this->finishCallback )) {
HXLINE( 245)				_this->finishCallback(this->name);
            			}
            		}
HXLINE( 247)		return Frame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnimation_obj,set_curFrame,return )

int FlxAnimation_obj::get_numFrames(){
            	HX_STACKFRAME(&_hx_pos_4744c2053d08e87b_252_get_numFrames)
            	HX_STACK_THIS(this)
HXLINE( 252)		return this->frames->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnimation_obj,get_numFrames,return )


hx::ObjectPtr< FlxAnimation_obj > FlxAnimation_obj::__new( ::flixel::animation::FlxAnimationController Parent,::String Name,::Array< int > Frames,hx::Null< int >  __o_FrameRate,hx::Null< bool >  __o_Looped,hx::Null< bool >  __o_FlipX,hx::Null< bool >  __o_FlipY) {
	hx::ObjectPtr< FlxAnimation_obj > __this = new FlxAnimation_obj();
	__this->__construct(Parent,Name,Frames,__o_FrameRate,__o_Looped,__o_FlipX,__o_FlipY);
	return __this;
}

hx::ObjectPtr< FlxAnimation_obj > FlxAnimation_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::animation::FlxAnimationController Parent,::String Name,::Array< int > Frames,hx::Null< int >  __o_FrameRate,hx::Null< bool >  __o_Looped,hx::Null< bool >  __o_FlipX,hx::Null< bool >  __o_FlipY) {
	FlxAnimation_obj *__this = (FlxAnimation_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxAnimation_obj), true, "flixel.animation.FlxAnimation"));
	*(void **)__this = FlxAnimation_obj::_hx_vtable;
	__this->__construct(Parent,Name,Frames,__o_FrameRate,__o_Looped,__o_FlipX,__o_FlipY);
	return __this;
}

FlxAnimation_obj::FlxAnimation_obj()
{
}

void FlxAnimation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAnimation);
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(curFrame,"curFrame");
	HX_MARK_MEMBER_NAME(numFrames,"numFrames");
	HX_MARK_MEMBER_NAME(delay,"delay");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(looped,"looped");
	HX_MARK_MEMBER_NAME(reversed,"reversed");
	HX_MARK_MEMBER_NAME(flipX,"flipX");
	HX_MARK_MEMBER_NAME(flipY,"flipY");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(_frameTimer,"_frameTimer");
	 ::flixel::animation::FlxBaseAnimation_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxAnimation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(curFrame,"curFrame");
	HX_VISIT_MEMBER_NAME(numFrames,"numFrames");
	HX_VISIT_MEMBER_NAME(delay,"delay");
	HX_VISIT_MEMBER_NAME(finished,"finished");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(looped,"looped");
	HX_VISIT_MEMBER_NAME(reversed,"reversed");
	HX_VISIT_MEMBER_NAME(flipX,"flipX");
	HX_VISIT_MEMBER_NAME(flipY,"flipY");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(_frameTimer,"_frameTimer");
	 ::flixel::animation::FlxBaseAnimation_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxAnimation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn()); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay); }
		if (HX_FIELD_EQ(inName,"flipX") ) { return hx::Val( flipX); }
		if (HX_FIELD_EQ(inName,"flipY") ) { return hx::Val( flipY); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn()); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused); }
		if (HX_FIELD_EQ(inName,"looped") ) { return hx::Val( looped); }
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames); }
		if (HX_FIELD_EQ(inName,"finish") ) { return hx::Val( finish_dyn()); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"restart") ) { return hx::Val( restart_dyn()); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curFrame") ) { return hx::Val( curFrame); }
		if (HX_FIELD_EQ(inName,"finished") ) { return hx::Val( finished); }
		if (HX_FIELD_EQ(inName,"reversed") ) { return hx::Val( reversed); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate); }
		if (HX_FIELD_EQ(inName,"numFrames") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numFrames() : numFrames); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_frameTimer") ) { return hx::Val( _frameTimer); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_curFrame") ) { return hx::Val( set_curFrame_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_frameRate") ) { return hx::Val( set_frameRate_dyn()); }
		if (HX_FIELD_EQ(inName,"get_numFrames") ) { return hx::Val( get_numFrames_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxAnimation_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { delay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipX") ) { flipX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipY") ) { flipY=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"looped") ) { looped=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frames") ) { frames=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curFrame") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_curFrame(inValue) );curFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"reversed") ) { reversed=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frameRate(inValue) );frameRate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numFrames") ) { numFrames=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_frameTimer") ) { _frameTimer=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxAnimation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	outFields->push(HX_HCSTRING("curFrame","\x8d","\x72","\x31","\x4e"));
	outFields->push(HX_HCSTRING("numFrames","\x8c","\xfa","\x86","\x5d"));
	outFields->push(HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("looped","\xc3","\x5f","\xb9","\x61"));
	outFields->push(HX_HCSTRING("reversed","\x02","\xc5","\xb5","\x81"));
	outFields->push(HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("_frameTimer","\x77","\xc1","\xe5","\xc5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxAnimation_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxAnimation_obj,frameRate),HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39")},
	{hx::fsInt,(int)offsetof(FlxAnimation_obj,curFrame),HX_HCSTRING("curFrame","\x8d","\x72","\x31","\x4e")},
	{hx::fsInt,(int)offsetof(FlxAnimation_obj,numFrames),HX_HCSTRING("numFrames","\x8c","\xfa","\x86","\x5d")},
	{hx::fsFloat,(int)offsetof(FlxAnimation_obj,delay),HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7")},
	{hx::fsBool,(int)offsetof(FlxAnimation_obj,finished),HX_HCSTRING("finished","\x72","\x93","\x0e","\x95")},
	{hx::fsBool,(int)offsetof(FlxAnimation_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsBool,(int)offsetof(FlxAnimation_obj,looped),HX_HCSTRING("looped","\xc3","\x5f","\xb9","\x61")},
	{hx::fsBool,(int)offsetof(FlxAnimation_obj,reversed),HX_HCSTRING("reversed","\x02","\xc5","\xb5","\x81")},
	{hx::fsBool,(int)offsetof(FlxAnimation_obj,flipX),HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02")},
	{hx::fsBool,(int)offsetof(FlxAnimation_obj,flipY),HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxAnimation_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsFloat,(int)offsetof(FlxAnimation_obj,_frameTimer),HX_HCSTRING("_frameTimer","\x77","\xc1","\xe5","\xc5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxAnimation_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxAnimation_obj_sMemberFields[] = {
	HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"),
	HX_HCSTRING("curFrame","\x8d","\x72","\x31","\x4e"),
	HX_HCSTRING("numFrames","\x8c","\xfa","\x86","\x5d"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("looped","\xc3","\x5f","\xb9","\x61"),
	HX_HCSTRING("reversed","\x02","\xc5","\xb5","\x81"),
	HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"),
	HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("_frameTimer","\x77","\xc1","\xe5","\xc5"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("restart","\xcf","\xc7","\xa5","\x6a"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("finish","\x53","\x40","\x7f","\x86"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("set_frameRate","\x90","\xc7","\x8e","\x3f"),
	HX_HCSTRING("set_curFrame","\x0a","\x4a","\x44","\x18"),
	HX_HCSTRING("get_numFrames","\x63","\xce","\xea","\x1e"),
	::String(null()) };

static void FlxAnimation_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxAnimation_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxAnimation_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxAnimation_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxAnimation_obj::__mClass;

void FlxAnimation_obj::__register()
{
	hx::Object *dummy = new FlxAnimation_obj;
	FlxAnimation_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.animation.FlxAnimation","\xce","\x5f","\xe3","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxAnimation_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxAnimation_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxAnimation_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxAnimation_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAnimation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAnimation_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace animation
