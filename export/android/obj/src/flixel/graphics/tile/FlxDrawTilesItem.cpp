// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawBaseItem
#include <flixel/graphics/tile/FlxDrawBaseItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawItemType
#include <flixel/graphics/tile/FlxDrawItemType.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawTilesItem
#include <flixel/graphics/tile/FlxDrawTilesItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxTilesheet
#include <flixel/graphics/tile/FlxTilesheet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_Tilesheet
#include <openfl/display/Tilesheet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_94b10b66a3cf0a9a_12_new,"flixel.graphics.tile.FlxDrawTilesItem","new",0x1450ef83,"flixel.graphics.tile.FlxDrawTilesItem.new","flixel/graphics/tile/FlxDrawTilesItem.hx",12,0xdffe6dcc)
HX_DEFINE_STACK_FRAME(_hx_pos_94b10b66a3cf0a9a_26_reset,"flixel.graphics.tile.FlxDrawTilesItem","reset",0xcba5b7b2,"flixel.graphics.tile.FlxDrawTilesItem.reset","flixel/graphics/tile/FlxDrawTilesItem.hx",26,0xdffe6dcc)
HX_DEFINE_STACK_FRAME(_hx_pos_94b10b66a3cf0a9a_33_dispose,"flixel.graphics.tile.FlxDrawTilesItem","dispose",0xa4cb6d42,"flixel.graphics.tile.FlxDrawTilesItem.dispose","flixel/graphics/tile/FlxDrawTilesItem.hx",33,0xdffe6dcc)
HX_DEFINE_STACK_FRAME(_hx_pos_94b10b66a3cf0a9a_40_addQuad,"flixel.graphics.tile.FlxDrawTilesItem","addQuad",0x70c6682b,"flixel.graphics.tile.FlxDrawTilesItem.addQuad","flixel/graphics/tile/FlxDrawTilesItem.hx",40,0xdffe6dcc)
HX_DEFINE_STACK_FRAME(_hx_pos_94b10b66a3cf0a9a_78_setNext,"flixel.graphics.tile.FlxDrawTilesItem","setNext",0xf805b258,"flixel.graphics.tile.FlxDrawTilesItem.setNext","flixel/graphics/tile/FlxDrawTilesItem.hx",78,0xdffe6dcc)
HX_DEFINE_STACK_FRAME(_hx_pos_94b10b66a3cf0a9a_82_render,"flixel.graphics.tile.FlxDrawTilesItem","render",0x620c2413,"flixel.graphics.tile.FlxDrawTilesItem.render","flixel/graphics/tile/FlxDrawTilesItem.hx",82,0xdffe6dcc)
HX_DEFINE_STACK_FRAME(_hx_pos_94b10b66a3cf0a9a_109_get_numTiles,"flixel.graphics.tile.FlxDrawTilesItem","get_numTiles",0xd57429e5,"flixel.graphics.tile.FlxDrawTilesItem.get_numTiles","flixel/graphics/tile/FlxDrawTilesItem.hx",109,0xdffe6dcc)
HX_DEFINE_STACK_FRAME(_hx_pos_94b10b66a3cf0a9a_123_get_numVertices,"flixel.graphics.tile.FlxDrawTilesItem","get_numVertices",0x8b0e8f99,"flixel.graphics.tile.FlxDrawTilesItem.get_numVertices","flixel/graphics/tile/FlxDrawTilesItem.hx",123,0xdffe6dcc)
HX_DEFINE_STACK_FRAME(_hx_pos_94b10b66a3cf0a9a_128_get_numTriangles,"flixel.graphics.tile.FlxDrawTilesItem","get_numTriangles",0x37fe0d0b,"flixel.graphics.tile.FlxDrawTilesItem.get_numTriangles","flixel/graphics/tile/FlxDrawTilesItem.hx",128,0xdffe6dcc)
namespace flixel{
namespace graphics{
namespace tile{

void FlxDrawTilesItem_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_94b10b66a3cf0a9a_12_new)
            	HX_STACK_THIS(this)
HXLINE(  15)		this->position = (int)0;
HXLINE(  14)		this->drawData = ::Array_obj< Float >::__new(0);
HXLINE(  21)		super::__construct();
HXLINE(  22)		this->type = ::flixel::graphics::tile::FlxDrawItemType_obj::TILES_dyn();
            	}

Dynamic FlxDrawTilesItem_obj::__CreateEmpty() { return new FlxDrawTilesItem_obj; }

void *FlxDrawTilesItem_obj::_hx_vtable = 0;

Dynamic FlxDrawTilesItem_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxDrawTilesItem_obj > _hx_result = new FlxDrawTilesItem_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxDrawTilesItem_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x18d0451d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x18d0451d;
	} else {
		return inClassId==(int)0x2b5673bf;
	}
}

void FlxDrawTilesItem_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_94b10b66a3cf0a9a_26_reset)
            	HX_STACK_THIS(this)
HXLINE(  27)		this->super::reset();
HXLINE(  28)		this->position = (int)0;
HXLINE(  29)		this->shader = null();
            	}


void FlxDrawTilesItem_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_94b10b66a3cf0a9a_33_dispose)
            	HX_STACK_THIS(this)
HXLINE(  34)		this->super::dispose();
HXLINE(  35)		this->drawData = null();
HXLINE(  36)		this->shader = null();
            	}


void FlxDrawTilesItem_obj::addQuad( ::flixel::graphics::frames::FlxFrame frame, ::flixel::math::FlxMatrix matrix, ::openfl::geom::ColorTransform transform){
            	HX_STACKFRAME(&_hx_pos_94b10b66a3cf0a9a_40_addQuad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(frame,"frame")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(transform,"transform")
HXLINE(  41)		this->drawData[this->position++] = matrix->tx;
HXLINE(  42)		this->drawData[this->position++] = matrix->ty;
HXLINE(  44)		HX_VARI(  ::flixel::math::FlxRect,rect) = frame->frame;
HXLINE(  46)		this->drawData[this->position++] = rect->x;
HXLINE(  47)		this->drawData[this->position++] = rect->y;
HXLINE(  48)		this->drawData[this->position++] = rect->width;
HXLINE(  49)		this->drawData[this->position++] = rect->height;
HXLINE(  51)		this->drawData[this->position++] = matrix->a;
HXLINE(  52)		this->drawData[this->position++] = matrix->b;
HXLINE(  53)		this->drawData[this->position++] = matrix->c;
HXLINE(  54)		this->drawData[this->position++] = matrix->d;
HXLINE(  56)		bool _hx_tmp;
HXDLIN(  56)		if (this->colored) {
HXLINE(  56)			_hx_tmp = hx::IsNotNull( transform );
            		}
            		else {
HXLINE(  56)			_hx_tmp = false;
            		}
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  58)			this->drawData[this->position++] = transform->redMultiplier;
HXLINE(  59)			this->drawData[this->position++] = transform->greenMultiplier;
HXLINE(  60)			this->drawData[this->position++] = transform->blueMultiplier;
            		}
HXLINE(  63)		{
HXLINE(  63)			Float f;
HXDLIN(  63)			if (hx::IsNotNull( transform )) {
HXLINE(  63)				f = transform->alphaMultiplier;
            			}
            			else {
HXLINE(  63)				f = ((Float)1.0);
            			}
HXDLIN(  63)			this->drawData[this->position++] = f;
            		}
HXLINE(  66)		bool _hx_tmp1;
HXDLIN(  66)		if (this->hasColorOffsets) {
HXLINE(  66)			_hx_tmp1 = hx::IsNotNull( transform );
            		}
            		else {
HXLINE(  66)			_hx_tmp1 = false;
            		}
HXDLIN(  66)		if (_hx_tmp1) {
HXLINE(  68)			this->drawData[this->position++] = transform->redOffset;
HXLINE(  69)			this->drawData[this->position++] = transform->greenOffset;
HXLINE(  70)			this->drawData[this->position++] = transform->blueOffset;
HXLINE(  71)			this->drawData[this->position++] = transform->alphaOffset;
            		}
            	}


void FlxDrawTilesItem_obj::setNext(Float f){
            	HX_STACKFRAME(&_hx_pos_94b10b66a3cf0a9a_78_setNext)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(f,"f")
HXLINE(  78)		this->drawData[this->position++] = f;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxDrawTilesItem_obj,setNext,(void))

void FlxDrawTilesItem_obj::render( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_94b10b66a3cf0a9a_82_render)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(camera,"camera")
HXLINE(  83)		bool _hx_tmp;
HXDLIN(  83)		if (!(!(::flixel::FlxG_obj::renderTile))) {
HXLINE(  83)			_hx_tmp = (this->position <= (int)0);
            		}
            		else {
HXLINE(  83)			_hx_tmp = true;
            		}
HXDLIN(  83)		if (_hx_tmp) {
HXLINE(  84)			return;
            		}
HXLINE(  86)		HX_VARI( int,flags) = (int)56;
HXLINE(  88)		if (this->colored) {
HXLINE(  89)			flags = (int)60;
            		}
HXLINE(  92)		if (this->hasColorOffsets) {
HXLINE(  93)			flags = ((int)flags | (int)(int)128);
            		}
HXLINE(  96)		flags = ((int)flags | (int)this->blending);
HXLINE(  99)		 ::openfl::display::Graphics _hx_tmp1 = ( ( ::openfl::display::Graphics)(camera->canvas->__Field(HX_("get_graphics",d4,ac,81,c7),hx::paccDynamic)()) );
HXDLIN(  99)		 ::openfl::display::Tilesheet _hx_tmp2 = this->graphics->get_tilesheet();
HXLINE( 100)		bool _hx_tmp3;
HXDLIN( 100)		if (!(camera->antialiasing)) {
HXLINE( 100)			_hx_tmp3 = this->antialiasing;
            		}
            		else {
HXLINE( 100)			_hx_tmp3 = true;
            		}
HXLINE(  99)		_hx_tmp1->drawTiles(_hx_tmp2,this->drawData,_hx_tmp3,flags,this->shader,this->position);
HXLINE( 105)		::flixel::graphics::tile::FlxTilesheet_obj::_DRAWCALLS++;
            	}


int FlxDrawTilesItem_obj::get_numTiles(){
            	HX_STACKFRAME(&_hx_pos_94b10b66a3cf0a9a_109_get_numTiles)
            	HX_STACK_THIS(this)
HXLINE( 110)		HX_VARI( int,elementsPerTile) = (int)8;
HXLINE( 111)		if (this->colored) {
HXLINE( 112)			elementsPerTile = (int)11;
            		}
HXLINE( 114)		if (this->hasColorOffsets) {
HXLINE( 115)			elementsPerTile = (elementsPerTile + (int)4);
            		}
HXLINE( 118)		return ::Std_obj::_hx_int(((Float)this->position / (Float)elementsPerTile));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDrawTilesItem_obj,get_numTiles,return )

int FlxDrawTilesItem_obj::get_numVertices(){
            	HX_STACKFRAME(&_hx_pos_94b10b66a3cf0a9a_123_get_numVertices)
            	HX_STACK_THIS(this)
HXLINE( 123)		return ((int)4 * this->get_numTiles());
            	}


int FlxDrawTilesItem_obj::get_numTriangles(){
            	HX_STACKFRAME(&_hx_pos_94b10b66a3cf0a9a_128_get_numTriangles)
            	HX_STACK_THIS(this)
HXLINE( 128)		return ((int)2 * this->get_numTiles());
            	}



hx::ObjectPtr< FlxDrawTilesItem_obj > FlxDrawTilesItem_obj::__new() {
	hx::ObjectPtr< FlxDrawTilesItem_obj > __this = new FlxDrawTilesItem_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxDrawTilesItem_obj > FlxDrawTilesItem_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxDrawTilesItem_obj *__this = (FlxDrawTilesItem_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxDrawTilesItem_obj), true, "flixel.graphics.tile.FlxDrawTilesItem"));
	*(void **)__this = FlxDrawTilesItem_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxDrawTilesItem_obj::FlxDrawTilesItem_obj()
{
}

void FlxDrawTilesItem_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxDrawTilesItem);
	HX_MARK_MEMBER_NAME(drawData,"drawData");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(shader,"shader");
	 ::flixel::graphics::tile::FlxDrawBaseItem_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxDrawTilesItem_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(drawData,"drawData");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	 ::flixel::graphics::tile::FlxDrawBaseItem_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxDrawTilesItem_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"addQuad") ) { return hx::Val( addQuad_dyn()); }
		if (HX_FIELD_EQ(inName,"setNext") ) { return hx::Val( setNext_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawData") ) { return hx::Val( drawData); }
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position); }
		if (HX_FIELD_EQ(inName,"numTiles") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_numTiles()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_numTiles") ) { return hx::Val( get_numTiles_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numVertices") ) { return hx::Val( get_numVertices_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_numTriangles") ) { return hx::Val( get_numTriangles_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxDrawTilesItem_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawData") ) { drawData=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxDrawTilesItem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("drawData","\x4e","\x00","\xcd","\x56"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("numTiles","\x5f","\x11","\x45","\xcd"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxDrawTilesItem_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxDrawTilesItem_obj,drawData),HX_HCSTRING("drawData","\x4e","\x00","\xcd","\x56")},
	{hx::fsInt,(int)offsetof(FlxDrawTilesItem_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsObject /*openfl::display::Shader*/ ,(int)offsetof(FlxDrawTilesItem_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxDrawTilesItem_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxDrawTilesItem_obj_sMemberFields[] = {
	HX_HCSTRING("drawData","\x4e","\x00","\xcd","\x56"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("addQuad","\x88","\x7b","\x47","\x87"),
	HX_HCSTRING("setNext","\xb5","\xc5","\x86","\x0e"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("get_numTiles","\x68","\xc5","\x5e","\x82"),
	HX_HCSTRING("get_numVertices","\xf6","\xc7","\x0d","\x17"),
	HX_HCSTRING("get_numTriangles","\x0e","\x26","\x50","\x2b"),
	::String(null()) };

static void FlxDrawTilesItem_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxDrawTilesItem_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxDrawTilesItem_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxDrawTilesItem_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxDrawTilesItem_obj::__mClass;

void FlxDrawTilesItem_obj::__register()
{
	hx::Object *dummy = new FlxDrawTilesItem_obj;
	FlxDrawTilesItem_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.graphics.tile.FlxDrawTilesItem","\x11","\x72","\xa4","\xdb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxDrawTilesItem_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxDrawTilesItem_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxDrawTilesItem_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxDrawTilesItem_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxDrawTilesItem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxDrawTilesItem_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace tile
