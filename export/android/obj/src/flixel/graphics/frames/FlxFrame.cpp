// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_haxe_ds_ArraySort
#include <haxe/ds/ArraySort.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_19_new,"flixel.graphics.frames.FlxFrame","new",0x06ad24e4,"flixel.graphics.frames.FlxFrame.new","flixel/graphics/frames/FlxFrame.hx",19,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_115_cacheFrameMatrix,"flixel.graphics.frames.FlxFrame","cacheFrameMatrix",0xffbbac28,"flixel.graphics.frames.FlxFrame.cacheFrameMatrix","flixel/graphics/frames/FlxFrame.hx",115,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_145_prepareBlitMatrix,"flixel.graphics.frames.FlxFrame","prepareBlitMatrix",0xbf3c9041,"flixel.graphics.frames.FlxFrame.prepareBlitMatrix","flixel/graphics/frames/FlxFrame.hx",145,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_177_rotateAndFlip,"flixel.graphics.frames.FlxFrame","rotateAndFlip",0x835ac58d,"flixel.graphics.frames.FlxFrame.rotateAndFlip","flixel/graphics/frames/FlxFrame.hx",177,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_226_prepareTransformedBlitMatrix,"flixel.graphics.frames.FlxFrame","prepareTransformedBlitMatrix",0xc5ea2af6,"flixel.graphics.frames.FlxFrame.prepareTransformedBlitMatrix","flixel/graphics/frames/FlxFrame.hx",226,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_241_prepareMatrix,"flixel.graphics.frames.FlxFrame","prepareMatrix",0xbf883cac,"flixel.graphics.frames.FlxFrame.prepareMatrix","flixel/graphics/frames/FlxFrame.hx",241,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_267_fillBlitMatrix,"flixel.graphics.frames.FlxFrame","fillBlitMatrix",0xa3605eb5,"flixel.graphics.frames.FlxFrame.fillBlitMatrix","flixel/graphics/frames/FlxFrame.hx",267,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_287_paint,"flixel.graphics.frames.FlxFrame","paint",0x0c093522,"flixel.graphics.frames.FlxFrame.paint","flixel/graphics/frames/FlxFrame.hx",287,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_332_paintRotatedAndFlipped,"flixel.graphics.frames.FlxFrame","paintRotatedAndFlipped",0x8f0fb1b2,"flixel.graphics.frames.FlxFrame.paintRotatedAndFlipped","flixel/graphics/frames/FlxFrame.hx",332,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_372_checkInputBitmap,"flixel.graphics.frames.FlxFrame","checkInputBitmap",0x11e1b8ad,"flixel.graphics.frames.FlxFrame.checkInputBitmap","flixel/graphics/frames/FlxFrame.hx",372,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_409_getDrawFrameRect,"flixel.graphics.frames.FlxFrame","getDrawFrameRect",0x7930f1d3,"flixel.graphics.frames.FlxFrame.getDrawFrameRect","flixel/graphics/frames/FlxFrame.hx",409,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_430_subFrameTo,"flixel.graphics.frames.FlxFrame","subFrameTo",0x37199964,"flixel.graphics.frames.FlxFrame.subFrameTo","flixel/graphics/frames/FlxFrame.hx",430,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_518_setBorderTo,"flixel.graphics.frames.FlxFrame","setBorderTo",0x0ba0ebcd,"flixel.graphics.frames.FlxFrame.setBorderTo","flixel/graphics/frames/FlxFrame.hx",518,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_533_clipTo,"flixel.graphics.frames.FlxFrame","clipTo",0x9ecb6267,"flixel.graphics.frames.FlxFrame.clipTo","flixel/graphics/frames/FlxFrame.hx",533,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_618_copyTo,"flixel.graphics.frames.FlxFrame","copyTo",0x5da6728c,"flixel.graphics.frames.FlxFrame.copyTo","flixel/graphics/frames/FlxFrame.hx",618,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_642_destroy,"flixel.graphics.frames.FlxFrame","destroy",0x74fe137e,"flixel.graphics.frames.FlxFrame.destroy","flixel/graphics/frames/FlxFrame.hx",642,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_658_toString,"flixel.graphics.frames.FlxFrame","toString",0x50e09da8,"flixel.graphics.frames.FlxFrame.toString","flixel/graphics/frames/FlxFrame.hx",658,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_663_set_frame,"flixel.graphics.frames.FlxFrame","set_frame",0x789f5014,"flixel.graphics.frames.FlxFrame.set_frame","flixel/graphics/frames/FlxFrame.hx",663,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_33_sort,"flixel.graphics.frames.FlxFrame","sort",0xd428c65a,"flixel.graphics.frames.FlxFrame.sort","flixel/graphics/frames/FlxFrame.hx",33,0x6c7f608b)
HX_DEFINE_STACK_FRAME(_hx_pos_5df8bdd839d6a258_37_sortByName,"flixel.graphics.frames.FlxFrame","sortByName",0xdd6fa5bc,"flixel.graphics.frames.FlxFrame.sortByName","flixel/graphics/frames/FlxFrame.hx",37,0x6c7f608b)
namespace flixel{
namespace graphics{
namespace frames{

void FlxFrame_obj::__construct( ::flixel::graphics::FlxGraphic parent,hx::Null< int >  __o_angle,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY){
int angle = __o_angle.Default(0);
bool flipX = __o_flipX.Default(false);
bool flipY = __o_flipY.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_19_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
            	HX_STACK_ARG(angle,"angle")
            	HX_STACK_ARG(flipX,"flipX")
            	HX_STACK_ARG(flipY,"flipY")
HXLINE(  24)		this->matrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  23)		this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  22)		this->point2 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  21)		this->point1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  95)		this->parent = parent;
HXLINE(  96)		this->angle = angle;
HXLINE(  97)		this->flipX = flipX;
HXLINE(  98)		this->flipY = flipY;
HXLINE( 100)		this->type = (int)0;
HXLINE( 102)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 102)		point->_inPool = false;
HXDLIN( 102)		this->sourceSize = point;
HXLINE( 103)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 103)		point1->_inPool = false;
HXDLIN( 103)		this->offset = point1;
HXLINE( 105)		this->blitMatrix = ::Array_obj< Float >::__new((int)6);
HXLINE( 106)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 108)			this->tileMatrix = ::Array_obj< Float >::__new((int)6);
            		}
            	}

Dynamic FlxFrame_obj::__CreateEmpty() { return new FlxFrame_obj; }

void *FlxFrame_obj::_hx_vtable = 0;

Dynamic FlxFrame_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxFrame_obj > _hx_result = new FlxFrame_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxFrame_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x76d9a1c8;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_graphics_frames_FlxFrame__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::graphics::frames::FlxFrame_obj::destroy,
};

void *FlxFrame_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_graphics_frames_FlxFrame__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxFrame_obj::cacheFrameMatrix(){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_115_cacheFrameMatrix)
            	HX_STACK_THIS(this)
HXLINE( 116)		{
HXLINE( 116)			HX_VARI(  ::flixel::math::FlxMatrix,mat) = this->matrix;
HXDLIN( 116)			mat->identity();
HXDLIN( 116)			mat->translate(-(this->frame->x),-(this->frame->y));
HXDLIN( 116)			if ((this->angle == (int)90)) {
HXLINE( 116)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXDLIN( 116)				mat->translate(this->frame->height,(int)0);
            			}
            			else {
HXLINE( 116)				if ((this->angle == (int)-90)) {
HXLINE( 116)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXDLIN( 116)					mat->translate((int)0,this->frame->width);
            				}
            			}
HXDLIN( 116)			mat->translate(this->offset->x,this->offset->y);
            		}
HXLINE( 117)		this->blitMatrix->__unsafe_set((int)0,this->matrix->a);
HXLINE( 118)		this->blitMatrix->__unsafe_set((int)1,this->matrix->b);
HXLINE( 119)		this->blitMatrix->__unsafe_set((int)2,this->matrix->c);
HXLINE( 120)		this->blitMatrix->__unsafe_set((int)3,this->matrix->d);
HXLINE( 121)		this->blitMatrix->__unsafe_set((int)4,this->matrix->tx);
HXLINE( 122)		this->blitMatrix->__unsafe_set((int)5,this->matrix->ty);
HXLINE( 124)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 126)			{
HXLINE( 126)				HX_VARI_NAME(  ::flixel::math::FlxMatrix,mat1,"mat") = this->matrix;
HXDLIN( 126)				mat1->identity();
HXDLIN( 126)				if ((this->angle == (int)90)) {
HXLINE( 126)					mat1->setTo(-(mat1->b),mat1->a,-(mat1->d),mat1->c,-(mat1->ty),mat1->tx);
HXDLIN( 126)					mat1->translate(this->frame->height,(int)0);
            				}
            				else {
HXLINE( 126)					if ((this->angle == (int)-90)) {
HXLINE( 126)						mat1->setTo(mat1->b,-(mat1->a),mat1->d,-(mat1->c),mat1->ty,-(mat1->tx));
HXDLIN( 126)						mat1->translate((int)0,this->frame->width);
            					}
            				}
HXDLIN( 126)				mat1->translate(this->offset->x,this->offset->y);
            			}
HXLINE( 127)			this->tileMatrix->__unsafe_set((int)0,this->matrix->a);
HXLINE( 128)			this->tileMatrix->__unsafe_set((int)1,this->matrix->b);
HXLINE( 129)			this->tileMatrix->__unsafe_set((int)2,this->matrix->c);
HXLINE( 130)			this->tileMatrix->__unsafe_set((int)3,this->matrix->d);
HXLINE( 131)			this->tileMatrix->__unsafe_set((int)4,this->matrix->tx);
HXLINE( 132)			this->tileMatrix->__unsafe_set((int)5,this->matrix->ty);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFrame_obj,cacheFrameMatrix,(void))

 ::flixel::math::FlxMatrix FlxFrame_obj::prepareBlitMatrix( ::flixel::math::FlxMatrix mat,hx::Null< bool >  __o_blit){
bool blit = __o_blit.Default(true);
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_145_prepareBlitMatrix)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
            	HX_STACK_ARG(blit,"blit")
HXLINE( 146)		mat->identity();
HXLINE( 148)		if (blit) {
HXLINE( 149)			mat->translate(-(this->frame->x),-(this->frame->y));
            		}
HXLINE( 151)		if ((this->angle == (int)90)) {
HXLINE( 153)			mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXLINE( 154)			mat->translate(this->frame->height,(int)0);
            		}
            		else {
HXLINE( 156)			if ((this->angle == (int)-90)) {
HXLINE( 158)				mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXLINE( 159)				mat->translate((int)0,this->frame->width);
            			}
            		}
HXLINE( 162)		mat->translate(this->offset->x,this->offset->y);
HXLINE( 163)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,prepareBlitMatrix,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::rotateAndFlip( ::flixel::math::FlxMatrix mat,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY){
int rotation = __o_rotation.Default(0);
bool flipX = __o_flipX.Default(false);
bool flipY = __o_flipY.Default(false);
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_177_rotateAndFlip)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(flipX,"flipX")
            	HX_STACK_ARG(flipY,"flipY")
HXLINE( 178)		HX_VARI( int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXLINE( 179)		HX_VARI( int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXLINE( 182)		if ((rotation != (int)0)) {
HXLINE( 184)			HX_VARI( int,t) = w;
HXLINE( 185)			w = h;
HXLINE( 186)			h = t;
HXLINE( 188)			if ((rotation == (int)90)) {
HXLINE( 190)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXLINE( 191)				mat->translate(this->sourceSize->y,(int)0);
            			}
            			else {
HXLINE( 193)				bool _hx_tmp;
HXDLIN( 193)				if ((rotation != (int)-90)) {
HXLINE( 193)					_hx_tmp = (rotation == (int)-90);
            				}
            				else {
HXLINE( 193)					_hx_tmp = true;
            				}
HXDLIN( 193)				if (_hx_tmp) {
HXLINE( 195)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXLINE( 196)					mat->translate((int)0,this->sourceSize->x);
            				}
            			}
            		}
HXLINE( 201)		if (flipX) {
HXLINE( 203)			mat->scale((int)-1,(int)1);
HXLINE( 204)			mat->translate(w,(int)0);
            		}
HXLINE( 207)		if (flipY) {
HXLINE( 209)			mat->scale((int)1,(int)-1);
HXLINE( 210)			mat->translate((int)0,h);
            		}
HXLINE( 213)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,rotateAndFlip,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::prepareTransformedBlitMatrix( ::flixel::math::FlxMatrix mat,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY){
int rotation = __o_rotation.Default(0);
bool flipX = __o_flipX.Default(false);
bool flipY = __o_flipY.Default(false);
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_226_prepareTransformedBlitMatrix)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(flipX,"flipX")
            	HX_STACK_ARG(flipY,"flipY")
HXLINE( 227)		mat->a = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)0)) );
HXDLIN( 227)		mat->b = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)1)) );
HXDLIN( 227)		mat->c = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)2)) );
HXDLIN( 227)		mat->d = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)3)) );
HXDLIN( 227)		mat->tx = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)4)) );
HXDLIN( 227)		mat->ty = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)5)) );
HXDLIN( 227)		mat = mat;
HXLINE( 228)		HX_VARI( int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 228)		HX_VARI( int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 228)		if ((rotation != (int)0)) {
HXLINE( 228)			HX_VARI( int,t) = w;
HXDLIN( 228)			w = h;
HXDLIN( 228)			h = t;
HXDLIN( 228)			if ((rotation == (int)90)) {
HXLINE( 228)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXDLIN( 228)				mat->translate(this->sourceSize->y,(int)0);
            			}
            			else {
HXLINE( 228)				bool _hx_tmp;
HXDLIN( 228)				if ((rotation != (int)-90)) {
HXLINE( 228)					_hx_tmp = (rotation == (int)-90);
            				}
            				else {
HXLINE( 228)					_hx_tmp = true;
            				}
HXDLIN( 228)				if (_hx_tmp) {
HXLINE( 228)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXDLIN( 228)					mat->translate((int)0,this->sourceSize->x);
            				}
            			}
            		}
HXDLIN( 228)		if (flipX) {
HXLINE( 228)			mat->scale((int)-1,(int)1);
HXDLIN( 228)			mat->translate(w,(int)0);
            		}
HXDLIN( 228)		if (flipY) {
HXLINE( 228)			mat->scale((int)1,(int)-1);
HXDLIN( 228)			mat->translate((int)0,h);
            		}
HXDLIN( 228)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,prepareTransformedBlitMatrix,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::prepareMatrix( ::flixel::math::FlxMatrix mat,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY){
int rotation = __o_rotation.Default(0);
bool flipX = __o_flipX.Default(false);
bool flipY = __o_flipY.Default(false);
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_241_prepareMatrix)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(flipX,"flipX")
            	HX_STACK_ARG(flipY,"flipY")
HXLINE( 242)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 244)			mat->identity();
HXLINE( 245)			return mat;
            		}
HXLINE( 248)		mat->a = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)0)) );
HXLINE( 249)		mat->b = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)1)) );
HXLINE( 250)		mat->c = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)2)) );
HXLINE( 251)		mat->d = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)3)) );
HXLINE( 252)		mat->tx = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)4)) );
HXLINE( 253)		mat->ty = ( (Float)(_hx_array_unsafe_get(this->tileMatrix,(int)5)) );
HXLINE( 255)		HX_VARI( bool,doFlipX) = (flipX != this->flipX);
HXLINE( 256)		HX_VARI( bool,doFlipY) = (flipY != this->flipY);
HXLINE( 258)		bool _hx_tmp;
HXDLIN( 258)		bool _hx_tmp1;
HXDLIN( 258)		if ((rotation == (int)0)) {
HXLINE( 258)			_hx_tmp1 = !(doFlipX);
            		}
            		else {
HXLINE( 258)			_hx_tmp1 = false;
            		}
HXDLIN( 258)		if (_hx_tmp1) {
HXLINE( 258)			_hx_tmp = !(doFlipY);
            		}
            		else {
HXLINE( 258)			_hx_tmp = false;
            		}
HXDLIN( 258)		if (_hx_tmp) {
HXLINE( 260)			return mat;
            		}
HXLINE( 263)		HX_VARI( int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 263)		HX_VARI( int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 263)		if ((rotation != (int)0)) {
HXLINE( 263)			HX_VARI( int,t) = w;
HXDLIN( 263)			w = h;
HXDLIN( 263)			h = t;
HXDLIN( 263)			if ((rotation == (int)90)) {
HXLINE( 263)				mat->setTo(-(mat->b),mat->a,-(mat->d),mat->c,-(mat->ty),mat->tx);
HXDLIN( 263)				mat->translate(this->sourceSize->y,(int)0);
            			}
            			else {
HXLINE( 263)				bool _hx_tmp2;
HXDLIN( 263)				if ((rotation != (int)-90)) {
HXLINE( 263)					_hx_tmp2 = (rotation == (int)-90);
            				}
            				else {
HXLINE( 263)					_hx_tmp2 = true;
            				}
HXDLIN( 263)				if (_hx_tmp2) {
HXLINE( 263)					mat->setTo(mat->b,-(mat->a),mat->d,-(mat->c),mat->ty,-(mat->tx));
HXDLIN( 263)					mat->translate((int)0,this->sourceSize->x);
            				}
            			}
            		}
HXDLIN( 263)		if (doFlipX) {
HXLINE( 263)			mat->scale((int)-1,(int)1);
HXDLIN( 263)			mat->translate(w,(int)0);
            		}
HXDLIN( 263)		if (doFlipY) {
HXLINE( 263)			mat->scale((int)1,(int)-1);
HXDLIN( 263)			mat->translate((int)0,h);
            		}
HXDLIN( 263)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,prepareMatrix,return )

 ::flixel::math::FlxMatrix FlxFrame_obj::fillBlitMatrix( ::flixel::math::FlxMatrix mat){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_267_fillBlitMatrix)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
HXLINE( 268)		mat->a = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)0)) );
HXLINE( 269)		mat->b = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)1)) );
HXLINE( 270)		mat->c = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)2)) );
HXLINE( 271)		mat->d = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)3)) );
HXLINE( 272)		mat->tx = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)4)) );
HXLINE( 273)		mat->ty = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)5)) );
HXLINE( 274)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,fillBlitMatrix,return )

 ::openfl::display::BitmapData FlxFrame_obj::paint( ::openfl::display::BitmapData bmd, ::openfl::geom::Point point,hx::Null< bool >  __o_mergeAlpha,hx::Null< bool >  __o_disposeIfNotEqual){
bool mergeAlpha = __o_mergeAlpha.Default(false);
bool disposeIfNotEqual = __o_disposeIfNotEqual.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_287_paint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bmd,"bmd")
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
            	HX_STACK_ARG(disposeIfNotEqual,"disposeIfNotEqual")
HXLINE( 288)		if (hx::IsNull( point )) {
HXLINE( 290)			point = this->point1;
HXLINE( 291)			point->setTo((int)0,(int)0);
            		}
HXLINE( 294)		HX_VARI_NAME(  ::openfl::display::BitmapData,bmd1,"bmd") = bmd;
HXDLIN( 294)		HX_VARI( int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 294)		HX_VARI( int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 294)		bool bmd2;
HXDLIN( 294)		if (hx::IsNotNull( bmd1 )) {
HXLINE( 294)			bmd2 = disposeIfNotEqual;
            		}
            		else {
HXLINE( 294)			bmd2 = false;
            		}
HXDLIN( 294)		if (bmd2) {
HXLINE( 294)			bmd1 = ::flixel::util::FlxDestroyUtil_obj::disposeIfNotEqual(bmd1,w,h);
            		}
HXDLIN( 294)		bool bmd3;
HXDLIN( 294)		if (hx::IsNotNull( bmd1 )) {
HXLINE( 294)			bmd3 = !(mergeAlpha);
            		}
            		else {
HXLINE( 294)			bmd3 = false;
            		}
HXDLIN( 294)		if (bmd3) {
HXLINE( 294)			this->rect->setTo(point->x,point->y,w,h);
HXDLIN( 294)			bmd1->fillRect(this->rect,(int)0);
            		}
            		else {
HXLINE( 294)			if (hx::IsNull( bmd1 )) {
HXLINE( 294)				bmd1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,w,h,true,(int)0);
            			}
            		}
HXDLIN( 294)		bmd = bmd1;
HXLINE( 296)		if ((this->type == (int)2)) {
HXLINE( 298)			return bmd;
            		}
HXLINE( 301)		if ((this->angle == (int)0)) {
HXLINE( 303)			{
HXLINE( 303)				HX_VARI(  ::flixel::math::FlxPoint,_this) = this->offset;
HXDLIN( 303)				HX_VARI(  ::openfl::geom::Point,FlashPoint) = this->point2;
HXDLIN( 303)				if (hx::IsNull( FlashPoint )) {
HXLINE( 303)					FlashPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            				}
HXDLIN( 303)				FlashPoint->x = _this->x;
HXDLIN( 303)				FlashPoint->y = _this->y;
            			}
HXLINE( 304)			 ::openfl::geom::Point _hx_tmp = this->point2;
HXDLIN( 304)			_hx_tmp->x = (_hx_tmp->x + point->x);
HXLINE( 305)			 ::openfl::geom::Point _hx_tmp1 = this->point2;
HXDLIN( 305)			_hx_tmp1->y = (_hx_tmp1->y + point->y);
HXLINE( 306)			 ::openfl::display::BitmapData _hx_tmp2 = this->parent->bitmap;
HXDLIN( 306)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->frame;
HXDLIN( 306)			HX_VARI(  ::openfl::geom::Rectangle,FlashRect) = this->rect;
HXDLIN( 306)			if (hx::IsNull( FlashRect )) {
HXLINE( 306)				FlashRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXDLIN( 306)			FlashRect->x = _this1->x;
HXDLIN( 306)			FlashRect->y = _this1->y;
HXDLIN( 306)			FlashRect->width = _this1->width;
HXDLIN( 306)			FlashRect->height = _this1->height;
HXDLIN( 306)			bmd->copyPixels(_hx_tmp2,FlashRect,this->point2,null(),null(),mergeAlpha);
            		}
            		else {
HXLINE( 310)			{
HXLINE( 310)				HX_VARI(  ::flixel::math::FlxMatrix,mat) = this->matrix;
HXDLIN( 310)				mat->a = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)0)) );
HXDLIN( 310)				mat->b = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)1)) );
HXDLIN( 310)				mat->c = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)2)) );
HXDLIN( 310)				mat->d = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)3)) );
HXDLIN( 310)				mat->tx = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)4)) );
HXDLIN( 310)				mat->ty = ( (Float)(_hx_array_unsafe_get(this->blitMatrix,(int)5)) );
            			}
HXLINE( 311)			this->matrix->translate(point->x,point->y);
HXLINE( 312)			HX_VARI_NAME(  ::flixel::math::FlxMatrix,mat1,"mat") = this->matrix;
HXDLIN( 312)			Float X = this->frame->x;
HXDLIN( 312)			Float Y = this->frame->y;
HXDLIN( 312)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X,Y);
HXDLIN( 312)			point1->_inPool = false;
HXDLIN( 312)			point1->_weak = true;
HXDLIN( 312)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = this->frame;
HXDLIN( 312)			Float X1 = (_this2->x + _this2->width);
HXDLIN( 312)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this3,"_this") = this->frame;
HXDLIN( 312)			Float Y1 = (_this3->y + _this3->height);
HXDLIN( 312)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X1,Y1);
HXDLIN( 312)			point2->_inPool = false;
HXDLIN( 312)			point2->_weak = true;
HXDLIN( 312)			point1->set((((point1->x * mat1->a) + (point1->y * mat1->c)) + mat1->tx),(((point1->x * mat1->b) + (point1->y * mat1->d)) + mat1->ty));
HXDLIN( 312)			point2->set((((point2->x * mat1->a) + (point2->y * mat1->c)) + mat1->tx),(((point2->x * mat1->b) + (point2->y * mat1->d)) + mat1->ty));
HXDLIN( 312)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this4,"_this") = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 312)			_this4->x = (int)0;
HXDLIN( 312)			_this4->y = (int)0;
HXDLIN( 312)			_this4->width = (int)0;
HXDLIN( 312)			_this4->height = (int)0;
HXDLIN( 312)			_this4->_inPool = false;
HXDLIN( 312)			HX_VARI( Float,minX) = ::Math_obj::min(point1->x,point2->x);
HXDLIN( 312)			HX_VARI( Float,minY) = ::Math_obj::min(point1->y,point2->y);
HXDLIN( 312)			HX_VARI( Float,maxX) = ::Math_obj::max(point1->x,point2->x);
HXDLIN( 312)			HX_VARI( Float,maxY) = ::Math_obj::max(point1->y,point2->y);
HXDLIN( 312)			if (point1->_weak) {
HXLINE( 312)				point1->put();
            			}
HXDLIN( 312)			if (point2->_weak) {
HXLINE( 312)				point2->put();
            			}
HXDLIN( 312)			_this4->x = minX;
HXDLIN( 312)			_this4->y = minY;
HXDLIN( 312)			_this4->width = (maxX - minX);
HXDLIN( 312)			_this4->height = (maxY - minY);
HXDLIN( 312)			{
HXLINE( 312)				HX_VARI_NAME(  ::openfl::geom::Rectangle,FlashRect1,"FlashRect") = this->rect;
HXDLIN( 312)				if (hx::IsNull( FlashRect1 )) {
HXLINE( 312)					FlashRect1 =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXDLIN( 312)				FlashRect1->x = _this4->x;
HXDLIN( 312)				FlashRect1->y = _this4->y;
HXDLIN( 312)				FlashRect1->width = _this4->width;
HXDLIN( 312)				FlashRect1->height = _this4->height;
            			}
HXDLIN( 312)			if (!(_this4->_inPool)) {
HXLINE( 312)				_this4->_inPool = true;
HXDLIN( 312)				_this4->_weak = false;
HXDLIN( 312)				::flixel::math::FlxRect_obj::_pool->putUnsafe(_this4);
            			}
HXLINE( 313)			bmd->draw(this->parent->bitmap,this->matrix,null(),null(),this->rect,null());
            		}
HXLINE( 316)		return bmd;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,paint,return )

 ::openfl::display::BitmapData FlxFrame_obj::paintRotatedAndFlipped( ::openfl::display::BitmapData bmd, ::openfl::geom::Point point,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY,hx::Null< bool >  __o_mergeAlpha,hx::Null< bool >  __o_disposeIfNotEqual){
int rotation = __o_rotation.Default(0);
bool flipX = __o_flipX.Default(false);
bool flipY = __o_flipY.Default(false);
bool mergeAlpha = __o_mergeAlpha.Default(false);
bool disposeIfNotEqual = __o_disposeIfNotEqual.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_332_paintRotatedAndFlipped)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bmd,"bmd")
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(flipX,"flipX")
            	HX_STACK_ARG(flipY,"flipY")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
            	HX_STACK_ARG(disposeIfNotEqual,"disposeIfNotEqual")
HXLINE( 333)		bool _hx_tmp;
HXDLIN( 333)		if ((this->type == (int)2)) {
HXLINE( 333)			_hx_tmp = (rotation == (int)0);
            		}
            		else {
HXLINE( 333)			_hx_tmp = false;
            		}
HXDLIN( 333)		if (_hx_tmp) {
HXLINE( 335)			return this->paint(bmd,point,mergeAlpha,disposeIfNotEqual);
            		}
HXLINE( 338)		if (hx::IsNull( point )) {
HXLINE( 340)			point = this->point2;
HXLINE( 341)			point->setTo((int)0,(int)0);
            		}
HXLINE( 344)		HX_VARI_NAME(  ::openfl::display::BitmapData,bmd1,"bmd") = bmd;
HXDLIN( 344)		HX_VARI( int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXDLIN( 344)		HX_VARI( int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXDLIN( 344)		if ((rotation != (int)0)) {
HXLINE( 344)			HX_VARI( int,t) = w;
HXDLIN( 344)			w = h;
HXDLIN( 344)			h = t;
            		}
HXDLIN( 344)		bool bmd2;
HXDLIN( 344)		if (hx::IsNotNull( bmd1 )) {
HXLINE( 344)			bmd2 = disposeIfNotEqual;
            		}
            		else {
HXLINE( 344)			bmd2 = false;
            		}
HXDLIN( 344)		if (bmd2) {
HXLINE( 344)			bmd1 = ::flixel::util::FlxDestroyUtil_obj::disposeIfNotEqual(bmd1,w,h);
            		}
HXDLIN( 344)		bool bmd3;
HXDLIN( 344)		if (hx::IsNotNull( bmd1 )) {
HXLINE( 344)			bmd3 = !(mergeAlpha);
            		}
            		else {
HXLINE( 344)			bmd3 = false;
            		}
HXDLIN( 344)		if (bmd3) {
HXLINE( 344)			this->rect->setTo(point->x,point->y,w,h);
HXDLIN( 344)			bmd1->fillRect(this->rect,(int)0);
            		}
            		else {
HXLINE( 344)			if (hx::IsNull( bmd1 )) {
HXLINE( 344)				bmd1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,w,h,true,(int)0);
            			}
            		}
HXDLIN( 344)		bmd = bmd1;
HXLINE( 346)		if ((this->type == (int)2)) {
HXLINE( 348)			return bmd;
            		}
HXLINE( 354)		this->prepareTransformedBlitMatrix(this->matrix,rotation,(flipX != this->flipX),(flipY != this->flipY));
HXLINE( 355)		this->matrix->translate(point->x,point->y);
HXLINE( 356)		HX_VARI(  ::flixel::math::FlxMatrix,mat) = this->matrix;
HXDLIN( 356)		Float X = this->frame->x;
HXDLIN( 356)		Float Y = this->frame->y;
HXDLIN( 356)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X,Y);
HXDLIN( 356)		point1->_inPool = false;
HXDLIN( 356)		point1->_weak = true;
HXDLIN( 356)		HX_VARI(  ::flixel::math::FlxRect,_this) = this->frame;
HXDLIN( 356)		Float X1 = (_this->x + _this->width);
HXDLIN( 356)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->frame;
HXDLIN( 356)		Float Y1 = (_this1->y + _this1->height);
HXDLIN( 356)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X1,Y1);
HXDLIN( 356)		point2->_inPool = false;
HXDLIN( 356)		point2->_weak = true;
HXDLIN( 356)		point1->set((((point1->x * mat->a) + (point1->y * mat->c)) + mat->tx),(((point1->x * mat->b) + (point1->y * mat->d)) + mat->ty));
HXDLIN( 356)		point2->set((((point2->x * mat->a) + (point2->y * mat->c)) + mat->tx),(((point2->x * mat->b) + (point2->y * mat->d)) + mat->ty));
HXDLIN( 356)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 356)		_this2->x = (int)0;
HXDLIN( 356)		_this2->y = (int)0;
HXDLIN( 356)		_this2->width = (int)0;
HXDLIN( 356)		_this2->height = (int)0;
HXDLIN( 356)		_this2->_inPool = false;
HXDLIN( 356)		HX_VARI( Float,minX) = ::Math_obj::min(point1->x,point2->x);
HXDLIN( 356)		HX_VARI( Float,minY) = ::Math_obj::min(point1->y,point2->y);
HXDLIN( 356)		HX_VARI( Float,maxX) = ::Math_obj::max(point1->x,point2->x);
HXDLIN( 356)		HX_VARI( Float,maxY) = ::Math_obj::max(point1->y,point2->y);
HXDLIN( 356)		if (point1->_weak) {
HXLINE( 356)			point1->put();
            		}
HXDLIN( 356)		if (point2->_weak) {
HXLINE( 356)			point2->put();
            		}
HXDLIN( 356)		_this2->x = minX;
HXDLIN( 356)		_this2->y = minY;
HXDLIN( 356)		_this2->width = (maxX - minX);
HXDLIN( 356)		_this2->height = (maxY - minY);
HXDLIN( 356)		{
HXLINE( 356)			HX_VARI(  ::openfl::geom::Rectangle,FlashRect) = this->rect;
HXDLIN( 356)			if (hx::IsNull( FlashRect )) {
HXLINE( 356)				FlashRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXDLIN( 356)			FlashRect->x = _this2->x;
HXDLIN( 356)			FlashRect->y = _this2->y;
HXDLIN( 356)			FlashRect->width = _this2->width;
HXDLIN( 356)			FlashRect->height = _this2->height;
            		}
HXDLIN( 356)		if (!(_this2->_inPool)) {
HXLINE( 356)			_this2->_inPool = true;
HXDLIN( 356)			_this2->_weak = false;
HXDLIN( 356)			::flixel::math::FlxRect_obj::_pool->putUnsafe(_this2);
            		}
HXLINE( 357)		bmd->draw(this->parent->bitmap,this->matrix,null(),null(),this->rect,null());
HXLINE( 358)		return bmd;
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxFrame_obj,paintRotatedAndFlipped,return )

 ::openfl::display::BitmapData FlxFrame_obj::checkInputBitmap( ::openfl::display::BitmapData bmd, ::openfl::geom::Point point,hx::Null< int >  __o_rotation,hx::Null< bool >  __o_mergeAlpha,hx::Null< bool >  __o_disposeIfNotEqual){
int rotation = __o_rotation.Default(0);
bool mergeAlpha = __o_mergeAlpha.Default(false);
bool disposeIfNotEqual = __o_disposeIfNotEqual.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_372_checkInputBitmap)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bmd,"bmd")
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
            	HX_STACK_ARG(disposeIfNotEqual,"disposeIfNotEqual")
HXLINE( 373)		HX_VARI( int,w) = ::Std_obj::_hx_int(this->sourceSize->x);
HXLINE( 374)		HX_VARI( int,h) = ::Std_obj::_hx_int(this->sourceSize->y);
HXLINE( 376)		if ((rotation != (int)0)) {
HXLINE( 378)			HX_VARI( int,t) = w;
HXLINE( 379)			w = h;
HXLINE( 380)			h = t;
            		}
HXLINE( 383)		bool _hx_tmp;
HXDLIN( 383)		if (hx::IsNotNull( bmd )) {
HXLINE( 383)			_hx_tmp = disposeIfNotEqual;
            		}
            		else {
HXLINE( 383)			_hx_tmp = false;
            		}
HXDLIN( 383)		if (_hx_tmp) {
HXLINE( 385)			bmd = ::flixel::util::FlxDestroyUtil_obj::disposeIfNotEqual(bmd,w,h);
            		}
HXLINE( 388)		bool _hx_tmp1;
HXDLIN( 388)		if (hx::IsNotNull( bmd )) {
HXLINE( 388)			_hx_tmp1 = !(mergeAlpha);
            		}
            		else {
HXLINE( 388)			_hx_tmp1 = false;
            		}
HXDLIN( 388)		if (_hx_tmp1) {
HXLINE( 390)			this->rect->setTo(point->x,point->y,w,h);
HXLINE( 391)			bmd->fillRect(this->rect,(int)0);
            		}
            		else {
HXLINE( 393)			if (hx::IsNull( bmd )) {
HXLINE( 395)				bmd =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,w,h,true,(int)0);
            			}
            		}
HXLINE( 398)		return bmd;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxFrame_obj,checkInputBitmap,return )

 ::openfl::geom::Rectangle FlxFrame_obj::getDrawFrameRect( ::flixel::math::FlxMatrix mat){
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_409_getDrawFrameRect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
HXLINE( 410)		Float X = this->frame->x;
HXDLIN( 410)		Float Y = this->frame->y;
HXDLIN( 410)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X,Y);
HXDLIN( 410)		point->_inPool = false;
HXDLIN( 410)		point->_weak = true;
HXLINE( 411)		HX_VARI(  ::flixel::math::FlxRect,_this) = this->frame;
HXDLIN( 411)		Float X1 = (_this->x + _this->width);
HXDLIN( 411)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->frame;
HXDLIN( 411)		Float Y1 = (_this1->y + _this1->height);
HXDLIN( 411)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X1,Y1);
HXDLIN( 411)		point1->_inPool = false;
HXDLIN( 411)		point1->_weak = true;
HXLINE( 413)		point->set((((point->x * mat->a) + (point->y * mat->c)) + mat->tx),(((point->x * mat->b) + (point->y * mat->d)) + mat->ty));
HXLINE( 414)		point1->set((((point1->x * mat->a) + (point1->y * mat->c)) + mat->tx),(((point1->x * mat->b) + (point1->y * mat->d)) + mat->ty));
HXLINE( 416)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 416)		_this2->x = (int)0;
HXDLIN( 416)		_this2->y = (int)0;
HXDLIN( 416)		_this2->width = (int)0;
HXDLIN( 416)		_this2->height = (int)0;
HXDLIN( 416)		_this2->_inPool = false;
HXDLIN( 416)		HX_VARI( Float,minX) = ::Math_obj::min(point->x,point1->x);
HXDLIN( 416)		HX_VARI( Float,minY) = ::Math_obj::min(point->y,point1->y);
HXDLIN( 416)		HX_VARI( Float,maxX) = ::Math_obj::max(point->x,point1->x);
HXDLIN( 416)		HX_VARI( Float,maxY) = ::Math_obj::max(point->y,point1->y);
HXDLIN( 416)		if (point->_weak) {
HXLINE( 416)			point->put();
            		}
HXDLIN( 416)		if (point1->_weak) {
HXLINE( 416)			point1->put();
            		}
HXDLIN( 416)		_this2->x = minX;
HXDLIN( 416)		_this2->y = minY;
HXDLIN( 416)		_this2->width = (maxX - minX);
HXDLIN( 416)		_this2->height = (maxY - minY);
HXLINE( 417)		{
HXLINE( 417)			HX_VARI(  ::openfl::geom::Rectangle,FlashRect) = this->rect;
HXDLIN( 417)			if (hx::IsNull( FlashRect )) {
HXLINE( 417)				FlashRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXDLIN( 417)			FlashRect->x = _this2->x;
HXDLIN( 417)			FlashRect->y = _this2->y;
HXDLIN( 417)			FlashRect->width = _this2->width;
HXDLIN( 417)			FlashRect->height = _this2->height;
            		}
HXLINE( 418)		if (!(_this2->_inPool)) {
HXLINE( 418)			_this2->_inPool = true;
HXDLIN( 418)			_this2->_weak = false;
HXDLIN( 418)			::flixel::math::FlxRect_obj::_pool->putUnsafe(_this2);
            		}
HXLINE( 419)		return this->rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,getDrawFrameRect,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::subFrameTo( ::flixel::math::FlxRect rect, ::flixel::graphics::frames::FlxFrame frameToFill){
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_430_subFrameTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(frameToFill,"frameToFill")
HXLINE( 431)		if (hx::IsNull( frameToFill )) {
HXLINE( 433)			frameToFill =  ::flixel::graphics::frames::FlxFrame_obj::__alloc( HX_CTX ,this->parent,this->angle,null(),null());
            		}
            		else {
HXLINE( 437)			frameToFill->parent = this->parent;
HXLINE( 438)			frameToFill->angle = this->angle;
HXLINE( 439)			frameToFill->set_frame(( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(frameToFill->frame)) ));
            		}
HXLINE( 442)		frameToFill->sourceSize->set(rect->width,rect->height);
HXLINE( 445)		if ((this->type == (int)2)) {
HXLINE( 447)			frameToFill->type = (int)2;
HXLINE( 448)			frameToFill->offset->set((int)0,(int)0);
HXLINE( 449)			return frameToFill;
            		}
HXLINE( 452)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 452)		_this->x = (int)0;
HXDLIN( 452)		_this->y = (int)0;
HXDLIN( 452)		_this->width = (int)0;
HXDLIN( 452)		_this->height = (int)0;
HXDLIN( 452)		_this->_inPool = false;
HXDLIN( 452)		_this->width = this->frame->width;
HXDLIN( 452)		_this->height = this->frame->height;
HXLINE( 453)		if ((this->angle != (int)0)) {
HXLINE( 455)			_this->width = this->frame->height;
HXLINE( 456)			_this->height = this->frame->width;
            		}
HXLINE( 459)		HX_VARI( Float,ox) = ::Math_obj::max(this->offset->x,(int)0);
HXLINE( 460)		HX_VARI( Float,oy) = ::Math_obj::max(this->offset->y,(int)0);
HXLINE( 462)		{
HXLINE( 462)			rect->x = (rect->x + -(ox));
HXDLIN( 462)			rect->y = (rect->y + -(oy));
            		}
HXLINE( 463)		HX_VARI(  ::flixel::math::FlxRect,frameRect) = _this->intersection(rect,null());
HXLINE( 464)		::flixel::util::FlxDestroyUtil_obj::put(_this);
HXLINE( 465)		{
HXLINE( 465)			rect->x = (rect->x + ox);
HXDLIN( 465)			rect->y = (rect->y + oy);
            		}
HXLINE( 467)		bool _hx_tmp;
HXDLIN( 467)		if ((frameRect->width != (int)0)) {
HXLINE( 467)			_hx_tmp = (frameRect->height == (int)0);
            		}
            		else {
HXLINE( 467)			_hx_tmp = true;
            		}
HXDLIN( 467)		if (_hx_tmp) {
HXLINE( 469)			frameToFill->type = (int)2;
HXLINE( 470)			{
HXLINE( 470)				frameRect->x = (int)0;
HXDLIN( 470)				frameRect->y = (int)0;
HXDLIN( 470)				frameRect->width = (int)0;
HXDLIN( 470)				frameRect->height = (int)0;
            			}
HXLINE( 471)			frameToFill->set_frame(frameRect);
HXLINE( 472)			frameToFill->offset->set((int)0,(int)0);
            		}
            		else {
HXLINE( 476)			frameToFill->type = (int)0;
HXLINE( 477)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this1,"_this") = frameToFill->offset->set(frameRect->x,frameRect->y);
HXDLIN( 477)			Float Y = rect->y;
HXDLIN( 477)			_this1->set_x((_this1->x - rect->x));
HXDLIN( 477)			_this1->set_y((_this1->y - Y));
HXDLIN( 477)			_this1->addPoint(this->offset);
HXLINE( 479)			Float X = frameRect->x;
HXDLIN( 479)			Float Y1 = frameRect->y;
HXDLIN( 479)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X,Y1);
HXDLIN( 479)			point->_inPool = false;
HXDLIN( 479)			point->_weak = true;
HXLINE( 480)			Float X1 = (frameRect->x + frameRect->width);
HXDLIN( 480)			Float Y2 = (frameRect->y + frameRect->height);
HXDLIN( 480)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X1,Y2);
HXDLIN( 480)			point1->_inPool = false;
HXDLIN( 480)			point1->_weak = true;
HXLINE( 482)			this->matrix->identity();
HXLINE( 484)			if ((this->angle == (int)-90)) {
HXLINE( 486)				{
HXLINE( 486)					HX_VARI_NAME(  ::flixel::math::FlxMatrix,_this2,"_this") = this->matrix;
HXDLIN( 486)					_this2->setTo(-(_this2->b),_this2->a,-(_this2->d),_this2->c,-(_this2->ty),_this2->tx);
            				}
HXLINE( 487)				this->matrix->translate(this->frame->width,(int)0);
            			}
            			else {
HXLINE( 489)				if ((this->angle == (int)90)) {
HXLINE( 491)					{
HXLINE( 491)						HX_VARI_NAME(  ::flixel::math::FlxMatrix,_this3,"_this") = this->matrix;
HXDLIN( 491)						_this3->setTo(_this3->b,-(_this3->a),_this3->d,-(_this3->c),_this3->ty,-(_this3->tx));
            					}
HXLINE( 492)					this->matrix->translate((int)0,this->frame->height);
            				}
            			}
HXLINE( 495)			if ((this->angle != (int)0)) {
HXLINE( 497)				{
HXLINE( 497)					HX_VARI(  ::openfl::geom::Matrix,matrix) = this->matrix;
HXDLIN( 497)					point->set((((point->x * matrix->a) + (point->y * matrix->c)) + matrix->tx),(((point->x * matrix->b) + (point->y * matrix->d)) + matrix->ty));
            				}
HXLINE( 498)				{
HXLINE( 498)					HX_VARI_NAME(  ::openfl::geom::Matrix,matrix1,"matrix") = this->matrix;
HXDLIN( 498)					point1->set((((point1->x * matrix1->a) + (point1->y * matrix1->c)) + matrix1->tx),(((point1->x * matrix1->b) + (point1->y * matrix1->d)) + matrix1->ty));
            				}
            			}
HXLINE( 501)			{
HXLINE( 501)				HX_VARI( Float,minX) = ::Math_obj::min(point->x,point1->x);
HXDLIN( 501)				HX_VARI( Float,minY) = ::Math_obj::min(point->y,point1->y);
HXDLIN( 501)				HX_VARI( Float,maxX) = ::Math_obj::max(point->x,point1->x);
HXDLIN( 501)				HX_VARI( Float,maxY) = ::Math_obj::max(point->y,point1->y);
HXDLIN( 501)				if (point->_weak) {
HXLINE( 501)					point->put();
            				}
HXDLIN( 501)				if (point1->_weak) {
HXLINE( 501)					point1->put();
            				}
HXDLIN( 501)				{
HXLINE( 501)					frameRect->x = minX;
HXDLIN( 501)					frameRect->y = minY;
HXDLIN( 501)					frameRect->width = (maxX - minX);
HXDLIN( 501)					frameRect->height = (maxY - minY);
            				}
            			}
HXLINE( 502)			{
HXLINE( 502)				frameRect->x = (frameRect->x + this->frame->x);
HXDLIN( 502)				frameRect->y = (frameRect->y + this->frame->y);
            			}
HXLINE( 503)			frameToFill->set_frame(frameRect);
HXLINE( 504)			frameToFill->cacheFrameMatrix();
            		}
HXLINE( 507)		return frameToFill;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,subFrameTo,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::setBorderTo( ::flixel::math::FlxPoint border, ::flixel::graphics::frames::FlxFrame frameToFill){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_518_setBorderTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(border,"border")
            	HX_STACK_ARG(frameToFill,"frameToFill")
HXLINE( 519)		Float X = border->x;
HXDLIN( 519)		Float Y = border->y;
HXDLIN( 519)		Float Width = (this->sourceSize->x - ((int)2 * border->x));
HXDLIN( 519)		Float Height = (this->sourceSize->y - ((int)2 * border->y));
HXDLIN( 519)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 519)		_this->x = X;
HXDLIN( 519)		_this->y = Y;
HXDLIN( 519)		_this->width = Width;
HXDLIN( 519)		_this->height = Height;
HXDLIN( 519)		_this->_inPool = false;
HXLINE( 520)		frameToFill = this->subFrameTo(_this,frameToFill);
HXLINE( 521)		frameToFill->name = this->name;
HXLINE( 522)		::flixel::util::FlxDestroyUtil_obj::put(_this);
HXLINE( 523)		return frameToFill;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,setBorderTo,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::clipTo( ::flixel::math::FlxRect clip, ::flixel::graphics::frames::FlxFrame clippedFrame){
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_533_clipTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(clip,"clip")
            	HX_STACK_ARG(clippedFrame,"clippedFrame")
HXLINE( 534)		if (hx::IsNull( clippedFrame )) {
HXLINE( 536)			clippedFrame =  ::flixel::graphics::frames::FlxFrame_obj::__alloc( HX_CTX ,this->parent,this->angle,null(),null());
            		}
            		else {
HXLINE( 540)			clippedFrame->parent = this->parent;
HXLINE( 541)			clippedFrame->angle = this->angle;
HXLINE( 542)			clippedFrame->set_frame(( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(clippedFrame->frame)) ));
            		}
HXLINE( 545)		{
HXLINE( 545)			HX_VARI(  ::flixel::math::FlxPoint,_this) = clippedFrame->sourceSize;
HXDLIN( 545)			HX_VARI(  ::flixel::math::FlxPoint,point) = this->sourceSize;
HXDLIN( 545)			_this->set_x(point->x);
HXDLIN( 545)			_this->set_y(point->y);
HXDLIN( 545)			if (point->_weak) {
HXLINE( 545)				point->put();
            			}
            		}
HXLINE( 546)		clippedFrame->name = this->name;
HXLINE( 549)		if ((this->type == (int)2)) {
HXLINE( 551)			clippedFrame->type = (int)2;
HXLINE( 552)			clippedFrame->offset->set((int)0,(int)0);
HXLINE( 553)			return clippedFrame;
            		}
HXLINE( 556)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 556)		_this1->x = (int)0;
HXDLIN( 556)		_this1->y = (int)0;
HXDLIN( 556)		_this1->width = (int)0;
HXDLIN( 556)		_this1->height = (int)0;
HXDLIN( 556)		_this1->_inPool = false;
HXDLIN( 556)		_this1->width = this->frame->width;
HXDLIN( 556)		_this1->height = this->frame->height;
HXLINE( 557)		if ((this->angle != (int)0)) {
HXLINE( 559)			_this1->width = this->frame->height;
HXLINE( 560)			_this1->height = this->frame->width;
            		}
HXLINE( 563)		{
HXLINE( 563)			clip->x = (clip->x + -(this->offset->x));
HXDLIN( 563)			clip->y = (clip->y + -(this->offset->y));
            		}
HXLINE( 564)		HX_VARI(  ::flixel::math::FlxRect,frameRect) = _this1->intersection(clip,null());
HXLINE( 565)		::flixel::util::FlxDestroyUtil_obj::put(_this1);
HXLINE( 567)		bool _hx_tmp;
HXDLIN( 567)		if ((frameRect->width != (int)0)) {
HXLINE( 567)			_hx_tmp = (frameRect->height == (int)0);
            		}
            		else {
HXLINE( 567)			_hx_tmp = true;
            		}
HXDLIN( 567)		if (_hx_tmp) {
HXLINE( 569)			clippedFrame->type = (int)2;
HXLINE( 570)			{
HXLINE( 570)				frameRect->x = (int)0;
HXDLIN( 570)				frameRect->y = (int)0;
HXDLIN( 570)				frameRect->width = (int)0;
HXDLIN( 570)				frameRect->height = (int)0;
            			}
HXLINE( 571)			clippedFrame->set_frame(frameRect);
HXLINE( 572)			clippedFrame->offset->set((int)0,(int)0);
            		}
            		else {
HXLINE( 576)			clippedFrame->type = (int)0;
HXLINE( 577)			clippedFrame->offset->set(frameRect->x,frameRect->y)->addPoint(this->offset);
HXLINE( 579)			Float X = frameRect->x;
HXDLIN( 579)			Float Y = frameRect->y;
HXDLIN( 579)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X,Y);
HXDLIN( 579)			point1->_inPool = false;
HXDLIN( 579)			point1->_weak = true;
HXLINE( 580)			Float X1 = (frameRect->x + frameRect->width);
HXDLIN( 580)			Float Y1 = (frameRect->y + frameRect->height);
HXDLIN( 580)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X1,Y1);
HXDLIN( 580)			point2->_inPool = false;
HXDLIN( 580)			point2->_weak = true;
HXLINE( 582)			this->matrix->identity();
HXLINE( 584)			if ((this->angle == (int)-90)) {
HXLINE( 586)				{
HXLINE( 586)					HX_VARI_NAME(  ::flixel::math::FlxMatrix,_this2,"_this") = this->matrix;
HXDLIN( 586)					_this2->setTo(-(_this2->b),_this2->a,-(_this2->d),_this2->c,-(_this2->ty),_this2->tx);
            				}
HXLINE( 587)				this->matrix->translate(this->frame->width,(int)0);
            			}
            			else {
HXLINE( 589)				if ((this->angle == (int)90)) {
HXLINE( 591)					{
HXLINE( 591)						HX_VARI_NAME(  ::flixel::math::FlxMatrix,_this3,"_this") = this->matrix;
HXDLIN( 591)						_this3->setTo(_this3->b,-(_this3->a),_this3->d,-(_this3->c),_this3->ty,-(_this3->tx));
            					}
HXLINE( 592)					this->matrix->translate((int)0,this->frame->height);
            				}
            			}
HXLINE( 595)			if ((this->angle != (int)0)) {
HXLINE( 597)				{
HXLINE( 597)					HX_VARI(  ::openfl::geom::Matrix,matrix) = this->matrix;
HXDLIN( 597)					point1->set((((point1->x * matrix->a) + (point1->y * matrix->c)) + matrix->tx),(((point1->x * matrix->b) + (point1->y * matrix->d)) + matrix->ty));
            				}
HXLINE( 598)				{
HXLINE( 598)					HX_VARI_NAME(  ::openfl::geom::Matrix,matrix1,"matrix") = this->matrix;
HXDLIN( 598)					point2->set((((point2->x * matrix1->a) + (point2->y * matrix1->c)) + matrix1->tx),(((point2->x * matrix1->b) + (point2->y * matrix1->d)) + matrix1->ty));
            				}
            			}
HXLINE( 601)			{
HXLINE( 601)				HX_VARI( Float,minX) = ::Math_obj::min(point1->x,point2->x);
HXDLIN( 601)				HX_VARI( Float,minY) = ::Math_obj::min(point1->y,point2->y);
HXDLIN( 601)				HX_VARI( Float,maxX) = ::Math_obj::max(point1->x,point2->x);
HXDLIN( 601)				HX_VARI( Float,maxY) = ::Math_obj::max(point1->y,point2->y);
HXDLIN( 601)				if (point1->_weak) {
HXLINE( 601)					point1->put();
            				}
HXDLIN( 601)				if (point2->_weak) {
HXLINE( 601)					point2->put();
            				}
HXDLIN( 601)				{
HXLINE( 601)					frameRect->x = minX;
HXDLIN( 601)					frameRect->y = minY;
HXDLIN( 601)					frameRect->width = (maxX - minX);
HXDLIN( 601)					frameRect->height = (maxY - minY);
            				}
            			}
HXLINE( 602)			{
HXLINE( 602)				frameRect->x = (frameRect->x + this->frame->x);
HXDLIN( 602)				frameRect->y = (frameRect->y + this->frame->y);
            			}
HXLINE( 603)			clippedFrame->set_frame(frameRect);
HXLINE( 604)			clippedFrame->cacheFrameMatrix();
            		}
HXLINE( 607)		{
HXLINE( 607)			clip->x = (clip->x + this->offset->x);
HXDLIN( 607)			clip->y = (clip->y + this->offset->y);
            		}
HXLINE( 608)		return clippedFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxFrame_obj,clipTo,return )

 ::flixel::graphics::frames::FlxFrame FlxFrame_obj::copyTo( ::flixel::graphics::frames::FlxFrame clone){
            	HX_GC_STACKFRAME(&_hx_pos_5df8bdd839d6a258_618_copyTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(clone,"clone")
HXLINE( 619)		if (hx::IsNull( clone )) {
HXLINE( 621)			clone =  ::flixel::graphics::frames::FlxFrame_obj::__alloc( HX_CTX ,this->parent,this->angle,null(),null());
            		}
            		else {
HXLINE( 625)			clone->parent = this->parent;
HXLINE( 626)			clone->angle = this->angle;
HXLINE( 627)			clone->set_frame(( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(clone->frame)) ));
            		}
HXLINE( 630)		{
HXLINE( 630)			HX_VARI(  ::flixel::math::FlxPoint,_this) = clone->offset;
HXDLIN( 630)			HX_VARI(  ::flixel::math::FlxPoint,point) = this->offset;
HXDLIN( 630)			_this->set_x(point->x);
HXDLIN( 630)			_this->set_y(point->y);
HXDLIN( 630)			if (point->_weak) {
HXLINE( 630)				point->put();
            			}
            		}
HXLINE( 631)		clone->flipX = this->flipX;
HXLINE( 632)		clone->flipY = this->flipY;
HXLINE( 633)		{
HXLINE( 633)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this1,"_this") = clone->sourceSize;
HXDLIN( 633)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = this->sourceSize;
HXDLIN( 633)			_this1->set_x(point1->x);
HXDLIN( 633)			_this1->set_y(point1->y);
HXDLIN( 633)			if (point1->_weak) {
HXLINE( 633)				point1->put();
            			}
            		}
HXLINE( 634)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 634)		_this2->x = (int)0;
HXDLIN( 634)		_this2->y = (int)0;
HXDLIN( 634)		_this2->width = (int)0;
HXDLIN( 634)		_this2->height = (int)0;
HXDLIN( 634)		_this2->_inPool = false;
HXDLIN( 634)		HX_VARI(  ::flixel::math::FlxRect,Rect) = this->frame;
HXDLIN( 634)		_this2->x = Rect->x;
HXDLIN( 634)		_this2->y = Rect->y;
HXDLIN( 634)		_this2->width = Rect->width;
HXDLIN( 634)		_this2->height = Rect->height;
HXDLIN( 634)		if (Rect->_weak) {
HXLINE( 634)			if (!(Rect->_inPool)) {
HXLINE( 634)				Rect->_inPool = true;
HXDLIN( 634)				Rect->_weak = false;
HXDLIN( 634)				::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            			}
            		}
HXDLIN( 634)		clone->set_frame(_this2);
HXLINE( 635)		clone->type = this->type;
HXLINE( 636)		clone->name = this->name;
HXLINE( 637)		clone->cacheFrameMatrix();
HXLINE( 638)		return clone;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,copyTo,return )

void FlxFrame_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_642_destroy)
            	HX_STACK_THIS(this)
HXLINE( 643)		this->name = null();
HXLINE( 644)		this->parent = null();
HXLINE( 645)		this->sourceSize = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->sourceSize)) );
HXLINE( 646)		this->offset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->offset)) );
HXLINE( 647)		this->set_frame(( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->frame)) ));
HXLINE( 648)		this->uv = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->uv)) );
HXLINE( 649)		this->blitMatrix = null();
HXLINE( 650)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 652)			this->tileMatrix = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFrame_obj,destroy,(void))

::String FlxFrame_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_658_toString)
            	HX_STACK_THIS(this)
HXLINE( 659)		 ::Dynamic value = this->name;
HXDLIN( 659)		HX_VARI(  ::flixel::util::LabelValuePair,_this) = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 659)		_this->label = HX_("name",4b,72,ff,48);
HXDLIN( 659)		_this->value = value;
HXLINE( 658)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(1)->init(0,_this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFrame_obj,toString,return )

 ::flixel::math::FlxRect FlxFrame_obj::set_frame( ::flixel::math::FlxRect value){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_663_set_frame)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 664)		if (hx::IsNotNull( value )) {
HXLINE( 666)			if (hx::IsNull( this->uv )) {
HXLINE( 667)				HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 667)				_this->x = (int)0;
HXDLIN( 667)				_this->y = (int)0;
HXDLIN( 667)				_this->width = (int)0;
HXDLIN( 667)				_this->height = (int)0;
HXDLIN( 667)				_this->_inPool = false;
HXDLIN( 667)				this->uv = _this;
            			}
HXLINE( 669)			{
HXLINE( 669)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->uv;
HXDLIN( 669)				Float Width = ((Float)(value->x + value->width) / (Float)this->parent->width);
HXDLIN( 669)				Float Height = ((Float)(value->y + value->height) / (Float)this->parent->height);
HXDLIN( 669)				_this1->x = ((Float)value->x / (Float)this->parent->width);
HXDLIN( 669)				_this1->y = ((Float)value->y / (Float)this->parent->height);
HXDLIN( 669)				_this1->width = Width;
HXDLIN( 669)				_this1->height = Height;
            			}
            		}
HXLINE( 672)		return (this->frame = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFrame_obj,set_frame,return )

void FlxFrame_obj::sort(::Array< ::Dynamic> frames,int prefixLength,int postfixLength){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,int,a4,int,a3) HXARGC(2)
            		int _hx_run( ::flixel::graphics::frames::FlxFrame a1, ::flixel::graphics::frames::FlxFrame a2){
            			HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_33_sort)
            			HX_STACK_ARG(a1,"a1")
            			HX_STACK_ARG(a2,"a2")
HXLINE(  33)			return ::flixel::graphics::frames::FlxFrame_obj::sortByName(a1,a2,a3,a4);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_33_sort)
            	HX_STACK_ARG(frames,"frames")
            	HX_STACK_ARG(prefixLength,"prefixLength")
            	HX_STACK_ARG(postfixLength,"postfixLength")
HXLINE(  33)		int a3 = prefixLength;
HXDLIN(  33)		int a4 = postfixLength;
HXDLIN(  33)		::haxe::ds::ArraySort_obj::sort(frames, ::Dynamic(new _hx_Closure_0(a4,a3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxFrame_obj,sort,(void))

int FlxFrame_obj::sortByName( ::flixel::graphics::frames::FlxFrame frame1, ::flixel::graphics::frames::FlxFrame frame2,int prefixLength,int postfixLength){
            	HX_STACKFRAME(&_hx_pos_5df8bdd839d6a258_37_sortByName)
            	HX_STACK_ARG(frame1,"frame1")
            	HX_STACK_ARG(frame2,"frame2")
            	HX_STACK_ARG(prefixLength,"prefixLength")
            	HX_STACK_ARG(postfixLength,"postfixLength")
HXLINE(  38)		HX_VARI( ::String,name1) = frame1->name;
HXLINE(  39)		HX_VARI( ::String,name2) = frame2->name;
HXLINE(  40)		HX_VARI(  ::Dynamic,num1) = ::Std_obj::parseInt(name1.substring(prefixLength,(name1.length - postfixLength)));
HXLINE(  41)		HX_VARI(  ::Dynamic,num2) = ::Std_obj::parseInt(name2.substring(prefixLength,(name2.length - postfixLength)));
HXLINE(  42)		if (hx::IsNull( num1 )) {
HXLINE(  43)			num1 = (int)0;
            		}
HXLINE(  44)		if (hx::IsNull( num2 )) {
HXLINE(  45)			num2 = (int)0;
            		}
HXLINE(  47)		return (num1 - num2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxFrame_obj,sortByName,return )


hx::ObjectPtr< FlxFrame_obj > FlxFrame_obj::__new( ::flixel::graphics::FlxGraphic parent,hx::Null< int >  __o_angle,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY) {
	hx::ObjectPtr< FlxFrame_obj > __this = new FlxFrame_obj();
	__this->__construct(parent,__o_angle,__o_flipX,__o_flipY);
	return __this;
}

hx::ObjectPtr< FlxFrame_obj > FlxFrame_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::graphics::FlxGraphic parent,hx::Null< int >  __o_angle,hx::Null< bool >  __o_flipX,hx::Null< bool >  __o_flipY) {
	FlxFrame_obj *__this = (FlxFrame_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxFrame_obj), true, "flixel.graphics.frames.FlxFrame"));
	*(void **)__this = FlxFrame_obj::_hx_vtable;
	__this->__construct(parent,__o_angle,__o_flipX,__o_flipY);
	return __this;
}

FlxFrame_obj::FlxFrame_obj()
{
}

void FlxFrame_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxFrame);
	HX_MARK_MEMBER_NAME(point1,"point1");
	HX_MARK_MEMBER_NAME(point2,"point2");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(uv,"uv");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(flipX,"flipX");
	HX_MARK_MEMBER_NAME(flipY,"flipY");
	HX_MARK_MEMBER_NAME(sourceSize,"sourceSize");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(tileMatrix,"tileMatrix");
	HX_MARK_MEMBER_NAME(blitMatrix,"blitMatrix");
	HX_MARK_END_CLASS();
}

void FlxFrame_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(point1,"point1");
	HX_VISIT_MEMBER_NAME(point2,"point2");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(uv,"uv");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(flipX,"flipX");
	HX_VISIT_MEMBER_NAME(flipY,"flipY");
	HX_VISIT_MEMBER_NAME(sourceSize,"sourceSize");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(tileMatrix,"tileMatrix");
	HX_VISIT_MEMBER_NAME(blitMatrix,"blitMatrix");
}

hx::Val FlxFrame_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { return hx::Val( uv); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"flipX") ) { return hx::Val( flipX); }
		if (HX_FIELD_EQ(inName,"flipY") ) { return hx::Val( flipY); }
		if (HX_FIELD_EQ(inName,"paint") ) { return hx::Val( paint_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"point1") ) { return hx::Val( point1); }
		if (HX_FIELD_EQ(inName,"point2") ) { return hx::Val( point2); }
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( matrix); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset); }
		if (HX_FIELD_EQ(inName,"clipTo") ) { return hx::Val( clipTo_dyn()); }
		if (HX_FIELD_EQ(inName,"copyTo") ) { return hx::Val( copyTo_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_frame") ) { return hx::Val( set_frame_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sourceSize") ) { return hx::Val( sourceSize); }
		if (HX_FIELD_EQ(inName,"tileMatrix") ) { return hx::Val( tileMatrix); }
		if (HX_FIELD_EQ(inName,"blitMatrix") ) { return hx::Val( blitMatrix); }
		if (HX_FIELD_EQ(inName,"subFrameTo") ) { return hx::Val( subFrameTo_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setBorderTo") ) { return hx::Val( setBorderTo_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rotateAndFlip") ) { return hx::Val( rotateAndFlip_dyn()); }
		if (HX_FIELD_EQ(inName,"prepareMatrix") ) { return hx::Val( prepareMatrix_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fillBlitMatrix") ) { return hx::Val( fillBlitMatrix_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cacheFrameMatrix") ) { return hx::Val( cacheFrameMatrix_dyn()); }
		if (HX_FIELD_EQ(inName,"checkInputBitmap") ) { return hx::Val( checkInputBitmap_dyn()); }
		if (HX_FIELD_EQ(inName,"getDrawFrameRect") ) { return hx::Val( getDrawFrameRect_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"prepareBlitMatrix") ) { return hx::Val( prepareBlitMatrix_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"paintRotatedAndFlipped") ) { return hx::Val( paintRotatedAndFlipped_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"prepareTransformedBlitMatrix") ) { return hx::Val( prepareTransformedBlitMatrix_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxFrame_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sort") ) { outValue = sort_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sortByName") ) { outValue = sortByName_dyn(); return true; }
	}
	return false;
}

hx::Val FlxFrame_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { uv=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frame(inValue) );frame=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipX") ) { flipX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipY") ) { flipY=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"point1") ) { point1=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"point2") ) { point2=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sourceSize") ) { sourceSize=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileMatrix") ) { tileMatrix=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blitMatrix") ) { blitMatrix=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxFrame_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("point1","\xe1","\x11","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("uv","\x61","\x66","\x00","\x00"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"));
	outFields->push(HX_HCSTRING("sourceSize","\x3c","\x87","\xb7","\x74"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("tileMatrix","\x0f","\x0c","\x5f","\x20"));
	outFields->push(HX_HCSTRING("blitMatrix","\x56","\x78","\x21","\xd8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxFrame_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*openfl::geom::Point*/ ,(int)offsetof(FlxFrame_obj,point1),HX_HCSTRING("point1","\xe1","\x11","\x2e","\xf7")},
	{hx::fsObject /*openfl::geom::Point*/ ,(int)offsetof(FlxFrame_obj,point2),HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7")},
	{hx::fsObject /*openfl::geom::Rectangle*/ ,(int)offsetof(FlxFrame_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxFrame_obj,matrix),HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb")},
	{hx::fsString,(int)offsetof(FlxFrame_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxFrame_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxFrame_obj,uv),HX_HCSTRING("uv","\x61","\x66","\x00","\x00")},
	{hx::fsObject /*::flixel::graphics::FlxGraphic*/ ,(int)offsetof(FlxFrame_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(FlxFrame_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsBool,(int)offsetof(FlxFrame_obj,flipX),HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02")},
	{hx::fsBool,(int)offsetof(FlxFrame_obj,flipY),HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxFrame_obj,sourceSize),HX_HCSTRING("sourceSize","\x3c","\x87","\xb7","\x74")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxFrame_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsInt,(int)offsetof(FlxFrame_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxFrame_obj,tileMatrix),HX_HCSTRING("tileMatrix","\x0f","\x0c","\x5f","\x20")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxFrame_obj,blitMatrix),HX_HCSTRING("blitMatrix","\x56","\x78","\x21","\xd8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxFrame_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxFrame_obj_sMemberFields[] = {
	HX_HCSTRING("point1","\xe1","\x11","\x2e","\xf7"),
	HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("uv","\x61","\x66","\x00","\x00"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("flipX","\x0b","\x45","\x92","\x02"),
	HX_HCSTRING("flipY","\x0c","\x45","\x92","\x02"),
	HX_HCSTRING("sourceSize","\x3c","\x87","\xb7","\x74"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("tileMatrix","\x0f","\x0c","\x5f","\x20"),
	HX_HCSTRING("blitMatrix","\x56","\x78","\x21","\xd8"),
	HX_HCSTRING("cacheFrameMatrix","\x2c","\x83","\xfa","\x88"),
	HX_HCSTRING("prepareBlitMatrix","\xbd","\xdc","\xf9","\x4c"),
	HX_HCSTRING("rotateAndFlip","\x09","\x24","\xe1","\x45"),
	HX_HCSTRING("prepareTransformedBlitMatrix","\xfa","\x77","\x91","\xf4"),
	HX_HCSTRING("prepareMatrix","\x28","\x9b","\x0e","\x82"),
	HX_HCSTRING("fillBlitMatrix","\xb9","\xac","\x6c","\x16"),
	HX_HCSTRING("paint","\x9e","\xb7","\x4e","\xbd"),
	HX_HCSTRING("paintRotatedAndFlipped","\xb6","\xa3","\xdf","\xc7"),
	HX_HCSTRING("checkInputBitmap","\xb1","\x8f","\x20","\x9b"),
	HX_HCSTRING("getDrawFrameRect","\xd7","\xc8","\x6f","\x02"),
	HX_HCSTRING("subFrameTo","\x68","\x95","\xdd","\xc4"),
	HX_HCSTRING("setBorderTo","\x49","\x73","\x59","\x89"),
	HX_HCSTRING("clipTo","\x6b","\x0c","\x58","\x0a"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("set_frame","\x90","\xc0","\x7d","\x2d"),
	::String(null()) };

static void FlxFrame_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxFrame_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxFrame_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxFrame_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxFrame_obj::__mClass;

static ::String FlxFrame_obj_sStaticFields[] = {
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("sortByName","\xc0","\xa1","\x33","\x6b"),
	::String(null())
};

void FlxFrame_obj::__register()
{
	hx::Object *dummy = new FlxFrame_obj;
	FlxFrame_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.graphics.frames.FlxFrame","\xf2","\x22","\x40","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxFrame_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxFrame_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxFrame_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxFrame_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxFrame_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxFrame_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxFrame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxFrame_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
