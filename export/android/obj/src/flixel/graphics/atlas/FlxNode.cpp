// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxAtlas
#include <flixel/graphics/atlas/FlxAtlas.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxNode
#include <flixel/graphics/atlas/FlxNode.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_75_new,"flixel.graphics.atlas.FlxNode","new",0xeedfd332,"flixel.graphics.atlas.FlxNode.new","flixel/graphics/atlas/FlxNode.hx",75,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_86_destroy,"flixel.graphics.atlas.FlxNode","destroy",0x006100cc,"flixel.graphics.atlas.FlxNode.destroy","flixel/graphics/atlas/FlxNode.hx",86,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_99_canPlace,"flixel.graphics.atlas.FlxNode","canPlace",0xb6bfba85,"flixel.graphics.atlas.FlxNode.canPlace","flixel/graphics/atlas/FlxNode.hx",99,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_110_getTileFrames,"flixel.graphics.atlas.FlxNode","getTileFrames",0xf6655efc,"flixel.graphics.atlas.FlxNode.getTileFrames","flixel/graphics/atlas/FlxNode.hx",110,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_132_getImageFrame,"flixel.graphics.atlas.FlxNode","getImageFrame",0xf79a185a,"flixel.graphics.atlas.FlxNode.getImageFrame","flixel/graphics/atlas/FlxNode.hx",132,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_146_get_isEmpty,"flixel.graphics.atlas.FlxNode","get_isEmpty",0xd9c0632c,"flixel.graphics.atlas.FlxNode.get_isEmpty","flixel/graphics/atlas/FlxNode.hx",146,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_151_get_x,"flixel.graphics.atlas.FlxNode","get_x",0x3d1080a1,"flixel.graphics.atlas.FlxNode.get_x","flixel/graphics/atlas/FlxNode.hx",151,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_156_get_y,"flixel.graphics.atlas.FlxNode","get_y",0x3d1080a2,"flixel.graphics.atlas.FlxNode.get_y","flixel/graphics/atlas/FlxNode.hx",156,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_161_get_width,"flixel.graphics.atlas.FlxNode","get_width",0xb520feaf,"flixel.graphics.atlas.FlxNode.get_width","flixel/graphics/atlas/FlxNode.hx",161,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_165_set_width,"flixel.graphics.atlas.FlxNode","set_width",0x9871eabb,"flixel.graphics.atlas.FlxNode.set_width","flixel/graphics/atlas/FlxNode.hx",165,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_172_get_height,"flixel.graphics.atlas.FlxNode","get_height",0x7e0d531e,"flixel.graphics.atlas.FlxNode.get_height","flixel/graphics/atlas/FlxNode.hx",172,0x6d18bb9f)
HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_176_set_height,"flixel.graphics.atlas.FlxNode","set_height",0x818af192,"flixel.graphics.atlas.FlxNode.set_height","flixel/graphics/atlas/FlxNode.hx",176,0x6d18bb9f)
namespace flixel{
namespace graphics{
namespace atlas{

void FlxNode_obj::__construct( ::flixel::math::FlxRect rect, ::flixel::graphics::atlas::FlxAtlas atlas,hx::Null< bool >  __o_filled,::String __o_key,hx::Null< bool >  __o_rotated){
bool filled = __o_filled.Default(false);
::String key = __o_key.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
bool rotated = __o_rotated.Default(false);
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_75_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(atlas,"atlas")
            	HX_STACK_ARG(filled,"filled")
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(rotated,"rotated")
HXLINE(  76)		this->filled = filled;
HXLINE(  77)		this->left = null();
HXLINE(  78)		this->right = null();
HXLINE(  79)		this->rect = rect;
HXLINE(  80)		this->key = key;
HXLINE(  81)		this->atlas = atlas;
HXLINE(  82)		this->rotated = rotated;
            	}

Dynamic FlxNode_obj::__CreateEmpty() { return new FlxNode_obj; }

void *FlxNode_obj::_hx_vtable = 0;

Dynamic FlxNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxNode_obj > _hx_result = new FlxNode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxNode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x27c053b0;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_graphics_atlas_FlxNode__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::graphics::atlas::FlxNode_obj::destroy,
};

void *FlxNode_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_graphics_atlas_FlxNode__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxNode_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_86_destroy)
            	HX_STACK_THIS(this)
HXLINE(  87)		this->key = null();
HXLINE(  88)		this->left = null();
HXLINE(  89)		this->right = null();
HXLINE(  90)		this->rect = null();
HXLINE(  91)		this->atlas = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNode_obj,destroy,(void))

bool FlxNode_obj::canPlace(int width,int height){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_99_canPlace)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(  99)		if ((this->rect->width >= width)) {
HXLINE(  99)			return (this->rect->height >= height);
            		}
            		else {
HXLINE(  99)			return false;
            		}
HXDLIN(  99)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxNode_obj,canPlace,return )

 ::flixel::graphics::frames::FlxTileFrames FlxNode_obj::getTileFrames( ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint tileBorder){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_110_getTileFrames)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tileSize,"tileSize")
            	HX_STACK_ARG(tileSpacing,"tileSpacing")
            	HX_STACK_ARG(tileBorder,"tileBorder")
HXLINE( 111)		::flixel::FlxG_obj::bitmap->add(this->atlas->bitmapData,false,this->atlas->name);
HXLINE( 112)		 ::flixel::graphics::frames::FlxAtlasFrames _this = this->atlas->getAtlasFrames();
HXDLIN( 112)		HX_VARI(  ::flixel::graphics::frames::FlxFrame,frame) = ( ( ::flixel::graphics::frames::FlxFrame)(::haxe::IMap_obj::get(_this->framesHash,this->key)) );
HXLINE( 114)		if (hx::IsNotNull( frame )) {
HXLINE( 116)			HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,tileFrames) = ::flixel::graphics::frames::FlxTileFrames_obj::fromFrame(frame,tileSize,tileSpacing);
HXLINE( 117)			if (hx::IsNotNull( tileBorder )) {
HXLINE( 119)				tileFrames = Dynamic( tileFrames->addBorder(tileBorder)).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >();
            			}
HXLINE( 121)			return tileFrames;
            		}
HXLINE( 124)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxNode_obj,getTileFrames,return )

 ::flixel::graphics::frames::FlxImageFrame FlxNode_obj::getImageFrame(){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_132_getImageFrame)
            	HX_STACK_THIS(this)
HXLINE( 133)		::flixel::FlxG_obj::bitmap->add(this->atlas->bitmapData,false,this->atlas->name);
HXLINE( 134)		 ::flixel::graphics::frames::FlxAtlasFrames _this = this->atlas->getAtlasFrames();
HXDLIN( 134)		HX_VARI(  ::flixel::graphics::frames::FlxFrame,frame) = ( ( ::flixel::graphics::frames::FlxFrame)(::haxe::IMap_obj::get(_this->framesHash,this->key)) );
HXLINE( 136)		if (hx::IsNotNull( frame )) {
HXLINE( 138)			return ::flixel::graphics::frames::FlxImageFrame_obj::fromFrame(frame);
            		}
HXLINE( 141)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNode_obj,getImageFrame,return )

bool FlxNode_obj::get_isEmpty(){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_146_get_isEmpty)
            	HX_STACK_THIS(this)
HXLINE( 146)		bool _hx_tmp;
HXDLIN( 146)		if (!(this->filled)) {
HXLINE( 146)			_hx_tmp = hx::IsNull( this->left );
            		}
            		else {
HXLINE( 146)			_hx_tmp = false;
            		}
HXDLIN( 146)		if (_hx_tmp) {
HXLINE( 146)			return hx::IsNull( this->right );
            		}
            		else {
HXLINE( 146)			return false;
            		}
HXDLIN( 146)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNode_obj,get_isEmpty,return )

int FlxNode_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_151_get_x)
            	HX_STACK_THIS(this)
HXLINE( 151)		return ::Std_obj::_hx_int(this->rect->x);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNode_obj,get_x,return )

int FlxNode_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_156_get_y)
            	HX_STACK_THIS(this)
HXLINE( 156)		return ::Std_obj::_hx_int(this->rect->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNode_obj,get_y,return )

int FlxNode_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_161_get_width)
            	HX_STACK_THIS(this)
HXLINE( 161)		return ::Std_obj::_hx_int(this->rect->width);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNode_obj,get_width,return )

int FlxNode_obj::set_width(int value){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_165_set_width)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 166)		this->rect->width = value;
HXLINE( 167)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxNode_obj,set_width,return )

int FlxNode_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_172_get_height)
            	HX_STACK_THIS(this)
HXLINE( 172)		return ::Std_obj::_hx_int(this->rect->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNode_obj,get_height,return )

int FlxNode_obj::set_height(int value){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_176_set_height)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 177)		this->rect->height = value;
HXLINE( 178)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxNode_obj,set_height,return )


hx::ObjectPtr< FlxNode_obj > FlxNode_obj::__new( ::flixel::math::FlxRect rect, ::flixel::graphics::atlas::FlxAtlas atlas,hx::Null< bool >  __o_filled,::String __o_key,hx::Null< bool >  __o_rotated) {
	hx::ObjectPtr< FlxNode_obj > __this = new FlxNode_obj();
	__this->__construct(rect,atlas,__o_filled,__o_key,__o_rotated);
	return __this;
}

hx::ObjectPtr< FlxNode_obj > FlxNode_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::math::FlxRect rect, ::flixel::graphics::atlas::FlxAtlas atlas,hx::Null< bool >  __o_filled,::String __o_key,hx::Null< bool >  __o_rotated) {
	FlxNode_obj *__this = (FlxNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxNode_obj), true, "flixel.graphics.atlas.FlxNode"));
	*(void **)__this = FlxNode_obj::_hx_vtable;
	__this->__construct(rect,atlas,__o_filled,__o_key,__o_rotated);
	return __this;
}

FlxNode_obj::FlxNode_obj()
{
}

void FlxNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxNode);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(filled,"filled");
	HX_MARK_MEMBER_NAME(atlas,"atlas");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(isEmpty,"isEmpty");
	HX_MARK_MEMBER_NAME(rotated,"rotated");
	HX_MARK_END_CLASS();
}

void FlxNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(right,"right");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(filled,"filled");
	HX_VISIT_MEMBER_NAME(atlas,"atlas");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(isEmpty,"isEmpty");
	HX_VISIT_MEMBER_NAME(rotated,"rotated");
}

hx::Val FlxNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( inCallProp == hx::paccAlways ? get_x() : x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( inCallProp == hx::paccAlways ? get_y() : y); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return hx::Val( key); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left); }
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right); }
		if (HX_FIELD_EQ(inName,"atlas") ) { return hx::Val( atlas); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_width()); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn()); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filled") ) { return hx::Val( filled); }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_height()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( inCallProp == hx::paccAlways ? get_isEmpty() : isEmpty); }
		if (HX_FIELD_EQ(inName,"rotated") ) { return hx::Val( rotated); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canPlace") ) { return hx::Val( canPlace_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_isEmpty") ) { return hx::Val( get_isEmpty_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getTileFrames") ) { return hx::Val( getTileFrames_dyn()); }
		if (HX_FIELD_EQ(inName,"getImageFrame") ) { return hx::Val( getImageFrame_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast<  ::flixel::graphics::atlas::FlxNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast<  ::flixel::graphics::atlas::FlxNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"atlas") ) { atlas=inValue.Cast<  ::flixel::graphics::atlas::FlxAtlas >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filled") ) { filled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEmpty") ) { isEmpty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rotated") ) { rotated=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("key","\x9f","\x89","\x51","\x00"));
	outFields->push(HX_HCSTRING("filled","\xa2","\x0d","\x2f","\x85"));
	outFields->push(HX_HCSTRING("atlas","\x4b","\x4d","\xdd","\x26"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"));
	outFields->push(HX_HCSTRING("rotated","\xa9","\x49","\x1d","\xf1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::graphics::atlas::FlxNode*/ ,(int)offsetof(FlxNode_obj,left),HX_HCSTRING("left","\x07","\x08","\xb0","\x47")},
	{hx::fsObject /*::flixel::graphics::atlas::FlxNode*/ ,(int)offsetof(FlxNode_obj,right),HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxNode_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsString,(int)offsetof(FlxNode_obj,key),HX_HCSTRING("key","\x9f","\x89","\x51","\x00")},
	{hx::fsBool,(int)offsetof(FlxNode_obj,filled),HX_HCSTRING("filled","\xa2","\x0d","\x2f","\x85")},
	{hx::fsObject /*::flixel::graphics::atlas::FlxAtlas*/ ,(int)offsetof(FlxNode_obj,atlas),HX_HCSTRING("atlas","\x4b","\x4d","\xdd","\x26")},
	{hx::fsInt,(int)offsetof(FlxNode_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(FlxNode_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(FlxNode_obj,isEmpty),HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c")},
	{hx::fsBool,(int)offsetof(FlxNode_obj,rotated),HX_HCSTRING("rotated","\xa9","\x49","\x1d","\xf1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxNode_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxNode_obj_sMemberFields[] = {
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("key","\x9f","\x89","\x51","\x00"),
	HX_HCSTRING("filled","\xa2","\x0d","\x2f","\x85"),
	HX_HCSTRING("atlas","\x4b","\x4d","\xdd","\x26"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("rotated","\xa9","\x49","\x1d","\xf1"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("canPlace","\x97","\x36","\x21","\x33"),
	HX_HCSTRING("getTileFrames","\xaa","\xe1","\x8e","\x6d"),
	HX_HCSTRING("getImageFrame","\x08","\x9b","\xc3","\x6e"),
	HX_HCSTRING("get_isEmpty","\x5a","\x3e","\x5a","\x92"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	::String(null()) };

static void FlxNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxNode_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxNode_obj::__mClass;

void FlxNode_obj::__register()
{
	hx::Object *dummy = new FlxNode_obj;
	FlxNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.graphics.atlas.FlxNode","\x40","\x12","\x0e","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace atlas
