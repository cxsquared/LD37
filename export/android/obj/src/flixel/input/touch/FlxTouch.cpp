// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_FlxSwipe
#include <flixel/input/FlxSwipe.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_touch_FlxTouch
#include <flixel/input/touch/FlxTouch.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_23711c7fa15af2bf_17_new,"flixel.input.touch.FlxTouch","new",0xa47319c4,"flixel.input.touch.FlxTouch.new","flixel/input/touch/FlxTouch.hx",17,0x7bf286c9)
HX_DEFINE_STACK_FRAME(_hx_pos_23711c7fa15af2bf_38_destroy,"flixel.input.touch.FlxTouch","destroy",0x988ff85e,"flixel.input.touch.FlxTouch.destroy","flixel/input/touch/FlxTouch.hx",38,0x7bf286c9)
HX_DEFINE_STACK_FRAME(_hx_pos_23711c7fa15af2bf_48_recycle,"flixel.input.touch.FlxTouch","recycle",0xab95db77,"flixel.input.touch.FlxTouch.recycle","flixel/input/touch/FlxTouch.hx",48,0x7bf286c9)
HX_DEFINE_STACK_FRAME(_hx_pos_23711c7fa15af2bf_71_update,"flixel.input.touch.FlxTouch","update",0x82f33325,"flixel.input.touch.FlxTouch.update","flixel/input/touch/FlxTouch.hx",71,0x7bf286c9)
HX_DEFINE_STACK_FRAME(_hx_pos_23711c7fa15af2bf_94_setXY,"flixel.input.touch.FlxTouch","setXY",0xdbbeff87,"flixel.input.touch.FlxTouch.setXY","flixel/input/touch/FlxTouch.hx",94,0x7bf286c9)
HX_DEFINE_STACK_FRAME(_hx_pos_23711c7fa15af2bf_103_get_touchPointID,"flixel.input.touch.FlxTouch","get_touchPointID",0xed1e52d1,"flixel.input.touch.FlxTouch.get_touchPointID","flixel/input/touch/FlxTouch.hx",103,0x7bf286c9)
HX_DEFINE_STACK_FRAME(_hx_pos_23711c7fa15af2bf_108_get_justReleased,"flixel.input.touch.FlxTouch","get_justReleased",0xd7f5afae,"flixel.input.touch.FlxTouch.get_justReleased","flixel/input/touch/FlxTouch.hx",108,0x7bf286c9)
HX_DEFINE_STACK_FRAME(_hx_pos_23711c7fa15af2bf_113_get_released,"flixel.input.touch.FlxTouch","get_released",0xe547a6e2,"flixel.input.touch.FlxTouch.get_released","flixel/input/touch/FlxTouch.hx",113,0x7bf286c9)
HX_DEFINE_STACK_FRAME(_hx_pos_23711c7fa15af2bf_118_get_pressed,"flixel.input.touch.FlxTouch","get_pressed",0x583e801d,"flixel.input.touch.FlxTouch.get_pressed","flixel/input/touch/FlxTouch.hx",118,0x7bf286c9)
HX_DEFINE_STACK_FRAME(_hx_pos_23711c7fa15af2bf_123_get_justPressed,"flixel.input.touch.FlxTouch","get_justPressed",0xad2294d1,"flixel.input.touch.FlxTouch.get_justPressed","flixel/input/touch/FlxTouch.hx",123,0x7bf286c9)
namespace flixel{
namespace input{
namespace touch{

void FlxTouch_obj::__construct(hx::Null< int >  __o_x,hx::Null< int >  __o_y,hx::Null< int >  __o_pointID){
int x = __o_x.Default(0);
int y = __o_y.Default(0);
int pointID = __o_pointID.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_23711c7fa15af2bf_17_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(pointID,"pointID")
HXLINE(  35)		this->justPressedTimeInTicks = ((Float)-1);
HXLINE(  34)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN(  34)		point->_inPool = false;
HXDLIN(  34)		this->justPressedPosition = point;
HXLINE(  32)		this->flashPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  61)		super::__construct();
HXLINE(  63)		this->input =  ::flixel::input::FlxInput_obj::__alloc( HX_CTX ,pointID);
HXLINE(  64)		this->setXY(x,y);
            	}

Dynamic FlxTouch_obj::__CreateEmpty() { return new FlxTouch_obj; }

void *FlxTouch_obj::_hx_vtable = 0;

Dynamic FlxTouch_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTouch_obj > _hx_result = new FlxTouch_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FlxTouch_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x07f8ee8a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x07f8ee8a;
	} else {
		return inClassId==(int)0x0fe7efd5;
	}
}

static ::flixel::input::IFlxInput_obj _hx_flixel_input_touch_FlxTouch__hx_flixel_input_IFlxInput= {
	( bool (hx::Object::*)())&::flixel::input::touch::FlxTouch_obj::get_justReleased,
	( bool (hx::Object::*)())&::flixel::input::touch::FlxTouch_obj::get_released,
	( bool (hx::Object::*)())&::flixel::input::touch::FlxTouch_obj::get_pressed,
	( bool (hx::Object::*)())&::flixel::input::touch::FlxTouch_obj::get_justPressed,
};

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_input_touch_FlxTouch__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::input::touch::FlxTouch_obj::destroy,
};

void *FlxTouch_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x52baf533: return &_hx_flixel_input_touch_FlxTouch__hx_flixel_input_IFlxInput;
		case (int)0xd4fe2fcd: return &_hx_flixel_input_touch_FlxTouch__hx_flixel_util_IFlxDestroyable;
	}
	return super::_hx_getInterface(inHash);
}

void FlxTouch_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_23711c7fa15af2bf_38_destroy)
            	HX_STACK_THIS(this)
HXLINE(  39)		this->input = null();
HXLINE(  40)		this->justPressedPosition = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->justPressedPosition)) );
HXLINE(  41)		this->flashPoint = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTouch_obj,destroy,(void))

void FlxTouch_obj::recycle(int x,int y,int pointID){
            	HX_STACKFRAME(&_hx_pos_23711c7fa15af2bf_48_recycle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(pointID,"pointID")
HXLINE(  49)		this->setXY(x,y);
HXLINE(  50)		this->input->ID = pointID;
HXLINE(  51)		this->input->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTouch_obj,recycle,(void))

void FlxTouch_obj::update(){
            	HX_GC_STACKFRAME(&_hx_pos_23711c7fa15af2bf_71_update)
            	HX_STACK_THIS(this)
HXLINE(  72)		this->input->update();
HXLINE(  74)		if ((this->input->current == (int)2)) {
HXLINE(  76)			this->justPressedPosition->set(this->screenX,this->screenY);
HXLINE(  77)			this->justPressedTimeInTicks = ::flixel::FlxG_obj::game->ticks;
            		}
            		else {
HXLINE(  80)			if ((this->input->current == (int)-1)) {
HXLINE(  82)				::Array< ::Dynamic> _hx_tmp = ::flixel::FlxG_obj::swipes;
HXDLIN(  82)				int _hx_tmp1 = ( (int)(this->input->ID) );
HXDLIN(  82)				 ::flixel::math::FlxPoint _hx_tmp2 = this->justPressedPosition;
HXDLIN(  82)				 ::flixel::math::FlxPoint _hx_tmp3 = this->getScreenPosition(null(),null());
HXDLIN(  82)				_hx_tmp->push( ::flixel::input::FlxSwipe_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,_hx_tmp3,this->justPressedTimeInTicks));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTouch_obj,update,(void))

void FlxTouch_obj::setXY(int X,int Y){
            	HX_STACKFRAME(&_hx_pos_23711c7fa15af2bf_94_setXY)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(  95)		this->flashPoint->setTo(X,Y);
HXLINE(  96)		this->flashPoint = ::flixel::FlxG_obj::game->globalToLocal(this->flashPoint);
HXLINE(  98)		{
HXLINE(  98)			Float newY = this->flashPoint->y;
HXDLIN(  98)			this->_globalScreenX = ::Std_obj::_hx_int(((Float)this->flashPoint->x / (Float)::flixel::FlxG_obj::scaleMode->scale->x));
HXDLIN(  98)			this->_globalScreenY = ::Std_obj::_hx_int(((Float)newY / (Float)::flixel::FlxG_obj::scaleMode->scale->y));
HXDLIN(  98)			this->updatePositions();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTouch_obj,setXY,(void))

int FlxTouch_obj::get_touchPointID(){
            	HX_STACKFRAME(&_hx_pos_23711c7fa15af2bf_103_get_touchPointID)
            	HX_STACK_THIS(this)
HXLINE( 103)		return this->input->ID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTouch_obj,get_touchPointID,return )

bool FlxTouch_obj::get_justReleased(){
            	HX_STACKFRAME(&_hx_pos_23711c7fa15af2bf_108_get_justReleased)
            	HX_STACK_THIS(this)
HXLINE( 108)		return (this->input->current == (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTouch_obj,get_justReleased,return )

bool FlxTouch_obj::get_released(){
            	HX_STACKFRAME(&_hx_pos_23711c7fa15af2bf_113_get_released)
            	HX_STACK_THIS(this)
HXLINE( 113)		HX_VARI(  ::flixel::input::FlxInput,_this) = this->input;
HXDLIN( 113)		if ((_this->current != (int)0)) {
HXLINE( 113)			return (_this->current == (int)-1);
            		}
            		else {
HXLINE( 113)			return true;
            		}
HXDLIN( 113)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTouch_obj,get_released,return )

bool FlxTouch_obj::get_pressed(){
            	HX_STACKFRAME(&_hx_pos_23711c7fa15af2bf_118_get_pressed)
            	HX_STACK_THIS(this)
HXLINE( 118)		HX_VARI(  ::flixel::input::FlxInput,_this) = this->input;
HXDLIN( 118)		if ((_this->current != (int)1)) {
HXLINE( 118)			return (_this->current == (int)2);
            		}
            		else {
HXLINE( 118)			return true;
            		}
HXDLIN( 118)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTouch_obj,get_pressed,return )

bool FlxTouch_obj::get_justPressed(){
            	HX_STACKFRAME(&_hx_pos_23711c7fa15af2bf_123_get_justPressed)
            	HX_STACK_THIS(this)
HXLINE( 123)		return (this->input->current == (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTouch_obj,get_justPressed,return )


hx::ObjectPtr< FlxTouch_obj > FlxTouch_obj::__new(hx::Null< int >  __o_x,hx::Null< int >  __o_y,hx::Null< int >  __o_pointID) {
	hx::ObjectPtr< FlxTouch_obj > __this = new FlxTouch_obj();
	__this->__construct(__o_x,__o_y,__o_pointID);
	return __this;
}

hx::ObjectPtr< FlxTouch_obj > FlxTouch_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_x,hx::Null< int >  __o_y,hx::Null< int >  __o_pointID) {
	FlxTouch_obj *__this = (FlxTouch_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTouch_obj), true, "flixel.input.touch.FlxTouch"));
	*(void **)__this = FlxTouch_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_pointID);
	return __this;
}

FlxTouch_obj::FlxTouch_obj()
{
}

void FlxTouch_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTouch);
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(flashPoint,"flashPoint");
	HX_MARK_MEMBER_NAME(justPressedPosition,"justPressedPosition");
	HX_MARK_MEMBER_NAME(justPressedTimeInTicks,"justPressedTimeInTicks");
	HX_MARK_END_CLASS();
}

void FlxTouch_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(flashPoint,"flashPoint");
	HX_VISIT_MEMBER_NAME(justPressedPosition,"justPressedPosition");
	HX_VISIT_MEMBER_NAME(justPressedTimeInTicks,"justPressedTimeInTicks");
}

hx::Val FlxTouch_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input); }
		if (HX_FIELD_EQ(inName,"setXY") ) { return hx::Val( setXY_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_pressed()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"recycle") ) { return hx::Val( recycle_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"released") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_released()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"flashPoint") ) { return hx::Val( flashPoint); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_justPressed()); }
		if (HX_FIELD_EQ(inName,"get_pressed") ) { return hx::Val( get_pressed_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"touchPointID") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_touchPointID()); }
		if (HX_FIELD_EQ(inName,"justReleased") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_justReleased()); }
		if (HX_FIELD_EQ(inName,"get_released") ) { return hx::Val( get_released_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_justPressed") ) { return hx::Val( get_justPressed_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_touchPointID") ) { return hx::Val( get_touchPointID_dyn()); }
		if (HX_FIELD_EQ(inName,"get_justReleased") ) { return hx::Val( get_justReleased_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"justPressedPosition") ) { return hx::Val( justPressedPosition); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"justPressedTimeInTicks") ) { return hx::Val( justPressedTimeInTicks); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTouch_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::flixel::input::FlxInput >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"flashPoint") ) { flashPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"justPressedPosition") ) { justPressedPosition=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"justPressedTimeInTicks") ) { justPressedTimeInTicks=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTouch_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("touchPointID","\x2c","\xbe","\x83","\x7b"));
	outFields->push(HX_HCSTRING("justReleased","\x09","\x1b","\x5b","\x66"));
	outFields->push(HX_HCSTRING("released","\xbd","\x88","\xe7","\x76"));
	outFields->push(HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39"));
	outFields->push(HX_HCSTRING("justPressed","\xd6","\x0d","\xa7","\xf2"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("flashPoint","\x80","\x50","\xa0","\xe4"));
	outFields->push(HX_HCSTRING("justPressedPosition","\x9f","\x30","\x76","\xae"));
	outFields->push(HX_HCSTRING("justPressedTimeInTicks","\x8e","\xf9","\xc2","\x82"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTouch_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::input::FlxInput*/ ,(int)offsetof(FlxTouch_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsObject /*openfl::geom::Point*/ ,(int)offsetof(FlxTouch_obj,flashPoint),HX_HCSTRING("flashPoint","\x80","\x50","\xa0","\xe4")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxTouch_obj,justPressedPosition),HX_HCSTRING("justPressedPosition","\x9f","\x30","\x76","\xae")},
	{hx::fsFloat,(int)offsetof(FlxTouch_obj,justPressedTimeInTicks),HX_HCSTRING("justPressedTimeInTicks","\x8e","\xf9","\xc2","\x82")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTouch_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTouch_obj_sMemberFields[] = {
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("flashPoint","\x80","\x50","\xa0","\xe4"),
	HX_HCSTRING("justPressedPosition","\x9f","\x30","\x76","\xae"),
	HX_HCSTRING("justPressedTimeInTicks","\x8e","\xf9","\xc2","\x82"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("recycle","\x13","\x10","\x8c","\x37"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("setXY","\x23","\x95","\x2f","\x7a"),
	HX_HCSTRING("get_touchPointID","\xb5","\xaa","\x22","\x80"),
	HX_HCSTRING("get_justReleased","\x92","\x07","\xfa","\x6a"),
	HX_HCSTRING("get_released","\xc6","\x3c","\x01","\x2c"),
	HX_HCSTRING("get_pressed","\xb9","\x32","\xe1","\xbf"),
	HX_HCSTRING("get_justPressed","\x6d","\xc5","\x88","\xb3"),
	::String(null()) };

static void FlxTouch_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTouch_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTouch_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTouch_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTouch_obj::__mClass;

void FlxTouch_obj::__register()
{
	hx::Object *dummy = new FlxTouch_obj;
	FlxTouch_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.input.touch.FlxTouch","\xd2","\x27","\xf2","\x19");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTouch_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTouch_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTouch_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTouch_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTouch_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTouch_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace touch
