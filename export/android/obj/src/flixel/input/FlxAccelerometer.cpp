// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_FlxAccelerometer
#include <flixel/input/FlxAccelerometer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_71a0297f5aca26db_10_new,"flixel.input.FlxAccelerometer","new",0x0d021645,"flixel.input.FlxAccelerometer.new","flixel/input/FlxAccelerometer.hx",10,0x4bc92349)
HX_DEFINE_STACK_FRAME(_hx_pos_71a0297f5aca26db_46_get_isSupported,"flixel.input.FlxAccelerometer","get_isSupported",0x551e3de0,"flixel.input.FlxAccelerometer.get_isSupported","flixel/input/FlxAccelerometer.hx",46,0x4bc92349)
HX_DEFINE_STACK_FRAME(_hx_pos_71a0297f5aca26db_50_updateCallback,"flixel.input.FlxAccelerometer","updateCallback",0x130b7729,"flixel.input.FlxAccelerometer.updateCallback","flixel/input/FlxAccelerometer.hx",50,0x4bc92349)
namespace flixel{
namespace input{

void FlxAccelerometer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_71a0297f5aca26db_10_new)
            	HX_STACK_THIS(this)
HXLINE(  26)		this->z = ((Float)0);
HXLINE(  21)		this->y = ((Float)0);
HXLINE(  16)		this->x = ((Float)0);
HXLINE(  37)		if (::openfl::sensors::Accelerometer_obj::get_isSupported()) {
HXLINE(  39)			this->_sensor =  ::openfl::sensors::Accelerometer_obj::__alloc( HX_CTX );
HXLINE(  40)			this->_sensor->addEventListener(HX_("update",09,86,05,87),this->updateCallback_dyn(),null(),null(),null());
            		}
            	}

Dynamic FlxAccelerometer_obj::__CreateEmpty() { return new FlxAccelerometer_obj; }

void *FlxAccelerometer_obj::_hx_vtable = 0;

Dynamic FlxAccelerometer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxAccelerometer_obj > _hx_result = new FlxAccelerometer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxAccelerometer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x788aa7cb;
}

bool FlxAccelerometer_obj::get_isSupported(){
            	HX_STACKFRAME(&_hx_pos_71a0297f5aca26db_46_get_isSupported)
            	HX_STACK_THIS(this)
HXLINE(  46)		return ::openfl::sensors::Accelerometer_obj::get_isSupported();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAccelerometer_obj,get_isSupported,return )

void FlxAccelerometer_obj::updateCallback( ::openfl::events::AccelerometerEvent Event){
            	HX_STACKFRAME(&_hx_pos_71a0297f5aca26db_50_updateCallback)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Event,"Event")
HXLINE(  52)		this->x = Event->accelerationX;
HXLINE(  53)		this->y = Event->accelerationY;
HXLINE(  54)		this->z = Event->accelerationZ;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAccelerometer_obj,updateCallback,(void))


FlxAccelerometer_obj::FlxAccelerometer_obj()
{
}

void FlxAccelerometer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAccelerometer);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(z,"z");
	HX_MARK_MEMBER_NAME(_sensor,"_sensor");
	HX_MARK_END_CLASS();
}

void FlxAccelerometer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(z,"z");
	HX_VISIT_MEMBER_NAME(_sensor,"_sensor");
}

hx::Val FlxAccelerometer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_sensor") ) { return hx::Val( _sensor); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isSupported") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_isSupported()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateCallback") ) { return hx::Val( updateCallback_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_isSupported") ) { return hx::Val( get_isSupported_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxAccelerometer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_sensor") ) { _sensor=inValue.Cast<  ::openfl::sensors::Accelerometer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxAccelerometer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("isSupported","\xe4","\x7c","\x8a","\xf3"));
	outFields->push(HX_HCSTRING("_sensor","\xd9","\x43","\x07","\xda"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxAccelerometer_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxAccelerometer_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxAccelerometer_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxAccelerometer_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{hx::fsObject /*openfl::sensors::Accelerometer*/ ,(int)offsetof(FlxAccelerometer_obj,_sensor),HX_HCSTRING("_sensor","\xd9","\x43","\x07","\xda")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxAccelerometer_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxAccelerometer_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	HX_HCSTRING("_sensor","\xd9","\x43","\x07","\xda"),
	HX_HCSTRING("get_isSupported","\x7b","\x34","\x6c","\xb4"),
	HX_HCSTRING("updateCallback","\xee","\x8c","\x30","\xb4"),
	::String(null()) };

static void FlxAccelerometer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxAccelerometer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxAccelerometer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxAccelerometer_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxAccelerometer_obj::__mClass;

void FlxAccelerometer_obj::__register()
{
	hx::Object *dummy = new FlxAccelerometer_obj;
	FlxAccelerometer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.input.FlxAccelerometer","\xd3","\x8f","\xc6","\x48");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxAccelerometer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxAccelerometer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxAccelerometer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxAccelerometer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAccelerometer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAccelerometer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
