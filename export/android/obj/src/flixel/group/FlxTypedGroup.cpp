// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_16_new,"flixel.group.FlxTypedGroup","new",0x9772c4d8,"flixel.group.FlxTypedGroup.new","flixel/group/FlxGroup.hx",16,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_103_destroy,"flixel.group.FlxTypedGroup","destroy",0x8044bd72,"flixel.group.FlxTypedGroup.destroy","flixel/group/FlxGroup.hx",103,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_127_update,"flixel.group.FlxTypedGroup","update",0x4e08ac91,"flixel.group.FlxTypedGroup.update","flixel/group/FlxGroup.hx",127,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_146_draw,"flixel.group.FlxTypedGroup","draw",0xe667208c,"flixel.group.FlxTypedGroup.draw","flixel/group/FlxGroup.hx",146,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_172_add,"flixel.group.FlxTypedGroup","add",0x9768e699,"flixel.group.FlxTypedGroup.add","flixel/group/FlxGroup.hx",172,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_224_insert,"flixel.group.FlxTypedGroup","insert",0x64e069c1,"flixel.group.FlxTypedGroup.insert","flixel/group/FlxGroup.hx",224,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_280_recycle,"flixel.group.FlxTypedGroup","recycle",0x934aa08b,"flixel.group.FlxTypedGroup.recycle","flixel/group/FlxGroup.hx",280,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_329_recycleCreateObject,"flixel.group.FlxTypedGroup","recycleCreateObject",0x87e5d006,"flixel.group.FlxTypedGroup.recycleCreateObject","flixel/group/FlxGroup.hx",329,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_352_remove,"flixel.group.FlxTypedGroup","remove",0xcb8bc2cc,"flixel.group.FlxTypedGroup.remove","flixel/group/FlxGroup.hx",352,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_378_replace,"flixel.group.FlxTypedGroup","replace",0x06e6d8ac,"flixel.group.FlxTypedGroup.replace","flixel/group/FlxGroup.hx",378,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_398_sort,"flixel.group.FlxTypedGroup","sort",0xf04f1be6,"flixel.group.FlxTypedGroup.sort","flixel/group/FlxGroup.hx",398,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_410_getFirstAvailable,"flixel.group.FlxTypedGroup","getFirstAvailable",0x3f88c127,"flixel.group.FlxTypedGroup.getFirstAvailable","flixel/group/FlxGroup.hx",410,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_438_getFirstNull,"flixel.group.FlxTypedGroup","getFirstNull",0xc17e73e9,"flixel.group.FlxTypedGroup.getFirstNull","flixel/group/FlxGroup.hx",438,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_460_getFirstExisting,"flixel.group.FlxTypedGroup","getFirstExisting",0x314444ed,"flixel.group.FlxTypedGroup.getFirstExisting","flixel/group/FlxGroup.hx",460,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_484_getFirstAlive,"flixel.group.FlxTypedGroup","getFirstAlive",0x0afc442b,"flixel.group.FlxTypedGroup.getFirstAlive","flixel/group/FlxGroup.hx",484,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_508_getFirstDead,"flixel.group.FlxTypedGroup","getFirstDead",0xbad62406,"flixel.group.FlxTypedGroup.getFirstDead","flixel/group/FlxGroup.hx",508,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_531_countLiving,"flixel.group.FlxTypedGroup","countLiving",0x0ee705d0,"flixel.group.FlxTypedGroup.countLiving","flixel/group/FlxGroup.hx",531,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_562_countDead,"flixel.group.FlxTypedGroup","countDead",0x0964718b,"flixel.group.FlxTypedGroup.countDead","flixel/group/FlxGroup.hx",562,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_595_getRandom,"flixel.group.FlxTypedGroup","getRandom",0xe8c349b1,"flixel.group.FlxTypedGroup.getRandom","flixel/group/FlxGroup.hx",595,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_613_clear,"flixel.group.FlxTypedGroup","clear",0x1c7a7405,"flixel.group.FlxTypedGroup.clear","flixel/group/FlxGroup.hx",613,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_623_kill,"flixel.group.FlxTypedGroup","kill",0xeb00d426,"flixel.group.FlxTypedGroup.kill","flixel/group/FlxGroup.hx",623,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_644_revive,"flixel.group.FlxTypedGroup","revive",0xd17a20dd,"flixel.group.FlxTypedGroup.revive","flixel/group/FlxGroup.hx",644,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_666_iterator,"flixel.group.FlxTypedGroup","iterator",0x7e9a2276,"flixel.group.FlxTypedGroup.iterator","flixel/group/FlxGroup.hx",666,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_676_forEach,"flixel.group.FlxTypedGroup","forEach",0x207cba22,"flixel.group.FlxTypedGroup.forEach","flixel/group/FlxGroup.hx",676,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_707_forEachAlive,"flixel.group.FlxTypedGroup","forEachAlive",0x4c021e4b,"flixel.group.FlxTypedGroup.forEachAlive","flixel/group/FlxGroup.hx",707,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_738_forEachDead,"flixel.group.FlxTypedGroup","forEachDead",0x5740ede6,"flixel.group.FlxTypedGroup.forEachDead","flixel/group/FlxGroup.hx",738,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_769_forEachExists,"flixel.group.FlxTypedGroup","forEachExists",0xb812919e,"flixel.group.FlxTypedGroup.forEachExists","flixel/group/FlxGroup.hx",769,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_801_forEachOfType,"flixel.group.FlxTypedGroup","forEachOfType",0x4c90cb33,"flixel.group.FlxTypedGroup.forEachOfType","flixel/group/FlxGroup.hx",801,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_828_set_maxSize,"flixel.group.FlxTypedGroup","set_maxSize",0x3b478d20,"flixel.group.FlxTypedGroup.set_maxSize","flixel/group/FlxGroup.hx",828,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_24_overlaps,"flixel.group.FlxTypedGroup","overlaps",0x302aab94,"flixel.group.FlxTypedGroup.overlaps","flixel/group/FlxGroup.hx",24,0x1e89d58e)
HX_DEFINE_STACK_FRAME(_hx_pos_bfa1de30d9ec9fbd_48_resolveGroup,"flixel.group.FlxTypedGroup","resolveGroup",0x84c4b53b,"flixel.group.FlxTypedGroup.resolveGroup","flixel/group/FlxGroup.hx",48,0x1e89d58e)
namespace flixel{
namespace group{

void FlxTypedGroup_obj::__construct(hx::Null< int >  __o_MaxSize){
int MaxSize = __o_MaxSize.Default(0);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_16_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  82)		this->_marker = (int)0;
HXLINE(  77)		this->length = (int)0;
HXLINE(  89)		super::__construct();
HXLINE(  91)		this->members = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  92)		this->set_maxSize(::Std_obj::_hx_int(::Math_obj::abs(MaxSize)));
HXLINE(  93)		this->flixelType = (int)2;
            	}

Dynamic FlxTypedGroup_obj::__CreateEmpty() { return new FlxTypedGroup_obj; }

void *FlxTypedGroup_obj::_hx_vtable = 0;

Dynamic FlxTypedGroup_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTypedGroup_obj > _hx_result = new FlxTypedGroup_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxTypedGroup_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
	} else {
		return inClassId==(int)0x3634c52c;
	}
}

void FlxTypedGroup_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_103_destroy)
            	HX_STACK_THIS(this)
HXLINE( 104)		this->super::destroy();
HXLINE( 106)		if (hx::IsNotNull( this->members )) {
HXLINE( 108)			HX_VARI( int,i) = (int)0;
HXLINE( 109)			HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 111)			while((i < this->length)){
HXLINE( 113)				i = (i + (int)1);
HXDLIN( 113)				basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 115)				if (hx::IsNotNull( basic )) {
HXLINE( 116)					basic->destroy();
            				}
            			}
HXLINE( 119)			this->members = null();
            		}
            	}


void FlxTypedGroup_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_127_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 128)		HX_VARI( int,i) = (int)0;
HXLINE( 129)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 131)		while((i < this->length)){
HXLINE( 133)			i = (i + (int)1);
HXDLIN( 133)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 135)			bool _hx_tmp;
HXDLIN( 135)			bool _hx_tmp1;
HXDLIN( 135)			if (hx::IsNotNull( basic )) {
HXLINE( 135)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 135)				_hx_tmp1 = false;
            			}
HXDLIN( 135)			if (_hx_tmp1) {
HXLINE( 135)				_hx_tmp = basic->active;
            			}
            			else {
HXLINE( 135)				_hx_tmp = false;
            			}
HXDLIN( 135)			if (_hx_tmp) {
HXLINE( 137)				basic->update(elapsed);
            			}
            		}
            	}


void FlxTypedGroup_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_146_draw)
            	HX_STACK_THIS(this)
HXLINE( 147)		HX_VARI( int,i) = (int)0;
HXLINE( 148)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 150)		while((i < this->length)){
HXLINE( 152)			i = (i + (int)1);
HXDLIN( 152)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 154)			bool _hx_tmp;
HXDLIN( 154)			bool _hx_tmp1;
HXDLIN( 154)			if (hx::IsNotNull( basic )) {
HXLINE( 154)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 154)				_hx_tmp1 = false;
            			}
HXDLIN( 154)			if (_hx_tmp1) {
HXLINE( 154)				_hx_tmp = basic->visible;
            			}
            			else {
HXLINE( 154)				_hx_tmp = false;
            			}
HXDLIN( 154)			if (_hx_tmp) {
HXLINE( 156)				basic->draw();
            			}
            		}
            	}


 ::Dynamic FlxTypedGroup_obj::add( ::Dynamic Object){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_172_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Object,"Object")
HXLINE( 173)		if (hx::IsNull( Object )) {
HXLINE( 176)			return null();
            		}
HXLINE( 180)		if ((this->members->indexOf(Object,null()) >= (int)0)) {
HXLINE( 182)			return Object;
            		}
HXLINE( 186)		HX_VARI( int,index) = this->getFirstNull();
HXLINE( 187)		if ((index != (int)-1)) {
HXLINE( 189)			this->members->set(index,Object);
HXLINE( 191)			if ((index >= this->length)) {
HXLINE( 193)				this->length = (index + (int)1);
            			}
HXLINE( 196)			return Object;
            		}
HXLINE( 200)		bool _hx_tmp;
HXDLIN( 200)		if ((this->maxSize > (int)0)) {
HXLINE( 200)			_hx_tmp = (this->length >= this->maxSize);
            		}
            		else {
HXLINE( 200)			_hx_tmp = false;
            		}
HXDLIN( 200)		if (_hx_tmp) {
HXLINE( 202)			return Object;
            		}
HXLINE( 206)		this->members->push(Object);
HXLINE( 207)		this->length++;
HXLINE( 209)		return Object;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,add,return )

 ::Dynamic FlxTypedGroup_obj::insert(int position, ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_224_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(position,"position")
            	HX_STACK_ARG(object,"object")
HXLINE( 225)		if (hx::IsNull( object )) {
HXLINE( 228)			return null();
            		}
HXLINE( 232)		if ((this->members->indexOf(object,null()) >= (int)0)) {
HXLINE( 234)			return object;
            		}
HXLINE( 238)		bool _hx_tmp;
HXDLIN( 238)		if ((position < this->length)) {
HXLINE( 238)			_hx_tmp = hx::IsNull( this->members->__get(position) );
            		}
            		else {
HXLINE( 238)			_hx_tmp = false;
            		}
HXDLIN( 238)		if (_hx_tmp) {
HXLINE( 240)			this->members->set(position,object);
HXLINE( 241)			return object;
            		}
HXLINE( 245)		bool _hx_tmp1;
HXDLIN( 245)		if ((this->maxSize > (int)0)) {
HXLINE( 245)			_hx_tmp1 = (this->length >= this->maxSize);
            		}
            		else {
HXLINE( 245)			_hx_tmp1 = false;
            		}
HXDLIN( 245)		if (_hx_tmp1) {
HXLINE( 247)			return object;
            		}
HXLINE( 251)		this->members->insert(position,object);
HXLINE( 252)		this->length++;
HXLINE( 254)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,insert,return )

 ::Dynamic FlxTypedGroup_obj::recycle(hx::Class ObjectClass, ::Dynamic ObjectFactory,hx::Null< bool >  __o_Force,hx::Null< bool >  __o_Revive){
bool Force = __o_Force.Default(false);
bool Revive = __o_Revive.Default(true);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_280_recycle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(ObjectFactory,"ObjectFactory")
            	HX_STACK_ARG(Force,"Force")
            	HX_STACK_ARG(Revive,"Revive")
HXLINE( 281)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 284)		if ((this->maxSize > (int)0)) {
HXLINE( 287)			if ((this->length < this->maxSize)) {
HXLINE( 289)				HX_VARI(  ::Dynamic,object) = null();
HXDLIN( 289)				if (hx::IsNotNull( ObjectFactory )) {
HXLINE( 289)					object = ObjectFactory();
HXDLIN( 289)					this->add(object);
            				}
            				else {
HXLINE( 289)					if (hx::IsNotNull( ObjectClass )) {
HXLINE( 289)						object = ::Type_obj::createInstance(ObjectClass,::cpp::VirtualArray_obj::__new(0));
HXDLIN( 289)						this->add(object);
            					}
            				}
HXDLIN( 289)				return object;
            			}
            			else {
HXLINE( 294)				basic = ( ( ::flixel::FlxBasic)(this->members->__get(this->_marker++)) );
HXLINE( 296)				if ((this->_marker >= this->maxSize)) {
HXLINE( 298)					this->_marker = (int)0;
            				}
HXLINE( 301)				if (Revive) {
HXLINE( 303)					basic->revive();
            				}
HXLINE( 306)				return basic;
            			}
            		}
            		else {
HXLINE( 312)			basic = ( ( ::flixel::FlxBasic)(this->getFirstAvailable(ObjectClass,Force)) );
HXLINE( 314)			if (hx::IsNotNull( basic )) {
HXLINE( 316)				if (Revive) {
HXLINE( 318)					basic->revive();
            				}
HXLINE( 320)				return basic;
            			}
HXLINE( 323)			HX_VARI_NAME(  ::Dynamic,object1,"object") = null();
HXDLIN( 323)			if (hx::IsNotNull( ObjectFactory )) {
HXLINE( 323)				object1 = ObjectFactory();
HXDLIN( 323)				this->add(object1);
            			}
            			else {
HXLINE( 323)				if (hx::IsNotNull( ObjectClass )) {
HXLINE( 323)					object1 = ::Type_obj::createInstance(ObjectClass,::cpp::VirtualArray_obj::__new(0));
HXDLIN( 323)					this->add(object1);
            				}
            			}
HXDLIN( 323)			return object1;
            		}
HXLINE( 284)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTypedGroup_obj,recycle,return )

 ::Dynamic FlxTypedGroup_obj::recycleCreateObject(hx::Class ObjectClass, ::Dynamic ObjectFactory){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_329_recycleCreateObject)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(ObjectFactory,"ObjectFactory")
HXLINE( 330)		HX_VARI(  ::Dynamic,object) = null();
HXLINE( 332)		if (hx::IsNotNull( ObjectFactory )) {
HXLINE( 334)			object = ObjectFactory();
HXDLIN( 334)			this->add(object);
            		}
            		else {
HXLINE( 336)			if (hx::IsNotNull( ObjectClass )) {
HXLINE( 338)				object = ::Type_obj::createInstance(ObjectClass,::cpp::VirtualArray_obj::__new(0));
HXDLIN( 338)				this->add(object);
            			}
            		}
HXLINE( 341)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,recycleCreateObject,return )

 ::Dynamic FlxTypedGroup_obj::remove( ::Dynamic Object,hx::Null< bool >  __o_Splice){
bool Splice = __o_Splice.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_352_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(Splice,"Splice")
HXLINE( 353)		if (hx::IsNull( this->members )) {
HXLINE( 354)			return null();
            		}
HXLINE( 356)		HX_VARI( int,index) = this->members->indexOf(Object,null());
HXLINE( 358)		if ((index < (int)0)) {
HXLINE( 359)			return null();
            		}
HXLINE( 361)		if (Splice) {
HXLINE( 362)			this->members->splice(index,(int)1);
            		}
            		else {
HXLINE( 364)			this->members->set(index,null());
            		}
HXLINE( 366)		return Object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,remove,return )

 ::Dynamic FlxTypedGroup_obj::replace( ::Dynamic OldObject, ::Dynamic NewObject){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_378_replace)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(OldObject,"OldObject")
            	HX_STACK_ARG(NewObject,"NewObject")
HXLINE( 379)		HX_VARI( int,index) = this->members->indexOf(OldObject,null());
HXLINE( 381)		if ((index < (int)0)) {
HXLINE( 382)			return null();
            		}
HXLINE( 384)		this->members->set(index,NewObject);
HXLINE( 386)		return NewObject;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,replace,return )

void FlxTypedGroup_obj::sort( ::Dynamic Function,hx::Null< int >  __o_Order){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f,int,a1) HXARGC(2)
            		int _hx_run( ::Dynamic a2, ::Dynamic a3){
            			HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_398_sort)
            			HX_STACK_ARG(a2,"a2")
            			HX_STACK_ARG(a3,"a3")
HXLINE( 398)			return f(a1,a2,a3);
            		}
            		HX_END_LOCAL_FUNC2(return)

int Order = __o_Order.Default(-1);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_398_sort)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Order,"Order")
HXLINE( 398)		 ::Dynamic f = Function;
HXDLIN( 398)		int a1 = Order;
HXDLIN( 398)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN( 398)		this->members->sort(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,sort,(void))

 ::Dynamic FlxTypedGroup_obj::getFirstAvailable(hx::Class ObjectClass,hx::Null< bool >  __o_Force){
bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_410_getFirstAvailable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(Force,"Force")
HXLINE( 411)		HX_VARI( int,i) = (int)0;
HXLINE( 412)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 414)		while((i < this->length)){
HXLINE( 416)			i = (i + (int)1);
HXDLIN( 416)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 418)			bool _hx_tmp;
HXDLIN( 418)			bool _hx_tmp1;
HXDLIN( 418)			if (hx::IsNotNull( basic )) {
HXLINE( 418)				_hx_tmp1 = !(basic->exists);
            			}
            			else {
HXLINE( 418)				_hx_tmp1 = false;
            			}
HXDLIN( 418)			if (_hx_tmp1) {
HXLINE( 418)				if (hx::IsNotNull( ObjectClass )) {
HXLINE( 418)					_hx_tmp = ::Std_obj::is(basic,ObjectClass);
            				}
            				else {
HXLINE( 418)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 418)				_hx_tmp = false;
            			}
HXDLIN( 418)			if (_hx_tmp) {
HXLINE( 420)				bool _hx_tmp2;
HXDLIN( 420)				if (Force) {
HXLINE( 420)					::String _hx_tmp3 = ::Type_obj::getClassName(::Type_obj::getClass(basic));
HXDLIN( 420)					_hx_tmp2 = (_hx_tmp3 != ::Type_obj::getClassName(ObjectClass));
            				}
            				else {
HXLINE( 420)					_hx_tmp2 = false;
            				}
HXDLIN( 420)				if (_hx_tmp2) {
HXLINE( 422)					continue;
            				}
HXLINE( 424)				return this->members->__get((i - (int)1));
            			}
            		}
HXLINE( 428)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,getFirstAvailable,return )

int FlxTypedGroup_obj::getFirstNull(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_438_getFirstNull)
            	HX_STACK_THIS(this)
HXLINE( 439)		HX_VARI( int,i) = (int)0;
HXLINE( 441)		while((i < this->length)){
HXLINE( 443)			if (hx::IsNull( this->members->__get(i) )) {
HXLINE( 445)				return i;
            			}
HXLINE( 447)			i = (i + (int)1);
            		}
HXLINE( 450)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstNull,return )

 ::Dynamic FlxTypedGroup_obj::getFirstExisting(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_460_getFirstExisting)
            	HX_STACK_THIS(this)
HXLINE( 461)		HX_VARI( int,i) = (int)0;
HXLINE( 462)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 464)		while((i < this->length)){
HXLINE( 466)			i = (i + (int)1);
HXDLIN( 466)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 468)			bool _hx_tmp;
HXDLIN( 468)			if (hx::IsNotNull( basic )) {
HXLINE( 468)				_hx_tmp = basic->exists;
            			}
            			else {
HXLINE( 468)				_hx_tmp = false;
            			}
HXDLIN( 468)			if (_hx_tmp) {
HXLINE( 470)				return basic;
            			}
            		}
HXLINE( 474)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstExisting,return )

 ::Dynamic FlxTypedGroup_obj::getFirstAlive(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_484_getFirstAlive)
            	HX_STACK_THIS(this)
HXLINE( 485)		HX_VARI( int,i) = (int)0;
HXLINE( 486)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 488)		while((i < this->length)){
HXLINE( 490)			i = (i + (int)1);
HXDLIN( 490)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 492)			bool _hx_tmp;
HXDLIN( 492)			bool _hx_tmp1;
HXDLIN( 492)			if (hx::IsNotNull( basic )) {
HXLINE( 492)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 492)				_hx_tmp1 = false;
            			}
HXDLIN( 492)			if (_hx_tmp1) {
HXLINE( 492)				_hx_tmp = basic->alive;
            			}
            			else {
HXLINE( 492)				_hx_tmp = false;
            			}
HXDLIN( 492)			if (_hx_tmp) {
HXLINE( 494)				return basic;
            			}
            		}
HXLINE( 498)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstAlive,return )

 ::Dynamic FlxTypedGroup_obj::getFirstDead(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_508_getFirstDead)
            	HX_STACK_THIS(this)
HXLINE( 509)		HX_VARI( int,i) = (int)0;
HXLINE( 510)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 512)		while((i < this->length)){
HXLINE( 514)			i = (i + (int)1);
HXDLIN( 514)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 516)			bool _hx_tmp;
HXDLIN( 516)			if (hx::IsNotNull( basic )) {
HXLINE( 516)				_hx_tmp = !(basic->alive);
            			}
            			else {
HXLINE( 516)				_hx_tmp = false;
            			}
HXDLIN( 516)			if (_hx_tmp) {
HXLINE( 518)				return basic;
            			}
            		}
HXLINE( 522)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,getFirstDead,return )

int FlxTypedGroup_obj::countLiving(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_531_countLiving)
            	HX_STACK_THIS(this)
HXLINE( 532)		HX_VARI( int,i) = (int)0;
HXLINE( 533)		HX_VARI( int,count) = (int)-1;
HXLINE( 534)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 536)		while((i < this->length)){
HXLINE( 538)			i = (i + (int)1);
HXDLIN( 538)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 540)			if (hx::IsNotNull( basic )) {
HXLINE( 542)				if ((count < (int)0)) {
HXLINE( 544)					count = (int)0;
            				}
HXLINE( 546)				bool _hx_tmp;
HXDLIN( 546)				if (basic->exists) {
HXLINE( 546)					_hx_tmp = basic->alive;
            				}
            				else {
HXLINE( 546)					_hx_tmp = false;
            				}
HXDLIN( 546)				if (_hx_tmp) {
HXLINE( 548)					count = (count + (int)1);
            				}
            			}
            		}
HXLINE( 553)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,countLiving,return )

int FlxTypedGroup_obj::countDead(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_562_countDead)
            	HX_STACK_THIS(this)
HXLINE( 563)		HX_VARI( int,i) = (int)0;
HXLINE( 564)		HX_VARI( int,count) = (int)-1;
HXLINE( 565)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 567)		while((i < this->length)){
HXLINE( 569)			i = (i + (int)1);
HXDLIN( 569)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 571)			if (hx::IsNotNull( basic )) {
HXLINE( 573)				if ((count < (int)0)) {
HXLINE( 575)					count = (int)0;
            				}
HXLINE( 577)				if (!(basic->alive)) {
HXLINE( 579)					count = (count + (int)1);
            				}
            			}
            		}
HXLINE( 584)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,countDead,return )

 ::Dynamic FlxTypedGroup_obj::getRandom(hx::Null< int >  __o_StartIndex,hx::Null< int >  __o_Length){
int StartIndex = __o_StartIndex.Default(0);
int Length = __o_Length.Default(0);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_595_getRandom)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(StartIndex,"StartIndex")
            	HX_STACK_ARG(Length,"Length")
HXLINE( 596)		if ((StartIndex < (int)0)) {
HXLINE( 598)			StartIndex = (int)0;
            		}
HXLINE( 600)		if ((Length <= (int)0)) {
HXLINE( 602)			Length = this->length;
            		}
HXLINE( 605)		return ::flixel::FlxG_obj::random->getObject_flixel_group_FlxTypedGroup_T(this->members,null(),StartIndex,Length);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,getRandom,return )

void FlxTypedGroup_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_613_clear)
            	HX_STACK_THIS(this)
HXLINE( 614)		this->length = (int)0;
HXLINE( 615)		::flixel::util::FlxArrayUtil_obj::clearArray(this->members,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedGroup_obj,clear,(void))

void FlxTypedGroup_obj::kill(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_623_kill)
            	HX_STACK_THIS(this)
HXLINE( 624)		HX_VARI( int,i) = (int)0;
HXLINE( 625)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 627)		while((i < this->length)){
HXLINE( 629)			i = (i + (int)1);
HXDLIN( 629)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 631)			bool _hx_tmp;
HXDLIN( 631)			if (hx::IsNotNull( basic )) {
HXLINE( 631)				_hx_tmp = basic->exists;
            			}
            			else {
HXLINE( 631)				_hx_tmp = false;
            			}
HXDLIN( 631)			if (_hx_tmp) {
HXLINE( 633)				basic->kill();
            			}
            		}
HXLINE( 637)		this->super::kill();
            	}


void FlxTypedGroup_obj::revive(){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_644_revive)
            	HX_STACK_THIS(this)
HXLINE( 645)		HX_VARI( int,i) = (int)0;
HXLINE( 646)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 648)		while((i < this->length)){
HXLINE( 650)			i = (i + (int)1);
HXDLIN( 650)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 652)			bool _hx_tmp;
HXDLIN( 652)			if (hx::IsNotNull( basic )) {
HXLINE( 652)				_hx_tmp = !(basic->exists);
            			}
            			else {
HXLINE( 652)				_hx_tmp = false;
            			}
HXDLIN( 652)			if (_hx_tmp) {
HXLINE( 654)				basic->revive();
            			}
            		}
HXLINE( 658)		this->super::revive();
            	}


 ::flixel::group::FlxTypedGroupIterator FlxTypedGroup_obj::iterator( ::Dynamic filter){
            	HX_GC_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_666_iterator)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
HXLINE( 666)		return  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->members,filter);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,iterator,return )

void FlxTypedGroup_obj::forEach( ::Dynamic Function,hx::Null< bool >  __o_Recurse){
bool Recurse = __o_Recurse.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_676_forEach)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 677)		HX_VARI( int,i) = (int)0;
HXLINE( 678)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 680)		while((i < this->length)){
HXLINE( 682)			i = (i + (int)1);
HXDLIN( 682)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 684)			if (hx::IsNotNull( basic )) {
HXLINE( 686)				if (Recurse) {
HXLINE( 688)					HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 689)					if (hx::IsNotNull( group )) {
HXLINE( 691)						group->forEach(Function,Recurse);
            					}
            				}
HXLINE( 695)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEach,(void))

void FlxTypedGroup_obj::forEachAlive( ::Dynamic Function,hx::Null< bool >  __o_Recurse){
bool Recurse = __o_Recurse.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_707_forEachAlive)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 708)		HX_VARI( int,i) = (int)0;
HXLINE( 709)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 711)		while((i < this->length)){
HXLINE( 713)			i = (i + (int)1);
HXDLIN( 713)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 715)			bool _hx_tmp;
HXDLIN( 715)			bool _hx_tmp1;
HXDLIN( 715)			if (hx::IsNotNull( basic )) {
HXLINE( 715)				_hx_tmp1 = basic->exists;
            			}
            			else {
HXLINE( 715)				_hx_tmp1 = false;
            			}
HXDLIN( 715)			if (_hx_tmp1) {
HXLINE( 715)				_hx_tmp = basic->alive;
            			}
            			else {
HXLINE( 715)				_hx_tmp = false;
            			}
HXDLIN( 715)			if (_hx_tmp) {
HXLINE( 717)				if (Recurse) {
HXLINE( 719)					HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 720)					if (hx::IsNotNull( group )) {
HXLINE( 722)						group->forEachAlive(Function,Recurse);
            					}
            				}
HXLINE( 726)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEachAlive,(void))

void FlxTypedGroup_obj::forEachDead( ::Dynamic Function,hx::Null< bool >  __o_Recurse){
bool Recurse = __o_Recurse.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_738_forEachDead)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 739)		HX_VARI( int,i) = (int)0;
HXLINE( 740)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 742)		while((i < this->length)){
HXLINE( 744)			i = (i + (int)1);
HXDLIN( 744)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 746)			bool _hx_tmp;
HXDLIN( 746)			if (hx::IsNotNull( basic )) {
HXLINE( 746)				_hx_tmp = !(basic->alive);
            			}
            			else {
HXLINE( 746)				_hx_tmp = false;
            			}
HXDLIN( 746)			if (_hx_tmp) {
HXLINE( 748)				if (Recurse) {
HXLINE( 750)					HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 751)					if (hx::IsNotNull( group )) {
HXLINE( 753)						group->forEachDead(Function,Recurse);
            					}
            				}
HXLINE( 757)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEachDead,(void))

void FlxTypedGroup_obj::forEachExists( ::Dynamic Function,hx::Null< bool >  __o_Recurse){
bool Recurse = __o_Recurse.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_769_forEachExists)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 770)		HX_VARI( int,i) = (int)0;
HXLINE( 771)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 773)		while((i < this->length)){
HXLINE( 775)			i = (i + (int)1);
HXDLIN( 775)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 777)			bool _hx_tmp;
HXDLIN( 777)			if (hx::IsNotNull( basic )) {
HXLINE( 777)				_hx_tmp = basic->exists;
            			}
            			else {
HXLINE( 777)				_hx_tmp = false;
            			}
HXDLIN( 777)			if (_hx_tmp) {
HXLINE( 779)				if (Recurse) {
HXLINE( 781)					HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 782)					if (hx::IsNotNull( group )) {
HXLINE( 784)						group->forEachExists(Function,Recurse);
            					}
            				}
HXLINE( 788)				Function(basic);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedGroup_obj,forEachExists,(void))

void FlxTypedGroup_obj::forEachOfType(hx::Class ObjectClass, ::Dynamic Function,hx::Null< bool >  __o_Recurse){
bool Recurse = __o_Recurse.Default(false);
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_801_forEachOfType)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 802)		HX_VARI( int,i) = (int)0;
HXLINE( 803)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 805)		while((i < this->length)){
HXLINE( 807)			i = (i + (int)1);
HXDLIN( 807)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 809)			if (hx::IsNotNull( basic )) {
HXLINE( 811)				if (Recurse) {
HXLINE( 813)					HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(basic);
HXLINE( 814)					if (hx::IsNotNull( group )) {
HXLINE( 816)						group->forEachOfType(ObjectClass,Function,Recurse);
            					}
            				}
HXLINE( 820)				if (::Std_obj::is(basic,ObjectClass)) {
HXLINE( 821)					Function(basic);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTypedGroup_obj,forEachOfType,(void))

int FlxTypedGroup_obj::set_maxSize(int Size){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_828_set_maxSize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Size,"Size")
HXLINE( 829)		this->maxSize = ::Std_obj::_hx_int(::Math_obj::abs(Size));
HXLINE( 831)		if ((this->_marker >= this->maxSize)) {
HXLINE( 833)			this->_marker = (int)0;
            		}
HXLINE( 835)		bool _hx_tmp;
HXDLIN( 835)		bool _hx_tmp1;
HXDLIN( 835)		if ((this->maxSize != (int)0)) {
HXLINE( 835)			_hx_tmp1 = hx::IsNull( this->members );
            		}
            		else {
HXLINE( 835)			_hx_tmp1 = true;
            		}
HXDLIN( 835)		if (!(_hx_tmp1)) {
HXLINE( 835)			_hx_tmp = (this->maxSize >= this->length);
            		}
            		else {
HXLINE( 835)			_hx_tmp = true;
            		}
HXDLIN( 835)		if (_hx_tmp) {
HXLINE( 837)			return this->maxSize;
            		}
HXLINE( 841)		HX_VARI( int,i) = this->maxSize;
HXLINE( 842)		HX_VARI( int,l) = this->length;
HXLINE( 843)		HX_VARI(  ::flixel::FlxBasic,basic) = null();
HXLINE( 845)		while((i < l)){
HXLINE( 847)			i = (i + (int)1);
HXDLIN( 847)			basic = ( ( ::flixel::FlxBasic)(this->members->__get((i - (int)1))) );
HXLINE( 849)			if (hx::IsNotNull( basic )) {
HXLINE( 850)				basic->destroy();
            			}
            		}
HXLINE( 853)		::flixel::util::FlxArrayUtil_obj::setLength_flixel_group_FlxTypedGroup_T(this->members,this->maxSize);
HXLINE( 854)		this->length = this->members->get_length();
HXLINE( 856)		return this->maxSize;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,set_maxSize,return )

bool FlxTypedGroup_obj::overlaps( ::Dynamic Callback, ::flixel::group::FlxTypedGroup Group,Float X,Float Y,bool InScreenSpace, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_24_overlaps)
            	HX_STACK_ARG(Callback,"Callback")
            	HX_STACK_ARG(Group,"Group")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE(  25)		HX_VARI( bool,result) = false;
HXLINE(  26)		if (hx::IsNotNull( Group )) {
HXLINE(  28)			HX_VARI( int,i) = (int)0;
HXLINE(  29)			HX_VARI( int,l) = Group->length;
HXLINE(  30)			HX_VAR(  ::flixel::FlxBasic,basic);
HXLINE(  32)			while((i < l)){
HXLINE(  34)				i = (i + (int)1);
HXDLIN(  34)				basic = Dynamic( Group->members->__get((i - (int)1))).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  36)				bool _hx_tmp;
HXDLIN(  36)				if (hx::IsNotNull( basic )) {
HXLINE(  36)					_hx_tmp = ( (bool)(Callback(basic,X,Y,InScreenSpace,Camera)) );
            				}
            				else {
HXLINE(  36)					_hx_tmp = false;
            				}
HXDLIN(  36)				if (_hx_tmp) {
HXLINE(  38)					result = true;
HXLINE(  39)					goto _hx_goto_48;
            				}
            			}
            			_hx_goto_48:;
            		}
HXLINE(  43)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxTypedGroup_obj,overlaps,return )

 ::flixel::group::FlxTypedGroup FlxTypedGroup_obj::resolveGroup( ::flixel::FlxBasic ObjectOrGroup){
            	HX_STACKFRAME(&_hx_pos_bfa1de30d9ec9fbd_48_resolveGroup)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
HXLINE(  49)		HX_VARI(  ::flixel::group::FlxTypedGroup,group) = null();
HXLINE(  50)		if (hx::IsNotNull( ObjectOrGroup )) {
HXLINE(  52)			if ((ObjectOrGroup->flixelType == (int)2)) {
HXLINE(  54)				group = ( ( ::flixel::group::FlxTypedGroup)(ObjectOrGroup) );
            			}
            			else {
HXLINE(  56)				if ((ObjectOrGroup->flixelType == (int)4)) {
HXLINE(  59)					group = ( ( ::flixel::group::FlxTypedSpriteGroup)(ObjectOrGroup) )->group;
            				}
            			}
            		}
HXLINE(  62)		return group;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxTypedGroup_obj,resolveGroup,return )


hx::ObjectPtr< FlxTypedGroup_obj > FlxTypedGroup_obj::__new(hx::Null< int >  __o_MaxSize) {
	hx::ObjectPtr< FlxTypedGroup_obj > __this = new FlxTypedGroup_obj();
	__this->__construct(__o_MaxSize);
	return __this;
}

hx::ObjectPtr< FlxTypedGroup_obj > FlxTypedGroup_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_MaxSize) {
	FlxTypedGroup_obj *__this = (FlxTypedGroup_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTypedGroup_obj), true, "flixel.group.FlxTypedGroup"));
	*(void **)__this = FlxTypedGroup_obj::_hx_vtable;
	__this->__construct(__o_MaxSize);
	return __this;
}

FlxTypedGroup_obj::FlxTypedGroup_obj()
{
}

void FlxTypedGroup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedGroup);
	HX_MARK_MEMBER_NAME(members,"members");
	HX_MARK_MEMBER_NAME(maxSize,"maxSize");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(_marker,"_marker");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTypedGroup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(members,"members");
	HX_VISIT_MEMBER_NAME(maxSize,"maxSize");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(_marker,"_marker");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTypedGroup_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		if (HX_FIELD_EQ(inName,"sort") ) { return hx::Val( sort_dyn()); }
		if (HX_FIELD_EQ(inName,"kill") ) { return hx::Val( kill_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"revive") ) { return hx::Val( revive_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { return hx::Val( members); }
		if (HX_FIELD_EQ(inName,"maxSize") ) { return hx::Val( maxSize); }
		if (HX_FIELD_EQ(inName,"_marker") ) { return hx::Val( _marker); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"recycle") ) { return hx::Val( recycle_dyn()); }
		if (HX_FIELD_EQ(inName,"replace") ) { return hx::Val( replace_dyn()); }
		if (HX_FIELD_EQ(inName,"forEach") ) { return hx::Val( forEach_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"countDead") ) { return hx::Val( countDead_dyn()); }
		if (HX_FIELD_EQ(inName,"getRandom") ) { return hx::Val( getRandom_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"countLiving") ) { return hx::Val( countLiving_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachDead") ) { return hx::Val( forEachDead_dyn()); }
		if (HX_FIELD_EQ(inName,"set_maxSize") ) { return hx::Val( set_maxSize_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getFirstNull") ) { return hx::Val( getFirstNull_dyn()); }
		if (HX_FIELD_EQ(inName,"getFirstDead") ) { return hx::Val( getFirstDead_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachAlive") ) { return hx::Val( forEachAlive_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getFirstAlive") ) { return hx::Val( getFirstAlive_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachExists") ) { return hx::Val( forEachExists_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachOfType") ) { return hx::Val( forEachOfType_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getFirstExisting") ) { return hx::Val( getFirstExisting_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getFirstAvailable") ) { return hx::Val( getFirstAvailable_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"recycleCreateObject") ) { return hx::Val( recycleCreateObject_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTypedGroup_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"overlaps") ) { outValue = overlaps_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resolveGroup") ) { outValue = resolveGroup_dyn(); return true; }
	}
	return false;
}

hx::Val FlxTypedGroup_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { members=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxSize(inValue) );maxSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_marker") ) { _marker=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedGroup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a"));
	outFields->push(HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTypedGroup_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxTypedGroup_obj,members),HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a")},
	{hx::fsInt,(int)offsetof(FlxTypedGroup_obj,maxSize),HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc")},
	{hx::fsInt,(int)offsetof(FlxTypedGroup_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsInt,(int)offsetof(FlxTypedGroup_obj,_marker),HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTypedGroup_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedGroup_obj_sMemberFields[] = {
	HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a"),
	HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("_marker","\x59","\x87","\xe7","\x28"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("recycle","\x13","\x10","\x8c","\x37"),
	HX_HCSTRING("recycleCreateObject","\x8e","\x6b","\x54","\x8e"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("replace","\x34","\x48","\x28","\xab"),
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("getFirstAvailable","\xaf","\xea","\xb3","\x05"),
	HX_HCSTRING("getFirstNull","\x61","\xb7","\x33","\x0f"),
	HX_HCSTRING("getFirstExisting","\x65","\xa4","\x6c","\xee"),
	HX_HCSTRING("getFirstAlive","\xb3","\x09","\xe2","\xbb"),
	HX_HCSTRING("getFirstDead","\x7e","\x67","\x8b","\x08"),
	HX_HCSTRING("countLiving","\x58","\xd9","\x8a","\x30"),
	HX_HCSTRING("countDead","\x13","\xd3","\x86","\x54"),
	HX_HCSTRING("getRandom","\x39","\xab","\xe5","\x33"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("kill","\x9e","\xdf","\x09","\x47"),
	HX_HCSTRING("revive","\x55","\xfa","\x76","\x0a"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("forEach","\xaa","\x29","\xbe","\xc4"),
	HX_HCSTRING("forEachAlive","\xc3","\x61","\xb7","\x99"),
	HX_HCSTRING("forEachDead","\x6e","\xc1","\xe4","\x78"),
	HX_HCSTRING("forEachExists","\x26","\x57","\xf8","\x68"),
	HX_HCSTRING("forEachOfType","\xbb","\x90","\x76","\xfd"),
	HX_HCSTRING("set_maxSize","\xa8","\x60","\xeb","\x5c"),
	::String(null()) };

static void FlxTypedGroup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypedGroup_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypedGroup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypedGroup_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTypedGroup_obj::__mClass;

static ::String FlxTypedGroup_obj_sStaticFields[] = {
	HX_HCSTRING("overlaps","\x0c","\xd3","\x2a","\x45"),
	HX_HCSTRING("resolveGroup","\xb3","\xf8","\x79","\xd2"),
	::String(null())
};

void FlxTypedGroup_obj::__register()
{
	hx::Object *dummy = new FlxTypedGroup_obj;
	FlxTypedGroup_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.group.FlxTypedGroup","\xe6","\xb8","\x51","\xd3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTypedGroup_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTypedGroup_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxTypedGroup_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTypedGroup_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTypedGroup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypedGroup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedGroup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedGroup_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace group
