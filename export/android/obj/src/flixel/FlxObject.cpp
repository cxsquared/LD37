// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_math_FlxVelocity
#include <flixel/math/FlxVelocity.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPath
#include <flixel/util/FlxPath.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_20_new,"flixel.FlxObject","new",0x2aa4ec91,"flixel.FlxObject.new","flixel/FlxObject.hx",20,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_608_initVars,"flixel.FlxObject","initVars",0xb8a66d0b,"flixel.FlxObject.initVars","flixel/FlxObject.hx",608,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_622_initMotionVars,"flixel.FlxObject","initMotionVars",0xb01943a1,"flixel.FlxObject.initMotionVars","flixel/FlxObject.hx",622,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_634_destroy,"flixel.FlxObject","destroy",0xba37b5ab,"flixel.FlxObject.destroy","flixel/FlxObject.hx",634,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_652_update,"flixel.FlxObject","update",0x87b15e78,"flixel.FlxObject.update","flixel/FlxObject.hx",652,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_677_updateMotion,"flixel.FlxObject","updateMotion",0x420d82ce,"flixel.FlxObject.updateMotion","flixel/FlxObject.hx",677,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_700_draw,"flixel.FlxObject","draw",0x1f17bab3,"flixel.FlxObject.draw","flixel/FlxObject.hx",700,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_719_overlaps,"flixel.FlxObject","overlaps",0xaad0e53b,"flixel.FlxObject.overlaps","flixel/FlxObject.hx",719,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_754_overlapsCallback,"flixel.FlxObject","overlapsCallback",0xe4196e20,"flixel.FlxObject.overlapsCallback","flixel/FlxObject.hx",754,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_770_overlapsAt,"flixel.FlxObject","overlapsAt",0xacc1230e,"flixel.FlxObject.overlapsAt","flixel/FlxObject.hx",770,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_807_overlapsAtCallback,"flixel.FlxObject","overlapsAtCallback",0xb90836f3,"flixel.FlxObject.overlapsAtCallback","flixel/FlxObject.hx",807,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_819_overlapsPoint,"flixel.FlxObject","overlapsPoint",0xcd9c6915,"flixel.FlxObject.overlapsPoint","flixel/FlxObject.hx",819,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_843_inWorldBounds,"flixel.FlxObject","inWorldBounds",0x89d0e9f3,"flixel.FlxObject.inWorldBounds","flixel/FlxObject.hx",843,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_854_getScreenPosition,"flixel.FlxObject","getScreenPosition",0x643c435c,"flixel.FlxObject.getScreenPosition","flixel/FlxObject.hx",854,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_874_getPosition,"flixel.FlxObject","getPosition",0x1bf09890,"flixel.FlxObject.getPosition","flixel/FlxObject.hx",874,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_887_getMidpoint,"flixel.FlxObject","getMidpoint",0x7bfe0daf,"flixel.FlxObject.getMidpoint","flixel/FlxObject.hx",887,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_896_getHitbox,"flixel.FlxObject","getHitbox",0x5f284dbf,"flixel.FlxObject.getHitbox","flixel/FlxObject.hx",896,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_910_reset,"flixel.FlxObject","reset",0x1cbd9440,"flixel.FlxObject.reset","flixel/FlxObject.hx",910,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_926_isOnScreen,"flixel.FlxObject","isOnScreen",0x4aab7fe4,"flixel.FlxObject.isOnScreen","flixel/FlxObject.hx",926,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_939_isPixelPerfectRender,"flixel.FlxObject","isPixelPerfectRender",0xc4c93916,"flixel.FlxObject.isPixelPerfectRender","flixel/FlxObject.hx",939,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_957_isTouching,"flixel.FlxObject","isTouching",0x23c6647c,"flixel.FlxObject.isTouching","flixel/FlxObject.hx",957,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_969_justTouched,"flixel.FlxObject","justTouched",0xbcba8e43,"flixel.FlxObject.justTouched","flixel/FlxObject.hx",969,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_979_hurt,"flixel.FlxObject","hurt",0x21beeabe,"flixel.FlxObject.hurt","flixel/FlxObject.hx",979,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_994_screenCenter,"flixel.FlxObject","screenCenter",0x59e58410,"flixel.FlxObject.screenCenter","flixel/FlxObject.hx",994,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1014_setPosition,"flixel.FlxObject","setPosition",0x265d9f9c,"flixel.FlxObject.setPosition","flixel/FlxObject.hx",1014,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1026_setSize,"flixel.FlxObject","setSize",0xa7896a34,"flixel.FlxObject.setSize","flixel/FlxObject.hx",1026,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1111_getBoundingBox,"flixel.FlxObject","getBoundingBox",0x58364780,"flixel.FlxObject.getBoundingBox","flixel/FlxObject.hx",1111,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1128_toString,"flixel.FlxObject","toString",0x9e14e2db,"flixel.FlxObject.toString","flixel/FlxObject.hx",1128,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1140_set_x,"flixel.FlxObject","set_x",0xb024e5cc,"flixel.FlxObject.set_x","flixel/FlxObject.hx",1140,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1146_set_y,"flixel.FlxObject","set_y",0xb024e5cd,"flixel.FlxObject.set_y","flixel/FlxObject.hx",1146,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1160_set_width,"flixel.FlxObject","set_width",0x7d06d55a,"flixel.FlxObject.set_width","flixel/FlxObject.hx",1160,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1174_set_height,"flixel.FlxObject","set_height",0x9f435213,"flixel.FlxObject.set_height","flixel/FlxObject.hx",1174,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1180_get_width,"flixel.FlxObject","get_width",0x99b5e94e,"flixel.FlxObject.get_width","flixel/FlxObject.hx",1180,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1186_get_height,"flixel.FlxObject","get_height",0x9bc5b39f,"flixel.FlxObject.get_height","flixel/FlxObject.hx",1186,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1192_get_solid,"flixel.FlxObject","get_solid",0x5018e773,"flixel.FlxObject.get_solid","flixel/FlxObject.hx",1192,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1197_set_solid,"flixel.FlxObject","set_solid",0x3369d37f,"flixel.FlxObject.set_solid","flixel/FlxObject.hx",1197,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1205_set_angle,"flixel.FlxObject","set_angle",0xd5866327,"flixel.FlxObject.set_angle","flixel/FlxObject.hx",1205,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1211_set_moves,"flixel.FlxObject","set_moves",0xbf09eb96,"flixel.FlxObject.set_moves","flixel/FlxObject.hx",1211,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1217_set_immovable,"flixel.FlxObject","set_immovable",0xc5b8805e,"flixel.FlxObject.set_immovable","flixel/FlxObject.hx",1217,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1223_set_pixelPerfectRender,"flixel.FlxObject","set_pixelPerfectRender",0x84233609,"flixel.FlxObject.set_pixelPerfectRender","flixel/FlxObject.hx",1223,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1229_set_allowCollisions,"flixel.FlxObject","set_allowCollisions",0x7975d9fe,"flixel.FlxObject.set_allowCollisions","flixel/FlxObject.hx",1229,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1251_set_path,"flixel.FlxObject","set_path",0xde100cd1,"flixel.FlxObject.set_path","flixel/FlxObject.hx",1251,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_82_separate,"flixel.FlxObject","separate",0x6cc23192,"flixel.FlxObject.separate","flixel/FlxObject.hx",82,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_97_updateTouchingFlags,"flixel.FlxObject","updateTouchingFlags",0x15a0502c,"flixel.FlxObject.updateTouchingFlags","flixel/FlxObject.hx",97,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_110_computeOverlapX,"flixel.FlxObject","computeOverlapX",0x240ec739,"flixel.FlxObject.computeOverlapX","flixel/FlxObject.hx",110,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_169_separateX,"flixel.FlxObject","separateX",0xbd292e86,"flixel.FlxObject.separateX","flixel/FlxObject.hx",169,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_235_updateTouchingFlagsX,"flixel.FlxObject","updateTouchingFlagsX",0xd6a5d6ac,"flixel.FlxObject.updateTouchingFlagsX","flixel/FlxObject.hx",235,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_258_computeOverlapY,"flixel.FlxObject","computeOverlapY",0x240ec73a,"flixel.FlxObject.computeOverlapY","flixel/FlxObject.hx",258,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_317_separateY,"flixel.FlxObject","separateY",0xbd292e87,"flixel.FlxObject.separateY","flixel/FlxObject.hx",317,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_395_updateTouchingFlagsY,"flixel.FlxObject","updateTouchingFlagsY",0xd6a5d6ad,"flixel.FlxObject.updateTouchingFlagsY","flixel/FlxObject.hx",395,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_25_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",25,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_31_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",31,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_35_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",35,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_39_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",39,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_43_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",43,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_47_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",47,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_51_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",51,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_55_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",55,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_59_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",59,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_63_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",63,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_67_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",67,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_70_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",70,0xf0fe0d80)
HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_72_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",72,0xf0fe0d80)
namespace flixel{

void FlxObject_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
Float Width = __o_Width.Default(0);
Float Height = __o_Height.Default(0);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_20_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE( 583)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 583)		_this->x = (int)0;
HXDLIN( 583)		_this->y = (int)0;
HXDLIN( 583)		_this->width = (int)0;
HXDLIN( 583)		_this->height = (int)0;
HXDLIN( 583)		_this->_inPool = false;
HXDLIN( 583)		this->_rect = _this;
HXLINE( 581)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 581)		point->_inPool = false;
HXDLIN( 581)		this->_point = point;
HXLINE( 578)		this->path = null();
HXLINE( 536)		this->collisonXDrag = true;
HXLINE( 531)		this->allowCollisions = (int)4369;
HXLINE( 526)		this->wasTouching = (int)0;
HXLINE( 521)		this->touching = (int)0;
HXLINE( 516)		this->health = ((Float)1);
HXLINE( 512)		this->maxAngular = ((Float)10000);
HXLINE( 508)		this->angularDrag = ((Float)0);
HXLINE( 504)		this->angularAcceleration = ((Float)0);
HXLINE( 500)		this->angularVelocity = ((Float)0);
HXLINE( 496)		this->elasticity = ((Float)0);
HXLINE( 492)		this->mass = ((Float)1);
HXLINE( 453)		this->immovable = false;
HXLINE( 449)		this->moves = true;
HXLINE( 444)		this->angle = ((Float)0);
HXLINE( 439)		this->pixelPerfectPosition = true;
HXLINE( 418)		this->y = ((Float)0);
HXLINE( 414)		this->x = ((Float)0);
HXLINE( 593)		super::__construct();
HXLINE( 595)		this->set_x(X);
HXLINE( 596)		this->set_y(Y);
HXLINE( 597)		this->set_width(Width);
HXLINE( 598)		this->set_height(Height);
HXLINE( 600)		this->initVars();
            	}

Dynamic FlxObject_obj::__CreateEmpty() { return new FlxObject_obj; }

void *FlxObject_obj::_hx_vtable = 0;

Dynamic FlxObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxObject_obj > _hx_result = new FlxObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
	} else {
		return inClassId==(int)0x2e105115;
	}
}

void FlxObject_obj::initVars(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_608_initVars)
            	HX_STACK_THIS(this)
HXLINE( 609)		this->flixelType = (int)1;
HXLINE( 610)		Float X = this->x;
HXDLIN( 610)		Float Y = this->y;
HXDLIN( 610)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set(X,Y);
HXDLIN( 610)		point->_inPool = false;
HXDLIN( 610)		this->last = point;
HXLINE( 611)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)1,(int)1);
HXDLIN( 611)		point1->_inPool = false;
HXDLIN( 611)		this->scrollFactor = point1;
HXLINE( 612)		this->pixelPerfectPosition = ::flixel::FlxObject_obj::defaultPixelPerfectPosition;
HXLINE( 614)		{
HXLINE( 614)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 614)			point2->_inPool = false;
HXDLIN( 614)			this->velocity = point2;
HXDLIN( 614)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 614)			point3->_inPool = false;
HXDLIN( 614)			this->acceleration = point3;
HXDLIN( 614)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point4,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 614)			point4->_inPool = false;
HXDLIN( 614)			this->drag = point4;
HXDLIN( 614)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point5,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)10000,(int)10000);
HXDLIN( 614)			point5->_inPool = false;
HXDLIN( 614)			this->maxVelocity = point5;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,initVars,(void))

void FlxObject_obj::initMotionVars(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_622_initMotionVars)
            	HX_STACK_THIS(this)
HXLINE( 623)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 623)		point->_inPool = false;
HXDLIN( 623)		this->velocity = point;
HXLINE( 624)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 624)		point1->_inPool = false;
HXDLIN( 624)		this->acceleration = point1;
HXLINE( 625)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 625)		point2->_inPool = false;
HXDLIN( 625)		this->drag = point2;
HXLINE( 626)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)10000,(int)10000);
HXDLIN( 626)		point3->_inPool = false;
HXDLIN( 626)		this->maxVelocity = point3;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,initMotionVars,(void))

void FlxObject_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_634_destroy)
            	HX_STACK_THIS(this)
HXLINE( 635)		this->super::destroy();
HXLINE( 637)		this->velocity = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->velocity)) );
HXLINE( 638)		this->acceleration = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->acceleration)) );
HXLINE( 639)		this->drag = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->drag)) );
HXLINE( 640)		this->maxVelocity = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->maxVelocity)) );
HXLINE( 641)		this->scrollFactor = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scrollFactor)) );
HXLINE( 642)		this->last = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->last)) );
HXLINE( 643)		this->_point = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_point)) );
HXLINE( 644)		this->_rect = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->_rect)) );
            	}


void FlxObject_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_652_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 658)		this->last->set_x(this->x);
HXLINE( 659)		this->last->set_y(this->y);
HXLINE( 661)		bool _hx_tmp;
HXDLIN( 661)		if (hx::IsNotNull( this->path )) {
HXLINE( 661)			_hx_tmp = this->path->active;
            		}
            		else {
HXLINE( 661)			_hx_tmp = false;
            		}
HXDLIN( 661)		if (_hx_tmp) {
HXLINE( 662)			this->path->update(elapsed);
            		}
HXLINE( 664)		if (this->moves) {
HXLINE( 665)			this->updateMotion(elapsed);
            		}
HXLINE( 667)		this->wasTouching = this->touching;
HXLINE( 668)		this->touching = (int)0;
            	}


void FlxObject_obj::updateMotion(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_677_updateMotion)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 678)		HX_VARI( Float,velocityDelta) = (((Float)0.5) * (::flixel::math::FlxVelocity_obj::computeVelocity(this->angularVelocity,this->angularAcceleration,this->angularDrag,this->maxAngular,elapsed) - this->angularVelocity));
HXLINE( 679)		 ::flixel::FlxObject _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 679)		_hx_tmp->angularVelocity = (_hx_tmp->angularVelocity + velocityDelta);
HXLINE( 680)		{
HXLINE( 680)			HX_VARI(  ::flixel::FlxObject,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 680)			_g->set_angle((_g->angle + (this->angularVelocity * elapsed)));
            		}
HXLINE( 681)		 ::flixel::FlxObject _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 681)		_hx_tmp1->angularVelocity = (_hx_tmp1->angularVelocity + velocityDelta);
HXLINE( 683)		velocityDelta = (((Float)0.5) * (::flixel::math::FlxVelocity_obj::computeVelocity(this->velocity->x,this->acceleration->x,this->drag->x,this->maxVelocity->x,elapsed) - this->velocity->x));
HXLINE( 684)		{
HXLINE( 684)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = this->velocity;
HXDLIN( 684)			_g1->set_x((_g1->x + velocityDelta));
            		}
HXLINE( 685)		HX_VARI( Float,delta) = (this->velocity->x * elapsed);
HXLINE( 686)		{
HXLINE( 686)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g2,"_g") = this->velocity;
HXDLIN( 686)			_g2->set_x((_g2->x + velocityDelta));
            		}
HXLINE( 687)		{
HXLINE( 687)			HX_VARI_NAME(  ::flixel::FlxObject,_g3,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 687)			_g3->set_x((_g3->x + delta));
            		}
HXLINE( 689)		velocityDelta = (((Float)0.5) * (::flixel::math::FlxVelocity_obj::computeVelocity(this->velocity->y,this->acceleration->y,this->drag->y,this->maxVelocity->y,elapsed) - this->velocity->y));
HXLINE( 690)		{
HXLINE( 690)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g4,"_g") = this->velocity;
HXDLIN( 690)			_g4->set_y((_g4->y + velocityDelta));
            		}
HXLINE( 691)		delta = (this->velocity->y * elapsed);
HXLINE( 692)		{
HXLINE( 692)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g5,"_g") = this->velocity;
HXDLIN( 692)			_g5->set_y((_g5->y + velocityDelta));
            		}
HXLINE( 693)		{
HXLINE( 693)			HX_VARI_NAME(  ::flixel::FlxObject,_g6,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 693)			_g6->set_y((_g6->y + delta));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,updateMotion,(void))

void FlxObject_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_700_draw)
            	HX_STACK_THIS(this)
            	}


bool FlxObject_obj::overlaps( ::flixel::FlxBasic ObjectOrGroup,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_719_overlaps)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 720)		HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(ObjectOrGroup);
HXLINE( 721)		if (hx::IsNotNull( group )) {
HXLINE( 723)			return ::flixel::group::FlxTypedGroup_obj::overlaps(this->overlapsCallback_dyn(),group,(int)0,(int)0,InScreenSpace,Camera);
            		}
HXLINE( 726)		if ((ObjectOrGroup->flixelType == (int)3)) {
HXLINE( 731)			return ( ( ::flixel::tile::FlxBaseTilemap)(ObjectOrGroup) )->overlaps(hx::ObjectPtr<OBJ_>(this),InScreenSpace,Camera);
            		}
HXLINE( 734)		HX_VARI(  ::flixel::FlxObject,object) = ( ( ::flixel::FlxObject)(ObjectOrGroup) );
HXLINE( 735)		if (!(InScreenSpace)) {
HXLINE( 737)			bool _hx_tmp;
HXDLIN( 737)			bool _hx_tmp1;
HXDLIN( 737)			HX_VARI_NAME( Float,object1,"object") = object->x;
HXDLIN( 737)			Float _hx_tmp2 = (object1 + object->get_width());
HXDLIN( 737)			if ((_hx_tmp2 > this->x)) {
HXLINE( 737)				HX_VARI_NAME( Float,object2,"object") = object->x;
HXDLIN( 737)				Float _hx_tmp3 = this->x;
HXDLIN( 737)				_hx_tmp1 = (object2 < (_hx_tmp3 + this->get_width()));
            			}
            			else {
HXLINE( 737)				_hx_tmp1 = false;
            			}
HXDLIN( 737)			if (_hx_tmp1) {
HXLINE( 738)				HX_VARI_NAME( Float,object3,"object") = object->y;
HXDLIN( 738)				Float _hx_tmp4 = (object3 + object->get_height());
HXLINE( 737)				_hx_tmp = (_hx_tmp4 > this->y);
            			}
            			else {
HXLINE( 737)				_hx_tmp = false;
            			}
HXDLIN( 737)			if (_hx_tmp) {
HXLINE( 738)				HX_VARI_NAME( Float,object4,"object") = object->y;
HXDLIN( 738)				Float _hx_tmp5 = this->y;
HXLINE( 737)				return (object4 < (_hx_tmp5 + this->get_height()));
            			}
            			else {
HXLINE( 737)				return false;
            			}
            		}
HXLINE( 741)		if (hx::IsNull( Camera )) {
HXLINE( 743)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 745)		HX_VARI(  ::flixel::math::FlxPoint,objectScreenPos) = object->getScreenPosition(null(),Camera);
HXLINE( 746)		this->getScreenPosition(this->_point,Camera);
HXLINE( 747)		bool _hx_tmp6;
HXDLIN( 747)		bool _hx_tmp7;
HXDLIN( 747)		HX_VARI_NAME( Float,objectScreenPos1,"objectScreenPos") = objectScreenPos->x;
HXDLIN( 747)		Float _hx_tmp8 = (objectScreenPos1 + object->get_width());
HXDLIN( 747)		if ((_hx_tmp8 > this->_point->x)) {
HXLINE( 747)			HX_VARI_NAME( Float,objectScreenPos2,"objectScreenPos") = objectScreenPos->x;
HXDLIN( 747)			Float _hx_tmp9 = this->_point->x;
HXDLIN( 747)			_hx_tmp7 = (objectScreenPos2 < (_hx_tmp9 + this->get_width()));
            		}
            		else {
HXLINE( 747)			_hx_tmp7 = false;
            		}
HXDLIN( 747)		if (_hx_tmp7) {
HXLINE( 748)			HX_VARI_NAME( Float,objectScreenPos3,"objectScreenPos") = objectScreenPos->y;
HXDLIN( 748)			Float _hx_tmp10 = (objectScreenPos3 + object->get_height());
HXLINE( 747)			_hx_tmp6 = (_hx_tmp10 > this->_point->y);
            		}
            		else {
HXLINE( 747)			_hx_tmp6 = false;
            		}
HXDLIN( 747)		if (_hx_tmp6) {
HXLINE( 748)			HX_VARI_NAME( Float,objectScreenPos4,"objectScreenPos") = objectScreenPos->y;
HXDLIN( 748)			Float _hx_tmp11 = this->_point->y;
HXLINE( 747)			return (objectScreenPos4 < (_hx_tmp11 + this->get_height()));
            		}
            		else {
HXLINE( 747)			return false;
            		}
HXDLIN( 747)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,overlaps,return )

bool FlxObject_obj::overlapsCallback( ::flixel::FlxBasic ObjectOrGroup,Float X,Float Y,bool InScreenSpace, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_754_overlapsCallback)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 754)		return this->overlaps(ObjectOrGroup,InScreenSpace,Camera);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxObject_obj,overlapsCallback,return )

bool FlxObject_obj::overlapsAt(Float X,Float Y, ::flixel::FlxBasic ObjectOrGroup,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_770_overlapsAt)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 771)		HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(ObjectOrGroup);
HXLINE( 772)		if (hx::IsNotNull( group )) {
HXLINE( 774)			return ::flixel::group::FlxTypedGroup_obj::overlaps(this->overlapsAtCallback_dyn(),group,X,Y,InScreenSpace,Camera);
            		}
HXLINE( 777)		if ((ObjectOrGroup->flixelType == (int)3)) {
HXLINE( 783)			HX_VARI(  ::flixel::tile::FlxBaseTilemap,tilemap) = ( ( ::flixel::tile::FlxBaseTilemap)(ObjectOrGroup) );
HXLINE( 784)			return tilemap->overlapsAt((tilemap->x - (X - this->x)),(tilemap->y - (Y - this->y)),hx::ObjectPtr<OBJ_>(this),InScreenSpace,Camera);
            		}
HXLINE( 787)		HX_VARI(  ::flixel::FlxObject,object) = ( ( ::flixel::FlxObject)(ObjectOrGroup) );
HXLINE( 788)		if (!(InScreenSpace)) {
HXLINE( 790)			bool _hx_tmp;
HXDLIN( 790)			bool _hx_tmp1;
HXDLIN( 790)			HX_VARI_NAME( Float,object1,"object") = object->x;
HXDLIN( 790)			if (((object1 + object->get_width()) > X)) {
HXLINE( 790)				HX_VARI_NAME( Float,object2,"object") = object->x;
HXDLIN( 790)				_hx_tmp1 = (object2 < (X + this->get_width()));
            			}
            			else {
HXLINE( 790)				_hx_tmp1 = false;
            			}
HXDLIN( 790)			if (_hx_tmp1) {
HXLINE( 791)				HX_VARI_NAME( Float,object3,"object") = object->y;
HXLINE( 790)				_hx_tmp = ((object3 + object->get_height()) > Y);
            			}
            			else {
HXLINE( 790)				_hx_tmp = false;
            			}
HXDLIN( 790)			if (_hx_tmp) {
HXLINE( 791)				HX_VARI_NAME( Float,object4,"object") = object->y;
HXLINE( 790)				return (object4 < (Y + this->get_height()));
            			}
            			else {
HXLINE( 790)				return false;
            			}
            		}
HXLINE( 794)		if (hx::IsNull( Camera )) {
HXLINE( 796)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 798)		HX_VARI(  ::flixel::math::FlxPoint,objectScreenPos) = object->getScreenPosition(null(),Camera);
HXLINE( 799)		this->getScreenPosition(this->_point,Camera);
HXLINE( 800)		bool _hx_tmp2;
HXDLIN( 800)		bool _hx_tmp3;
HXDLIN( 800)		HX_VARI_NAME( Float,objectScreenPos1,"objectScreenPos") = objectScreenPos->x;
HXDLIN( 800)		Float _hx_tmp4 = (objectScreenPos1 + object->get_width());
HXDLIN( 800)		if ((_hx_tmp4 > this->_point->x)) {
HXLINE( 800)			HX_VARI_NAME( Float,objectScreenPos2,"objectScreenPos") = objectScreenPos->x;
HXDLIN( 800)			Float _hx_tmp5 = this->_point->x;
HXDLIN( 800)			_hx_tmp3 = (objectScreenPos2 < (_hx_tmp5 + this->get_width()));
            		}
            		else {
HXLINE( 800)			_hx_tmp3 = false;
            		}
HXDLIN( 800)		if (_hx_tmp3) {
HXLINE( 801)			HX_VARI_NAME( Float,objectScreenPos3,"objectScreenPos") = objectScreenPos->y;
HXDLIN( 801)			Float _hx_tmp6 = (objectScreenPos3 + object->get_height());
HXLINE( 800)			_hx_tmp2 = (_hx_tmp6 > this->_point->y);
            		}
            		else {
HXLINE( 800)			_hx_tmp2 = false;
            		}
HXDLIN( 800)		if (_hx_tmp2) {
HXLINE( 801)			HX_VARI_NAME( Float,objectScreenPos4,"objectScreenPos") = objectScreenPos->y;
HXDLIN( 801)			Float _hx_tmp7 = this->_point->y;
HXLINE( 800)			return (objectScreenPos4 < (_hx_tmp7 + this->get_height()));
            		}
            		else {
HXLINE( 800)			return false;
            		}
HXDLIN( 800)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxObject_obj,overlapsAt,return )

bool FlxObject_obj::overlapsAtCallback( ::flixel::FlxBasic ObjectOrGroup,Float X,Float Y,bool InScreenSpace, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_807_overlapsAtCallback)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectOrGroup,"ObjectOrGroup")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 807)		return this->overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxObject_obj,overlapsAtCallback,return )

bool FlxObject_obj::overlapsPoint( ::flixel::math::FlxPoint point,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_819_overlapsPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 820)		if (!(InScreenSpace)) {
HXLINE( 822)			bool _hx_tmp;
HXDLIN( 822)			bool _hx_tmp1;
HXDLIN( 822)			if ((point->x >= this->x)) {
HXLINE( 822)				HX_VARI_NAME( Float,point1,"point") = point->x;
HXDLIN( 822)				Float _hx_tmp2 = this->x;
HXDLIN( 822)				_hx_tmp1 = (point1 < (_hx_tmp2 + this->get_width()));
            			}
            			else {
HXLINE( 822)				_hx_tmp1 = false;
            			}
HXDLIN( 822)			if (_hx_tmp1) {
HXLINE( 822)				_hx_tmp = (point->y >= this->y);
            			}
            			else {
HXLINE( 822)				_hx_tmp = false;
            			}
HXDLIN( 822)			if (_hx_tmp) {
HXLINE( 822)				HX_VARI_NAME( Float,point2,"point") = point->y;
HXDLIN( 822)				Float _hx_tmp3 = this->y;
HXDLIN( 822)				return (point2 < (_hx_tmp3 + this->get_height()));
            			}
            			else {
HXLINE( 822)				return false;
            			}
            		}
HXLINE( 825)		if (hx::IsNull( Camera )) {
HXLINE( 827)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 829)		HX_VARI( Float,xPos) = (point->x - Camera->scroll->x);
HXLINE( 830)		HX_VARI( Float,yPos) = (point->y - Camera->scroll->y);
HXLINE( 831)		this->getScreenPosition(this->_point,Camera);
HXLINE( 832)		if (point->_weak) {
HXLINE( 832)			point->put();
            		}
HXLINE( 833)		bool _hx_tmp4;
HXDLIN( 833)		bool _hx_tmp5;
HXDLIN( 833)		if ((xPos >= this->_point->x)) {
HXLINE( 833)			Float _hx_tmp6 = this->_point->x;
HXDLIN( 833)			_hx_tmp5 = (xPos < (_hx_tmp6 + this->get_width()));
            		}
            		else {
HXLINE( 833)			_hx_tmp5 = false;
            		}
HXDLIN( 833)		if (_hx_tmp5) {
HXLINE( 833)			_hx_tmp4 = (yPos >= this->_point->y);
            		}
            		else {
HXLINE( 833)			_hx_tmp4 = false;
            		}
HXDLIN( 833)		if (_hx_tmp4) {
HXLINE( 833)			Float _hx_tmp7 = this->_point->y;
HXDLIN( 833)			return (yPos < (_hx_tmp7 + this->get_height()));
            		}
            		else {
HXLINE( 833)			return false;
            		}
HXDLIN( 833)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,overlapsPoint,return )

bool FlxObject_obj::inWorldBounds(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_843_inWorldBounds)
            	HX_STACK_THIS(this)
HXLINE( 843)		bool _hx_tmp;
HXDLIN( 843)		bool _hx_tmp1;
HXDLIN( 843)		Float _hx_tmp2 = this->x;
HXDLIN( 843)		Float _hx_tmp3 = (_hx_tmp2 + this->get_width());
HXDLIN( 843)		if ((_hx_tmp3 > ::flixel::FlxG_obj::worldBounds->x)) {
HXLINE( 843)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 843)			_hx_tmp1 = (this->x < (_this->x + _this->width));
            		}
            		else {
HXLINE( 843)			_hx_tmp1 = false;
            		}
HXDLIN( 843)		if (_hx_tmp1) {
HXLINE( 843)			Float _hx_tmp4 = this->y;
HXDLIN( 843)			Float _hx_tmp5 = (_hx_tmp4 + this->get_height());
HXDLIN( 843)			_hx_tmp = (_hx_tmp5 > ::flixel::FlxG_obj::worldBounds->y);
            		}
            		else {
HXLINE( 843)			_hx_tmp = false;
            		}
HXDLIN( 843)		if (_hx_tmp) {
HXLINE( 843)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 843)			return (this->y < (_this1->y + _this1->height));
            		}
            		else {
HXLINE( 843)			return false;
            		}
HXDLIN( 843)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,inWorldBounds,return )

 ::flixel::math::FlxPoint FlxObject_obj::getScreenPosition( ::flixel::math::FlxPoint point, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_854_getScreenPosition)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 855)		if (hx::IsNull( point )) {
HXLINE( 857)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 857)			point1->_inPool = false;
HXDLIN( 857)			point = point1;
            		}
HXLINE( 859)		if (hx::IsNull( Camera )) {
HXLINE( 861)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 864)		point->set(this->x,this->y);
HXLINE( 865)		if (this->pixelPerfectPosition) {
HXLINE( 867)			point->set_x(::Math_obj::floor(point->x));
HXDLIN( 867)			point->set_y(::Math_obj::floor(point->y));
            		}
HXLINE( 870)		Float Y = (Camera->scroll->y * this->scrollFactor->y);
HXDLIN( 870)		{
HXLINE( 870)			HX_VARI(  ::flixel::math::FlxPoint,_g) = point;
HXDLIN( 870)			_g->set_x((_g->x - (Camera->scroll->x * this->scrollFactor->x)));
            		}
HXDLIN( 870)		{
HXLINE( 870)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = point;
HXDLIN( 870)			_g1->set_y((_g1->y - Y));
            		}
HXDLIN( 870)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,getScreenPosition,return )

 ::flixel::math::FlxPoint FlxObject_obj::getPosition( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_874_getPosition)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 875)		if (hx::IsNull( point )) {
HXLINE( 876)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 876)			point1->_inPool = false;
HXDLIN( 876)			point = point1;
            		}
HXLINE( 877)		return point->set(this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getPosition,return )

 ::flixel::math::FlxPoint FlxObject_obj::getMidpoint( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_887_getMidpoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 888)		if (hx::IsNull( point )) {
HXLINE( 890)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get().StaticCast<  ::flixel::math::FlxPoint >()->set((int)0,(int)0);
HXDLIN( 890)			point1->_inPool = false;
HXDLIN( 890)			point = point1;
            		}
HXLINE( 892)		Float _hx_tmp = this->x;
HXDLIN( 892)		Float _hx_tmp1 = (_hx_tmp + (this->get_width() * ((Float)0.5)));
HXDLIN( 892)		Float _hx_tmp2 = this->y;
HXDLIN( 892)		return point->set(_hx_tmp1,(_hx_tmp2 + (this->get_height() * ((Float)0.5))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getMidpoint,return )

 ::flixel::math::FlxRect FlxObject_obj::getHitbox( ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_896_getHitbox)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 897)		if (hx::IsNull( rect )) {
HXLINE( 898)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 898)			_this->x = (int)0;
HXDLIN( 898)			_this->y = (int)0;
HXDLIN( 898)			_this->width = (int)0;
HXDLIN( 898)			_this->height = (int)0;
HXDLIN( 898)			_this->_inPool = false;
HXDLIN( 898)			rect = _this;
            		}
HXLINE( 899)		Float X = this->x;
HXDLIN( 899)		Float Y = this->y;
HXDLIN( 899)		Float Width = this->get_width();
HXDLIN( 899)		Float Height = this->get_height();
HXDLIN( 899)		rect->x = X;
HXDLIN( 899)		rect->y = Y;
HXDLIN( 899)		rect->width = Width;
HXDLIN( 899)		rect->height = Height;
HXDLIN( 899)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getHitbox,return )

void FlxObject_obj::reset(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_910_reset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 911)		this->touching = (int)0;
HXLINE( 912)		this->wasTouching = (int)0;
HXLINE( 913)		this->setPosition(X,Y);
HXLINE( 914)		this->last->set(this->x,this->y);
HXLINE( 915)		this->velocity->set(null(),null());
HXLINE( 916)		this->revive();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,reset,(void))

bool FlxObject_obj::isOnScreen( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_926_isOnScreen)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 927)		if (hx::IsNull( Camera )) {
HXLINE( 929)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 931)		this->getScreenPosition(this->_point,Camera);
HXLINE( 932)		bool _hx_tmp;
HXDLIN( 932)		bool _hx_tmp1;
HXDLIN( 932)		Float _hx_tmp2 = this->_point->x;
HXDLIN( 932)		if (((_hx_tmp2 + this->get_width()) > (int)0)) {
HXLINE( 932)			_hx_tmp1 = (this->_point->x < Camera->width);
            		}
            		else {
HXLINE( 932)			_hx_tmp1 = false;
            		}
HXDLIN( 932)		if (_hx_tmp1) {
HXLINE( 932)			Float _hx_tmp3 = this->_point->y;
HXDLIN( 932)			_hx_tmp = ((_hx_tmp3 + this->get_height()) > (int)0);
            		}
            		else {
HXLINE( 932)			_hx_tmp = false;
            		}
HXDLIN( 932)		if (_hx_tmp) {
HXLINE( 932)			return (this->_point->y < Camera->height);
            		}
            		else {
HXLINE( 932)			return false;
            		}
HXDLIN( 932)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,isOnScreen,return )

bool FlxObject_obj::isPixelPerfectRender( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_939_isPixelPerfectRender)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 940)		if (hx::IsNull( Camera )) {
HXLINE( 942)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 945)		if (hx::IsNull( this->pixelPerfectRender )) {
HXLINE( 945)			return Camera->pixelPerfectRender;
            		}
            		else {
HXLINE( 945)			return this->pixelPerfectRender;
            		}
HXDLIN( 945)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,isPixelPerfectRender,return )

bool FlxObject_obj::isTouching(int Direction){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_957_isTouching)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Direction,"Direction")
HXLINE( 957)		return (((int)this->touching & (int)Direction) > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,isTouching,return )

bool FlxObject_obj::justTouched(int Direction){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_969_justTouched)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Direction,"Direction")
HXLINE( 969)		if ((((int)this->touching & (int)Direction) > (int)0)) {
HXLINE( 969)			return (((int)this->wasTouching & (int)Direction) <= (int)0);
            		}
            		else {
HXLINE( 969)			return false;
            		}
HXDLIN( 969)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,justTouched,return )

void FlxObject_obj::hurt(Float Damage){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_979_hurt)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Damage,"Damage")
HXLINE( 980)		this->health = (this->health - Damage);
HXLINE( 981)		if ((this->health <= (int)0)) {
HXLINE( 983)			this->kill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,hurt,(void))

 ::flixel::FlxObject FlxObject_obj::screenCenter( ::flixel::util::FlxAxes axes){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_994_screenCenter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(axes,"axes")
HXLINE( 995)		if (hx::IsNull( axes )) {
HXLINE( 996)			axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            		}
HXLINE( 998)		if (hx::IsNotEq( axes,::flixel::util::FlxAxes_obj::Y_dyn() )) {
HXLINE( 999)			Float _hx_tmp = ((Float)::flixel::FlxG_obj::width / (Float)(int)2);
HXDLIN( 999)			this->set_x((_hx_tmp - ((Float)this->get_width() / (Float)(int)2)));
            		}
HXLINE(1000)		if (hx::IsNotEq( axes,::flixel::util::FlxAxes_obj::X_dyn() )) {
HXLINE(1001)			Float _hx_tmp1 = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN(1001)			this->set_y((_hx_tmp1 - ((Float)this->get_height() / (Float)(int)2)));
            		}
HXLINE(1003)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,screenCenter,return )

void FlxObject_obj::setPosition(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1014_setPosition)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(1015)		this->set_x(X);
HXLINE(1016)		this->set_y(Y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,setPosition,(void))

void FlxObject_obj::setSize(Float Width,Float Height){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1026_setSize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE(1027)		this->set_width(Width);
HXLINE(1028)		this->set_height(Height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,setSize,(void))

 ::flixel::math::FlxRect FlxObject_obj::getBoundingBox( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1111_getBoundingBox)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(camera,"camera")
HXLINE(1112)		this->getScreenPosition(this->_point,camera);
HXLINE(1113)		{
HXLINE(1113)			HX_VARI(  ::flixel::math::FlxRect,_this) = this->_rect;
HXDLIN(1113)			Float X = this->_point->x;
HXDLIN(1113)			Float Y = this->_point->y;
HXDLIN(1113)			Float Width = this->get_width();
HXDLIN(1113)			Float Height = this->get_height();
HXDLIN(1113)			_this->x = X;
HXDLIN(1113)			_this->y = Y;
HXDLIN(1113)			_this->width = Width;
HXDLIN(1113)			_this->height = Height;
            		}
HXLINE(1115)		if (this->isPixelPerfectRender(camera)) {
HXLINE(1117)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->_rect;
HXDLIN(1117)			_this1->x = ::Math_obj::floor(_this1->x);
HXDLIN(1117)			_this1->y = ::Math_obj::floor(_this1->y);
HXDLIN(1117)			_this1->width = ::Math_obj::floor(_this1->width);
HXDLIN(1117)			_this1->height = ::Math_obj::floor(_this1->height);
            		}
HXLINE(1120)		return this->_rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getBoundingBox,return )

::String FlxObject_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1128_toString)
            	HX_STACK_THIS(this)
HXLINE(1129)		 ::Dynamic value = this->x;
HXDLIN(1129)		HX_VARI(  ::flixel::util::LabelValuePair,_this) = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1129)		_this->label = HX_("x",78,00,00,00);
HXDLIN(1129)		_this->value = value;
HXLINE(1130)		 ::Dynamic value1 = this->y;
HXDLIN(1130)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this1,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1130)		_this1->label = HX_("y",79,00,00,00);
HXDLIN(1130)		_this1->value = value1;
HXLINE(1131)		 ::Dynamic value2 = this->get_width();
HXDLIN(1131)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this2,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1131)		_this2->label = HX_("w",77,00,00,00);
HXDLIN(1131)		_this2->value = value2;
HXLINE(1132)		 ::Dynamic value3 = this->get_height();
HXDLIN(1132)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this3,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1132)		_this3->label = HX_("h",68,00,00,00);
HXDLIN(1132)		_this3->value = value3;
HXLINE(1133)		 ::Dynamic value4 = this->visible;
HXDLIN(1133)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this4,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1133)		_this4->label = HX_("visible",72,78,24,a3);
HXDLIN(1133)		_this4->value = value4;
HXLINE(1134)		 ::Dynamic value5 = this->velocity;
HXDLIN(1134)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this5,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1134)		_this5->label = HX_("velocity",1d,02,fe,1e);
HXDLIN(1134)		_this5->value = value5;
HXLINE(1128)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(6)->init(0,_this)->init(1,_this1)->init(2,_this2)->init(3,_this3)->init(4,_this4)->init(5,_this5));
            	}


Float FlxObject_obj::set_x(Float NewX){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1140_set_x)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(NewX,"NewX")
HXLINE(1140)		return (this->x = NewX);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_x,return )

Float FlxObject_obj::set_y(Float NewY){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1146_set_y)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(NewY,"NewY")
HXLINE(1146)		return (this->y = NewY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_y,return )

Float FlxObject_obj::set_width(Float Width){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1160_set_width)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
HXLINE(1160)		return (this->width = Width);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_width,return )

Float FlxObject_obj::set_height(Float Height){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1174_set_height)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Height,"Height")
HXLINE(1174)		return (this->height = Height);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_height,return )

Float FlxObject_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1180_get_width)
            	HX_STACK_THIS(this)
HXLINE(1180)		return this->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,get_width,return )

Float FlxObject_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1186_get_height)
            	HX_STACK_THIS(this)
HXLINE(1186)		return this->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,get_height,return )

bool FlxObject_obj::get_solid(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1192_get_solid)
            	HX_STACK_THIS(this)
HXLINE(1192)		return (((int)this->allowCollisions & (int)(int)4369) > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,get_solid,return )

bool FlxObject_obj::set_solid(bool Solid){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1197_set_solid)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Solid,"Solid")
HXLINE(1198)		int _hx_tmp;
HXDLIN(1198)		if (Solid) {
HXLINE(1198)			_hx_tmp = (int)4369;
            		}
            		else {
HXLINE(1198)			_hx_tmp = (int)0;
            		}
HXDLIN(1198)		this->set_allowCollisions(_hx_tmp);
HXLINE(1199)		return Solid;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_solid,return )

Float FlxObject_obj::set_angle(Float Value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1205_set_angle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1205)		return (this->angle = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_angle,return )

bool FlxObject_obj::set_moves(bool Value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1211_set_moves)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1211)		return (this->moves = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_moves,return )

bool FlxObject_obj::set_immovable(bool Value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1217_set_immovable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1217)		return (this->immovable = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_immovable,return )

bool FlxObject_obj::set_pixelPerfectRender(bool Value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1223_set_pixelPerfectRender)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1223)		return (this->pixelPerfectRender = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_pixelPerfectRender,return )

int FlxObject_obj::set_allowCollisions(int Value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1229_set_allowCollisions)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1229)		return (this->allowCollisions = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_allowCollisions,return )

 ::flixel::util::FlxPath FlxObject_obj::set_path( ::flixel::util::FlxPath path){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1251_set_path)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(path,"path")
HXLINE(1252)		if (hx::IsEq( this->path,path )) {
HXLINE(1253)			return path;
            		}
HXLINE(1255)		if (hx::IsNotNull( this->path )) {
HXLINE(1256)			this->path->object = null();
            		}
HXLINE(1258)		if (hx::IsNotNull( path )) {
HXLINE(1259)			path->object = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1260)		return (this->path = path);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_path,return )

bool FlxObject_obj::defaultPixelPerfectPosition;

Float FlxObject_obj::SEPARATE_BIAS;

int FlxObject_obj::LEFT;

int FlxObject_obj::RIGHT;

int FlxObject_obj::UP;

int FlxObject_obj::DOWN;

int FlxObject_obj::NONE;

int FlxObject_obj::CEILING;

int FlxObject_obj::FLOOR;

int FlxObject_obj::WALL;

int FlxObject_obj::ANY;

 ::flixel::math::FlxRect FlxObject_obj::_firstSeparateFlxRect;

 ::flixel::math::FlxRect FlxObject_obj::_secondSeparateFlxRect;

bool FlxObject_obj::separate( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_82_separate)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE(  83)		HX_VARI( bool,separatedX) = ::flixel::FlxObject_obj::separateX(Object1,Object2);
HXLINE(  84)		HX_VARI( bool,separatedY) = ::flixel::FlxObject_obj::separateY(Object1,Object2);
HXLINE(  85)		if (!(separatedX)) {
HXLINE(  85)			return separatedY;
            		}
            		else {
HXLINE(  85)			return true;
            		}
HXDLIN(  85)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separate,return )

bool FlxObject_obj::updateTouchingFlags( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_97_updateTouchingFlags)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE(  98)		HX_VARI( bool,touchingX) = ::flixel::FlxObject_obj::updateTouchingFlagsX(Object1,Object2);
HXLINE(  99)		HX_VARI( bool,touchingY) = ::flixel::FlxObject_obj::updateTouchingFlagsY(Object1,Object2);
HXLINE( 100)		if (!(touchingX)) {
HXLINE( 100)			return touchingY;
            		}
            		else {
HXLINE( 100)			return true;
            		}
HXDLIN( 100)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlags,return )

Float FlxObject_obj::computeOverlapX( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2,hx::Null< bool >  __o_checkMaxOverlap){
bool checkMaxOverlap = __o_checkMaxOverlap.Default(true);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_110_computeOverlapX)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
            	HX_STACK_ARG(checkMaxOverlap,"checkMaxOverlap")
HXLINE( 111)		HX_VARI( Float,overlap) = (int)0;
HXLINE( 113)		HX_VARI( Float,obj1delta) = (Object1->x - Object1->last->x);
HXLINE( 114)		HX_VARI( Float,obj2delta) = (Object2->x - Object2->last->x);
HXLINE( 116)		if ((obj1delta != obj2delta)) {
HXLINE( 119)			HX_VAR( Float,obj1deltaAbs);
HXDLIN( 119)			if ((obj1delta > (int)0)) {
HXLINE( 119)				obj1deltaAbs = obj1delta;
            			}
            			else {
HXLINE( 119)				obj1deltaAbs = -(obj1delta);
            			}
HXLINE( 120)			HX_VAR( Float,obj2deltaAbs);
HXDLIN( 120)			if ((obj2delta > (int)0)) {
HXLINE( 120)				obj2deltaAbs = obj2delta;
            			}
            			else {
HXLINE( 120)				obj2deltaAbs = -(obj2delta);
            			}
HXLINE( 122)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::FlxObject_obj::_firstSeparateFlxRect;
HXDLIN( 122)			Float X;
HXDLIN( 122)			if ((obj1delta > (int)0)) {
HXLINE( 122)				X = obj1delta;
            			}
            			else {
HXLINE( 122)				X = (int)0;
            			}
HXDLIN( 122)			Float X1 = (Object1->x - X);
HXDLIN( 122)			Float Y = Object1->last->y;
HXDLIN( 122)			Float Width = (Object1->get_width() + obj1deltaAbs);
HXDLIN( 122)			Float Height = Object1->get_height();
HXDLIN( 122)			_this->x = X1;
HXDLIN( 122)			_this->y = Y;
HXDLIN( 122)			_this->width = Width;
HXDLIN( 122)			_this->height = Height;
HXLINE( 123)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::FlxObject_obj::_secondSeparateFlxRect;
HXDLIN( 123)			Float X2;
HXDLIN( 123)			if ((obj2delta > (int)0)) {
HXLINE( 123)				X2 = obj2delta;
            			}
            			else {
HXLINE( 123)				X2 = (int)0;
            			}
HXDLIN( 123)			Float X3 = (Object2->x - X2);
HXDLIN( 123)			Float Y1 = Object2->last->y;
HXDLIN( 123)			Float Width1 = (Object2->get_width() + obj2deltaAbs);
HXDLIN( 123)			Float Height1 = Object2->get_height();
HXDLIN( 123)			_this1->x = X3;
HXDLIN( 123)			_this1->y = Y1;
HXDLIN( 123)			_this1->width = Width1;
HXDLIN( 123)			_this1->height = Height1;
HXLINE( 125)			bool _hx_tmp;
HXDLIN( 125)			bool _hx_tmp1;
HXDLIN( 125)			bool _hx_tmp2;
HXDLIN( 125)			if (((_this->x + _this->width) > _this1->x)) {
HXLINE( 125)				_hx_tmp2 = (_this->x < (_this1->x + _this1->width));
            			}
            			else {
HXLINE( 125)				_hx_tmp2 = false;
            			}
HXDLIN( 125)			if (_hx_tmp2) {
HXLINE( 125)				_hx_tmp1 = ((_this->y + _this->height) > _this1->y);
            			}
            			else {
HXLINE( 125)				_hx_tmp1 = false;
            			}
HXDLIN( 125)			if (_hx_tmp1) {
HXLINE( 125)				_hx_tmp = (_this->y < (_this1->y + _this1->height));
            			}
            			else {
HXLINE( 125)				_hx_tmp = false;
            			}
HXDLIN( 125)			if (_hx_tmp) {
HXLINE( 127)				HX_VAR( Float,maxOverlap);
HXDLIN( 127)				if (checkMaxOverlap) {
HXLINE( 127)					maxOverlap = ((obj1deltaAbs + obj2deltaAbs) + ::flixel::FlxObject_obj::SEPARATE_BIAS);
            				}
            				else {
HXLINE( 127)					maxOverlap = (int)0;
            				}
HXLINE( 130)				if ((obj1delta > obj2delta)) {
HXLINE( 132)					HX_VARI_NAME( Float,Object11,"Object1") = Object1->x;
HXDLIN( 132)					Float overlap1 = (Object11 + Object1->get_width());
HXDLIN( 132)					overlap = (overlap1 - Object2->x);
HXLINE( 133)					bool _hx_tmp3;
HXDLIN( 133)					bool _hx_tmp4;
HXDLIN( 133)					bool _hx_tmp5;
HXDLIN( 133)					if (checkMaxOverlap) {
HXLINE( 133)						_hx_tmp5 = (overlap > maxOverlap);
            					}
            					else {
HXLINE( 133)						_hx_tmp5 = false;
            					}
HXDLIN( 133)					if (!(_hx_tmp5)) {
HXLINE( 133)						_hx_tmp4 = (((int)Object1->allowCollisions & (int)(int)16) == (int)0);
            					}
            					else {
HXLINE( 133)						_hx_tmp4 = true;
            					}
HXDLIN( 133)					if (!(_hx_tmp4)) {
HXLINE( 133)						_hx_tmp3 = (((int)Object2->allowCollisions & (int)(int)1) == (int)0);
            					}
            					else {
HXLINE( 133)						_hx_tmp3 = true;
            					}
HXDLIN( 133)					if (_hx_tmp3) {
HXLINE( 135)						overlap = (int)0;
            					}
            					else {
HXLINE( 139)						Object1->touching = ((int)Object1->touching | (int)(int)16);
HXLINE( 140)						Object2->touching = ((int)Object2->touching | (int)(int)1);
            					}
            				}
            				else {
HXLINE( 143)					if ((obj1delta < obj2delta)) {
HXLINE( 145)						HX_VARI_NAME( Float,Object12,"Object1") = Object1->x;
HXDLIN( 145)						Float overlap2 = (Object12 - Object2->get_width());
HXDLIN( 145)						overlap = (overlap2 - Object2->x);
HXLINE( 146)						bool _hx_tmp6;
HXDLIN( 146)						bool _hx_tmp7;
HXDLIN( 146)						bool _hx_tmp8;
HXDLIN( 146)						if (checkMaxOverlap) {
HXLINE( 146)							_hx_tmp8 = (-(overlap) > maxOverlap);
            						}
            						else {
HXLINE( 146)							_hx_tmp8 = false;
            						}
HXDLIN( 146)						if (!(_hx_tmp8)) {
HXLINE( 146)							_hx_tmp7 = (((int)Object1->allowCollisions & (int)(int)1) == (int)0);
            						}
            						else {
HXLINE( 146)							_hx_tmp7 = true;
            						}
HXDLIN( 146)						if (!(_hx_tmp7)) {
HXLINE( 146)							_hx_tmp6 = (((int)Object2->allowCollisions & (int)(int)16) == (int)0);
            						}
            						else {
HXLINE( 146)							_hx_tmp6 = true;
            						}
HXDLIN( 146)						if (_hx_tmp6) {
HXLINE( 148)							overlap = (int)0;
            						}
            						else {
HXLINE( 152)							Object1->touching = ((int)Object1->touching | (int)(int)1);
HXLINE( 153)							Object2->touching = ((int)Object2->touching | (int)(int)16);
            						}
            					}
            				}
            			}
            		}
HXLINE( 158)		return overlap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,computeOverlapX,return )

bool FlxObject_obj::separateX( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_169_separateX)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE( 171)		HX_VARI( bool,obj1immovable) = Object1->immovable;
HXLINE( 172)		HX_VARI( bool,obj2immovable) = Object2->immovable;
HXLINE( 173)		bool _hx_tmp;
HXDLIN( 173)		if (obj1immovable) {
HXLINE( 173)			_hx_tmp = obj2immovable;
            		}
            		else {
HXLINE( 173)			_hx_tmp = false;
            		}
HXDLIN( 173)		if (_hx_tmp) {
HXLINE( 175)			return false;
            		}
HXLINE( 179)		if ((Object1->flixelType == (int)3)) {
HXLINE( 182)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object1) )->overlapsWithCallback(Object2,::flixel::FlxObject_obj::separateX_dyn(),null(),null());
            		}
HXLINE( 184)		if ((Object2->flixelType == (int)3)) {
HXLINE( 187)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object2) )->overlapsWithCallback(Object1,::flixel::FlxObject_obj::separateX_dyn(),true,null());
            		}
HXLINE( 190)		HX_VARI( Float,overlap) = ::flixel::FlxObject_obj::computeOverlapX(Object1,Object2,null());
HXLINE( 192)		if ((overlap != (int)0)) {
HXLINE( 194)			HX_VARI( Float,obj1v) = Object1->velocity->x;
HXLINE( 195)			HX_VARI( Float,obj2v) = Object2->velocity->x;
HXLINE( 197)			bool _hx_tmp1;
HXDLIN( 197)			if (!(obj1immovable)) {
HXLINE( 197)				_hx_tmp1 = !(obj2immovable);
            			}
            			else {
HXLINE( 197)				_hx_tmp1 = false;
            			}
HXDLIN( 197)			if (_hx_tmp1) {
HXLINE( 199)				overlap = (overlap * ((Float)0.5));
HXLINE( 200)				Object1->set_x((Object1->x - overlap));
HXLINE( 201)				Object2->set_x((Object2->x + overlap));
HXLINE( 203)				int obj1velocity;
HXDLIN( 203)				if ((obj2v > (int)0)) {
HXLINE( 203)					obj1velocity = (int)1;
            				}
            				else {
HXLINE( 203)					obj1velocity = (int)-1;
            				}
HXDLIN( 203)				HX_VARI_NAME( Float,obj1velocity1,"obj1velocity") = (::Math_obj::sqrt(((Float)((obj2v * obj2v) * Object2->mass) / (Float)Object1->mass)) * obj1velocity);
HXLINE( 204)				int obj2velocity;
HXDLIN( 204)				if ((obj1v > (int)0)) {
HXLINE( 204)					obj2velocity = (int)1;
            				}
            				else {
HXLINE( 204)					obj2velocity = (int)-1;
            				}
HXDLIN( 204)				HX_VARI_NAME( Float,obj2velocity1,"obj2velocity") = (::Math_obj::sqrt(((Float)((obj1v * obj1v) * Object1->mass) / (Float)Object2->mass)) * obj2velocity);
HXLINE( 205)				HX_VARI( Float,average) = ((obj1velocity1 + obj2velocity1) * ((Float)0.5));
HXLINE( 206)				obj1velocity1 = (obj1velocity1 - average);
HXLINE( 207)				obj2velocity1 = (obj2velocity1 - average);
HXLINE( 208)				Object1->velocity->set_x((average + (obj1velocity1 * Object1->elasticity)));
HXLINE( 209)				Object2->velocity->set_x((average + (obj2velocity1 * Object2->elasticity)));
            			}
            			else {
HXLINE( 211)				if (!(obj1immovable)) {
HXLINE( 213)					Object1->set_x((Object1->x - overlap));
HXLINE( 214)					Object1->velocity->set_x((obj2v - (obj1v * Object1->elasticity)));
            				}
            				else {
HXLINE( 216)					if (!(obj2immovable)) {
HXLINE( 218)						Object2->set_x((Object2->x + overlap));
HXLINE( 219)						Object2->velocity->set_x((obj1v - (obj2v * Object2->elasticity)));
            					}
            				}
            			}
HXLINE( 221)			return true;
            		}
HXLINE( 224)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separateX,return )

bool FlxObject_obj::updateTouchingFlagsX( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_235_updateTouchingFlagsX)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE( 237)		if ((Object1->flixelType == (int)3)) {
HXLINE( 240)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object1) )->overlapsWithCallback(Object2,::flixel::FlxObject_obj::updateTouchingFlagsX_dyn(),null(),null());
            		}
HXLINE( 242)		if ((Object2->flixelType == (int)3)) {
HXLINE( 245)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object2) )->overlapsWithCallback(Object1,::flixel::FlxObject_obj::updateTouchingFlagsX_dyn(),true,null());
            		}
HXLINE( 248)		return (::flixel::FlxObject_obj::computeOverlapX(Object1,Object2,false) != (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlagsX,return )

Float FlxObject_obj::computeOverlapY( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2,hx::Null< bool >  __o_checkMaxOverlap){
bool checkMaxOverlap = __o_checkMaxOverlap.Default(true);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_258_computeOverlapY)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
            	HX_STACK_ARG(checkMaxOverlap,"checkMaxOverlap")
HXLINE( 259)		HX_VARI( Float,overlap) = (int)0;
HXLINE( 261)		HX_VARI( Float,obj1delta) = (Object1->y - Object1->last->y);
HXLINE( 262)		HX_VARI( Float,obj2delta) = (Object2->y - Object2->last->y);
HXLINE( 264)		if ((obj1delta != obj2delta)) {
HXLINE( 267)			HX_VAR( Float,obj1deltaAbs);
HXDLIN( 267)			if ((obj1delta > (int)0)) {
HXLINE( 267)				obj1deltaAbs = obj1delta;
            			}
            			else {
HXLINE( 267)				obj1deltaAbs = -(obj1delta);
            			}
HXLINE( 268)			HX_VAR( Float,obj2deltaAbs);
HXDLIN( 268)			if ((obj2delta > (int)0)) {
HXLINE( 268)				obj2deltaAbs = obj2delta;
            			}
            			else {
HXLINE( 268)				obj2deltaAbs = -(obj2delta);
            			}
HXLINE( 270)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::FlxObject_obj::_firstSeparateFlxRect;
HXDLIN( 270)			Float X = Object1->x;
HXDLIN( 270)			Float Y;
HXDLIN( 270)			if ((obj1delta > (int)0)) {
HXLINE( 270)				Y = obj1delta;
            			}
            			else {
HXLINE( 270)				Y = (int)0;
            			}
HXDLIN( 270)			Float Y1 = (Object1->y - Y);
HXDLIN( 270)			Float Width = Object1->get_width();
HXDLIN( 270)			Float Height = (Object1->get_height() + obj1deltaAbs);
HXDLIN( 270)			_this->x = X;
HXDLIN( 270)			_this->y = Y1;
HXDLIN( 270)			_this->width = Width;
HXDLIN( 270)			_this->height = Height;
HXLINE( 271)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::FlxObject_obj::_secondSeparateFlxRect;
HXDLIN( 271)			Float X1 = Object2->x;
HXDLIN( 271)			Float Y2;
HXDLIN( 271)			if ((obj2delta > (int)0)) {
HXLINE( 271)				Y2 = obj2delta;
            			}
            			else {
HXLINE( 271)				Y2 = (int)0;
            			}
HXDLIN( 271)			Float Y3 = (Object2->y - Y2);
HXDLIN( 271)			Float Width1 = Object2->get_width();
HXDLIN( 271)			Float Height1 = (Object2->get_height() + obj2deltaAbs);
HXDLIN( 271)			_this1->x = X1;
HXDLIN( 271)			_this1->y = Y3;
HXDLIN( 271)			_this1->width = Width1;
HXDLIN( 271)			_this1->height = Height1;
HXLINE( 273)			bool _hx_tmp;
HXDLIN( 273)			bool _hx_tmp1;
HXDLIN( 273)			bool _hx_tmp2;
HXDLIN( 273)			if (((_this->x + _this->width) > _this1->x)) {
HXLINE( 273)				_hx_tmp2 = (_this->x < (_this1->x + _this1->width));
            			}
            			else {
HXLINE( 273)				_hx_tmp2 = false;
            			}
HXDLIN( 273)			if (_hx_tmp2) {
HXLINE( 273)				_hx_tmp1 = ((_this->y + _this->height) > _this1->y);
            			}
            			else {
HXLINE( 273)				_hx_tmp1 = false;
            			}
HXDLIN( 273)			if (_hx_tmp1) {
HXLINE( 273)				_hx_tmp = (_this->y < (_this1->y + _this1->height));
            			}
            			else {
HXLINE( 273)				_hx_tmp = false;
            			}
HXDLIN( 273)			if (_hx_tmp) {
HXLINE( 275)				HX_VAR( Float,maxOverlap);
HXDLIN( 275)				if (checkMaxOverlap) {
HXLINE( 275)					maxOverlap = ((obj1deltaAbs + obj2deltaAbs) + ::flixel::FlxObject_obj::SEPARATE_BIAS);
            				}
            				else {
HXLINE( 275)					maxOverlap = (int)0;
            				}
HXLINE( 278)				if ((obj1delta > obj2delta)) {
HXLINE( 280)					HX_VARI_NAME( Float,Object11,"Object1") = Object1->y;
HXDLIN( 280)					Float overlap1 = (Object11 + Object1->get_height());
HXDLIN( 280)					overlap = (overlap1 - Object2->y);
HXLINE( 281)					bool _hx_tmp3;
HXDLIN( 281)					bool _hx_tmp4;
HXDLIN( 281)					bool _hx_tmp5;
HXDLIN( 281)					if (checkMaxOverlap) {
HXLINE( 281)						_hx_tmp5 = (overlap > maxOverlap);
            					}
            					else {
HXLINE( 281)						_hx_tmp5 = false;
            					}
HXDLIN( 281)					if (!(_hx_tmp5)) {
HXLINE( 281)						_hx_tmp4 = (((int)Object1->allowCollisions & (int)(int)4096) == (int)0);
            					}
            					else {
HXLINE( 281)						_hx_tmp4 = true;
            					}
HXDLIN( 281)					if (!(_hx_tmp4)) {
HXLINE( 281)						_hx_tmp3 = (((int)Object2->allowCollisions & (int)(int)256) == (int)0);
            					}
            					else {
HXLINE( 281)						_hx_tmp3 = true;
            					}
HXDLIN( 281)					if (_hx_tmp3) {
HXLINE( 283)						overlap = (int)0;
            					}
            					else {
HXLINE( 287)						Object1->touching = ((int)Object1->touching | (int)(int)4096);
HXLINE( 288)						Object2->touching = ((int)Object2->touching | (int)(int)256);
            					}
            				}
            				else {
HXLINE( 291)					if ((obj1delta < obj2delta)) {
HXLINE( 293)						HX_VARI_NAME( Float,Object12,"Object1") = Object1->y;
HXDLIN( 293)						Float overlap2 = (Object12 - Object2->get_height());
HXDLIN( 293)						overlap = (overlap2 - Object2->y);
HXLINE( 294)						bool _hx_tmp6;
HXDLIN( 294)						bool _hx_tmp7;
HXDLIN( 294)						bool _hx_tmp8;
HXDLIN( 294)						if (checkMaxOverlap) {
HXLINE( 294)							_hx_tmp8 = (-(overlap) > maxOverlap);
            						}
            						else {
HXLINE( 294)							_hx_tmp8 = false;
            						}
HXDLIN( 294)						if (!(_hx_tmp8)) {
HXLINE( 294)							_hx_tmp7 = (((int)Object1->allowCollisions & (int)(int)256) == (int)0);
            						}
            						else {
HXLINE( 294)							_hx_tmp7 = true;
            						}
HXDLIN( 294)						if (!(_hx_tmp7)) {
HXLINE( 294)							_hx_tmp6 = (((int)Object2->allowCollisions & (int)(int)4096) == (int)0);
            						}
            						else {
HXLINE( 294)							_hx_tmp6 = true;
            						}
HXDLIN( 294)						if (_hx_tmp6) {
HXLINE( 296)							overlap = (int)0;
            						}
            						else {
HXLINE( 300)							Object1->touching = ((int)Object1->touching | (int)(int)256);
HXLINE( 301)							Object2->touching = ((int)Object2->touching | (int)(int)4096);
            						}
            					}
            				}
            			}
            		}
HXLINE( 306)		return overlap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,computeOverlapY,return )

bool FlxObject_obj::separateY( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_317_separateY)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE( 319)		HX_VARI( bool,obj1immovable) = Object1->immovable;
HXLINE( 320)		HX_VARI( bool,obj2immovable) = Object2->immovable;
HXLINE( 321)		bool _hx_tmp;
HXDLIN( 321)		if (obj1immovable) {
HXLINE( 321)			_hx_tmp = obj2immovable;
            		}
            		else {
HXLINE( 321)			_hx_tmp = false;
            		}
HXDLIN( 321)		if (_hx_tmp) {
HXLINE( 323)			return false;
            		}
HXLINE( 327)		if ((Object1->flixelType == (int)3)) {
HXLINE( 330)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object1) )->overlapsWithCallback(Object2,::flixel::FlxObject_obj::separateY_dyn(),null(),null());
            		}
HXLINE( 332)		if ((Object2->flixelType == (int)3)) {
HXLINE( 335)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object2) )->overlapsWithCallback(Object1,::flixel::FlxObject_obj::separateY_dyn(),true,null());
            		}
HXLINE( 338)		HX_VARI( Float,overlap) = ::flixel::FlxObject_obj::computeOverlapY(Object1,Object2,null());
HXLINE( 340)		if ((overlap != (int)0)) {
HXLINE( 342)			HX_VARI( Float,obj1delta) = (Object1->y - Object1->last->y);
HXLINE( 343)			HX_VARI( Float,obj2delta) = (Object2->y - Object2->last->y);
HXLINE( 344)			HX_VARI( Float,obj1v) = Object1->velocity->y;
HXLINE( 345)			HX_VARI( Float,obj2v) = Object2->velocity->y;
HXLINE( 347)			bool _hx_tmp1;
HXDLIN( 347)			if (!(obj1immovable)) {
HXLINE( 347)				_hx_tmp1 = !(obj2immovable);
            			}
            			else {
HXLINE( 347)				_hx_tmp1 = false;
            			}
HXDLIN( 347)			if (_hx_tmp1) {
HXLINE( 349)				overlap = (overlap * ((Float)0.5));
HXLINE( 350)				Object1->set_y((Object1->y - overlap));
HXLINE( 351)				Object2->set_y((Object2->y + overlap));
HXLINE( 353)				int obj1velocity;
HXDLIN( 353)				if ((obj2v > (int)0)) {
HXLINE( 353)					obj1velocity = (int)1;
            				}
            				else {
HXLINE( 353)					obj1velocity = (int)-1;
            				}
HXDLIN( 353)				HX_VARI_NAME( Float,obj1velocity1,"obj1velocity") = (::Math_obj::sqrt(((Float)((obj2v * obj2v) * Object2->mass) / (Float)Object1->mass)) * obj1velocity);
HXLINE( 354)				int obj2velocity;
HXDLIN( 354)				if ((obj1v > (int)0)) {
HXLINE( 354)					obj2velocity = (int)1;
            				}
            				else {
HXLINE( 354)					obj2velocity = (int)-1;
            				}
HXDLIN( 354)				HX_VARI_NAME( Float,obj2velocity1,"obj2velocity") = (::Math_obj::sqrt(((Float)((obj1v * obj1v) * Object1->mass) / (Float)Object2->mass)) * obj2velocity);
HXLINE( 355)				HX_VARI( Float,average) = ((obj1velocity1 + obj2velocity1) * ((Float)0.5));
HXLINE( 356)				obj1velocity1 = (obj1velocity1 - average);
HXLINE( 357)				obj2velocity1 = (obj2velocity1 - average);
HXLINE( 358)				Object1->velocity->set_y((average + (obj1velocity1 * Object1->elasticity)));
HXLINE( 359)				Object2->velocity->set_y((average + (obj2velocity1 * Object2->elasticity)));
            			}
            			else {
HXLINE( 361)				if (!(obj1immovable)) {
HXLINE( 363)					Object1->set_y((Object1->y - overlap));
HXLINE( 364)					Object1->velocity->set_y((obj2v - (obj1v * Object1->elasticity)));
HXLINE( 366)					bool _hx_tmp2;
HXDLIN( 366)					bool _hx_tmp3;
HXDLIN( 366)					bool _hx_tmp4;
HXDLIN( 366)					if (Object1->collisonXDrag) {
HXLINE( 366)						_hx_tmp4 = Object2->active;
            					}
            					else {
HXLINE( 366)						_hx_tmp4 = false;
            					}
HXDLIN( 366)					if (_hx_tmp4) {
HXLINE( 366)						_hx_tmp3 = Object2->moves;
            					}
            					else {
HXLINE( 366)						_hx_tmp3 = false;
            					}
HXDLIN( 366)					if (_hx_tmp3) {
HXLINE( 366)						_hx_tmp2 = (obj1delta > obj2delta);
            					}
            					else {
HXLINE( 366)						_hx_tmp2 = false;
            					}
HXDLIN( 366)					if (_hx_tmp2) {
HXLINE( 368)						Object1->set_x((Object1->x + (Object2->x - Object2->last->x)));
            					}
            				}
            				else {
HXLINE( 371)					if (!(obj2immovable)) {
HXLINE( 373)						Object2->set_y((Object2->y + overlap));
HXLINE( 374)						Object2->velocity->set_y((obj1v - (obj2v * Object2->elasticity)));
HXLINE( 376)						bool _hx_tmp5;
HXDLIN( 376)						bool _hx_tmp6;
HXDLIN( 376)						bool _hx_tmp7;
HXDLIN( 376)						if (Object2->collisonXDrag) {
HXLINE( 376)							_hx_tmp7 = Object1->active;
            						}
            						else {
HXLINE( 376)							_hx_tmp7 = false;
            						}
HXDLIN( 376)						if (_hx_tmp7) {
HXLINE( 376)							_hx_tmp6 = Object1->moves;
            						}
            						else {
HXLINE( 376)							_hx_tmp6 = false;
            						}
HXDLIN( 376)						if (_hx_tmp6) {
HXLINE( 376)							_hx_tmp5 = (obj1delta < obj2delta);
            						}
            						else {
HXLINE( 376)							_hx_tmp5 = false;
            						}
HXDLIN( 376)						if (_hx_tmp5) {
HXLINE( 378)							Object2->set_x((Object2->x + (Object1->x - Object1->last->x)));
            						}
            					}
            				}
            			}
HXLINE( 381)			return true;
            		}
HXLINE( 384)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separateY,return )

bool FlxObject_obj::updateTouchingFlagsY( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_395_updateTouchingFlagsY)
            	HX_STACK_ARG(Object1,"Object1")
            	HX_STACK_ARG(Object2,"Object2")
HXLINE( 397)		if ((Object1->flixelType == (int)3)) {
HXLINE( 400)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object1) )->overlapsWithCallback(Object2,::flixel::FlxObject_obj::updateTouchingFlagsY_dyn(),null(),null());
            		}
HXLINE( 402)		if ((Object2->flixelType == (int)3)) {
HXLINE( 405)			return ( ( ::flixel::tile::FlxBaseTilemap)(Object2) )->overlapsWithCallback(Object1,::flixel::FlxObject_obj::updateTouchingFlagsY_dyn(),true,null());
            		}
HXLINE( 408)		return (::flixel::FlxObject_obj::computeOverlapY(Object1,Object2,false) != (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlagsY,return )


hx::ObjectPtr< FlxObject_obj > FlxObject_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height) {
	hx::ObjectPtr< FlxObject_obj > __this = new FlxObject_obj();
	__this->__construct(__o_X,__o_Y,__o_Width,__o_Height);
	return __this;
}

hx::ObjectPtr< FlxObject_obj > FlxObject_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height) {
	FlxObject_obj *__this = (FlxObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxObject_obj), true, "flixel.FlxObject"));
	*(void **)__this = FlxObject_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_Width,__o_Height);
	return __this;
}

FlxObject_obj::FlxObject_obj()
{
}

void FlxObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxObject);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_MARK_MEMBER_NAME(pixelPerfectPosition,"pixelPerfectPosition");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(moves,"moves");
	HX_MARK_MEMBER_NAME(immovable,"immovable");
	HX_MARK_MEMBER_NAME(scrollFactor,"scrollFactor");
	HX_MARK_MEMBER_NAME(velocity,"velocity");
	HX_MARK_MEMBER_NAME(acceleration,"acceleration");
	HX_MARK_MEMBER_NAME(drag,"drag");
	HX_MARK_MEMBER_NAME(maxVelocity,"maxVelocity");
	HX_MARK_MEMBER_NAME(last,"last");
	HX_MARK_MEMBER_NAME(mass,"mass");
	HX_MARK_MEMBER_NAME(elasticity,"elasticity");
	HX_MARK_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_MARK_MEMBER_NAME(angularAcceleration,"angularAcceleration");
	HX_MARK_MEMBER_NAME(angularDrag,"angularDrag");
	HX_MARK_MEMBER_NAME(maxAngular,"maxAngular");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(touching,"touching");
	HX_MARK_MEMBER_NAME(wasTouching,"wasTouching");
	HX_MARK_MEMBER_NAME(allowCollisions,"allowCollisions");
	HX_MARK_MEMBER_NAME(collisonXDrag,"collisonXDrag");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(_rect,"_rect");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_VISIT_MEMBER_NAME(pixelPerfectPosition,"pixelPerfectPosition");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(moves,"moves");
	HX_VISIT_MEMBER_NAME(immovable,"immovable");
	HX_VISIT_MEMBER_NAME(scrollFactor,"scrollFactor");
	HX_VISIT_MEMBER_NAME(velocity,"velocity");
	HX_VISIT_MEMBER_NAME(acceleration,"acceleration");
	HX_VISIT_MEMBER_NAME(drag,"drag");
	HX_VISIT_MEMBER_NAME(maxVelocity,"maxVelocity");
	HX_VISIT_MEMBER_NAME(last,"last");
	HX_VISIT_MEMBER_NAME(mass,"mass");
	HX_VISIT_MEMBER_NAME(elasticity,"elasticity");
	HX_VISIT_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_VISIT_MEMBER_NAME(angularAcceleration,"angularAcceleration");
	HX_VISIT_MEMBER_NAME(angularDrag,"angularDrag");
	HX_VISIT_MEMBER_NAME(maxAngular,"maxAngular");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(touching,"touching");
	HX_VISIT_MEMBER_NAME(wasTouching,"wasTouching");
	HX_VISIT_MEMBER_NAME(allowCollisions,"allowCollisions");
	HX_VISIT_MEMBER_NAME(collisonXDrag,"collisonXDrag");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(_rect,"_rect");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"drag") ) { return hx::Val( drag); }
		if (HX_FIELD_EQ(inName,"last") ) { return hx::Val( last); }
		if (HX_FIELD_EQ(inName,"mass") ) { return hx::Val( mass); }
		if (HX_FIELD_EQ(inName,"path") ) { return hx::Val( path); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		if (HX_FIELD_EQ(inName,"hurt") ) { return hx::Val( hurt_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( inCallProp == hx::paccAlways ? get_width() : width); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"moves") ) { return hx::Val( moves); }
		if (HX_FIELD_EQ(inName,"solid") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_solid()); }
		if (HX_FIELD_EQ(inName,"_rect") ) { return hx::Val( _rect); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( inCallProp == hx::paccAlways ? get_height() : height); }
		if (HX_FIELD_EQ(inName,"health") ) { return hx::Val( health); }
		if (HX_FIELD_EQ(inName,"_point") ) { return hx::Val( _point); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"setSize") ) { return hx::Val( setSize_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"velocity") ) { return hx::Val( velocity); }
		if (HX_FIELD_EQ(inName,"touching") ) { return hx::Val( touching); }
		if (HX_FIELD_EQ(inName,"initVars") ) { return hx::Val( initVars_dyn()); }
		if (HX_FIELD_EQ(inName,"overlaps") ) { return hx::Val( overlaps_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		if (HX_FIELD_EQ(inName,"set_path") ) { return hx::Val( set_path_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"immovable") ) { return hx::Val( immovable); }
		if (HX_FIELD_EQ(inName,"getHitbox") ) { return hx::Val( getHitbox_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"get_solid") ) { return hx::Val( get_solid_dyn()); }
		if (HX_FIELD_EQ(inName,"set_solid") ) { return hx::Val( set_solid_dyn()); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn()); }
		if (HX_FIELD_EQ(inName,"set_moves") ) { return hx::Val( set_moves_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"elasticity") ) { return hx::Val( elasticity); }
		if (HX_FIELD_EQ(inName,"maxAngular") ) { return hx::Val( maxAngular); }
		if (HX_FIELD_EQ(inName,"overlapsAt") ) { return hx::Val( overlapsAt_dyn()); }
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return hx::Val( isOnScreen_dyn()); }
		if (HX_FIELD_EQ(inName,"isTouching") ) { return hx::Val( isTouching_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxVelocity") ) { return hx::Val( maxVelocity); }
		if (HX_FIELD_EQ(inName,"angularDrag") ) { return hx::Val( angularDrag); }
		if (HX_FIELD_EQ(inName,"wasTouching") ) { return hx::Val( wasTouching); }
		if (HX_FIELD_EQ(inName,"getPosition") ) { return hx::Val( getPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"getMidpoint") ) { return hx::Val( getMidpoint_dyn()); }
		if (HX_FIELD_EQ(inName,"justTouched") ) { return hx::Val( justTouched_dyn()); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scrollFactor") ) { return hx::Val( scrollFactor); }
		if (HX_FIELD_EQ(inName,"acceleration") ) { return hx::Val( acceleration); }
		if (HX_FIELD_EQ(inName,"updateMotion") ) { return hx::Val( updateMotion_dyn()); }
		if (HX_FIELD_EQ(inName,"screenCenter") ) { return hx::Val( screenCenter_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collisonXDrag") ) { return hx::Val( collisonXDrag); }
		if (HX_FIELD_EQ(inName,"overlapsPoint") ) { return hx::Val( overlapsPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"inWorldBounds") ) { return hx::Val( inWorldBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"set_immovable") ) { return hx::Val( set_immovable_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"initMotionVars") ) { return hx::Val( initMotionVars_dyn()); }
		if (HX_FIELD_EQ(inName,"getBoundingBox") ) { return hx::Val( getBoundingBox_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { return hx::Val( angularVelocity); }
		if (HX_FIELD_EQ(inName,"allowCollisions") ) { return hx::Val( allowCollisions); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"overlapsCallback") ) { return hx::Val( overlapsCallback_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getScreenPosition") ) { return hx::Val( getScreenPosition_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { return hx::Val( pixelPerfectRender); }
		if (HX_FIELD_EQ(inName,"overlapsAtCallback") ) { return hx::Val( overlapsAtCallback_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"angularAcceleration") ) { return hx::Val( angularAcceleration); }
		if (HX_FIELD_EQ(inName,"set_allowCollisions") ) { return hx::Val( set_allowCollisions_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pixelPerfectPosition") ) { return hx::Val( pixelPerfectPosition); }
		if (HX_FIELD_EQ(inName,"isPixelPerfectRender") ) { return hx::Val( isPixelPerfectRender_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"set_pixelPerfectRender") ) { return hx::Val( set_pixelPerfectRender_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"separate") ) { outValue = separate_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"separateX") ) { outValue = separateX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"separateY") ) { outValue = separateY_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"SEPARATE_BIAS") ) { outValue = SEPARATE_BIAS; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"computeOverlapX") ) { outValue = computeOverlapX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"computeOverlapY") ) { outValue = computeOverlapY_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateTouchingFlags") ) { outValue = updateTouchingFlags_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateTouchingFlagsX") ) { outValue = updateTouchingFlagsX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateTouchingFlagsY") ) { outValue = updateTouchingFlagsY_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_firstSeparateFlxRect") ) { outValue = _firstSeparateFlxRect; return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_secondSeparateFlxRect") ) { outValue = _secondSeparateFlxRect; return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"defaultPixelPerfectPosition") ) { outValue = defaultPixelPerfectPosition; return true; }
	}
	return false;
}

hx::Val FlxObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue) );y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"drag") ) { drag=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"last") ) { last=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mass") ) { mass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"path") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_path(inValue) );path=inValue.Cast<  ::flixel::util::FlxPath >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue) );width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angle(inValue) );angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moves") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_moves(inValue) );moves=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"solid") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_solid(inValue) ); }
		if (HX_FIELD_EQ(inName,"_rect") ) { _rect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue) );height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"velocity") ) { velocity=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touching") ) { touching=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"immovable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_immovable(inValue) );immovable=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"elasticity") ) { elasticity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxAngular") ) { maxAngular=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxVelocity") ) { maxVelocity=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angularDrag") ) { angularDrag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wasTouching") ) { wasTouching=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scrollFactor") ) { scrollFactor=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acceleration") ) { acceleration=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collisonXDrag") ) { collisonXDrag=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { angularVelocity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowCollisions") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_allowCollisions(inValue) );allowCollisions=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pixelPerfectRender(inValue) );pixelPerfectRender=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"angularAcceleration") ) { angularAcceleration=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pixelPerfectPosition") ) { pixelPerfectPosition=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"SEPARATE_BIAS") ) { SEPARATE_BIAS=ioValue.Cast< Float >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_firstSeparateFlxRect") ) { _firstSeparateFlxRect=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_secondSeparateFlxRect") ) { _secondSeparateFlxRect=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"defaultPixelPerfectPosition") ) { defaultPixelPerfectPosition=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void FlxObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f"));
	outFields->push(HX_HCSTRING("pixelPerfectPosition","\xf0","\x7e","\x5e","\x3d"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("moves","\x42","\xcc","\x65","\x0c"));
	outFields->push(HX_HCSTRING("immovable","\x0a","\x27","\x70","\x27"));
	outFields->push(HX_HCSTRING("solid","\x2b","\xb4","\xc5","\x80"));
	outFields->push(HX_HCSTRING("scrollFactor","\xbc","\xec","\xcf","\x3b"));
	outFields->push(HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"));
	outFields->push(HX_HCSTRING("acceleration","\x40","\x00","\x61","\x9a"));
	outFields->push(HX_HCSTRING("drag","\xf4","\x2b","\x70","\x42"));
	outFields->push(HX_HCSTRING("maxVelocity","\xe1","\x0c","\xc4","\x94"));
	outFields->push(HX_HCSTRING("last","\x56","\x0a","\xad","\x47"));
	outFields->push(HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("elasticity","\x79","\x23","\xb4","\x4d"));
	outFields->push(HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58"));
	outFields->push(HX_HCSTRING("angularAcceleration","\x42","\xc6","\x00","\x9a"));
	outFields->push(HX_HCSTRING("angularDrag","\xf6","\x1f","\x19","\x9c"));
	outFields->push(HX_HCSTRING("maxAngular","\x9e","\x28","\xf6","\xc2"));
	outFields->push(HX_HCSTRING("health","\x9c","\x28","\x06","\xfd"));
	outFields->push(HX_HCSTRING("touching","\x83","\x16","\x25","\x00"));
	outFields->push(HX_HCSTRING("wasTouching","\xcc","\x44","\xe4","\x5f"));
	outFields->push(HX_HCSTRING("allowCollisions","\xaa","\xc9","\xd9","\x59"));
	outFields->push(HX_HCSTRING("collisonXDrag","\x97","\xca","\xfa","\x0a"));
	outFields->push(HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"));
	outFields->push(HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"));
	outFields->push(HX_HCSTRING("_rect","\x03","\x69","\xb8","\xfe"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxObject_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxObject_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxObject_obj,pixelPerfectRender),HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f")},
	{hx::fsBool,(int)offsetof(FlxObject_obj,pixelPerfectPosition),HX_HCSTRING("pixelPerfectPosition","\xf0","\x7e","\x5e","\x3d")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsBool,(int)offsetof(FlxObject_obj,moves),HX_HCSTRING("moves","\x42","\xcc","\x65","\x0c")},
	{hx::fsBool,(int)offsetof(FlxObject_obj,immovable),HX_HCSTRING("immovable","\x0a","\x27","\x70","\x27")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,scrollFactor),HX_HCSTRING("scrollFactor","\xbc","\xec","\xcf","\x3b")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,velocity),HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,acceleration),HX_HCSTRING("acceleration","\x40","\x00","\x61","\x9a")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,drag),HX_HCSTRING("drag","\xf4","\x2b","\x70","\x42")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,maxVelocity),HX_HCSTRING("maxVelocity","\xe1","\x0c","\xc4","\x94")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,last),HX_HCSTRING("last","\x56","\x0a","\xad","\x47")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,mass),HX_HCSTRING("mass","\xf4","\x40","\x56","\x48")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,elasticity),HX_HCSTRING("elasticity","\x79","\x23","\xb4","\x4d")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,angularVelocity),HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,angularAcceleration),HX_HCSTRING("angularAcceleration","\x42","\xc6","\x00","\x9a")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,angularDrag),HX_HCSTRING("angularDrag","\xf6","\x1f","\x19","\x9c")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,maxAngular),HX_HCSTRING("maxAngular","\x9e","\x28","\xf6","\xc2")},
	{hx::fsFloat,(int)offsetof(FlxObject_obj,health),HX_HCSTRING("health","\x9c","\x28","\x06","\xfd")},
	{hx::fsInt,(int)offsetof(FlxObject_obj,touching),HX_HCSTRING("touching","\x83","\x16","\x25","\x00")},
	{hx::fsInt,(int)offsetof(FlxObject_obj,wasTouching),HX_HCSTRING("wasTouching","\xcc","\x44","\xe4","\x5f")},
	{hx::fsInt,(int)offsetof(FlxObject_obj,allowCollisions),HX_HCSTRING("allowCollisions","\xaa","\xc9","\xd9","\x59")},
	{hx::fsBool,(int)offsetof(FlxObject_obj,collisonXDrag),HX_HCSTRING("collisonXDrag","\x97","\xca","\xfa","\x0a")},
	{hx::fsObject /*::flixel::util::FlxPath*/ ,(int)offsetof(FlxObject_obj,path),HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxObject_obj,_point),HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxObject_obj,_rect),HX_HCSTRING("_rect","\x03","\x69","\xb8","\xfe")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxObject_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &FlxObject_obj::defaultPixelPerfectPosition,HX_HCSTRING("defaultPixelPerfectPosition","\x51","\x0a","\xc2","\xb0")},
	{hx::fsFloat,(void *) &FlxObject_obj::SEPARATE_BIAS,HX_HCSTRING("SEPARATE_BIAS","\x15","\x78","\x21","\xa0")},
	{hx::fsInt,(void *) &FlxObject_obj::LEFT,HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32")},
	{hx::fsInt,(void *) &FlxObject_obj::RIGHT,HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67")},
	{hx::fsInt,(void *) &FlxObject_obj::UP,HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00")},
	{hx::fsInt,(void *) &FlxObject_obj::DOWN,HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d")},
	{hx::fsInt,(void *) &FlxObject_obj::NONE,HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33")},
	{hx::fsInt,(void *) &FlxObject_obj::CEILING,HX_HCSTRING("CEILING","\xdd","\x32","\x72","\xb3")},
	{hx::fsInt,(void *) &FlxObject_obj::FLOOR,HX_HCSTRING("FLOOR","\xac","\x09","\x85","\x80")},
	{hx::fsInt,(void *) &FlxObject_obj::WALL,HX_HCSTRING("WALL","\x0a","\x25","\xb3","\x39")},
	{hx::fsInt,(void *) &FlxObject_obj::ANY,HX_HCSTRING("ANY","\xcc","\x96","\x31","\x00")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxObject_obj::_firstSeparateFlxRect,HX_HCSTRING("_firstSeparateFlxRect","\x22","\xb9","\x2f","\x5e")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxObject_obj::_secondSeparateFlxRect,HX_HCSTRING("_secondSeparateFlxRect","\xc0","\xbd","\xfc","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxObject_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("pixelPerfectRender","\xdd","\x59","\x4f","\x2f"),
	HX_HCSTRING("pixelPerfectPosition","\xf0","\x7e","\x5e","\x3d"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("moves","\x42","\xcc","\x65","\x0c"),
	HX_HCSTRING("immovable","\x0a","\x27","\x70","\x27"),
	HX_HCSTRING("scrollFactor","\xbc","\xec","\xcf","\x3b"),
	HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"),
	HX_HCSTRING("acceleration","\x40","\x00","\x61","\x9a"),
	HX_HCSTRING("drag","\xf4","\x2b","\x70","\x42"),
	HX_HCSTRING("maxVelocity","\xe1","\x0c","\xc4","\x94"),
	HX_HCSTRING("last","\x56","\x0a","\xad","\x47"),
	HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"),
	HX_HCSTRING("elasticity","\x79","\x23","\xb4","\x4d"),
	HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58"),
	HX_HCSTRING("angularAcceleration","\x42","\xc6","\x00","\x9a"),
	HX_HCSTRING("angularDrag","\xf6","\x1f","\x19","\x9c"),
	HX_HCSTRING("maxAngular","\x9e","\x28","\xf6","\xc2"),
	HX_HCSTRING("health","\x9c","\x28","\x06","\xfd"),
	HX_HCSTRING("touching","\x83","\x16","\x25","\x00"),
	HX_HCSTRING("wasTouching","\xcc","\x44","\xe4","\x5f"),
	HX_HCSTRING("allowCollisions","\xaa","\xc9","\xd9","\x59"),
	HX_HCSTRING("collisonXDrag","\x97","\xca","\xfa","\x0a"),
	HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"),
	HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"),
	HX_HCSTRING("_rect","\x03","\x69","\xb8","\xfe"),
	HX_HCSTRING("initVars","\xdc","\x5a","\x00","\x53"),
	HX_HCSTRING("initMotionVars","\x32","\xe4","\x28","\x65"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateMotion","\x1f","\x2d","\x21","\xcb"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("overlaps","\x0c","\xd3","\x2a","\x45"),
	HX_HCSTRING("overlapsCallback","\xf1","\x14","\xbf","\xb4"),
	HX_HCSTRING("overlapsAt","\x1f","\xe7","\xce","\x03"),
	HX_HCSTRING("overlapsAtCallback","\x04","\xf4","\x81","\x3b"),
	HX_HCSTRING("overlapsPoint","\xa4","\xc5","\xbd","\x35"),
	HX_HCSTRING("inWorldBounds","\x82","\x46","\xf2","\xf1"),
	HX_HCSTRING("getScreenPosition","\x6b","\x93","\x88","\x24"),
	HX_HCSTRING("getPosition","\x5f","\x63","\xee","\xf0"),
	HX_HCSTRING("getMidpoint","\x7e","\xd8","\xfb","\x50"),
	HX_HCSTRING("getHitbox","\xce","\x76","\x7e","\xd3"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("isOnScreen","\xf5","\x43","\xb9","\xa1"),
	HX_HCSTRING("isPixelPerfectRender","\x67","\x1c","\xf9","\x26"),
	HX_HCSTRING("isTouching","\x8d","\x28","\xd4","\x7a"),
	HX_HCSTRING("justTouched","\x12","\x59","\xb8","\x91"),
	HX_HCSTRING("hurt","\x0f","\x5c","\x17","\x45"),
	HX_HCSTRING("screenCenter","\x61","\x2e","\xf9","\xe2"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	HX_HCSTRING("setSize","\x83","\xe1","\xd7","\x11"),
	HX_HCSTRING("getBoundingBox","\x11","\xe8","\x45","\x0d"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_solid","\x82","\x10","\x6f","\xc4"),
	HX_HCSTRING("set_solid","\x8e","\xfc","\xbf","\xa7"),
	HX_HCSTRING("set_angle","\x36","\x8c","\xdc","\x49"),
	HX_HCSTRING("set_moves","\xa5","\x14","\x60","\x33"),
	HX_HCSTRING("set_immovable","\xed","\xdc","\xd9","\x2d"),
	HX_HCSTRING("set_pixelPerfectRender","\x9a","\x4f","\x8f","\xbc"),
	HX_HCSTRING("set_allowCollisions","\xcd","\x8b","\x81","\x21"),
	HX_HCSTRING("set_path","\xa2","\xfa","\x69","\x78"),
	::String(null()) };

static void FlxObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxObject_obj::defaultPixelPerfectPosition,"defaultPixelPerfectPosition");
	HX_MARK_MEMBER_NAME(FlxObject_obj::SEPARATE_BIAS,"SEPARATE_BIAS");
	HX_MARK_MEMBER_NAME(FlxObject_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(FlxObject_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(FlxObject_obj::UP,"UP");
	HX_MARK_MEMBER_NAME(FlxObject_obj::DOWN,"DOWN");
	HX_MARK_MEMBER_NAME(FlxObject_obj::NONE,"NONE");
	HX_MARK_MEMBER_NAME(FlxObject_obj::CEILING,"CEILING");
	HX_MARK_MEMBER_NAME(FlxObject_obj::FLOOR,"FLOOR");
	HX_MARK_MEMBER_NAME(FlxObject_obj::WALL,"WALL");
	HX_MARK_MEMBER_NAME(FlxObject_obj::ANY,"ANY");
	HX_MARK_MEMBER_NAME(FlxObject_obj::_firstSeparateFlxRect,"_firstSeparateFlxRect");
	HX_MARK_MEMBER_NAME(FlxObject_obj::_secondSeparateFlxRect,"_secondSeparateFlxRect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::defaultPixelPerfectPosition,"defaultPixelPerfectPosition");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::SEPARATE_BIAS,"SEPARATE_BIAS");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::UP,"UP");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::DOWN,"DOWN");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::NONE,"NONE");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::CEILING,"CEILING");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::FLOOR,"FLOOR");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::WALL,"WALL");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::ANY,"ANY");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::_firstSeparateFlxRect,"_firstSeparateFlxRect");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::_secondSeparateFlxRect,"_secondSeparateFlxRect");
};

#endif

hx::Class FlxObject_obj::__mClass;

static ::String FlxObject_obj_sStaticFields[] = {
	HX_HCSTRING("defaultPixelPerfectPosition","\x51","\x0a","\xc2","\xb0"),
	HX_HCSTRING("SEPARATE_BIAS","\x15","\x78","\x21","\xa0"),
	HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),
	HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),
	HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00"),
	HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d"),
	HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"),
	HX_HCSTRING("CEILING","\xdd","\x32","\x72","\xb3"),
	HX_HCSTRING("FLOOR","\xac","\x09","\x85","\x80"),
	HX_HCSTRING("WALL","\x0a","\x25","\xb3","\x39"),
	HX_HCSTRING("ANY","\xcc","\x96","\x31","\x00"),
	HX_HCSTRING("_firstSeparateFlxRect","\x22","\xb9","\x2f","\x5e"),
	HX_HCSTRING("_secondSeparateFlxRect","\xc0","\xbd","\xfc","\xda"),
	HX_HCSTRING("separate","\x63","\x1f","\x1c","\x07"),
	HX_HCSTRING("updateTouchingFlags","\xfb","\x01","\xac","\xbd"),
	HX_HCSTRING("computeOverlapX","\x88","\xa5","\xab","\xdc"),
	HX_HCSTRING("separateX","\x95","\x57","\x7f","\x31"),
	HX_HCSTRING("updateTouchingFlagsX","\xfd","\xb9","\xd5","\x38"),
	HX_HCSTRING("computeOverlapY","\x89","\xa5","\xab","\xdc"),
	HX_HCSTRING("separateY","\x96","\x57","\x7f","\x31"),
	HX_HCSTRING("updateTouchingFlagsY","\xfe","\xb9","\xd5","\x38"),
	::String(null())
};

void FlxObject_obj::__register()
{
	hx::Object *dummy = new FlxObject_obj;
	FlxObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.FlxObject","\x1f","\x50","\x95","\x35");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxObject_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxObject_obj::__SetStatic;
	__mClass->mMarkFunc = FlxObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_25_boot)
HXLINE(  25)		defaultPixelPerfectPosition = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_31_boot)
HXLINE(  31)		SEPARATE_BIAS = ((Float)4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_35_boot)
HXLINE(  35)		LEFT = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_39_boot)
HXLINE(  39)		RIGHT = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_43_boot)
HXLINE(  43)		UP = (int)256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_47_boot)
HXLINE(  47)		DOWN = (int)4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_51_boot)
HXLINE(  51)		NONE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_55_boot)
HXLINE(  55)		CEILING = (int)256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_59_boot)
HXLINE(  59)		FLOOR = (int)4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_63_boot)
HXLINE(  63)		WALL = (int)17;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_67_boot)
HXLINE(  67)		ANY = (int)4369;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_70_boot)
HXLINE(  70)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(  70)			_this->x = (int)0;
HXDLIN(  70)			_this->y = (int)0;
HXDLIN(  70)			_this->width = (int)0;
HXDLIN(  70)			_this->height = (int)0;
HXDLIN(  70)			_this->_inPool = false;
HXDLIN(  70)			return _this;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_70_boot)
HXLINE(  70)		_firstSeparateFlxRect =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_72_boot)
HXLINE(  72)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(  72)			_this->x = (int)0;
HXDLIN(  72)			_this->y = (int)0;
HXDLIN(  72)			_this->width = (int)0;
HXDLIN(  72)			_this->height = (int)0;
HXDLIN(  72)			_this->_inPool = false;
HXDLIN(  72)			return _this;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_72_boot)
HXLINE(  72)		_secondSeparateFlxRect =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace flixel
