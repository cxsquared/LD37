// Generated by Haxe 3.4.0
#ifndef INCLUDED_flixel_math_FlxMatrix
#define INCLUDED_flixel_math_FlxMatrix

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_f8ebd3e8714d9448_10_new)
HX_DECLARE_CLASS2(flixel,math,FlxMatrix)

namespace flixel{
namespace math{


class HXCPP_CLASS_ATTRIBUTES FlxMatrix_obj : public  ::openfl::geom::Matrix_obj
{
	public:
		typedef  ::openfl::geom::Matrix_obj super;
		typedef FlxMatrix_obj OBJ_;
		FlxMatrix_obj();

	public:
		enum { _hx_ClassId = 0x54fde40f };

		void __construct( ::Dynamic a, ::Dynamic b, ::Dynamic c, ::Dynamic d, ::Dynamic tx, ::Dynamic ty);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.math.FlxMatrix")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.math.FlxMatrix"); }

		hx::ObjectPtr< FlxMatrix_obj > __new( ::Dynamic a, ::Dynamic b, ::Dynamic c, ::Dynamic d, ::Dynamic tx, ::Dynamic ty) {
			hx::ObjectPtr< FlxMatrix_obj > __this = new FlxMatrix_obj();
			__this->__construct(a,b,c,d,tx,ty);
			return __this;
		}

		static hx::ObjectPtr< FlxMatrix_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic a, ::Dynamic b, ::Dynamic c, ::Dynamic d, ::Dynamic tx, ::Dynamic ty) {
			FlxMatrix_obj *__this = (FlxMatrix_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxMatrix_obj), true, "flixel.math.FlxMatrix"));
			*(void **)__this = FlxMatrix_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_f8ebd3e8714d9448_10_new)
            	HX_STACK_THIS(__this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE(  10)		__this->super::__construct(a,b,c,d,tx,ty);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxMatrix_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxMatrix","\x33","\x30","\xb7","\x3d"); }

		 ::flixel::math::FlxMatrix rotateWithTrig(Float cos,Float sin);
		::Dynamic rotateWithTrig_dyn();

		 ::flixel::math::FlxMatrix rotateBy180();
		::Dynamic rotateBy180_dyn();

		 ::flixel::math::FlxMatrix rotateByPositive90();
		::Dynamic rotateByPositive90_dyn();

		 ::flixel::math::FlxMatrix rotateByNegative90();
		::Dynamic rotateByNegative90_dyn();

};

} // end namespace flixel
} // end namespace math

#endif /* INCLUDED_flixel_math_FlxMatrix */ 
