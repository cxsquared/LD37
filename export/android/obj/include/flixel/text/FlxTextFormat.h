// Generated by Haxe 3.4.0
#ifndef INCLUDED_flixel_text_FlxTextFormat
#define INCLUDED_flixel_text_FlxTextFormat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_a69907c6a733237a_1059_new)
HX_DECLARE_CLASS2(flixel,text,FlxTextFormat)

namespace flixel{
namespace text{


class HXCPP_CLASS_ATTRIBUTES FlxTextFormat_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxTextFormat_obj OBJ_;
		FlxTextFormat_obj();

	public:
		enum { _hx_ClassId = 0x39cd0569 };

		void __construct( ::Dynamic FontColor, ::Dynamic Bold, ::Dynamic Italic, ::Dynamic BorderColor);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.text.FlxTextFormat")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.text.FlxTextFormat"); }

		hx::ObjectPtr< FlxTextFormat_obj > __new( ::Dynamic FontColor, ::Dynamic Bold, ::Dynamic Italic, ::Dynamic BorderColor) {
			hx::ObjectPtr< FlxTextFormat_obj > __this = new FlxTextFormat_obj();
			__this->__construct(FontColor,Bold,Italic,BorderColor);
			return __this;
		}

		static hx::ObjectPtr< FlxTextFormat_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic FontColor, ::Dynamic Bold, ::Dynamic Italic, ::Dynamic BorderColor) {
			FlxTextFormat_obj *__this = (FlxTextFormat_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTextFormat_obj), true, "flixel.text.FlxTextFormat"));
			*(void **)__this = FlxTextFormat_obj::_hx_vtable;
{
            	HX_GC_STACKFRAME(&_hx_pos_a69907c6a733237a_1059_new)
            	HX_STACK_THIS(__this)
            	HX_STACK_ARG(FontColor,"FontColor")
            	HX_STACK_ARG(Bold,"Bold")
            	HX_STACK_ARG(Italic,"Italic")
            	HX_STACK_ARG(BorderColor,"BorderColor")
HXLINE(1060)		( ( ::flixel::text::FlxTextFormat)(__this) )->format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),FontColor,Bold,Italic,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(1061)		int _hx_tmp;
HXDLIN(1061)		if (hx::IsNull( BorderColor )) {
HXLINE(1061)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(1061)			_hx_tmp = BorderColor;
            		}
HXDLIN(1061)		( ( ::flixel::text::FlxTextFormat)(__this) )->borderColor = _hx_tmp;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxTextFormat_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxTextFormat","\xb6","\xea","\xd6","\x62"); }

		int borderColor;
		 ::openfl::text::TextFormat format;
};

} // end namespace flixel
} // end namespace text

#endif /* INCLUDED_flixel_text_FlxTextFormat */ 
