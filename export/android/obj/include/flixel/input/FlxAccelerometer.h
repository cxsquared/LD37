// Generated by Haxe 3.4.0
#ifndef INCLUDED_flixel_input_FlxAccelerometer
#define INCLUDED_flixel_input_FlxAccelerometer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_71a0297f5aca26db_10_new)
HX_DECLARE_CLASS2(flixel,input,FlxAccelerometer)

namespace flixel{
namespace input{


class HXCPP_CLASS_ATTRIBUTES FlxAccelerometer_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxAccelerometer_obj OBJ_;
		FlxAccelerometer_obj();

	public:
		enum { _hx_ClassId = 0x788aa7cb };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.input.FlxAccelerometer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.input.FlxAccelerometer"); }

		hx::ObjectPtr< FlxAccelerometer_obj > __new() {
			hx::ObjectPtr< FlxAccelerometer_obj > __this = new FlxAccelerometer_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< FlxAccelerometer_obj > __alloc(hx::Ctx *_hx_ctx) {
			FlxAccelerometer_obj *__this = (FlxAccelerometer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxAccelerometer_obj), true, "flixel.input.FlxAccelerometer"));
			*(void **)__this = FlxAccelerometer_obj::_hx_vtable;
{
            	HX_GC_STACKFRAME(&_hx_pos_71a0297f5aca26db_10_new)
            	HX_STACK_THIS(__this)
HXLINE(  26)		( ( ::flixel::input::FlxAccelerometer)(__this) )->z = ((Float)0);
HXLINE(  21)		( ( ::flixel::input::FlxAccelerometer)(__this) )->y = ((Float)0);
HXLINE(  16)		( ( ::flixel::input::FlxAccelerometer)(__this) )->x = ((Float)0);
HXLINE(  37)		if (::openfl::sensors::Accelerometer_obj::get_isSupported()) {
HXLINE(  39)			( ( ::flixel::input::FlxAccelerometer)(__this) )->_sensor =  ::openfl::sensors::Accelerometer_obj::__alloc( HX_CTX );
HXLINE(  40)			( ( ::flixel::input::FlxAccelerometer)(__this) )->_sensor->addEventListener(HX_("update",09,86,05,87),( ( ::flixel::input::FlxAccelerometer)(__this) )->updateCallback_dyn(),null(),null(),null());
            		}
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxAccelerometer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxAccelerometer","\x1d","\x27","\x91","\xe3"); }

		Float x;
		Float y;
		Float z;
		 ::openfl::sensors::Accelerometer _sensor;
		bool get_isSupported();
		::Dynamic get_isSupported_dyn();

		void updateCallback( ::openfl::events::AccelerometerEvent Event);
		::Dynamic updateCallback_dyn();

};

} // end namespace flixel
} // end namespace input

#endif /* INCLUDED_flixel_input_FlxAccelerometer */ 
