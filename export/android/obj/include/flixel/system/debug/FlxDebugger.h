// Generated by Haxe 3.4.0
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#define INCLUDED_flixel_system_debug_FlxDebugger

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_24fe7b4bb4ee600c_63_new)
HX_DECLARE_CLASS3(flixel,_hx_system,debug,FlxDebugger)

namespace flixel{
namespace _hx_system{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES FlxDebugger_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef FlxDebugger_obj OBJ_;
		FlxDebugger_obj();

	public:
		enum { _hx_ClassId = 0x22273017 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.system.debug.FlxDebugger")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.system.debug.FlxDebugger"); }

		hx::ObjectPtr< FlxDebugger_obj > __new() {
			hx::ObjectPtr< FlxDebugger_obj > __this = new FlxDebugger_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< FlxDebugger_obj > __alloc(hx::Ctx *_hx_ctx) {
			FlxDebugger_obj *__this = (FlxDebugger_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxDebugger_obj), true, "flixel.system.debug.FlxDebugger"));
			*(void **)__this = FlxDebugger_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_24fe7b4bb4ee600c_63_new)
            	HX_STACK_THIS(__this)
HXLINE(  63)		__this->super::__construct();
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxDebugger_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxDebugger","\x93","\xfe","\x01","\xa8"); }

};

} // end namespace flixel
} // end namespace system
} // end namespace debug

#endif /* INCLUDED_flixel_system_debug_FlxDebugger */ 
