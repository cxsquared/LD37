// Generated by Haxe 3.4.0
#ifndef INCLUDED_flixel_system_frontEnds_BitmapLogFrontEnd
#define INCLUDED_flixel_system_frontEnds_BitmapLogFrontEnd

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_729ca37c5683ec35_51_new)
HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,BitmapLogFrontEnd)

namespace flixel{
namespace _hx_system{
namespace frontEnds{


class HXCPP_CLASS_ATTRIBUTES BitmapLogFrontEnd_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BitmapLogFrontEnd_obj OBJ_;
		BitmapLogFrontEnd_obj();

	public:
		enum { _hx_ClassId = 0x5ee62c55 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.system.frontEnds.BitmapLogFrontEnd")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"flixel.system.frontEnds.BitmapLogFrontEnd"); }

		hx::ObjectPtr< BitmapLogFrontEnd_obj > __new() {
			hx::ObjectPtr< BitmapLogFrontEnd_obj > __this = new BitmapLogFrontEnd_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< BitmapLogFrontEnd_obj > __alloc(hx::Ctx *_hx_ctx) {
			BitmapLogFrontEnd_obj *__this = (BitmapLogFrontEnd_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapLogFrontEnd_obj), false, "flixel.system.frontEnds.BitmapLogFrontEnd"));
			*(void **)__this = BitmapLogFrontEnd_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_729ca37c5683ec35_51_new)
            	HX_STACK_THIS(__this)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BitmapLogFrontEnd_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BitmapLogFrontEnd","\x87","\xe7","\x7c","\xbb"); }

		void add( ::openfl::display::BitmapData Data,::String Name);
		::Dynamic add_dyn();

		void clear();
		::Dynamic clear_dyn();

		void clearAt(hx::Null< int >  Index);
		::Dynamic clearAt_dyn();

		void viewCache();
		::Dynamic viewCache_dyn();

};

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds

#endif /* INCLUDED_flixel_system_frontEnds_BitmapLogFrontEnd */ 
