// Generated by Haxe 3.4.0
#ifndef INCLUDED_openfl_display_Tilesheet
#define INCLUDED_openfl_display_Tilesheet

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_b2c50fddadf0d589_61_new)
HX_DECLARE_CLASS2(openfl,display,Tilesheet)

namespace openfl{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Tilesheet_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Tilesheet_obj OBJ_;
		Tilesheet_obj();

	public:
		enum { _hx_ClassId = 0x7e15ed1f };

		void __construct( ::openfl::display::BitmapData image);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.display.Tilesheet")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.display.Tilesheet"); }

		hx::ObjectPtr< Tilesheet_obj > __new( ::openfl::display::BitmapData image) {
			hx::ObjectPtr< Tilesheet_obj > __this = new Tilesheet_obj();
			__this->__construct(image);
			return __this;
		}

		static hx::ObjectPtr< Tilesheet_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display::BitmapData image) {
			Tilesheet_obj *__this = (Tilesheet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tilesheet_obj), true, "openfl.display.Tilesheet"));
			*(void **)__this = Tilesheet_obj::_hx_vtable;
{
            	HX_GC_STACKFRAME(&_hx_pos_b2c50fddadf0d589_61_new)
            	HX_STACK_THIS(__this)
            	HX_STACK_ARG(image,"image")
HXLINE(  63)		( ( ::openfl::display::Tilesheet)(__this) )->_hx___bitmap = image;
HXLINE(  64)		( ( ::openfl::display::Tilesheet)(__this) )->_hx___centerPoints = ::Array_obj< ::Dynamic>::__new();
HXLINE(  65)		( ( ::openfl::display::Tilesheet)(__this) )->_hx___tileRects = ::Array_obj< ::Dynamic>::__new();
HXLINE(  66)		( ( ::openfl::display::Tilesheet)(__this) )->_hx___tileUVs = ::Array_obj< ::Dynamic>::__new();
HXLINE(  68)		( ( ::openfl::display::Tilesheet)(__this) )->_hx___rectTile =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  69)		( ( ::openfl::display::Tilesheet)(__this) )->_hx___rectUV =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  70)		( ( ::openfl::display::Tilesheet)(__this) )->_hx___point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Tilesheet_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Tilesheet","\x91","\xb0","\x20","\x16"); }

		static void __boot();
		static int TILE_SCALE;
		static int TILE_ROTATION;
		static int TILE_RGB;
		static int TILE_ALPHA;
		static int TILE_TRANS_2x2;
		static int TILE_RECT;
		static int TILE_ORIGIN;
		static int TILE_TRANS_COLOR;
		static int TILE_BLEND_NORMAL;
		static int TILE_BLEND_ADD;
		static int TILE_BLEND_MULTIPLY;
		static int TILE_BLEND_SCREEN;
		static int TILE_BLEND_SUBTRACT;
		static int TILE_BLEND_DARKEN;
		static int TILE_BLEND_LIGHTEN;
		static int TILE_BLEND_OVERLAY;
		static int TILE_BLEND_HARDLIGHT;
		static int TILE_BLEND_DIFFERENCE;
		static int TILE_BLEND_INVERT;
		static  ::openfl::geom::Point _hx___defaultPoint;
		 ::openfl::display::BitmapData _hx___bitmap;
		::Array< ::Dynamic> _hx___centerPoints;
		::Array< ::Dynamic> _hx___tileRects;
		::Array< ::Dynamic> _hx___tileUVs;
		 ::openfl::geom::Rectangle _hx___rectTile;
		 ::openfl::geom::Rectangle _hx___rectUV;
		 ::openfl::geom::Point _hx___point;
		int addTileRect( ::openfl::geom::Rectangle rectangle, ::openfl::geom::Point centerPoint);
		::Dynamic addTileRect_dyn();

		void drawTiles( ::openfl::display::Graphics graphics,::Array< Float > tileData,hx::Null< bool >  smooth,hx::Null< int >  flags,hx::Null< int >  count);
		::Dynamic drawTiles_dyn();

		 ::openfl::geom::Point getTileCenter(int index);
		::Dynamic getTileCenter_dyn();

		 ::openfl::geom::Rectangle getTileRect(int index);
		::Dynamic getTileRect_dyn();

		 ::openfl::geom::Rectangle getTileUVs(int index);
		::Dynamic getTileUVs_dyn();

};

} // end namespace openfl
} // end namespace display

#endif /* INCLUDED_openfl_display_Tilesheet */ 
