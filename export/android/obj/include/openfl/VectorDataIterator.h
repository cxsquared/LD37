// Generated by Haxe 3.4.0
#ifndef INCLUDED_openfl_VectorDataIterator
#define INCLUDED_openfl_VectorDataIterator

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(openfl,VectorData)
HX_DECLARE_CLASS1(openfl,VectorDataIterator)

namespace openfl{


class HXCPP_CLASS_ATTRIBUTES VectorDataIterator_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef VectorDataIterator_obj OBJ_;
		VectorDataIterator_obj();

	public:
		enum { _hx_ClassId = 0x164fbe0b };

		void __construct( ::openfl::VectorData data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.VectorDataIterator")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.VectorDataIterator"); }
		static hx::ObjectPtr< VectorDataIterator_obj > __new( ::openfl::VectorData data);
		static hx::ObjectPtr< VectorDataIterator_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::VectorData data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~VectorDataIterator_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("VectorDataIterator","\xbb","\x4f","\xea","\xa1"); }

		int index;
		 ::openfl::VectorData vectorData;
		bool hasNext();
		::Dynamic hasNext_dyn();

		 ::Dynamic next();
		::Dynamic next_dyn();

};

} // end namespace openfl

#endif /* INCLUDED_openfl_VectorDataIterator */ 
