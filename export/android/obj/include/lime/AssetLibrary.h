// Generated by Haxe 3.4.0
#ifndef INCLUDED_lime_AssetLibrary
#define INCLUDED_lime_AssetLibrary

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS1(lime,AssetLibrary)
HX_DECLARE_CLASS2(lime,app,Event_Void_Void)
HX_DECLARE_CLASS2(lime,app,Future)
HX_DECLARE_CLASS2(lime,audio,AudioBuffer)
HX_DECLARE_CLASS2(lime,graphics,Image)
HX_DECLARE_CLASS2(lime,text,Font)
HX_DECLARE_CLASS2(lime,utils,Bytes)

namespace lime{


class HXCPP_CLASS_ATTRIBUTES AssetLibrary_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AssetLibrary_obj OBJ_;
		AssetLibrary_obj();

	public:
		enum { _hx_ClassId = 0x1fa713a0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.AssetLibrary")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime.AssetLibrary"); }
		static hx::ObjectPtr< AssetLibrary_obj > __new();
		static hx::ObjectPtr< AssetLibrary_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AssetLibrary_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AssetLibrary","\x0b","\x4f","\xd4","\x27"); }

		 ::lime::app::Event_Void_Void onChange;
		bool exists(::String id,::String type);
		::Dynamic exists_dyn();

		 ::lime::audio::AudioBuffer getAudioBuffer(::String id);
		::Dynamic getAudioBuffer_dyn();

		 ::lime::utils::Bytes getBytes(::String id);
		::Dynamic getBytes_dyn();

		 ::lime::text::Font getFont(::String id);
		::Dynamic getFont_dyn();

		 ::lime::graphics::Image getImage(::String id);
		::Dynamic getImage_dyn();

		::String getPath(::String id);
		::Dynamic getPath_dyn();

		::String getText(::String id);
		::Dynamic getText_dyn();

		bool isLocal(::String id,::String type);
		::Dynamic isLocal_dyn();

		::Array< ::String > list(::String type);
		::Dynamic list_dyn();

		 ::lime::app::Future load();
		::Dynamic load_dyn();

		 ::lime::app::Future loadAudioBuffer(::String id);
		::Dynamic loadAudioBuffer_dyn();

		 ::lime::app::Future loadBytes(::String id);
		::Dynamic loadBytes_dyn();

		 ::lime::app::Future loadFont(::String id);
		::Dynamic loadFont_dyn();

		 ::lime::app::Future loadImage(::String id);
		::Dynamic loadImage_dyn();

		 ::lime::app::Future loadText(::String id);
		::Dynamic loadText_dyn();

		void unload();
		::Dynamic unload_dyn();

};

} // end namespace lime

#endif /* INCLUDED_lime_AssetLibrary */ 
