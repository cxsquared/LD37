// Generated by Haxe 3.4.0
#ifndef INCLUDED_lime_graphics_opengl_GL
#define INCLUDED_lime_graphics_opengl_GL

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,graphics,opengl,GL)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLBuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLFramebuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLProgram)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLRenderbuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLShader)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLTexture)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace lime{
namespace graphics{
namespace opengl{


class HXCPP_CLASS_ATTRIBUTES GL_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GL_obj OBJ_;
		GL_obj();

	public:
		enum { _hx_ClassId = 0x1a22c53c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.graphics.opengl.GL")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.graphics.opengl.GL"); }

		hx::ObjectPtr< GL_obj > __new() {
			hx::ObjectPtr< GL_obj > __this = new GL_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< GL_obj > __alloc(hx::Ctx *_hx_ctx) {
			GL_obj *__this = (GL_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GL_obj), false, "lime.graphics.opengl.GL"));
			*(void **)__this = GL_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GL_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GL","\x25","\x3e","\x00","\x00"); }

		static void __boot();
		static int DEPTH_BUFFER_BIT;
		static int STENCIL_BUFFER_BIT;
		static int COLOR_BUFFER_BIT;
		static int POINTS;
		static int LINES;
		static int LINE_LOOP;
		static int LINE_STRIP;
		static int TRIANGLES;
		static int TRIANGLE_STRIP;
		static int TRIANGLE_FAN;
		static int ZERO;
		static int ONE;
		static int SRC_COLOR;
		static int ONE_MINUS_SRC_COLOR;
		static int SRC_ALPHA;
		static int ONE_MINUS_SRC_ALPHA;
		static int DST_ALPHA;
		static int ONE_MINUS_DST_ALPHA;
		static int DST_COLOR;
		static int ONE_MINUS_DST_COLOR;
		static int SRC_ALPHA_SATURATE;
		static int FUNC_ADD;
		static int BLEND_EQUATION;
		static int BLEND_EQUATION_RGB;
		static int BLEND_EQUATION_ALPHA;
		static int FUNC_SUBTRACT;
		static int FUNC_REVERSE_SUBTRACT;
		static int BLEND_DST_RGB;
		static int BLEND_SRC_RGB;
		static int BLEND_DST_ALPHA;
		static int BLEND_SRC_ALPHA;
		static int CONSTANT_COLOR;
		static int ONE_MINUS_CONSTANT_COLOR;
		static int CONSTANT_ALPHA;
		static int ONE_MINUS_CONSTANT_ALPHA;
		static int BLEND_COLOR;
		static int ARRAY_BUFFER;
		static int ELEMENT_ARRAY_BUFFER;
		static int ARRAY_BUFFER_BINDING;
		static int ELEMENT_ARRAY_BUFFER_BINDING;
		static int STREAM_DRAW;
		static int STATIC_DRAW;
		static int DYNAMIC_DRAW;
		static int BUFFER_SIZE;
		static int BUFFER_USAGE;
		static int CURRENT_VERTEX_ATTRIB;
		static int FRONT;
		static int BACK;
		static int FRONT_AND_BACK;
		static int CULL_FACE;
		static int BLEND;
		static int DITHER;
		static int STENCIL_TEST;
		static int DEPTH_TEST;
		static int SCISSOR_TEST;
		static int POLYGON_OFFSET_FILL;
		static int SAMPLE_ALPHA_TO_COVERAGE;
		static int SAMPLE_COVERAGE;
		static int NO_ERROR;
		static int INVALID_ENUM;
		static int INVALID_VALUE;
		static int INVALID_OPERATION;
		static int OUT_OF_MEMORY;
		static int CW;
		static int CCW;
		static int LINE_WIDTH;
		static int ALIASED_POINT_SIZE_RANGE;
		static int ALIASED_LINE_WIDTH_RANGE;
		static int CULL_FACE_MODE;
		static int FRONT_FACE;
		static int DEPTH_RANGE;
		static int DEPTH_WRITEMASK;
		static int DEPTH_CLEAR_VALUE;
		static int DEPTH_FUNC;
		static int STENCIL_CLEAR_VALUE;
		static int STENCIL_FUNC;
		static int STENCIL_FAIL;
		static int STENCIL_PASS_DEPTH_FAIL;
		static int STENCIL_PASS_DEPTH_PASS;
		static int STENCIL_REF;
		static int STENCIL_VALUE_MASK;
		static int STENCIL_WRITEMASK;
		static int STENCIL_BACK_FUNC;
		static int STENCIL_BACK_FAIL;
		static int STENCIL_BACK_PASS_DEPTH_FAIL;
		static int STENCIL_BACK_PASS_DEPTH_PASS;
		static int STENCIL_BACK_REF;
		static int STENCIL_BACK_VALUE_MASK;
		static int STENCIL_BACK_WRITEMASK;
		static int VIEWPORT;
		static int SCISSOR_BOX;
		static int COLOR_CLEAR_VALUE;
		static int COLOR_WRITEMASK;
		static int UNPACK_ALIGNMENT;
		static int PACK_ALIGNMENT;
		static int MAX_TEXTURE_SIZE;
		static int MAX_VIEWPORT_DIMS;
		static int SUBPIXEL_BITS;
		static int RED_BITS;
		static int GREEN_BITS;
		static int BLUE_BITS;
		static int ALPHA_BITS;
		static int DEPTH_BITS;
		static int STENCIL_BITS;
		static int POLYGON_OFFSET_UNITS;
		static int POLYGON_OFFSET_FACTOR;
		static int TEXTURE_BINDING_2D;
		static int SAMPLE_BUFFERS;
		static int SAMPLES;
		static int SAMPLE_COVERAGE_VALUE;
		static int SAMPLE_COVERAGE_INVERT;
		static int COMPRESSED_TEXTURE_FORMATS;
		static int DONT_CARE;
		static int FASTEST;
		static int NICEST;
		static int GENERATE_MIPMAP_HINT;
		static int BYTE;
		static int UNSIGNED_BYTE;
		static int SHORT;
		static int UNSIGNED_SHORT;
		static int INT;
		static int UNSIGNED_INT;
		static int FLOAT;
		static int DEPTH_COMPONENT;
		static int ALPHA;
		static int RGB;
		static int RGBA;
		static int BGR_EXT;
		static int BGRA_EXT;
		static int LUMINANCE;
		static int LUMINANCE_ALPHA;
		static int UNSIGNED_SHORT_4_4_4_4;
		static int UNSIGNED_SHORT_5_5_5_1;
		static int UNSIGNED_SHORT_5_6_5;
		static int FRAGMENT_SHADER;
		static int VERTEX_SHADER;
		static int MAX_VERTEX_ATTRIBS;
		static int MAX_VERTEX_UNIFORM_VECTORS;
		static int MAX_VARYING_VECTORS;
		static int MAX_COMBINED_TEXTURE_IMAGE_UNITS;
		static int MAX_VERTEX_TEXTURE_IMAGE_UNITS;
		static int MAX_TEXTURE_IMAGE_UNITS;
		static int MAX_FRAGMENT_UNIFORM_VECTORS;
		static int SHADER_TYPE;
		static int DELETE_STATUS;
		static int LINK_STATUS;
		static int VALIDATE_STATUS;
		static int ATTACHED_SHADERS;
		static int ACTIVE_UNIFORMS;
		static int ACTIVE_ATTRIBUTES;
		static int SHADING_LANGUAGE_VERSION;
		static int CURRENT_PROGRAM;
		static int NEVER;
		static int LESS;
		static int EQUAL;
		static int LEQUAL;
		static int GREATER;
		static int NOTEQUAL;
		static int GEQUAL;
		static int ALWAYS;
		static int KEEP;
		static int REPLACE;
		static int INCR;
		static int DECR;
		static int INVERT;
		static int INCR_WRAP;
		static int DECR_WRAP;
		static int VENDOR;
		static int RENDERER;
		static int VERSION;
		static int NEAREST;
		static int LINEAR;
		static int NEAREST_MIPMAP_NEAREST;
		static int LINEAR_MIPMAP_NEAREST;
		static int NEAREST_MIPMAP_LINEAR;
		static int LINEAR_MIPMAP_LINEAR;
		static int TEXTURE_MAG_FILTER;
		static int TEXTURE_MIN_FILTER;
		static int TEXTURE_WRAP_S;
		static int TEXTURE_WRAP_T;
		static int TEXTURE_2D;
		static int TEXTURE;
		static int TEXTURE_CUBE_MAP;
		static int TEXTURE_BINDING_CUBE_MAP;
		static int TEXTURE_CUBE_MAP_POSITIVE_X;
		static int TEXTURE_CUBE_MAP_NEGATIVE_X;
		static int TEXTURE_CUBE_MAP_POSITIVE_Y;
		static int TEXTURE_CUBE_MAP_NEGATIVE_Y;
		static int TEXTURE_CUBE_MAP_POSITIVE_Z;
		static int TEXTURE_CUBE_MAP_NEGATIVE_Z;
		static int MAX_CUBE_MAP_TEXTURE_SIZE;
		static int TEXTURE0;
		static int TEXTURE1;
		static int TEXTURE2;
		static int TEXTURE3;
		static int TEXTURE4;
		static int TEXTURE5;
		static int TEXTURE6;
		static int TEXTURE7;
		static int TEXTURE8;
		static int TEXTURE9;
		static int TEXTURE10;
		static int TEXTURE11;
		static int TEXTURE12;
		static int TEXTURE13;
		static int TEXTURE14;
		static int TEXTURE15;
		static int TEXTURE16;
		static int TEXTURE17;
		static int TEXTURE18;
		static int TEXTURE19;
		static int TEXTURE20;
		static int TEXTURE21;
		static int TEXTURE22;
		static int TEXTURE23;
		static int TEXTURE24;
		static int TEXTURE25;
		static int TEXTURE26;
		static int TEXTURE27;
		static int TEXTURE28;
		static int TEXTURE29;
		static int TEXTURE30;
		static int TEXTURE31;
		static int ACTIVE_TEXTURE;
		static int REPEAT;
		static int CLAMP_TO_EDGE;
		static int MIRRORED_REPEAT;
		static int FLOAT_VEC2;
		static int FLOAT_VEC3;
		static int FLOAT_VEC4;
		static int INT_VEC2;
		static int INT_VEC3;
		static int INT_VEC4;
		static int BOOL;
		static int BOOL_VEC2;
		static int BOOL_VEC3;
		static int BOOL_VEC4;
		static int FLOAT_MAT2;
		static int FLOAT_MAT3;
		static int FLOAT_MAT4;
		static int SAMPLER_2D;
		static int SAMPLER_CUBE;
		static int VERTEX_ATTRIB_ARRAY_ENABLED;
		static int VERTEX_ATTRIB_ARRAY_SIZE;
		static int VERTEX_ATTRIB_ARRAY_STRIDE;
		static int VERTEX_ATTRIB_ARRAY_TYPE;
		static int VERTEX_ATTRIB_ARRAY_NORMALIZED;
		static int VERTEX_ATTRIB_ARRAY_POINTER;
		static int VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
		static int VERTEX_PROGRAM_POINT_SIZE;
		static int POINT_SPRITE;
		static int COMPILE_STATUS;
		static int LOW_FLOAT;
		static int MEDIUM_FLOAT;
		static int HIGH_FLOAT;
		static int LOW_INT;
		static int MEDIUM_INT;
		static int HIGH_INT;
		static int FRAMEBUFFER;
		static int RENDERBUFFER;
		static int RGBA4;
		static int RGB5_A1;
		static int RGB565;
		static int DEPTH_COMPONENT16;
		static int STENCIL_INDEX;
		static int STENCIL_INDEX8;
		static int DEPTH_STENCIL;
		static int RENDERBUFFER_WIDTH;
		static int RENDERBUFFER_HEIGHT;
		static int RENDERBUFFER_INTERNAL_FORMAT;
		static int RENDERBUFFER_RED_SIZE;
		static int RENDERBUFFER_GREEN_SIZE;
		static int RENDERBUFFER_BLUE_SIZE;
		static int RENDERBUFFER_ALPHA_SIZE;
		static int RENDERBUFFER_DEPTH_SIZE;
		static int RENDERBUFFER_STENCIL_SIZE;
		static int FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
		static int FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
		static int FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
		static int FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
		static int COLOR_ATTACHMENT0;
		static int DEPTH_ATTACHMENT;
		static int STENCIL_ATTACHMENT;
		static int DEPTH_STENCIL_ATTACHMENT;
		static int NONE;
		static int FRAMEBUFFER_COMPLETE;
		static int FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
		static int FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
		static int FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
		static int FRAMEBUFFER_UNSUPPORTED;
		static int FRAMEBUFFER_BINDING;
		static int RENDERBUFFER_BINDING;
		static int MAX_RENDERBUFFER_SIZE;
		static int INVALID_FRAMEBUFFER_OPERATION;
		static int UNPACK_FLIP_Y_WEBGL;
		static int UNPACK_PREMULTIPLY_ALPHA_WEBGL;
		static int CONTEXT_LOST_WEBGL;
		static int UNPACK_COLORSPACE_CONVERSION_WEBGL;
		static int BROWSER_DEFAULT_WEBGL;
		static int version;
		static void activeTexture(int texture);
		static ::Dynamic activeTexture_dyn();

		static void attachShader( ::lime::graphics::opengl::GLProgram program, ::lime::graphics::opengl::GLShader shader);
		static ::Dynamic attachShader_dyn();

		static void bindAttribLocation( ::lime::graphics::opengl::GLProgram program,int index,::String name);
		static ::Dynamic bindAttribLocation_dyn();

		static void bindBuffer(int target, ::lime::graphics::opengl::GLBuffer buffer);
		static ::Dynamic bindBuffer_dyn();

		static void bindFramebuffer(int target, ::lime::graphics::opengl::GLFramebuffer framebuffer);
		static ::Dynamic bindFramebuffer_dyn();

		static void bindRenderbuffer(int target, ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		static ::Dynamic bindRenderbuffer_dyn();

		static void bindTexture(int target, ::lime::graphics::opengl::GLTexture texture);
		static ::Dynamic bindTexture_dyn();

		static void blendColor(Float red,Float green,Float blue,Float alpha);
		static ::Dynamic blendColor_dyn();

		static void blendEquation(int mode);
		static ::Dynamic blendEquation_dyn();

		static void blendEquationSeparate(int modeRGB,int modeAlpha);
		static ::Dynamic blendEquationSeparate_dyn();

		static void blendFunc(int sfactor,int dfactor);
		static ::Dynamic blendFunc_dyn();

		static void blendFuncSeparate(int srcRGB,int dstRGB,int srcAlpha,int dstAlpha);
		static ::Dynamic blendFuncSeparate_dyn();

		static void bufferData(int target, ::lime::utils::ArrayBufferView data,int usage);
		static ::Dynamic bufferData_dyn();

		static void bufferSubData(int target,int offset, ::lime::utils::ArrayBufferView data);
		static ::Dynamic bufferSubData_dyn();

		static int checkFramebufferStatus(int target);
		static ::Dynamic checkFramebufferStatus_dyn();

		static void clear(int mask);
		static ::Dynamic clear_dyn();

		static void clearColor(Float red,Float green,Float blue,Float alpha);
		static ::Dynamic clearColor_dyn();

		static void clearDepth(Float depth);
		static ::Dynamic clearDepth_dyn();

		static void clearStencil(int s);
		static ::Dynamic clearStencil_dyn();

		static void colorMask(bool red,bool green,bool blue,bool alpha);
		static ::Dynamic colorMask_dyn();

		static void compileShader( ::lime::graphics::opengl::GLShader shader);
		static ::Dynamic compileShader_dyn();

		static void compressedTexImage2D(int target,int level,int internalformat,int width,int height,int border, ::lime::utils::ArrayBufferView data);
		static ::Dynamic compressedTexImage2D_dyn();

		static void compressedTexSubImage2D(int target,int level,int xoffset,int yoffset,int width,int height,int format, ::lime::utils::ArrayBufferView data);
		static ::Dynamic compressedTexSubImage2D_dyn();

		static void copyTexImage2D(int target,int level,int internalformat,int x,int y,int width,int height,int border);
		static ::Dynamic copyTexImage2D_dyn();

		static void copyTexSubImage2D(int target,int level,int xoffset,int yoffset,int x,int y,int width,int height);
		static ::Dynamic copyTexSubImage2D_dyn();

		static  ::lime::graphics::opengl::GLBuffer createBuffer();
		static ::Dynamic createBuffer_dyn();

		static  ::lime::graphics::opengl::GLFramebuffer createFramebuffer();
		static ::Dynamic createFramebuffer_dyn();

		static  ::lime::graphics::opengl::GLProgram createProgram();
		static ::Dynamic createProgram_dyn();

		static  ::lime::graphics::opengl::GLRenderbuffer createRenderbuffer();
		static ::Dynamic createRenderbuffer_dyn();

		static  ::lime::graphics::opengl::GLShader createShader(int type);
		static ::Dynamic createShader_dyn();

		static  ::lime::graphics::opengl::GLTexture createTexture();
		static ::Dynamic createTexture_dyn();

		static void cullFace(int mode);
		static ::Dynamic cullFace_dyn();

		static void deleteBuffer( ::lime::graphics::opengl::GLBuffer buffer);
		static ::Dynamic deleteBuffer_dyn();

		static void deleteFramebuffer( ::lime::graphics::opengl::GLFramebuffer framebuffer);
		static ::Dynamic deleteFramebuffer_dyn();

		static void deleteProgram( ::lime::graphics::opengl::GLProgram program);
		static ::Dynamic deleteProgram_dyn();

		static void deleteRenderbuffer( ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		static ::Dynamic deleteRenderbuffer_dyn();

		static void deleteShader( ::lime::graphics::opengl::GLShader shader);
		static ::Dynamic deleteShader_dyn();

		static void deleteTexture( ::lime::graphics::opengl::GLTexture texture);
		static ::Dynamic deleteTexture_dyn();

		static void depthFunc(int func);
		static ::Dynamic depthFunc_dyn();

		static void depthMask(bool flag);
		static ::Dynamic depthMask_dyn();

		static void depthRange(Float zNear,Float zFar);
		static ::Dynamic depthRange_dyn();

		static void detachShader( ::lime::graphics::opengl::GLProgram program, ::lime::graphics::opengl::GLShader shader);
		static ::Dynamic detachShader_dyn();

		static void disable(int cap);
		static ::Dynamic disable_dyn();

		static void disableVertexAttribArray(int index);
		static ::Dynamic disableVertexAttribArray_dyn();

		static void drawArrays(int mode,int first,int count);
		static ::Dynamic drawArrays_dyn();

		static void drawElements(int mode,int count,int type,int offset);
		static ::Dynamic drawElements_dyn();

		static void enable(int cap);
		static ::Dynamic enable_dyn();

		static void enableVertexAttribArray(int index);
		static ::Dynamic enableVertexAttribArray_dyn();

		static void finish();
		static ::Dynamic finish_dyn();

		static void flush();
		static ::Dynamic flush_dyn();

		static void framebufferRenderbuffer(int target,int attachment,int renderbuffertarget, ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		static ::Dynamic framebufferRenderbuffer_dyn();

		static void framebufferTexture2D(int target,int attachment,int textarget, ::lime::graphics::opengl::GLTexture texture,int level);
		static ::Dynamic framebufferTexture2D_dyn();

		static void frontFace(int mode);
		static ::Dynamic frontFace_dyn();

		static void generateMipmap(int target);
		static ::Dynamic generateMipmap_dyn();

		static  ::Dynamic getActiveAttrib( ::lime::graphics::opengl::GLProgram program,int index);
		static ::Dynamic getActiveAttrib_dyn();

		static  ::Dynamic getActiveUniform( ::lime::graphics::opengl::GLProgram program,int index);
		static ::Dynamic getActiveUniform_dyn();

		static ::Array< ::Dynamic> getAttachedShaders( ::lime::graphics::opengl::GLProgram program);
		static ::Dynamic getAttachedShaders_dyn();

		static int getAttribLocation( ::lime::graphics::opengl::GLProgram program,::String name);
		static ::Dynamic getAttribLocation_dyn();

		static int getBufferParameter(int target,int pname);
		static ::Dynamic getBufferParameter_dyn();

		static  ::Dynamic getContextAttributes();
		static ::Dynamic getContextAttributes_dyn();

		static int getError();
		static ::Dynamic getError_dyn();

		static  ::Dynamic getExtension(::String name);
		static ::Dynamic getExtension_dyn();

		static int getFramebufferAttachmentParameter(int target,int attachment,int pname);
		static ::Dynamic getFramebufferAttachmentParameter_dyn();

		static  ::Dynamic getParameter(int pname);
		static ::Dynamic getParameter_dyn();

		static ::String getProgramInfoLog( ::lime::graphics::opengl::GLProgram program);
		static ::Dynamic getProgramInfoLog_dyn();

		static int getProgramParameter( ::lime::graphics::opengl::GLProgram program,int pname);
		static ::Dynamic getProgramParameter_dyn();

		static int getRenderbufferParameter(int target,int pname);
		static ::Dynamic getRenderbufferParameter_dyn();

		static ::String getShaderInfoLog( ::lime::graphics::opengl::GLShader shader);
		static ::Dynamic getShaderInfoLog_dyn();

		static int getShaderParameter( ::lime::graphics::opengl::GLShader shader,int pname);
		static ::Dynamic getShaderParameter_dyn();

		static  ::Dynamic getShaderPrecisionFormat(int shadertype,int precisiontype);
		static ::Dynamic getShaderPrecisionFormat_dyn();

		static ::String getShaderSource( ::lime::graphics::opengl::GLShader shader);
		static ::Dynamic getShaderSource_dyn();

		static ::Array< ::String > getSupportedExtensions();
		static ::Dynamic getSupportedExtensions_dyn();

		static int getTexParameter(int target,int pname);
		static ::Dynamic getTexParameter_dyn();

		static  ::Dynamic getUniform( ::lime::graphics::opengl::GLProgram program,int location);
		static ::Dynamic getUniform_dyn();

		static int getUniformLocation( ::lime::graphics::opengl::GLProgram program,::String name);
		static ::Dynamic getUniformLocation_dyn();

		static int getVertexAttrib(int index,int pname);
		static ::Dynamic getVertexAttrib_dyn();

		static int getVertexAttribOffset(int index,int pname);
		static ::Dynamic getVertexAttribOffset_dyn();

		static void hint(int target,int mode);
		static ::Dynamic hint_dyn();

		static bool isBuffer( ::lime::graphics::opengl::GLBuffer buffer);
		static ::Dynamic isBuffer_dyn();

		static bool isContextLost();
		static ::Dynamic isContextLost_dyn();

		static bool isEnabled(int cap);
		static ::Dynamic isEnabled_dyn();

		static bool isFramebuffer( ::lime::graphics::opengl::GLFramebuffer framebuffer);
		static ::Dynamic isFramebuffer_dyn();

		static bool isProgram( ::lime::graphics::opengl::GLProgram program);
		static ::Dynamic isProgram_dyn();

		static bool isRenderbuffer( ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		static ::Dynamic isRenderbuffer_dyn();

		static bool isShader( ::lime::graphics::opengl::GLShader shader);
		static ::Dynamic isShader_dyn();

		static bool isTexture( ::lime::graphics::opengl::GLTexture texture);
		static ::Dynamic isTexture_dyn();

		static void lineWidth(Float width);
		static ::Dynamic lineWidth_dyn();

		static void linkProgram( ::lime::graphics::opengl::GLProgram program);
		static ::Dynamic linkProgram_dyn();

		static void pixelStorei(int pname,int param);
		static ::Dynamic pixelStorei_dyn();

		static void polygonOffset(Float factor,Float units);
		static ::Dynamic polygonOffset_dyn();

		static void readPixels(int x,int y,int width,int height,int format,int type, ::lime::utils::ArrayBufferView pixels);
		static ::Dynamic readPixels_dyn();

		static void renderbufferStorage(int target,int internalformat,int width,int height);
		static ::Dynamic renderbufferStorage_dyn();

		static void sampleCoverage(Float value,bool invert);
		static ::Dynamic sampleCoverage_dyn();

		static void scissor(int x,int y,int width,int height);
		static ::Dynamic scissor_dyn();

		static void shaderSource( ::lime::graphics::opengl::GLShader shader,::String source);
		static ::Dynamic shaderSource_dyn();

		static void stencilFunc(int func,int ref,int mask);
		static ::Dynamic stencilFunc_dyn();

		static void stencilFuncSeparate(int face,int func,int ref,int mask);
		static ::Dynamic stencilFuncSeparate_dyn();

		static void stencilMask(int mask);
		static ::Dynamic stencilMask_dyn();

		static void stencilMaskSeparate(int face,int mask);
		static ::Dynamic stencilMaskSeparate_dyn();

		static void stencilOp(int fail,int zfail,int zpass);
		static ::Dynamic stencilOp_dyn();

		static void stencilOpSeparate(int face,int fail,int zfail,int zpass);
		static ::Dynamic stencilOpSeparate_dyn();

		static void texImage2D(int target,int level,int internalformat,int width,int height,int border,int format,int type, ::lime::utils::ArrayBufferView pixels);
		static ::Dynamic texImage2D_dyn();

		static void texParameterf(int target,int pname,Float param);
		static ::Dynamic texParameterf_dyn();

		static void texParameteri(int target,int pname,int param);
		static ::Dynamic texParameteri_dyn();

		static void texSubImage2D(int target,int level,int xoffset,int yoffset,int width,int height,int format,int type, ::lime::utils::ArrayBufferView pixels);
		static ::Dynamic texSubImage2D_dyn();

		static void uniform1f(int location,Float x);
		static ::Dynamic uniform1f_dyn();

		static void uniform1fv(int location, ::lime::utils::ArrayBufferView x);
		static ::Dynamic uniform1fv_dyn();

		static void uniform1i(int location,int x);
		static ::Dynamic uniform1i_dyn();

		static void uniform1iv(int location, ::lime::utils::ArrayBufferView v);
		static ::Dynamic uniform1iv_dyn();

		static void uniform2f(int location,Float x,Float y);
		static ::Dynamic uniform2f_dyn();

		static void uniform2fv(int location, ::lime::utils::ArrayBufferView v);
		static ::Dynamic uniform2fv_dyn();

		static void uniform2i(int location,int x,int y);
		static ::Dynamic uniform2i_dyn();

		static void uniform2iv(int location, ::lime::utils::ArrayBufferView v);
		static ::Dynamic uniform2iv_dyn();

		static void uniform3f(int location,Float x,Float y,Float z);
		static ::Dynamic uniform3f_dyn();

		static void uniform3fv(int location, ::lime::utils::ArrayBufferView v);
		static ::Dynamic uniform3fv_dyn();

		static void uniform3i(int location,int x,int y,int z);
		static ::Dynamic uniform3i_dyn();

		static void uniform3iv(int location, ::lime::utils::ArrayBufferView v);
		static ::Dynamic uniform3iv_dyn();

		static void uniform4f(int location,Float x,Float y,Float z,Float w);
		static ::Dynamic uniform4f_dyn();

		static void uniform4fv(int location, ::lime::utils::ArrayBufferView v);
		static ::Dynamic uniform4fv_dyn();

		static void uniform4i(int location,int x,int y,int z,int w);
		static ::Dynamic uniform4i_dyn();

		static void uniform4iv(int location, ::lime::utils::ArrayBufferView v);
		static ::Dynamic uniform4iv_dyn();

		static void uniformMatrix2fv(int location,bool transpose, ::lime::utils::ArrayBufferView v);
		static ::Dynamic uniformMatrix2fv_dyn();

		static void uniformMatrix3fv(int location,bool transpose, ::lime::utils::ArrayBufferView v);
		static ::Dynamic uniformMatrix3fv_dyn();

		static void uniformMatrix4fv(int location,bool transpose, ::lime::utils::ArrayBufferView v);
		static ::Dynamic uniformMatrix4fv_dyn();

		static void useProgram( ::lime::graphics::opengl::GLProgram program);
		static ::Dynamic useProgram_dyn();

		static void validateProgram( ::lime::graphics::opengl::GLProgram program);
		static ::Dynamic validateProgram_dyn();

		static void vertexAttrib1f(int indx,Float x);
		static ::Dynamic vertexAttrib1f_dyn();

		static void vertexAttrib1fv(int indx, ::lime::utils::ArrayBufferView values);
		static ::Dynamic vertexAttrib1fv_dyn();

		static void vertexAttrib2f(int indx,Float x,Float y);
		static ::Dynamic vertexAttrib2f_dyn();

		static void vertexAttrib2fv(int indx, ::lime::utils::ArrayBufferView values);
		static ::Dynamic vertexAttrib2fv_dyn();

		static void vertexAttrib3f(int indx,Float x,Float y,Float z);
		static ::Dynamic vertexAttrib3f_dyn();

		static void vertexAttrib3fv(int indx, ::lime::utils::ArrayBufferView values);
		static ::Dynamic vertexAttrib3fv_dyn();

		static void vertexAttrib4f(int indx,Float x,Float y,Float z,Float w);
		static ::Dynamic vertexAttrib4f_dyn();

		static void vertexAttrib4fv(int indx, ::lime::utils::ArrayBufferView values);
		static ::Dynamic vertexAttrib4fv_dyn();

		static void vertexAttribPointer(int indx,int size,int type,bool normalized,int stride,int offset);
		static ::Dynamic vertexAttribPointer_dyn();

		static void viewport(int x,int y,int width,int height);
		static ::Dynamic viewport_dyn();

		static int get_version();
		static ::Dynamic get_version_dyn();

};

} // end namespace lime
} // end namespace graphics
} // end namespace opengl

#endif /* INCLUDED_lime_graphics_opengl_GL */ 
