// Generated by Haxe 3.4.0
#ifndef INCLUDED_lime_audio_AudioBuffer
#define INCLUDED_lime_audio_AudioBuffer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_3a0f02912f4cbcc7_45_new)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(lime,audio,AudioBuffer)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace lime{
namespace audio{


class HXCPP_CLASS_ATTRIBUTES AudioBuffer_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AudioBuffer_obj OBJ_;
		AudioBuffer_obj();

	public:
		enum { _hx_ClassId = 0x25f9f3b9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.audio.AudioBuffer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime.audio.AudioBuffer"); }

		hx::ObjectPtr< AudioBuffer_obj > __new() {
			hx::ObjectPtr< AudioBuffer_obj > __this = new AudioBuffer_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< AudioBuffer_obj > __alloc(hx::Ctx *_hx_ctx) {
			AudioBuffer_obj *__this = (AudioBuffer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AudioBuffer_obj), true, "lime.audio.AudioBuffer"));
			*(void **)__this = AudioBuffer_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_3a0f02912f4cbcc7_45_new)
            	HX_STACK_THIS(__this)
HXLINE(  45)		( ( ::lime::audio::AudioBuffer)(__this) )->id = (int)0;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AudioBuffer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AudioBuffer","\x56","\x86","\x77","\x83"); }

		static  ::lime::audio::AudioBuffer fromBytes( ::haxe::io::Bytes bytes);
		static ::Dynamic fromBytes_dyn();

		static  ::lime::audio::AudioBuffer fromFile(::String path);
		static ::Dynamic fromFile_dyn();

		static void fromURL(::String url, ::Dynamic handler);
		static ::Dynamic fromURL_dyn();

		static  ::Dynamic lime_audio_load( ::Dynamic data);
		static ::Dynamic lime_audio_load_dyn();

		int bitsPerSample;
		int channels;
		 ::lime::utils::ArrayBufferView data;
		int id;
		int sampleRate;
		 ::Dynamic src;
		void dispose();
		::Dynamic dispose_dyn();

};

} // end namespace lime
} // end namespace audio

#endif /* INCLUDED_lime_audio_AudioBuffer */ 
