// Generated by Haxe 3.4.0
#ifndef INCLUDED_lime_audio_openal_AL
#define INCLUDED_lime_audio_openal_AL

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,audio,openal,AL)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace lime{
namespace audio{
namespace openal{


class HXCPP_CLASS_ATTRIBUTES AL_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AL_obj OBJ_;
		AL_obj();

	public:
		enum { _hx_ClassId = 0x35433d41 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.audio.openal.AL")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.audio.openal.AL"); }

		hx::ObjectPtr< AL_obj > __new() {
			hx::ObjectPtr< AL_obj > __this = new AL_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< AL_obj > __alloc(hx::Ctx *_hx_ctx) {
			AL_obj *__this = (AL_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AL_obj), false, "lime.audio.openal.AL"));
			*(void **)__this = AL_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AL_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AL","\xeb","\x38","\x00","\x00"); }

		static void __boot();
		static int NONE;
		static int FALSE;
		static int TRUE;
		static int SOURCE_RELATIVE;
		static int CONE_INNER_ANGLE;
		static int CONE_OUTER_ANGLE;
		static int PITCH;
		static int POSITION;
		static int DIRECTION;
		static int VELOCITY;
		static int LOOPING;
		static int BUFFER;
		static int GAIN;
		static int MIN_GAIN;
		static int MAX_GAIN;
		static int ORIENTATION;
		static int SOURCE_STATE;
		static int INITIAL;
		static int PLAYING;
		static int PAUSED;
		static int STOPPED;
		static int BUFFERS_QUEUED;
		static int BUFFERS_PROCESSED;
		static int REFERENCE_DISTANCE;
		static int ROLLOFF_FACTOR;
		static int CONE_OUTER_GAIN;
		static int MAX_DISTANCE;
		static int SEC_OFFSET;
		static int SAMPLE_OFFSET;
		static int BYTE_OFFSET;
		static int SOURCE_TYPE;
		static int STATIC;
		static int STREAMING;
		static int UNDETERMINED;
		static int FORMAT_MONO8;
		static int FORMAT_MONO16;
		static int FORMAT_STEREO8;
		static int FORMAT_STEREO16;
		static int FREQUENCY;
		static int BITS;
		static int CHANNELS;
		static int SIZE;
		static int NO_ERROR;
		static int INVALID_NAME;
		static int INVALID_ENUM;
		static int INVALID_VALUE;
		static int INVALID_OPERATION;
		static int OUT_OF_MEMORY;
		static int VENDOR;
		static int VERSION;
		static int RENDERER;
		static int EXTENSIONS;
		static int DOPPLER_FACTOR;
		static int SPEED_OF_SOUND;
		static int DOPPLER_VELOCITY;
		static int DISTANCE_MODEL;
		static int INVERSE_DISTANCE;
		static int INVERSE_DISTANCE_CLAMPED;
		static int LINEAR_DISTANCE;
		static int LINEAR_DISTANCE_CLAMPED;
		static int EXPONENT_DISTANCE;
		static int EXPONENT_DISTANCE_CLAMPED;
		static void bufferData(int buffer,int format, ::lime::utils::ArrayBufferView data,int size,int freq);
		static ::Dynamic bufferData_dyn();

		static void buffer3f(int buffer,int param,Float value1,Float value2,Float value3);
		static ::Dynamic buffer3f_dyn();

		static void buffer3i(int buffer,int param,int value1,int value2,int value3);
		static ::Dynamic buffer3i_dyn();

		static void bufferf(int buffer,int param,Float value);
		static ::Dynamic bufferf_dyn();

		static void bufferfv(int buffer,int param,::Array< Float > values);
		static ::Dynamic bufferfv_dyn();

		static void bufferi(int buffer,int param,int value);
		static ::Dynamic bufferi_dyn();

		static void bufferiv(int buffer,int param,::Array< int > values);
		static ::Dynamic bufferiv_dyn();

		static void deleteBuffer(int buffer);
		static ::Dynamic deleteBuffer_dyn();

		static void deleteBuffers(::Array< int > buffers);
		static ::Dynamic deleteBuffers_dyn();

		static void deleteSource(int source);
		static ::Dynamic deleteSource_dyn();

		static void deleteSources(::Array< int > sources);
		static ::Dynamic deleteSources_dyn();

		static void disable(int capability);
		static ::Dynamic disable_dyn();

		static void distanceModel(int distanceModel);
		static ::Dynamic distanceModel_dyn();

		static void dopplerFactor(Float value);
		static ::Dynamic dopplerFactor_dyn();

		static void dopplerVelocity(Float value);
		static ::Dynamic dopplerVelocity_dyn();

		static void enable(int capability);
		static ::Dynamic enable_dyn();

		static int genSource();
		static ::Dynamic genSource_dyn();

		static ::Array< int > genSources(int n);
		static ::Dynamic genSources_dyn();

		static int genBuffer();
		static ::Dynamic genBuffer_dyn();

		static ::Array< int > genBuffers(int n);
		static ::Dynamic genBuffers_dyn();

		static bool getBoolean(int param);
		static ::Dynamic getBoolean_dyn();

		static ::Array< bool > getBooleanv(int param,hx::Null< int >  count);
		static ::Dynamic getBooleanv_dyn();

		static ::Array< Float > getBuffer3f(int buffer,int param);
		static ::Dynamic getBuffer3f_dyn();

		static ::Array< int > getBuffer3i(int buffer,int param);
		static ::Dynamic getBuffer3i_dyn();

		static Float getBufferf(int buffer,int param);
		static ::Dynamic getBufferf_dyn();

		static ::Array< Float > getBufferfv(int buffer,int param,hx::Null< int >  count);
		static ::Dynamic getBufferfv_dyn();

		static int getBufferi(int buffer,int param);
		static ::Dynamic getBufferi_dyn();

		static ::Array< int > getBufferiv(int buffer,int param,hx::Null< int >  count);
		static ::Dynamic getBufferiv_dyn();

		static Float getDouble(int param);
		static ::Dynamic getDouble_dyn();

		static ::Array< Float > getDoublev(int param,hx::Null< int >  count);
		static ::Dynamic getDoublev_dyn();

		static int getEnumValue(::String ename);
		static ::Dynamic getEnumValue_dyn();

		static int getError();
		static ::Dynamic getError_dyn();

		static ::String getErrorString();
		static ::Dynamic getErrorString_dyn();

		static Float getFloat(int param);
		static ::Dynamic getFloat_dyn();

		static ::Array< Float > getFloatv(int param,hx::Null< int >  count);
		static ::Dynamic getFloatv_dyn();

		static int getInteger(int param);
		static ::Dynamic getInteger_dyn();

		static ::Array< int > getIntegerv(int param,hx::Null< int >  count);
		static ::Dynamic getIntegerv_dyn();

		static ::Array< Float > getListener3f(int param);
		static ::Dynamic getListener3f_dyn();

		static ::Array< int > getListener3i(int param);
		static ::Dynamic getListener3i_dyn();

		static Float getListenerf(int param);
		static ::Dynamic getListenerf_dyn();

		static ::Array< Float > getListenerfv(int param,hx::Null< int >  count);
		static ::Dynamic getListenerfv_dyn();

		static int getListeneri(int param);
		static ::Dynamic getListeneri_dyn();

		static ::Array< int > getListeneriv(int param,hx::Null< int >  count);
		static ::Dynamic getListeneriv_dyn();

		static  ::Dynamic getProcAddress(::String fname);
		static ::Dynamic getProcAddress_dyn();

		static ::Array< Float > getSource3f(int source,int param);
		static ::Dynamic getSource3f_dyn();

		static Float getSourcef(int source,int param);
		static ::Dynamic getSourcef_dyn();

		static ::Array< int > getSource3i(int source,int param);
		static ::Dynamic getSource3i_dyn();

		static ::Array< Float > getSourcefv(int source,int param,hx::Null< int >  count);
		static ::Dynamic getSourcefv_dyn();

		static int getSourcei(int source,int param);
		static ::Dynamic getSourcei_dyn();

		static ::Array< int > getSourceiv(int source,int param,hx::Null< int >  count);
		static ::Dynamic getSourceiv_dyn();

		static ::String getString(int param);
		static ::Dynamic getString_dyn();

		static bool isBuffer(int buffer);
		static ::Dynamic isBuffer_dyn();

		static bool isEnabled(int capability);
		static ::Dynamic isEnabled_dyn();

		static bool isExtensionPresent(::String extname);
		static ::Dynamic isExtensionPresent_dyn();

		static bool isSource(int source);
		static ::Dynamic isSource_dyn();

		static void listener3f(int param,Float value1,Float value2,Float value3);
		static ::Dynamic listener3f_dyn();

		static void listener3i(int param,int value1,int value2,int value3);
		static ::Dynamic listener3i_dyn();

		static void listenerf(int param,Float value);
		static ::Dynamic listenerf_dyn();

		static void listenerfv(int param,::Array< Float > values);
		static ::Dynamic listenerfv_dyn();

		static void listeneri(int param,int value);
		static ::Dynamic listeneri_dyn();

		static void listeneriv(int param,::Array< int > values);
		static ::Dynamic listeneriv_dyn();

		static void source3f(int source,int param,Float value1,Float value2,Float value3);
		static ::Dynamic source3f_dyn();

		static void source3i(int source,int param,int value1,int value2,int value3);
		static ::Dynamic source3i_dyn();

		static void sourcef(int source,int param,Float value);
		static ::Dynamic sourcef_dyn();

		static void sourcefv(int source,int param,::Array< Float > values);
		static ::Dynamic sourcefv_dyn();

		static void sourcei(int source,int param,int value);
		static ::Dynamic sourcei_dyn();

		static void sourceiv(int source,int param,::Array< int > values);
		static ::Dynamic sourceiv_dyn();

		static void sourcePlay(int source);
		static ::Dynamic sourcePlay_dyn();

		static void sourcePlayv(::Array< int > sources);
		static ::Dynamic sourcePlayv_dyn();

		static void sourceStop(int source);
		static ::Dynamic sourceStop_dyn();

		static void sourceStopv(::Array< int > sources);
		static ::Dynamic sourceStopv_dyn();

		static void sourceRewind(int source);
		static ::Dynamic sourceRewind_dyn();

		static void sourceRewindv(::Array< int > sources);
		static ::Dynamic sourceRewindv_dyn();

		static void sourcePause(int source);
		static ::Dynamic sourcePause_dyn();

		static void sourcePausev(::Array< int > sources);
		static ::Dynamic sourcePausev_dyn();

		static void sourceQueueBuffer(int source,int buffer);
		static ::Dynamic sourceQueueBuffer_dyn();

		static void sourceQueueBuffers(int source,int nb,::Array< int > buffers);
		static ::Dynamic sourceQueueBuffers_dyn();

		static int sourceUnqueueBuffer(int source);
		static ::Dynamic sourceUnqueueBuffer_dyn();

		static ::Array< int > sourceUnqueueBuffers(int source,int nb);
		static ::Dynamic sourceUnqueueBuffers_dyn();

		static void speedOfSound(Float value);
		static ::Dynamic speedOfSound_dyn();

};

} // end namespace lime
} // end namespace audio
} // end namespace openal

#endif /* INCLUDED_lime_audio_openal_AL */ 
